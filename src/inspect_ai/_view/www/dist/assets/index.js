var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var require_assets = __commonJS({
  "assets/index.js"(exports) {
    (function polyfill() {
      const relList = document.createElement("link").relList;
      if (relList && relList.supports && relList.supports("modulepreload")) {
        return;
      }
      for (const link2 of document.querySelectorAll('link[rel="modulepreload"]')) {
        processPreload(link2);
      }
      new MutationObserver((mutations) => {
        for (const mutation of mutations) {
          if (mutation.type !== "childList") {
            continue;
          }
          for (const node of mutation.addedNodes) {
            if (node.tagName === "LINK" && node.rel === "modulepreload") processPreload(node);
          }
        }
      }).observe(document, {
        childList: true,
        subtree: true
      });
      function getFetchOpts(link2) {
        const fetchOpts = {};
        if (link2.integrity) fetchOpts.integrity = link2.integrity;
        if (link2.referrerPolicy) fetchOpts.referrerPolicy = link2.referrerPolicy;
        if (link2.crossOrigin === "use-credentials") fetchOpts.credentials = "include";
        else if (link2.crossOrigin === "anonymous") fetchOpts.credentials = "omit";
        else fetchOpts.credentials = "same-origin";
        return fetchOpts;
      }
      function processPreload(link2) {
        if (link2.ep) return;
        link2.ep = true;
        const fetchOpts = getFetchOpts(link2);
        fetch(link2.href, fetchOpts);
      }
    })();
    var n$2, l$1, u$1, i$3, r$2, o$1, e$3, f$1, c$2, s$1, a$1, p$1 = {}, v$1 = [], y$1 = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i, d$1 = Array.isArray;
    function w$1(n2, l2) {
      for (var u2 in l2) n2[u2] = l2[u2];
      return n2;
    }
    function _$1(n2) {
      n2 && n2.parentNode && n2.parentNode.removeChild(n2);
    }
    function g$1(l2, u2, t2) {
      var i2, r2, o2, e2 = {};
      for (o2 in u2) "key" == o2 ? i2 = u2[o2] : "ref" == o2 ? r2 = u2[o2] : e2[o2] = u2[o2];
      if (arguments.length > 2 && (e2.children = arguments.length > 3 ? n$2.call(arguments, 2) : t2), "function" == typeof l2 && null != l2.defaultProps) for (o2 in l2.defaultProps) void 0 === e2[o2] && (e2[o2] = l2.defaultProps[o2]);
      return m$2(l2, e2, i2, r2, null);
    }
    function m$2(n2, t2, i2, r2, o2) {
      var e2 = { type: n2, props: t2, key: i2, ref: r2, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o2 ? ++u$1 : o2, __i: -1, __u: 0 };
      return null == o2 && null != l$1.vnode && l$1.vnode(e2), e2;
    }
    function k$1(n2) {
      return n2.children;
    }
    function x$1(n2, l2) {
      this.props = n2, this.context = l2;
    }
    function C$2(n2, l2) {
      if (null == l2) return n2.__ ? C$2(n2.__, n2.__i + 1) : null;
      for (var u2; l2 < n2.__k.length; l2++) if (null != (u2 = n2.__k[l2]) && null != u2.__e) return u2.__e;
      return "function" == typeof n2.type ? C$2(n2) : null;
    }
    function S(n2) {
      var l2, u2;
      if (null != (n2 = n2.__) && null != n2.__c) {
        for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++) if (null != (u2 = n2.__k[l2]) && null != u2.__e) {
          n2.__e = n2.__c.base = u2.__e;
          break;
        }
        return S(n2);
      }
    }
    function M$1(n2) {
      (!n2.__d && (n2.__d = true) && i$3.push(n2) && !P$2.__r++ || r$2 !== l$1.debounceRendering) && ((r$2 = l$1.debounceRendering) || o$1)(P$2);
    }
    function P$2() {
      var n2, u2, t2, r2, o2, f2, c2, s2;
      for (i$3.sort(e$3); n2 = i$3.shift(); ) n2.__d && (u2 = i$3.length, r2 = void 0, f2 = (o2 = (t2 = n2).__v).__e, c2 = [], s2 = [], t2.__P && ((r2 = w$1({}, o2)).__v = o2.__v + 1, l$1.vnode && l$1.vnode(r2), j$1(t2.__P, r2, o2, t2.__n, t2.__P.namespaceURI, 32 & o2.__u ? [f2] : null, c2, null == f2 ? C$2(o2) : f2, !!(32 & o2.__u), s2), r2.__v = o2.__v, r2.__.__k[r2.__i] = r2, z$2(c2, r2, s2), r2.__e != f2 && S(r2)), i$3.length > u2 && i$3.sort(e$3));
      P$2.__r = 0;
    }
    function $$1(n2, l2, u2, t2, i2, r2, o2, e2, f2, c2, s2) {
      var a2, h2, y2, d2, w2, _2, g2 = t2 && t2.__k || v$1, m2 = l2.length;
      for (f2 = I$1(u2, l2, g2, f2), a2 = 0; a2 < m2; a2++) null != (y2 = u2.__k[a2]) && (h2 = -1 === y2.__i ? p$1 : g2[y2.__i] || p$1, y2.__i = a2, _2 = j$1(n2, y2, h2, i2, r2, o2, e2, f2, c2, s2), d2 = y2.__e, y2.ref && h2.ref != y2.ref && (h2.ref && V$1(h2.ref, null, y2), s2.push(y2.ref, y2.__c || d2, y2)), null == w2 && null != d2 && (w2 = d2), 4 & y2.__u || h2.__k === y2.__k ? f2 = H(y2, f2, n2) : "function" == typeof y2.type && void 0 !== _2 ? f2 = _2 : d2 && (f2 = d2.nextSibling), y2.__u &= -7);
      return u2.__e = w2, f2;
    }
    function I$1(n2, l2, u2, t2) {
      var i2, r2, o2, e2, f2, c2 = l2.length, s2 = u2.length, a2 = s2, h2 = 0;
      for (n2.__k = [], i2 = 0; i2 < c2; i2++) null != (r2 = l2[i2]) && "boolean" != typeof r2 && "function" != typeof r2 ? (e2 = i2 + h2, (r2 = n2.__k[i2] = "string" == typeof r2 || "number" == typeof r2 || "bigint" == typeof r2 || r2.constructor == String ? m$2(null, r2, null, null, null) : d$1(r2) ? m$2(k$1, { children: r2 }, null, null, null) : void 0 === r2.constructor && r2.__b > 0 ? m$2(r2.type, r2.props, r2.key, r2.ref ? r2.ref : null, r2.__v) : r2).__ = n2, r2.__b = n2.__b + 1, o2 = null, -1 !== (f2 = r2.__i = T$2(r2, u2, e2, a2)) && (a2--, (o2 = u2[f2]) && (o2.__u |= 2)), null == o2 || null === o2.__v ? (-1 == f2 && h2--, "function" != typeof r2.type && (r2.__u |= 4)) : f2 !== e2 && (f2 == e2 - 1 ? h2-- : f2 == e2 + 1 ? h2++ : (f2 > e2 ? h2-- : h2++, r2.__u |= 4))) : r2 = n2.__k[i2] = null;
      if (a2) for (i2 = 0; i2 < s2; i2++) null != (o2 = u2[i2]) && 0 == (2 & o2.__u) && (o2.__e == t2 && (t2 = C$2(o2)), q$2(o2, o2));
      return t2;
    }
    function H(n2, l2, u2) {
      var t2, i2;
      if ("function" == typeof n2.type) {
        for (t2 = n2.__k, i2 = 0; t2 && i2 < t2.length; i2++) t2[i2] && (t2[i2].__ = n2, l2 = H(t2[i2], l2, u2));
        return l2;
      }
      n2.__e != l2 && (l2 && n2.type && !u2.contains(l2) && (l2 = C$2(n2)), u2.insertBefore(n2.__e, l2 || null), l2 = n2.__e);
      do {
        l2 = l2 && l2.nextSibling;
      } while (null != l2 && 8 === l2.nodeType);
      return l2;
    }
    function L(n2, l2) {
      return l2 = l2 || [], null == n2 || "boolean" == typeof n2 || (d$1(n2) ? n2.some(function(n3) {
        L(n3, l2);
      }) : l2.push(n2)), l2;
    }
    function T$2(n2, l2, u2, t2) {
      var i2 = n2.key, r2 = n2.type, o2 = u2 - 1, e2 = u2 + 1, f2 = l2[u2];
      if (null === f2 || f2 && i2 == f2.key && r2 === f2.type && 0 == (2 & f2.__u)) return u2;
      if (("function" != typeof r2 || r2 === k$1 || i2) && t2 > (null != f2 && 0 == (2 & f2.__u) ? 1 : 0)) for (; o2 >= 0 || e2 < l2.length; ) {
        if (o2 >= 0) {
          if ((f2 = l2[o2]) && 0 == (2 & f2.__u) && i2 == f2.key && r2 === f2.type) return o2;
          o2--;
        }
        if (e2 < l2.length) {
          if ((f2 = l2[e2]) && 0 == (2 & f2.__u) && i2 == f2.key && r2 === f2.type) return e2;
          e2++;
        }
      }
      return -1;
    }
    function A$2(n2, l2, u2) {
      "-" === l2[0] ? n2.setProperty(l2, null == u2 ? "" : u2) : n2[l2] = null == u2 ? "" : "number" != typeof u2 || y$1.test(l2) ? u2 : u2 + "px";
    }
    function F$2(n2, l2, u2, t2, i2) {
      var r2;
      n: if ("style" === l2) if ("string" == typeof u2) n2.style.cssText = u2;
      else {
        if ("string" == typeof t2 && (n2.style.cssText = t2 = ""), t2) for (l2 in t2) u2 && l2 in u2 || A$2(n2.style, l2, "");
        if (u2) for (l2 in u2) t2 && u2[l2] === t2[l2] || A$2(n2.style, l2, u2[l2]);
      }
      else if ("o" === l2[0] && "n" === l2[1]) r2 = l2 !== (l2 = l2.replace(f$1, "$1")), l2 = l2.toLowerCase() in n2 || "onFocusOut" === l2 || "onFocusIn" === l2 ? l2.toLowerCase().slice(2) : l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + r2] = u2, u2 ? t2 ? u2.u = t2.u : (u2.u = c$2, n2.addEventListener(l2, r2 ? a$1 : s$1, r2)) : n2.removeEventListener(l2, r2 ? a$1 : s$1, r2);
      else {
        if ("http://www.w3.org/2000/svg" == i2) l2 = l2.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
        else if ("width" != l2 && "height" != l2 && "href" != l2 && "list" != l2 && "form" != l2 && "tabIndex" != l2 && "download" != l2 && "rowSpan" != l2 && "colSpan" != l2 && "role" != l2 && "popover" != l2 && l2 in n2) try {
          n2[l2] = null == u2 ? "" : u2;
          break n;
        } catch (n3) {
        }
        "function" == typeof u2 || (null == u2 || false === u2 && "-" !== l2[4] ? n2.removeAttribute(l2) : n2.setAttribute(l2, "popover" == l2 && 1 == u2 ? "" : u2));
      }
    }
    function O$1(n2) {
      return function(u2) {
        if (this.l) {
          var t2 = this.l[u2.type + n2];
          if (null == u2.t) u2.t = c$2++;
          else if (u2.t < t2.u) return;
          return t2(l$1.event ? l$1.event(u2) : u2);
        }
      };
    }
    function j$1(n2, u2, t2, i2, r2, o2, e2, f2, c2, s2) {
      var a2, h2, p2, v2, y2, g2, m2, b, C2, S2, M2, P2, I2, H2, L2, T2, A2, F2 = u2.type;
      if (void 0 !== u2.constructor) return null;
      128 & t2.__u && (c2 = !!(32 & t2.__u), o2 = [f2 = u2.__e = t2.__e]), (a2 = l$1.__b) && a2(u2);
      n: if ("function" == typeof F2) try {
        if (b = u2.props, C2 = "prototype" in F2 && F2.prototype.render, S2 = (a2 = F2.contextType) && i2[a2.__c], M2 = a2 ? S2 ? S2.props.value : a2.__ : i2, t2.__c ? m2 = (h2 = u2.__c = t2.__c).__ = h2.__E : (C2 ? u2.__c = h2 = new F2(b, M2) : (u2.__c = h2 = new x$1(b, M2), h2.constructor = F2, h2.render = B$2), S2 && S2.sub(h2), h2.props = b, h2.state || (h2.state = {}), h2.context = M2, h2.__n = i2, p2 = h2.__d = true, h2.__h = [], h2._sb = []), C2 && null == h2.__s && (h2.__s = h2.state), C2 && null != F2.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = w$1({}, h2.__s)), w$1(h2.__s, F2.getDerivedStateFromProps(b, h2.__s))), v2 = h2.props, y2 = h2.state, h2.__v = u2, p2) C2 && null == F2.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), C2 && null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
        else {
          if (C2 && null == F2.getDerivedStateFromProps && b !== v2 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(b, M2), !h2.__e && (null != h2.shouldComponentUpdate && false === h2.shouldComponentUpdate(b, h2.__s, M2) || u2.__v === t2.__v)) {
            for (u2.__v !== t2.__v && (h2.props = b, h2.state = h2.__s, h2.__d = false), u2.__e = t2.__e, u2.__k = t2.__k, u2.__k.some(function(n3) {
              n3 && (n3.__ = u2);
            }), P2 = 0; P2 < h2._sb.length; P2++) h2.__h.push(h2._sb[P2]);
            h2._sb = [], h2.__h.length && e2.push(h2);
            break n;
          }
          null != h2.componentWillUpdate && h2.componentWillUpdate(b, h2.__s, M2), C2 && null != h2.componentDidUpdate && h2.__h.push(function() {
            h2.componentDidUpdate(v2, y2, g2);
          });
        }
        if (h2.context = M2, h2.props = b, h2.__P = n2, h2.__e = false, I2 = l$1.__r, H2 = 0, C2) {
          for (h2.state = h2.__s, h2.__d = false, I2 && I2(u2), a2 = h2.render(h2.props, h2.state, h2.context), L2 = 0; L2 < h2._sb.length; L2++) h2.__h.push(h2._sb[L2]);
          h2._sb = [];
        } else do {
          h2.__d = false, I2 && I2(u2), a2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s;
        } while (h2.__d && ++H2 < 25);
        h2.state = h2.__s, null != h2.getChildContext && (i2 = w$1(w$1({}, i2), h2.getChildContext())), C2 && !p2 && null != h2.getSnapshotBeforeUpdate && (g2 = h2.getSnapshotBeforeUpdate(v2, y2)), f2 = $$1(n2, d$1(T2 = null != a2 && a2.type === k$1 && null == a2.key ? a2.props.children : a2) ? T2 : [T2], u2, t2, i2, r2, o2, e2, f2, c2, s2), h2.base = u2.__e, u2.__u &= -161, h2.__h.length && e2.push(h2), m2 && (h2.__E = h2.__ = null);
      } catch (n3) {
        if (u2.__v = null, c2 || null != o2) if (n3.then) {
          for (u2.__u |= c2 ? 160 : 128; f2 && 8 === f2.nodeType && f2.nextSibling; ) f2 = f2.nextSibling;
          o2[o2.indexOf(f2)] = null, u2.__e = f2;
        } else for (A2 = o2.length; A2--; ) _$1(o2[A2]);
        else u2.__e = t2.__e, u2.__k = t2.__k;
        l$1.__e(n3, u2, t2);
      }
      else null == o2 && u2.__v === t2.__v ? (u2.__k = t2.__k, u2.__e = t2.__e) : f2 = u2.__e = N(t2.__e, u2, t2, i2, r2, o2, e2, c2, s2);
      return (a2 = l$1.diffed) && a2(u2), 128 & u2.__u ? void 0 : f2;
    }
    function z$2(n2, u2, t2) {
      for (var i2 = 0; i2 < t2.length; i2++) V$1(t2[i2], t2[++i2], t2[++i2]);
      l$1.__c && l$1.__c(u2, n2), n2.some(function(u3) {
        try {
          n2 = u3.__h, u3.__h = [], n2.some(function(n3) {
            n3.call(u3);
          });
        } catch (n3) {
          l$1.__e(n3, u3.__v);
        }
      });
    }
    function N(u2, t2, i2, r2, o2, e2, f2, c2, s2) {
      var a2, h2, v2, y2, w2, g2, m2, b = i2.props, k2 = t2.props, x2 = t2.type;
      if ("svg" === x2 ? o2 = "http://www.w3.org/2000/svg" : "math" === x2 ? o2 = "http://www.w3.org/1998/Math/MathML" : o2 || (o2 = "http://www.w3.org/1999/xhtml"), null != e2) {
        for (a2 = 0; a2 < e2.length; a2++) if ((w2 = e2[a2]) && "setAttribute" in w2 == !!x2 && (x2 ? w2.localName === x2 : 3 === w2.nodeType)) {
          u2 = w2, e2[a2] = null;
          break;
        }
      }
      if (null == u2) {
        if (null === x2) return document.createTextNode(k2);
        u2 = document.createElementNS(o2, x2, k2.is && k2), c2 && (l$1.__m && l$1.__m(t2, e2), c2 = false), e2 = null;
      }
      if (null === x2) b === k2 || c2 && u2.data === k2 || (u2.data = k2);
      else {
        if (e2 = e2 && n$2.call(u2.childNodes), b = i2.props || p$1, !c2 && null != e2) for (b = {}, a2 = 0; a2 < u2.attributes.length; a2++) b[(w2 = u2.attributes[a2]).name] = w2.value;
        for (a2 in b) if (w2 = b[a2], "children" == a2) ;
        else if ("dangerouslySetInnerHTML" == a2) v2 = w2;
        else if (!(a2 in k2)) {
          if ("value" == a2 && "defaultValue" in k2 || "checked" == a2 && "defaultChecked" in k2) continue;
          F$2(u2, a2, null, w2, o2);
        }
        for (a2 in k2) w2 = k2[a2], "children" == a2 ? y2 = w2 : "dangerouslySetInnerHTML" == a2 ? h2 = w2 : "value" == a2 ? g2 = w2 : "checked" == a2 ? m2 = w2 : c2 && "function" != typeof w2 || b[a2] === w2 || F$2(u2, a2, w2, b[a2], o2);
        if (h2) c2 || v2 && (h2.__html === v2.__html || h2.__html === u2.innerHTML) || (u2.innerHTML = h2.__html), t2.__k = [];
        else if (v2 && (u2.innerHTML = ""), $$1(u2, d$1(y2) ? y2 : [y2], t2, i2, r2, "foreignObject" === x2 ? "http://www.w3.org/1999/xhtml" : o2, e2, f2, e2 ? e2[0] : i2.__k && C$2(i2, 0), c2, s2), null != e2) for (a2 = e2.length; a2--; ) _$1(e2[a2]);
        c2 || (a2 = "value", "progress" === x2 && null == g2 ? u2.removeAttribute("value") : void 0 !== g2 && (g2 !== u2[a2] || "progress" === x2 && !g2 || "option" === x2 && g2 !== b[a2]) && F$2(u2, a2, g2, b[a2], o2), a2 = "checked", void 0 !== m2 && m2 !== u2[a2] && F$2(u2, a2, m2, b[a2], o2));
      }
      return u2;
    }
    function V$1(n2, u2, t2) {
      try {
        if ("function" == typeof n2) {
          var i2 = "function" == typeof n2.__u;
          i2 && n2.__u(), i2 && null == u2 || (n2.__u = n2(u2));
        } else n2.current = u2;
      } catch (n3) {
        l$1.__e(n3, t2);
      }
    }
    function q$2(n2, u2, t2) {
      var i2, r2;
      if (l$1.unmount && l$1.unmount(n2), (i2 = n2.ref) && (i2.current && i2.current !== n2.__e || V$1(i2, null, u2)), null != (i2 = n2.__c)) {
        if (i2.componentWillUnmount) try {
          i2.componentWillUnmount();
        } catch (n3) {
          l$1.__e(n3, u2);
        }
        i2.base = i2.__P = null;
      }
      if (i2 = n2.__k) for (r2 = 0; r2 < i2.length; r2++) i2[r2] && q$2(i2[r2], u2, t2 || "function" != typeof n2.type);
      t2 || _$1(n2.__e), n2.__c = n2.__ = n2.__e = void 0;
    }
    function B$2(n2, l2, u2) {
      return this.constructor(n2, u2);
    }
    function D$1(u2, t2, i2) {
      var r2, o2, e2, f2;
      t2 === document && (t2 = document.documentElement), l$1.__ && l$1.__(u2, t2), o2 = (r2 = "function" == typeof i2) ? null : t2.__k, e2 = [], f2 = [], j$1(t2, u2 = (!r2 && i2 || t2).__k = g$1(k$1, null, [u2]), o2 || p$1, p$1, t2.namespaceURI, !r2 && i2 ? [i2] : o2 ? null : t2.firstChild ? n$2.call(t2.childNodes) : null, e2, !r2 && i2 ? i2 : o2 ? o2.__e : t2.firstChild, r2, f2), z$2(e2, u2, f2);
    }
    n$2 = v$1.slice, l$1 = { __e: function(n2, l2, u2, t2) {
      for (var i2, r2, o2; l2 = l2.__; ) if ((i2 = l2.__c) && !i2.__) try {
        if ((r2 = i2.constructor) && null != r2.getDerivedStateFromError && (i2.setState(r2.getDerivedStateFromError(n2)), o2 = i2.__d), null != i2.componentDidCatch && (i2.componentDidCatch(n2, t2 || {}), o2 = i2.__d), o2) return i2.__E = i2;
      } catch (l3) {
        n2 = l3;
      }
      throw n2;
    } }, u$1 = 0, x$1.prototype.setState = function(n2, l2) {
      var u2;
      u2 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = w$1({}, this.state), "function" == typeof n2 && (n2 = n2(w$1({}, u2), this.props)), n2 && w$1(u2, n2), null != n2 && this.__v && (l2 && this._sb.push(l2), M$1(this));
    }, x$1.prototype.forceUpdate = function(n2) {
      this.__v && (this.__e = true, n2 && this.__h.push(n2), M$1(this));
    }, x$1.prototype.render = k$1, i$3 = [], o$1 = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e$3 = function(n2, l2) {
      return n2.__v.__b - l2.__v.__b;
    }, P$2.__r = 0, f$1 = /(PointerCapture)$|Capture$/i, c$2 = 0, s$1 = O$1(false), a$1 = O$1(true);
    var n$1 = function(t2, s2, r2, e2) {
      var u2;
      s2[0] = 0;
      for (var h2 = 1; h2 < s2.length; h2++) {
        var p2 = s2[h2++], a2 = s2[h2] ? (s2[0] |= p2 ? 1 : 2, r2[s2[h2++]]) : s2[++h2];
        3 === p2 ? e2[0] = a2 : 4 === p2 ? e2[1] = Object.assign(e2[1] || {}, a2) : 5 === p2 ? (e2[1] = e2[1] || {})[s2[++h2]] = a2 : 6 === p2 ? e2[1][s2[++h2]] += a2 + "" : p2 ? (u2 = t2.apply(a2, n$1(t2, a2, r2, ["", null])), e2.push(u2), a2[0] ? s2[0] |= 2 : (s2[h2 - 2] = 0, s2[h2] = u2)) : e2.push(a2);
      }
      return e2;
    }, t$3 = /* @__PURE__ */ new Map();
    function e$2(s2) {
      var r2 = t$3.get(this);
      return r2 || (r2 = /* @__PURE__ */ new Map(), t$3.set(this, r2)), (r2 = n$1(this, r2.get(s2) || (r2.set(s2, r2 = function(n2) {
        for (var t2, s3, r3 = 1, e2 = "", u2 = "", h2 = [0], p2 = function(n3) {
          1 === r3 && (n3 || (e2 = e2.replace(/^\s*\n\s*|\s*\n\s*$/g, ""))) ? h2.push(0, n3, e2) : 3 === r3 && (n3 || e2) ? (h2.push(3, n3, e2), r3 = 2) : 2 === r3 && "..." === e2 && n3 ? h2.push(4, n3, 0) : 2 === r3 && e2 && !n3 ? h2.push(5, 0, true, e2) : r3 >= 5 && ((e2 || !n3 && 5 === r3) && (h2.push(r3, 0, e2, s3), r3 = 6), n3 && (h2.push(r3, n3, 0, s3), r3 = 6)), e2 = "";
        }, a2 = 0; a2 < n2.length; a2++) {
          a2 && (1 === r3 && p2(), p2(a2));
          for (var l2 = 0; l2 < n2[a2].length; l2++) t2 = n2[a2][l2], 1 === r3 ? "<" === t2 ? (p2(), h2 = [h2], r3 = 3) : e2 += t2 : 4 === r3 ? "--" === e2 && ">" === t2 ? (r3 = 1, e2 = "") : e2 = t2 + e2[0] : u2 ? t2 === u2 ? u2 = "" : e2 += t2 : '"' === t2 || "'" === t2 ? u2 = t2 : ">" === t2 ? (p2(), r3 = 1) : r3 && ("=" === t2 ? (r3 = 5, s3 = e2, e2 = "") : "/" === t2 && (r3 < 5 || ">" === n2[a2][l2 + 1]) ? (p2(), 3 === r3 && (h2 = h2[0]), r3 = h2, (h2 = h2[0]).push(2, 0, r3), r3 = 0) : " " === t2 || "	" === t2 || "\n" === t2 || "\r" === t2 ? (p2(), r3 = 2) : e2 += t2), 3 === r3 && "!--" === e2 && (r3 = 4, h2 = h2[0]);
        }
        return p2(), h2;
      }(s2)), r2), arguments, [])).length > 1 ? r2 : r2[0];
    }
    var m$1 = e$2.bind(g$1);
    var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
    function getDefaultExportFromCjs(x2) {
      return x2 && x2.__esModule && Object.prototype.hasOwnProperty.call(x2, "default") ? x2["default"] : x2;
    }
    var prism = { exports: {} };
    (function(module2) {
      var _self = typeof window !== "undefined" ? window : typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope ? self : {};
      /**
       * Prism: Lightweight, robust, elegant syntax highlighting
       *
       * @license MIT <https://opensource.org/licenses/MIT>
       * @author Lea Verou <https://lea.verou.me>
       * @namespace
       * @public
       */
      var Prism2 = function(_self2) {
        var lang = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i;
        var uniqueId = 0;
        var plainTextGrammar = {};
        var _2 = {
          /**
           * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
           * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
           * additional languages or plugins yourself.
           *
           * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
           *
           * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
           * empty Prism object into the global scope before loading the Prism script like this:
           *
           * ```js
           * window.Prism = window.Prism || {};
           * Prism.manual = true;
           * // add a new <script> to load Prism's script
           * ```
           *
           * @default false
           * @type {boolean}
           * @memberof Prism
           * @public
           */
          manual: _self2.Prism && _self2.Prism.manual,
          /**
           * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
           * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
           * own worker, you don't want it to do this.
           *
           * By setting this value to `true`, Prism will not add its own listeners to the worker.
           *
           * You obviously have to change this value before Prism executes. To do this, you can add an
           * empty Prism object into the global scope before loading the Prism script like this:
           *
           * ```js
           * window.Prism = window.Prism || {};
           * Prism.disableWorkerMessageHandler = true;
           * // Load Prism's script
           * ```
           *
           * @default false
           * @type {boolean}
           * @memberof Prism
           * @public
           */
          disableWorkerMessageHandler: _self2.Prism && _self2.Prism.disableWorkerMessageHandler,
          /**
           * A namespace for utility methods.
           *
           * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
           * change or disappear at any time.
           *
           * @namespace
           * @memberof Prism
           */
          util: {
            encode: function encode2(tokens) {
              if (tokens instanceof Token2) {
                return new Token2(tokens.type, encode2(tokens.content), tokens.alias);
              } else if (Array.isArray(tokens)) {
                return tokens.map(encode2);
              } else {
                return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
              }
            },
            /**
             * Returns the name of the type of the given value.
             *
             * @param {any} o
             * @returns {string}
             * @example
             * type(null)      === 'Null'
             * type(undefined) === 'Undefined'
             * type(123)       === 'Number'
             * type('foo')     === 'String'
             * type(true)      === 'Boolean'
             * type([1, 2])    === 'Array'
             * type({})        === 'Object'
             * type(String)    === 'Function'
             * type(/abc+/)    === 'RegExp'
             */
            type: function(o2) {
              return Object.prototype.toString.call(o2).slice(8, -1);
            },
            /**
             * Returns a unique number for the given object. Later calls will still return the same number.
             *
             * @param {Object} obj
             * @returns {number}
             */
            objId: function(obj) {
              if (!obj["__id"]) {
                Object.defineProperty(obj, "__id", { value: ++uniqueId });
              }
              return obj["__id"];
            },
            /**
             * Creates a deep clone of the given object.
             *
             * The main intended use of this function is to clone language definitions.
             *
             * @param {T} o
             * @param {Record<number, any>} [visited]
             * @returns {T}
             * @template T
             */
            clone: function deepClone(o2, visited) {
              visited = visited || {};
              var clone2;
              var id;
              switch (_2.util.type(o2)) {
                case "Object":
                  id = _2.util.objId(o2);
                  if (visited[id]) {
                    return visited[id];
                  }
                  clone2 = /** @type {Record<string, any>} */
                  {};
                  visited[id] = clone2;
                  for (var key2 in o2) {
                    if (o2.hasOwnProperty(key2)) {
                      clone2[key2] = deepClone(o2[key2], visited);
                    }
                  }
                  return (
                    /** @type {any} */
                    clone2
                  );
                case "Array":
                  id = _2.util.objId(o2);
                  if (visited[id]) {
                    return visited[id];
                  }
                  clone2 = [];
                  visited[id] = clone2;
                  /** @type {Array} */
                  /** @type {any} */
                  o2.forEach(function(v2, i2) {
                    clone2[i2] = deepClone(v2, visited);
                  });
                  return (
                    /** @type {any} */
                    clone2
                  );
                default:
                  return o2;
              }
            },
            /**
             * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
             *
             * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
             *
             * @param {Element} element
             * @returns {string}
             */
            getLanguage: function(element) {
              while (element) {
                var m2 = lang.exec(element.className);
                if (m2) {
                  return m2[1].toLowerCase();
                }
                element = element.parentElement;
              }
              return "none";
            },
            /**
             * Sets the Prism `language-xxxx` class of the given element.
             *
             * @param {Element} element
             * @param {string} language
             * @returns {void}
             */
            setLanguage: function(element, language2) {
              element.className = element.className.replace(RegExp(lang, "gi"), "");
              element.classList.add("language-" + language2);
            },
            /**
             * Returns the script element that is currently executing.
             *
             * This does __not__ work for line script element.
             *
             * @returns {HTMLScriptElement | null}
             */
            currentScript: function() {
              if (typeof document === "undefined") {
                return null;
              }
              if ("currentScript" in document && 1 < 2) {
                return (
                  /** @type {any} */
                  document.currentScript
                );
              }
              try {
                throw new Error();
              } catch (err2) {
                var src = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(err2.stack) || [])[1];
                if (src) {
                  var scripts = document.getElementsByTagName("script");
                  for (var i2 in scripts) {
                    if (scripts[i2].src == src) {
                      return scripts[i2];
                    }
                  }
                }
                return null;
              }
            },
            /**
             * Returns whether a given class is active for `element`.
             *
             * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
             * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
             * given class is just the given class with a `no-` prefix.
             *
             * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
             * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
             * ancestors have the given class or the negated version of it, then the default activation will be returned.
             *
             * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
             * version of it, the class is considered active.
             *
             * @param {Element} element
             * @param {string} className
             * @param {boolean} [defaultActivation=false]
             * @returns {boolean}
             */
            isActive: function(element, className2, defaultActivation) {
              var no = "no-" + className2;
              while (element) {
                var classList = element.classList;
                if (classList.contains(className2)) {
                  return true;
                }
                if (classList.contains(no)) {
                  return false;
                }
                element = element.parentElement;
              }
              return !!defaultActivation;
            }
          },
          /**
           * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
           *
           * @namespace
           * @memberof Prism
           * @public
           */
          languages: {
            /**
             * The grammar for plain, unformatted text.
             */
            plain: plainTextGrammar,
            plaintext: plainTextGrammar,
            text: plainTextGrammar,
            txt: plainTextGrammar,
            /**
             * Creates a deep copy of the language with the given id and appends the given tokens.
             *
             * If a token in `redef` also appears in the copied language, then the existing token in the copied language
             * will be overwritten at its original position.
             *
             * ## Best practices
             *
             * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
             * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
             * understand the language definition because, normally, the order of tokens matters in Prism grammars.
             *
             * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
             * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
             *
             * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
             * @param {Grammar} redef The new tokens to append.
             * @returns {Grammar} The new language created.
             * @public
             * @example
             * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
             *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
             *     // at its original position
             *     'comment': { ... },
             *     // CSS doesn't have a 'color' token, so this token will be appended
             *     'color': /\b(?:red|green|blue)\b/
             * });
             */
            extend: function(id, redef) {
              var lang2 = _2.util.clone(_2.languages[id]);
              for (var key2 in redef) {
                lang2[key2] = redef[key2];
              }
              return lang2;
            },
            /**
             * Inserts tokens _before_ another token in a language definition or any other grammar.
             *
             * ## Usage
             *
             * This helper method makes it easy to modify existing languages. For example, the CSS language definition
             * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
             * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
             * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
             * this:
             *
             * ```js
             * Prism.languages.markup.style = {
             *     // token
             * };
             * ```
             *
             * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
             * before existing tokens. For the CSS example above, you would use it like this:
             *
             * ```js
             * Prism.languages.insertBefore('markup', 'cdata', {
             *     'style': {
             *         // token
             *     }
             * });
             * ```
             *
             * ## Special cases
             *
             * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
             * will be ignored.
             *
             * This behavior can be used to insert tokens after `before`:
             *
             * ```js
             * Prism.languages.insertBefore('markup', 'comment', {
             *     'comment': Prism.languages.markup.comment,
             *     // tokens after 'comment'
             * });
             * ```
             *
             * ## Limitations
             *
             * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
             * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
             * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
             * deleting properties which is necessary to insert at arbitrary positions.
             *
             * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
             * Instead, it will create a new object and replace all references to the target object with the new one. This
             * can be done without temporarily deleting properties, so the iteration order is well-defined.
             *
             * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
             * you hold the target object in a variable, then the value of the variable will not change.
             *
             * ```js
             * var oldMarkup = Prism.languages.markup;
             * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
             *
             * assert(oldMarkup !== Prism.languages.markup);
             * assert(newMarkup === Prism.languages.markup);
             * ```
             *
             * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
             * object to be modified.
             * @param {string} before The key to insert before.
             * @param {Grammar} insert An object containing the key-value pairs to be inserted.
             * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
             * object to be modified.
             *
             * Defaults to `Prism.languages`.
             * @returns {Grammar} The new grammar object.
             * @public
             */
            insertBefore: function(inside2, before, insert2, root2) {
              root2 = root2 || /** @type {any} */
              _2.languages;
              var grammar = root2[inside2];
              var ret = {};
              for (var token2 in grammar) {
                if (grammar.hasOwnProperty(token2)) {
                  if (token2 == before) {
                    for (var newToken2 in insert2) {
                      if (insert2.hasOwnProperty(newToken2)) {
                        ret[newToken2] = insert2[newToken2];
                      }
                    }
                  }
                  if (!insert2.hasOwnProperty(token2)) {
                    ret[token2] = grammar[token2];
                  }
                }
              }
              var old = root2[inside2];
              root2[inside2] = ret;
              _2.languages.DFS(_2.languages, function(key2, value) {
                if (value === old && key2 != inside2) {
                  this[key2] = ret;
                }
              });
              return ret;
            },
            // Traverse a language definition with Depth First Search
            DFS: function DFS(o2, callback, type, visited) {
              visited = visited || {};
              var objId = _2.util.objId;
              for (var i2 in o2) {
                if (o2.hasOwnProperty(i2)) {
                  callback.call(o2, i2, o2[i2], type || i2);
                  var property = o2[i2];
                  var propertyType = _2.util.type(property);
                  if (propertyType === "Object" && !visited[objId(property)]) {
                    visited[objId(property)] = true;
                    DFS(property, callback, null, visited);
                  } else if (propertyType === "Array" && !visited[objId(property)]) {
                    visited[objId(property)] = true;
                    DFS(property, callback, i2, visited);
                  }
                }
              }
            }
          },
          plugins: {},
          /**
           * This is the most high-level function in Prism’s API.
           * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
           * each one of them.
           *
           * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
           *
           * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
           * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
           * @memberof Prism
           * @public
           */
          highlightAll: function(async, callback) {
            _2.highlightAllUnder(document, async, callback);
          },
          /**
           * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
           * {@link Prism.highlightElement} on each one of them.
           *
           * The following hooks will be run:
           * 1. `before-highlightall`
           * 2. `before-all-elements-highlight`
           * 3. All hooks of {@link Prism.highlightElement} for each element.
           *
           * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
           * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
           * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
           * @memberof Prism
           * @public
           */
          highlightAllUnder: function(container, async, callback) {
            var env = {
              callback,
              container,
              selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
            };
            _2.hooks.run("before-highlightall", env);
            env.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));
            _2.hooks.run("before-all-elements-highlight", env);
            for (var i2 = 0, element; element = env.elements[i2++]; ) {
              _2.highlightElement(element, async === true, env.callback);
            }
          },
          /**
           * Highlights the code inside a single element.
           *
           * The following hooks will be run:
           * 1. `before-sanity-check`
           * 2. `before-highlight`
           * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
           * 4. `before-insert`
           * 5. `after-highlight`
           * 6. `complete`
           *
           * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
           * the element's language.
           *
           * @param {Element} element The element containing the code.
           * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
           * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
           * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
           * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
           *
           * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
           * asynchronous highlighting to work. You can build your own bundle on the
           * [Download page](https://prismjs.com/download.html).
           * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
           * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
           * @memberof Prism
           * @public
           */
          highlightElement: function(element, async, callback) {
            var language2 = _2.util.getLanguage(element);
            var grammar = _2.languages[language2];
            _2.util.setLanguage(element, language2);
            var parent = element.parentElement;
            if (parent && parent.nodeName.toLowerCase() === "pre") {
              _2.util.setLanguage(parent, language2);
            }
            var code2 = element.textContent;
            var env = {
              element,
              language: language2,
              grammar,
              code: code2
            };
            function insertHighlightedCode(highlightedCode) {
              env.highlightedCode = highlightedCode;
              _2.hooks.run("before-insert", env);
              env.element.innerHTML = env.highlightedCode;
              _2.hooks.run("after-highlight", env);
              _2.hooks.run("complete", env);
              callback && callback.call(env.element);
            }
            _2.hooks.run("before-sanity-check", env);
            parent = env.element.parentElement;
            if (parent && parent.nodeName.toLowerCase() === "pre" && !parent.hasAttribute("tabindex")) {
              parent.setAttribute("tabindex", "0");
            }
            if (!env.code) {
              _2.hooks.run("complete", env);
              callback && callback.call(env.element);
              return;
            }
            _2.hooks.run("before-highlight", env);
            if (!env.grammar) {
              insertHighlightedCode(_2.util.encode(env.code));
              return;
            }
            if (async && _self2.Worker) {
              var worker = new Worker(_2.filename);
              worker.onmessage = function(evt) {
                insertHighlightedCode(evt.data);
              };
              worker.postMessage(JSON.stringify({
                language: env.language,
                code: env.code,
                immediateClose: true
              }));
            } else {
              insertHighlightedCode(_2.highlight(env.code, env.grammar, env.language));
            }
          },
          /**
           * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
           * and the language definitions to use, and returns a string with the HTML produced.
           *
           * The following hooks will be run:
           * 1. `before-tokenize`
           * 2. `after-tokenize`
           * 3. `wrap`: On each {@link Token}.
           *
           * @param {string} text A string with the code to be highlighted.
           * @param {Grammar} grammar An object containing the tokens to use.
           *
           * Usually a language definition like `Prism.languages.markup`.
           * @param {string} language The name of the language definition passed to `grammar`.
           * @returns {string} The highlighted HTML.
           * @memberof Prism
           * @public
           * @example
           * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
           */
          highlight: function(text2, grammar, language2) {
            var env = {
              code: text2,
              grammar,
              language: language2
            };
            _2.hooks.run("before-tokenize", env);
            if (!env.grammar) {
              throw new Error('The language "' + env.language + '" has no grammar.');
            }
            env.tokens = _2.tokenize(env.code, env.grammar);
            _2.hooks.run("after-tokenize", env);
            return Token2.stringify(_2.util.encode(env.tokens), env.language);
          },
          /**
           * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
           * and the language definitions to use, and returns an array with the tokenized code.
           *
           * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
           *
           * This method could be useful in other contexts as well, as a very crude parser.
           *
           * @param {string} text A string with the code to be highlighted.
           * @param {Grammar} grammar An object containing the tokens to use.
           *
           * Usually a language definition like `Prism.languages.markup`.
           * @returns {TokenStream} An array of strings and tokens, a token stream.
           * @memberof Prism
           * @public
           * @example
           * let code = `var foo = 0;`;
           * let tokens = Prism.tokenize(code, Prism.languages.javascript);
           * tokens.forEach(token => {
           *     if (token instanceof Prism.Token && token.type === 'number') {
           *         console.log(`Found numeric literal: ${token.content}`);
           *     }
           * });
           */
          tokenize: function(text2, grammar) {
            var rest = grammar.rest;
            if (rest) {
              for (var token2 in rest) {
                grammar[token2] = rest[token2];
              }
              delete grammar.rest;
            }
            var tokenList = new LinkedList();
            addAfter(tokenList, tokenList.head, text2);
            matchGrammar(text2, tokenList, grammar, tokenList.head, 0);
            return toArray2(tokenList);
          },
          /**
           * @namespace
           * @memberof Prism
           * @public
           */
          hooks: {
            all: {},
            /**
             * Adds the given callback to the list of callbacks for the given hook.
             *
             * The callback will be invoked when the hook it is registered for is run.
             * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
             *
             * One callback function can be registered to multiple hooks and the same hook multiple times.
             *
             * @param {string} name The name of the hook.
             * @param {HookCallback} callback The callback function which is given environment variables.
             * @public
             */
            add: function(name2, callback) {
              var hooks = _2.hooks.all;
              hooks[name2] = hooks[name2] || [];
              hooks[name2].push(callback);
            },
            /**
             * Runs a hook invoking all registered callbacks with the given environment variables.
             *
             * Callbacks will be invoked synchronously and in the order in which they were registered.
             *
             * @param {string} name The name of the hook.
             * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
             * @public
             */
            run: function(name2, env) {
              var callbacks = _2.hooks.all[name2];
              if (!callbacks || !callbacks.length) {
                return;
              }
              for (var i2 = 0, callback; callback = callbacks[i2++]; ) {
                callback(env);
              }
            }
          },
          Token: Token2
        };
        _self2.Prism = _2;
        function Token2(type, content2, alias, matchedStr) {
          this.type = type;
          this.content = content2;
          this.alias = alias;
          this.length = (matchedStr || "").length | 0;
        }
        Token2.stringify = function stringify2(o2, language2) {
          if (typeof o2 == "string") {
            return o2;
          }
          if (Array.isArray(o2)) {
            var s2 = "";
            o2.forEach(function(e2) {
              s2 += stringify2(e2, language2);
            });
            return s2;
          }
          var env = {
            type: o2.type,
            content: stringify2(o2.content, language2),
            tag: "span",
            classes: ["token", o2.type],
            attributes: {},
            language: language2
          };
          var aliases = o2.alias;
          if (aliases) {
            if (Array.isArray(aliases)) {
              Array.prototype.push.apply(env.classes, aliases);
            } else {
              env.classes.push(aliases);
            }
          }
          _2.hooks.run("wrap", env);
          var attributes = "";
          for (var name2 in env.attributes) {
            attributes += " " + name2 + '="' + (env.attributes[name2] || "").replace(/"/g, "&quot;") + '"';
          }
          return "<" + env.tag + ' class="' + env.classes.join(" ") + '"' + attributes + ">" + env.content + "</" + env.tag + ">";
        };
        function matchPattern(pattern, pos2, text2, lookbehind) {
          pattern.lastIndex = pos2;
          var match = pattern.exec(text2);
          if (match && lookbehind && match[1]) {
            var lookbehindLength = match[1].length;
            match.index += lookbehindLength;
            match[0] = match[0].slice(lookbehindLength);
          }
          return match;
        }
        function matchGrammar(text2, tokenList, grammar, startNode, startPos, rematch) {
          for (var token2 in grammar) {
            if (!grammar.hasOwnProperty(token2) || !grammar[token2]) {
              continue;
            }
            var patterns = grammar[token2];
            patterns = Array.isArray(patterns) ? patterns : [patterns];
            for (var j2 = 0; j2 < patterns.length; ++j2) {
              if (rematch && rematch.cause == token2 + "," + j2) {
                return;
              }
              var patternObj = patterns[j2];
              var inside2 = patternObj.inside;
              var lookbehind = !!patternObj.lookbehind;
              var greedy = !!patternObj.greedy;
              var alias = patternObj.alias;
              if (greedy && !patternObj.pattern.global) {
                var flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];
                patternObj.pattern = RegExp(patternObj.pattern.source, flags + "g");
              }
              var pattern = patternObj.pattern || patternObj;
              for (var currentNode = startNode.next, pos2 = startPos; currentNode !== tokenList.tail; pos2 += currentNode.value.length, currentNode = currentNode.next) {
                if (rematch && pos2 >= rematch.reach) {
                  break;
                }
                var str2 = currentNode.value;
                if (tokenList.length > text2.length) {
                  return;
                }
                if (str2 instanceof Token2) {
                  continue;
                }
                var removeCount = 1;
                var match;
                if (greedy) {
                  match = matchPattern(pattern, pos2, text2, lookbehind);
                  if (!match || match.index >= text2.length) {
                    break;
                  }
                  var from = match.index;
                  var to = match.index + match[0].length;
                  var p2 = pos2;
                  p2 += currentNode.value.length;
                  while (from >= p2) {
                    currentNode = currentNode.next;
                    p2 += currentNode.value.length;
                  }
                  p2 -= currentNode.value.length;
                  pos2 = p2;
                  if (currentNode.value instanceof Token2) {
                    continue;
                  }
                  for (var k2 = currentNode; k2 !== tokenList.tail && (p2 < to || typeof k2.value === "string"); k2 = k2.next) {
                    removeCount++;
                    p2 += k2.value.length;
                  }
                  removeCount--;
                  str2 = text2.slice(pos2, p2);
                  match.index -= pos2;
                } else {
                  match = matchPattern(pattern, 0, str2, lookbehind);
                  if (!match) {
                    continue;
                  }
                }
                var from = match.index;
                var matchStr = match[0];
                var before = str2.slice(0, from);
                var after = str2.slice(from + matchStr.length);
                var reach = pos2 + str2.length;
                if (rematch && reach > rematch.reach) {
                  rematch.reach = reach;
                }
                var removeFrom = currentNode.prev;
                if (before) {
                  removeFrom = addAfter(tokenList, removeFrom, before);
                  pos2 += before.length;
                }
                removeRange(tokenList, removeFrom, removeCount);
                var wrapped = new Token2(token2, inside2 ? _2.tokenize(matchStr, inside2) : matchStr, alias, matchStr);
                currentNode = addAfter(tokenList, removeFrom, wrapped);
                if (after) {
                  addAfter(tokenList, currentNode, after);
                }
                if (removeCount > 1) {
                  var nestedRematch = {
                    cause: token2 + "," + j2,
                    reach
                  };
                  matchGrammar(text2, tokenList, grammar, currentNode.prev, pos2, nestedRematch);
                  if (rematch && nestedRematch.reach > rematch.reach) {
                    rematch.reach = nestedRematch.reach;
                  }
                }
              }
            }
          }
        }
        function LinkedList() {
          var head = { value: null, prev: null, next: null };
          var tail = { value: null, prev: head, next: null };
          head.next = tail;
          this.head = head;
          this.tail = tail;
          this.length = 0;
        }
        function addAfter(list2, node, value) {
          var next = node.next;
          var newNode = { value, prev: node, next };
          node.next = newNode;
          next.prev = newNode;
          list2.length++;
          return newNode;
        }
        function removeRange(list2, node, count) {
          var next = node.next;
          for (var i2 = 0; i2 < count && next !== list2.tail; i2++) {
            next = next.next;
          }
          node.next = next;
          next.prev = node;
          list2.length -= i2;
        }
        function toArray2(list2) {
          var array = [];
          var node = list2.head.next;
          while (node !== list2.tail) {
            array.push(node.value);
            node = node.next;
          }
          return array;
        }
        if (!_self2.document) {
          if (!_self2.addEventListener) {
            return _2;
          }
          if (!_2.disableWorkerMessageHandler) {
            _self2.addEventListener("message", function(evt) {
              var message = JSON.parse(evt.data);
              var lang2 = message.language;
              var code2 = message.code;
              var immediateClose = message.immediateClose;
              _self2.postMessage(_2.highlight(code2, _2.languages[lang2], lang2));
              if (immediateClose) {
                _self2.close();
              }
            }, false);
          }
          return _2;
        }
        var script = _2.util.currentScript();
        if (script) {
          _2.filename = script.src;
          if (script.hasAttribute("data-manual")) {
            _2.manual = true;
          }
        }
        function highlightAutomaticallyCallback() {
          if (!_2.manual) {
            _2.highlightAll();
          }
        }
        if (!_2.manual) {
          var readyState = document.readyState;
          if (readyState === "loading" || readyState === "interactive" && script && script.defer) {
            document.addEventListener("DOMContentLoaded", highlightAutomaticallyCallback);
          } else {
            if (window.requestAnimationFrame) {
              window.requestAnimationFrame(highlightAutomaticallyCallback);
            } else {
              window.setTimeout(highlightAutomaticallyCallback, 16);
            }
          }
        }
        return _2;
      }(_self);
      if (module2.exports) {
        module2.exports = Prism2;
      }
      if (typeof commonjsGlobal !== "undefined") {
        commonjsGlobal.Prism = Prism2;
      }
      Prism2.languages.markup = {
        "comment": {
          pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
          greedy: true
        },
        "prolog": {
          pattern: /<\?[\s\S]+?\?>/,
          greedy: true
        },
        "doctype": {
          // https://www.w3.org/TR/xml/#NT-doctypedecl
          pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
          greedy: true,
          inside: {
            "internal-subset": {
              pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
              lookbehind: true,
              greedy: true,
              inside: null
              // see below
            },
            "string": {
              pattern: /"[^"]*"|'[^']*'/,
              greedy: true
            },
            "punctuation": /^<!|>$|[[\]]/,
            "doctype-tag": /^DOCTYPE/i,
            "name": /[^\s<>'"]+/
          }
        },
        "cdata": {
          pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
          greedy: true
        },
        "tag": {
          pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
          greedy: true,
          inside: {
            "tag": {
              pattern: /^<\/?[^\s>\/]+/,
              inside: {
                "punctuation": /^<\/?/,
                "namespace": /^[^\s>\/:]+:/
              }
            },
            "special-attr": [],
            "attr-value": {
              pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
              inside: {
                "punctuation": [
                  {
                    pattern: /^=/,
                    alias: "attr-equals"
                  },
                  {
                    pattern: /^(\s*)["']|["']$/,
                    lookbehind: true
                  }
                ]
              }
            },
            "punctuation": /\/?>/,
            "attr-name": {
              pattern: /[^\s>\/]+/,
              inside: {
                "namespace": /^[^\s>\/:]+:/
              }
            }
          }
        },
        "entity": [
          {
            pattern: /&[\da-z]{1,8};/i,
            alias: "named-entity"
          },
          /&#x?[\da-f]{1,8};/i
        ]
      };
      Prism2.languages.markup["tag"].inside["attr-value"].inside["entity"] = Prism2.languages.markup["entity"];
      Prism2.languages.markup["doctype"].inside["internal-subset"].inside = Prism2.languages.markup;
      Prism2.hooks.add("wrap", function(env) {
        if (env.type === "entity") {
          env.attributes["title"] = env.content.replace(/&amp;/, "&");
        }
      });
      Object.defineProperty(Prism2.languages.markup.tag, "addInlined", {
        /**
         * Adds an inlined language to markup.
         *
         * An example of an inlined language is CSS with `<style>` tags.
         *
         * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
         * case insensitive.
         * @param {string} lang The language key.
         * @example
         * addInlined('style', 'css');
         */
        value: function addInlined(tagName, lang) {
          var includedCdataInside = {};
          includedCdataInside["language-" + lang] = {
            pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
            lookbehind: true,
            inside: Prism2.languages[lang]
          };
          includedCdataInside["cdata"] = /^<!\[CDATA\[|\]\]>$/i;
          var inside2 = {
            "included-cdata": {
              pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
              inside: includedCdataInside
            }
          };
          inside2["language-" + lang] = {
            pattern: /[\s\S]+/,
            inside: Prism2.languages[lang]
          };
          var def = {};
          def[tagName] = {
            pattern: RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g, function() {
              return tagName;
            }), "i"),
            lookbehind: true,
            greedy: true,
            inside: inside2
          };
          Prism2.languages.insertBefore("markup", "cdata", def);
        }
      });
      Object.defineProperty(Prism2.languages.markup.tag, "addAttribute", {
        /**
         * Adds an pattern to highlight languages embedded in HTML attributes.
         *
         * An example of an inlined language is CSS with `style` attributes.
         *
         * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
         * case insensitive.
         * @param {string} lang The language key.
         * @example
         * addAttribute('style', 'css');
         */
        value: function(attrName, lang) {
          Prism2.languages.markup.tag.inside["special-attr"].push({
            pattern: RegExp(
              /(^|["'\s])/.source + "(?:" + attrName + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
              "i"
            ),
            lookbehind: true,
            inside: {
              "attr-name": /^[^\s=]+/,
              "attr-value": {
                pattern: /=[\s\S]+/,
                inside: {
                  "value": {
                    pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                    lookbehind: true,
                    alias: [lang, "language-" + lang],
                    inside: Prism2.languages[lang]
                  },
                  "punctuation": [
                    {
                      pattern: /^=/,
                      alias: "attr-equals"
                    },
                    /"|'/
                  ]
                }
              }
            }
          });
        }
      });
      Prism2.languages.html = Prism2.languages.markup;
      Prism2.languages.mathml = Prism2.languages.markup;
      Prism2.languages.svg = Prism2.languages.markup;
      Prism2.languages.xml = Prism2.languages.extend("markup", {});
      Prism2.languages.ssml = Prism2.languages.xml;
      Prism2.languages.atom = Prism2.languages.xml;
      Prism2.languages.rss = Prism2.languages.xml;
      (function(Prism3) {
        var string2 = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
        Prism3.languages.css = {
          "comment": /\/\*[\s\S]*?\*\//,
          "atrule": {
            pattern: RegExp("@[\\w-](?:" + /[^;{\s"']|\s+(?!\s)/.source + "|" + string2.source + ")*?" + /(?:;|(?=\s*\{))/.source),
            inside: {
              "rule": /^@[\w-]+/,
              "selector-function-argument": {
                pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
                lookbehind: true,
                alias: "selector"
              },
              "keyword": {
                pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
                lookbehind: true
              }
              // See rest below
            }
          },
          "url": {
            // https://drafts.csswg.org/css-values-3/#urls
            pattern: RegExp("\\burl\\((?:" + string2.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)", "i"),
            greedy: true,
            inside: {
              "function": /^url/i,
              "punctuation": /^\(|\)$/,
              "string": {
                pattern: RegExp("^" + string2.source + "$"),
                alias: "url"
              }
            }
          },
          "selector": {
            pattern: RegExp(`(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + string2.source + ")*(?=\\s*\\{)"),
            lookbehind: true
          },
          "string": {
            pattern: string2,
            greedy: true
          },
          "property": {
            pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
            lookbehind: true
          },
          "important": /!important\b/i,
          "function": {
            pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
            lookbehind: true
          },
          "punctuation": /[(){};:,]/
        };
        Prism3.languages.css["atrule"].inside.rest = Prism3.languages.css;
        var markup = Prism3.languages.markup;
        if (markup) {
          markup.tag.addInlined("style", "css");
          markup.tag.addAttribute("style", "css");
        }
      })(Prism2);
      Prism2.languages.clike = {
        "comment": [
          {
            pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
            lookbehind: true,
            greedy: true
          },
          {
            pattern: /(^|[^\\:])\/\/.*/,
            lookbehind: true,
            greedy: true
          }
        ],
        "string": {
          pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
          greedy: true
        },
        "class-name": {
          pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
          lookbehind: true,
          inside: {
            "punctuation": /[.\\]/
          }
        },
        "keyword": /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
        "boolean": /\b(?:false|true)\b/,
        "function": /\b\w+(?=\()/,
        "number": /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
        "operator": /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
        "punctuation": /[{}[\];(),.:]/
      };
      Prism2.languages.javascript = Prism2.languages.extend("clike", {
        "class-name": [
          Prism2.languages.clike["class-name"],
          {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
            lookbehind: true
          }
        ],
        "keyword": [
          {
            pattern: /((?:^|\})\s*)catch\b/,
            lookbehind: true
          },
          {
            pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
            lookbehind: true
          }
        ],
        // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
        "function": /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
        "number": {
          pattern: RegExp(
            /(^|[^\w$])/.source + "(?:" + // constant
            (/NaN|Infinity/.source + "|" + // binary integer
            /0[bB][01]+(?:_[01]+)*n?/.source + "|" + // octal integer
            /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + // hexadecimal integer
            /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + // decimal bigint
            /\d+(?:_\d+)*n/.source + "|" + // decimal number (integer or float) but no bigint
            /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source
          ),
          lookbehind: true
        },
        "operator": /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
      });
      Prism2.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/;
      Prism2.languages.insertBefore("javascript", "keyword", {
        "regex": {
          pattern: RegExp(
            // lookbehind
            // eslint-disable-next-line regexp/no-dupe-characters-character-class
            /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)/.source + // Regex pattern:
            // There are 2 regex patterns here. The RegExp set notation proposal added support for nested character
            // classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible
            // with the only syntax, so we have to define 2 different regex patterns.
            /\//.source + "(?:" + /(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}/.source + "|" + // `v` flag syntax. This supports 3 levels of nested character classes.
            /(?:\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.|\[(?:[^[\]\\\r\n]|\\.)*\])*\])*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source + ")" + // lookahead
            /(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/.source
          ),
          lookbehind: true,
          greedy: true,
          inside: {
            "regex-source": {
              pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
              lookbehind: true,
              alias: "language-regex",
              inside: Prism2.languages.regex
            },
            "regex-delimiter": /^\/|\/$/,
            "regex-flags": /^[a-z]+$/
          }
        },
        // This must be declared before keyword because we use "function" inside the look-forward
        "function-variable": {
          pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
          alias: "function"
        },
        "parameter": [
          {
            pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
            lookbehind: true,
            inside: Prism2.languages.javascript
          },
          {
            pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
            lookbehind: true,
            inside: Prism2.languages.javascript
          },
          {
            pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
            lookbehind: true,
            inside: Prism2.languages.javascript
          },
          {
            pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
            lookbehind: true,
            inside: Prism2.languages.javascript
          }
        ],
        "constant": /\b[A-Z](?:[A-Z_]|\dx?)*\b/
      });
      Prism2.languages.insertBefore("javascript", "string", {
        "hashbang": {
          pattern: /^#!.*/,
          greedy: true,
          alias: "comment"
        },
        "template-string": {
          pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
          greedy: true,
          inside: {
            "template-punctuation": {
              pattern: /^`|`$/,
              alias: "string"
            },
            "interpolation": {
              pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
              lookbehind: true,
              inside: {
                "interpolation-punctuation": {
                  pattern: /^\$\{|\}$/,
                  alias: "punctuation"
                },
                rest: Prism2.languages.javascript
              }
            },
            "string": /[\s\S]+/
          }
        },
        "string-property": {
          pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
          lookbehind: true,
          greedy: true,
          alias: "property"
        }
      });
      Prism2.languages.insertBefore("javascript", "operator", {
        "literal-property": {
          pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
          lookbehind: true,
          alias: "property"
        }
      });
      if (Prism2.languages.markup) {
        Prism2.languages.markup.tag.addInlined("script", "javascript");
        Prism2.languages.markup.tag.addAttribute(
          /on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
          "javascript"
        );
      }
      Prism2.languages.js = Prism2.languages.javascript;
      (function() {
        if (typeof Prism2 === "undefined" || typeof document === "undefined") {
          return;
        }
        if (!Element.prototype.matches) {
          Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
        }
        var LOADING_MESSAGE = "Loading…";
        var FAILURE_MESSAGE = function(status, message) {
          return "✖ Error " + status + " while fetching file: " + message;
        };
        var FAILURE_EMPTY_MESSAGE = "✖ Error: File does not exist or is empty";
        var EXTENSIONS = {
          "js": "javascript",
          "py": "python",
          "rb": "ruby",
          "ps1": "powershell",
          "psm1": "powershell",
          "sh": "bash",
          "bat": "batch",
          "h": "c",
          "tex": "latex"
        };
        var STATUS_ATTR = "data-src-status";
        var STATUS_LOADING = "loading";
        var STATUS_LOADED = "loaded";
        var STATUS_FAILED = "failed";
        var SELECTOR = "pre[data-src]:not([" + STATUS_ATTR + '="' + STATUS_LOADED + '"]):not([' + STATUS_ATTR + '="' + STATUS_LOADING + '"])';
        function loadFile(src, success, error2) {
          var xhr = new XMLHttpRequest();
          xhr.open("GET", src, true);
          xhr.onreadystatechange = function() {
            if (xhr.readyState == 4) {
              if (xhr.status < 400 && xhr.responseText) {
                success(xhr.responseText);
              } else {
                if (xhr.status >= 400) {
                  error2(FAILURE_MESSAGE(xhr.status, xhr.statusText));
                } else {
                  error2(FAILURE_EMPTY_MESSAGE);
                }
              }
            }
          };
          xhr.send(null);
        }
        function parseRange(range) {
          var m2 = /^\s*(\d+)\s*(?:(,)\s*(?:(\d+)\s*)?)?$/.exec(range || "");
          if (m2) {
            var start2 = Number(m2[1]);
            var comma = m2[2];
            var end2 = m2[3];
            if (!comma) {
              return [start2, start2];
            }
            if (!end2) {
              return [start2, void 0];
            }
            return [start2, Number(end2)];
          }
          return void 0;
        }
        Prism2.hooks.add("before-highlightall", function(env) {
          env.selector += ", " + SELECTOR;
        });
        Prism2.hooks.add("before-sanity-check", function(env) {
          var pre = (
            /** @type {HTMLPreElement} */
            env.element
          );
          if (pre.matches(SELECTOR)) {
            env.code = "";
            pre.setAttribute(STATUS_ATTR, STATUS_LOADING);
            var code2 = pre.appendChild(document.createElement("CODE"));
            code2.textContent = LOADING_MESSAGE;
            var src = pre.getAttribute("data-src");
            var language2 = env.language;
            if (language2 === "none") {
              var extension = (/\.(\w+)$/.exec(src) || [, "none"])[1];
              language2 = EXTENSIONS[extension] || extension;
            }
            Prism2.util.setLanguage(code2, language2);
            Prism2.util.setLanguage(pre, language2);
            var autoloader = Prism2.plugins.autoloader;
            if (autoloader) {
              autoloader.loadLanguages(language2);
            }
            loadFile(
              src,
              function(text2) {
                pre.setAttribute(STATUS_ATTR, STATUS_LOADED);
                var range = parseRange(pre.getAttribute("data-range"));
                if (range) {
                  var lines = text2.split(/\r\n?|\n/g);
                  var start2 = range[0];
                  var end2 = range[1] == null ? lines.length : range[1];
                  if (start2 < 0) {
                    start2 += lines.length;
                  }
                  start2 = Math.max(0, Math.min(start2 - 1, lines.length));
                  if (end2 < 0) {
                    end2 += lines.length;
                  }
                  end2 = Math.max(0, Math.min(end2, lines.length));
                  text2 = lines.slice(start2, end2).join("\n");
                  if (!pre.hasAttribute("data-start")) {
                    pre.setAttribute("data-start", String(start2 + 1));
                  }
                }
                code2.textContent = text2;
                Prism2.highlightElement(code2);
              },
              function(error2) {
                pre.setAttribute(STATUS_ATTR, STATUS_FAILED);
                code2.textContent = error2;
              }
            );
          }
        });
        Prism2.plugins.fileHighlight = {
          /**
           * Executes the File Highlight plugin for all matching `pre` elements under the given container.
           *
           * Note: Elements which are already loaded or currently loading will not be touched by this method.
           *
           * @param {ParentNode} [container=document]
           */
          highlight: function highlight(container) {
            var elements = (container || document).querySelectorAll(SELECTOR);
            for (var i2 = 0, element; element = elements[i2++]; ) {
              Prism2.highlightElement(element);
            }
          }
        };
        var logged = false;
        Prism2.fileHighlight = function() {
          if (!logged) {
            console.warn("Prism.fileHighlight is deprecated. Use `Prism.plugins.fileHighlight.highlight` instead.");
            logged = true;
          }
          Prism2.plugins.fileHighlight.highlight.apply(this, arguments);
        };
      })();
    })(prism);
    var prismExports = prism.exports;
    const Prism$1 = /* @__PURE__ */ getDefaultExportFromCjs(prismExports);
    var clipboard = { exports: {} };
    /*!
     * clipboard.js v2.0.11
     * https://clipboardjs.com/
     *
     * Licensed MIT © Zeno Rocha
     */
    (function(module2, exports2) {
      (function webpackUniversalModuleDefinition(root2, factory) {
        module2.exports = factory();
      })(commonjsGlobal, function() {
        return (
          /******/
          function() {
            var __webpack_modules__ = {
              /***/
              686: (
                /***/
                function(__unused_webpack_module, __webpack_exports__, __webpack_require__2) {
                  __webpack_require__2.d(__webpack_exports__, {
                    "default": function() {
                      return (
                        /* binding */
                        clipboard2
                      );
                    }
                  });
                  var tiny_emitter = __webpack_require__2(279);
                  var tiny_emitter_default = /* @__PURE__ */ __webpack_require__2.n(tiny_emitter);
                  var listen = __webpack_require__2(370);
                  var listen_default = /* @__PURE__ */ __webpack_require__2.n(listen);
                  var src_select = __webpack_require__2(817);
                  var select_default = /* @__PURE__ */ __webpack_require__2.n(src_select);
                  function command2(type) {
                    try {
                      return document.execCommand(type);
                    } catch (err2) {
                      return false;
                    }
                  }
                  var ClipboardActionCut = function ClipboardActionCut2(target) {
                    var selectedText = select_default()(target);
                    command2("cut");
                    return selectedText;
                  };
                  var actions_cut = ClipboardActionCut;
                  function createFakeElement(value) {
                    var isRTL2 = document.documentElement.getAttribute("dir") === "rtl";
                    var fakeElement = document.createElement("textarea");
                    fakeElement.style.fontSize = "12pt";
                    fakeElement.style.border = "0";
                    fakeElement.style.padding = "0";
                    fakeElement.style.margin = "0";
                    fakeElement.style.position = "absolute";
                    fakeElement.style[isRTL2 ? "right" : "left"] = "-9999px";
                    var yPosition = window.pageYOffset || document.documentElement.scrollTop;
                    fakeElement.style.top = "".concat(yPosition, "px");
                    fakeElement.setAttribute("readonly", "");
                    fakeElement.value = value;
                    return fakeElement;
                  }
                  var fakeCopyAction = function fakeCopyAction2(value, options) {
                    var fakeElement = createFakeElement(value);
                    options.container.appendChild(fakeElement);
                    var selectedText = select_default()(fakeElement);
                    command2("copy");
                    fakeElement.remove();
                    return selectedText;
                  };
                  var ClipboardActionCopy = function ClipboardActionCopy2(target) {
                    var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                      container: document.body
                    };
                    var selectedText = "";
                    if (typeof target === "string") {
                      selectedText = fakeCopyAction(target, options);
                    } else if (target instanceof HTMLInputElement && !["text", "search", "url", "tel", "password"].includes(target === null || target === void 0 ? void 0 : target.type)) {
                      selectedText = fakeCopyAction(target.value, options);
                    } else {
                      selectedText = select_default()(target);
                      command2("copy");
                    }
                    return selectedText;
                  };
                  var actions_copy = ClipboardActionCopy;
                  function _typeof(obj) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                      _typeof = function _typeof2(obj2) {
                        return typeof obj2;
                      };
                    } else {
                      _typeof = function _typeof2(obj2) {
                        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                      };
                    }
                    return _typeof(obj);
                  }
                  var ClipboardActionDefault = function ClipboardActionDefault2() {
                    var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                    var _options$action = options.action, action = _options$action === void 0 ? "copy" : _options$action, container = options.container, target = options.target, text2 = options.text;
                    if (action !== "copy" && action !== "cut") {
                      throw new Error('Invalid "action" value, use either "copy" or "cut"');
                    }
                    if (target !== void 0) {
                      if (target && _typeof(target) === "object" && target.nodeType === 1) {
                        if (action === "copy" && target.hasAttribute("disabled")) {
                          throw new Error('Invalid "target" attribute. Please use "readonly" instead of "disabled" attribute');
                        }
                        if (action === "cut" && (target.hasAttribute("readonly") || target.hasAttribute("disabled"))) {
                          throw new Error(`Invalid "target" attribute. You can't cut text from elements with "readonly" or "disabled" attributes`);
                        }
                      } else {
                        throw new Error('Invalid "target" value, use a valid Element');
                      }
                    }
                    if (text2) {
                      return actions_copy(text2, {
                        container
                      });
                    }
                    if (target) {
                      return action === "cut" ? actions_cut(target) : actions_copy(target, {
                        container
                      });
                    }
                  };
                  var actions_default = ClipboardActionDefault;
                  function clipboard_typeof(obj) {
                    "@babel/helpers - typeof";
                    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
                      clipboard_typeof = function _typeof2(obj2) {
                        return typeof obj2;
                      };
                    } else {
                      clipboard_typeof = function _typeof2(obj2) {
                        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
                      };
                    }
                    return clipboard_typeof(obj);
                  }
                  function _classCallCheck(instance, Constructor) {
                    if (!(instance instanceof Constructor)) {
                      throw new TypeError("Cannot call a class as a function");
                    }
                  }
                  function _defineProperties(target, props) {
                    for (var i2 = 0; i2 < props.length; i2++) {
                      var descriptor = props[i2];
                      descriptor.enumerable = descriptor.enumerable || false;
                      descriptor.configurable = true;
                      if ("value" in descriptor) descriptor.writable = true;
                      Object.defineProperty(target, descriptor.key, descriptor);
                    }
                  }
                  function _createClass(Constructor, protoProps, staticProps) {
                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
                    if (staticProps) _defineProperties(Constructor, staticProps);
                    return Constructor;
                  }
                  function _inherits(subClass, superClass) {
                    if (typeof superClass !== "function" && superClass !== null) {
                      throw new TypeError("Super expression must either be null or a function");
                    }
                    subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
                    if (superClass) _setPrototypeOf(subClass, superClass);
                  }
                  function _setPrototypeOf(o2, p2) {
                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf2(o3, p3) {
                      o3.__proto__ = p3;
                      return o3;
                    };
                    return _setPrototypeOf(o2, p2);
                  }
                  function _createSuper(Derived) {
                    var hasNativeReflectConstruct = _isNativeReflectConstruct();
                    return function _createSuperInternal() {
                      var Super = _getPrototypeOf(Derived), result;
                      if (hasNativeReflectConstruct) {
                        var NewTarget = _getPrototypeOf(this).constructor;
                        result = Reflect.construct(Super, arguments, NewTarget);
                      } else {
                        result = Super.apply(this, arguments);
                      }
                      return _possibleConstructorReturn(this, result);
                    };
                  }
                  function _possibleConstructorReturn(self2, call) {
                    if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) {
                      return call;
                    }
                    return _assertThisInitialized(self2);
                  }
                  function _assertThisInitialized(self2) {
                    if (self2 === void 0) {
                      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
                    }
                    return self2;
                  }
                  function _isNativeReflectConstruct() {
                    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
                    if (Reflect.construct.sham) return false;
                    if (typeof Proxy === "function") return true;
                    try {
                      Date.prototype.toString.call(Reflect.construct(Date, [], function() {
                      }));
                      return true;
                    } catch (e2) {
                      return false;
                    }
                  }
                  function _getPrototypeOf(o2) {
                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o3) {
                      return o3.__proto__ || Object.getPrototypeOf(o3);
                    };
                    return _getPrototypeOf(o2);
                  }
                  function getAttributeValue(suffix, element) {
                    var attribute2 = "data-clipboard-".concat(suffix);
                    if (!element.hasAttribute(attribute2)) {
                      return;
                    }
                    return element.getAttribute(attribute2);
                  }
                  var Clipboard = /* @__PURE__ */ function(_Emitter) {
                    _inherits(Clipboard2, _Emitter);
                    var _super = _createSuper(Clipboard2);
                    function Clipboard2(trigger, options) {
                      var _this;
                      _classCallCheck(this, Clipboard2);
                      _this = _super.call(this);
                      _this.resolveOptions(options);
                      _this.listenClick(trigger);
                      return _this;
                    }
                    _createClass(Clipboard2, [{
                      key: "resolveOptions",
                      value: function resolveOptions() {
                        var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
                        this.action = typeof options.action === "function" ? options.action : this.defaultAction;
                        this.target = typeof options.target === "function" ? options.target : this.defaultTarget;
                        this.text = typeof options.text === "function" ? options.text : this.defaultText;
                        this.container = clipboard_typeof(options.container) === "object" ? options.container : document.body;
                      }
                      /**
                       * Adds a click event listener to the passed trigger.
                       * @param {String|HTMLElement|HTMLCollection|NodeList} trigger
                       */
                    }, {
                      key: "listenClick",
                      value: function listenClick(trigger) {
                        var _this2 = this;
                        this.listener = listen_default()(trigger, "click", function(e2) {
                          return _this2.onClick(e2);
                        });
                      }
                      /**
                       * Defines a new `ClipboardAction` on each click event.
                       * @param {Event} e
                       */
                    }, {
                      key: "onClick",
                      value: function onClick(e2) {
                        var trigger = e2.delegateTarget || e2.currentTarget;
                        var action = this.action(trigger) || "copy";
                        var text2 = actions_default({
                          action,
                          container: this.container,
                          target: this.target(trigger),
                          text: this.text(trigger)
                        });
                        this.emit(text2 ? "success" : "error", {
                          action,
                          text: text2,
                          trigger,
                          clearSelection: function clearSelection() {
                            if (trigger) {
                              trigger.focus();
                            }
                            window.getSelection().removeAllRanges();
                          }
                        });
                      }
                      /**
                       * Default `action` lookup function.
                       * @param {Element} trigger
                       */
                    }, {
                      key: "defaultAction",
                      value: function defaultAction(trigger) {
                        return getAttributeValue("action", trigger);
                      }
                      /**
                       * Default `target` lookup function.
                       * @param {Element} trigger
                       */
                    }, {
                      key: "defaultTarget",
                      value: function defaultTarget(trigger) {
                        var selector = getAttributeValue("target", trigger);
                        if (selector) {
                          return document.querySelector(selector);
                        }
                      }
                      /**
                       * Allow fire programmatically a copy action
                       * @param {String|HTMLElement} target
                       * @param {Object} options
                       * @returns Text copied.
                       */
                    }, {
                      key: "defaultText",
                      /**
                       * Default `text` lookup function.
                       * @param {Element} trigger
                       */
                      value: function defaultText(trigger) {
                        return getAttributeValue("text", trigger);
                      }
                      /**
                       * Destroy lifecycle.
                       */
                    }, {
                      key: "destroy",
                      value: function destroy() {
                        this.listener.destroy();
                      }
                    }], [{
                      key: "copy",
                      value: function copy(target) {
                        var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {
                          container: document.body
                        };
                        return actions_copy(target, options);
                      }
                      /**
                       * Allow fire programmatically a cut action
                       * @param {String|HTMLElement} target
                       * @returns Text cutted.
                       */
                    }, {
                      key: "cut",
                      value: function cut(target) {
                        return actions_cut(target);
                      }
                      /**
                       * Returns the support of the given action, or all actions if no action is
                       * given.
                       * @param {String} [action]
                       */
                    }, {
                      key: "isSupported",
                      value: function isSupported() {
                        var action = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : ["copy", "cut"];
                        var actions = typeof action === "string" ? [action] : action;
                        var support = !!document.queryCommandSupported;
                        actions.forEach(function(action2) {
                          support = support && !!document.queryCommandSupported(action2);
                        });
                        return support;
                      }
                    }]);
                    return Clipboard2;
                  }(tiny_emitter_default());
                  var clipboard2 = Clipboard;
                }
              ),
              /***/
              828: (
                /***/
                function(module3) {
                  var DOCUMENT_NODE_TYPE = 9;
                  if (typeof Element !== "undefined" && !Element.prototype.matches) {
                    var proto = Element.prototype;
                    proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;
                  }
                  function closest(element, selector) {
                    while (element && element.nodeType !== DOCUMENT_NODE_TYPE) {
                      if (typeof element.matches === "function" && element.matches(selector)) {
                        return element;
                      }
                      element = element.parentNode;
                    }
                  }
                  module3.exports = closest;
                }
              ),
              /***/
              438: (
                /***/
                function(module3, __unused_webpack_exports, __webpack_require__2) {
                  var closest = __webpack_require__2(828);
                  function _delegate(element, selector, type, callback, useCapture) {
                    var listenerFn = listener.apply(this, arguments);
                    element.addEventListener(type, listenerFn, useCapture);
                    return {
                      destroy: function() {
                        element.removeEventListener(type, listenerFn, useCapture);
                      }
                    };
                  }
                  function delegate(elements, selector, type, callback, useCapture) {
                    if (typeof elements.addEventListener === "function") {
                      return _delegate.apply(null, arguments);
                    }
                    if (typeof type === "function") {
                      return _delegate.bind(null, document).apply(null, arguments);
                    }
                    if (typeof elements === "string") {
                      elements = document.querySelectorAll(elements);
                    }
                    return Array.prototype.map.call(elements, function(element) {
                      return _delegate(element, selector, type, callback, useCapture);
                    });
                  }
                  function listener(element, selector, type, callback) {
                    return function(e2) {
                      e2.delegateTarget = closest(e2.target, selector);
                      if (e2.delegateTarget) {
                        callback.call(element, e2);
                      }
                    };
                  }
                  module3.exports = delegate;
                }
              ),
              /***/
              879: (
                /***/
                function(__unused_webpack_module, exports3) {
                  exports3.node = function(value) {
                    return value !== void 0 && value instanceof HTMLElement && value.nodeType === 1;
                  };
                  exports3.nodeList = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return value !== void 0 && (type === "[object NodeList]" || type === "[object HTMLCollection]") && "length" in value && (value.length === 0 || exports3.node(value[0]));
                  };
                  exports3.string = function(value) {
                    return typeof value === "string" || value instanceof String;
                  };
                  exports3.fn = function(value) {
                    var type = Object.prototype.toString.call(value);
                    return type === "[object Function]";
                  };
                }
              ),
              /***/
              370: (
                /***/
                function(module3, __unused_webpack_exports, __webpack_require__2) {
                  var is = __webpack_require__2(879);
                  var delegate = __webpack_require__2(438);
                  function listen(target, type, callback) {
                    if (!target && !type && !callback) {
                      throw new Error("Missing required arguments");
                    }
                    if (!is.string(type)) {
                      throw new TypeError("Second argument must be a String");
                    }
                    if (!is.fn(callback)) {
                      throw new TypeError("Third argument must be a Function");
                    }
                    if (is.node(target)) {
                      return listenNode(target, type, callback);
                    } else if (is.nodeList(target)) {
                      return listenNodeList(target, type, callback);
                    } else if (is.string(target)) {
                      return listenSelector(target, type, callback);
                    } else {
                      throw new TypeError("First argument must be a String, HTMLElement, HTMLCollection, or NodeList");
                    }
                  }
                  function listenNode(node, type, callback) {
                    node.addEventListener(type, callback);
                    return {
                      destroy: function() {
                        node.removeEventListener(type, callback);
                      }
                    };
                  }
                  function listenNodeList(nodeList, type, callback) {
                    Array.prototype.forEach.call(nodeList, function(node) {
                      node.addEventListener(type, callback);
                    });
                    return {
                      destroy: function() {
                        Array.prototype.forEach.call(nodeList, function(node) {
                          node.removeEventListener(type, callback);
                        });
                      }
                    };
                  }
                  function listenSelector(selector, type, callback) {
                    return delegate(document.body, selector, type, callback);
                  }
                  module3.exports = listen;
                }
              ),
              /***/
              817: (
                /***/
                function(module3) {
                  function select(element) {
                    var selectedText;
                    if (element.nodeName === "SELECT") {
                      element.focus();
                      selectedText = element.value;
                    } else if (element.nodeName === "INPUT" || element.nodeName === "TEXTAREA") {
                      var isReadOnly = element.hasAttribute("readonly");
                      if (!isReadOnly) {
                        element.setAttribute("readonly", "");
                      }
                      element.select();
                      element.setSelectionRange(0, element.value.length);
                      if (!isReadOnly) {
                        element.removeAttribute("readonly");
                      }
                      selectedText = element.value;
                    } else {
                      if (element.hasAttribute("contenteditable")) {
                        element.focus();
                      }
                      var selection = window.getSelection();
                      var range = document.createRange();
                      range.selectNodeContents(element);
                      selection.removeAllRanges();
                      selection.addRange(range);
                      selectedText = selection.toString();
                    }
                    return selectedText;
                  }
                  module3.exports = select;
                }
              ),
              /***/
              279: (
                /***/
                function(module3) {
                  function E() {
                  }
                  E.prototype = {
                    on: function(name2, callback, ctx) {
                      var e2 = this.e || (this.e = {});
                      (e2[name2] || (e2[name2] = [])).push({
                        fn: callback,
                        ctx
                      });
                      return this;
                    },
                    once: function(name2, callback, ctx) {
                      var self2 = this;
                      function listener() {
                        self2.off(name2, listener);
                        callback.apply(ctx, arguments);
                      }
                      listener._ = callback;
                      return this.on(name2, listener, ctx);
                    },
                    emit: function(name2) {
                      var data = [].slice.call(arguments, 1);
                      var evtArr = ((this.e || (this.e = {}))[name2] || []).slice();
                      var i2 = 0;
                      var len = evtArr.length;
                      for (i2; i2 < len; i2++) {
                        evtArr[i2].fn.apply(evtArr[i2].ctx, data);
                      }
                      return this;
                    },
                    off: function(name2, callback) {
                      var e2 = this.e || (this.e = {});
                      var evts = e2[name2];
                      var liveEvents = [];
                      if (evts && callback) {
                        for (var i2 = 0, len = evts.length; i2 < len; i2++) {
                          if (evts[i2].fn !== callback && evts[i2].fn._ !== callback)
                            liveEvents.push(evts[i2]);
                        }
                      }
                      liveEvents.length ? e2[name2] = liveEvents : delete e2[name2];
                      return this;
                    }
                  };
                  module3.exports = E;
                  module3.exports.TinyEmitter = E;
                }
              )
              /******/
            };
            var __webpack_module_cache__ = {};
            function __webpack_require__(moduleId) {
              if (__webpack_module_cache__[moduleId]) {
                return __webpack_module_cache__[moduleId].exports;
              }
              var module3 = __webpack_module_cache__[moduleId] = {
                /******/
                // no module.id needed
                /******/
                // no module.loaded needed
                /******/
                exports: {}
                /******/
              };
              __webpack_modules__[moduleId](module3, module3.exports, __webpack_require__);
              return module3.exports;
            }
            !function() {
              __webpack_require__.n = function(module3) {
                var getter = module3 && module3.__esModule ? (
                  /******/
                  function() {
                    return module3["default"];
                  }
                ) : (
                  /******/
                  function() {
                    return module3;
                  }
                );
                __webpack_require__.d(getter, { a: getter });
                return getter;
              };
            }();
            !function() {
              __webpack_require__.d = function(exports3, definition) {
                for (var key2 in definition) {
                  if (__webpack_require__.o(definition, key2) && !__webpack_require__.o(exports3, key2)) {
                    Object.defineProperty(exports3, key2, { enumerable: true, get: definition[key2] });
                  }
                }
              };
            }();
            !function() {
              __webpack_require__.o = function(obj, prop) {
                return Object.prototype.hasOwnProperty.call(obj, prop);
              };
            }();
            return __webpack_require__(686);
          }().default
        );
      });
    })(clipboard);
    var clipboardExports = clipboard.exports;
    const ClipboardJS = /* @__PURE__ */ getDefaultExportFromCjs(clipboardExports);
    var top$1 = "top";
    var bottom = "bottom";
    var right = "right";
    var left = "left";
    var auto = "auto";
    var basePlacements = [top$1, bottom, right, left];
    var start = "start";
    var end = "end";
    var clippingParents = "clippingParents";
    var viewport = "viewport";
    var popper = "popper";
    var reference$1 = "reference";
    var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
      return acc.concat([placement + "-" + start, placement + "-" + end]);
    }, []);
    var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
      return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
    }, []);
    var beforeRead = "beforeRead";
    var read$1 = "read";
    var afterRead = "afterRead";
    var beforeMain = "beforeMain";
    var main = "main";
    var afterMain = "afterMain";
    var beforeWrite = "beforeWrite";
    var write = "write";
    var afterWrite = "afterWrite";
    var modifierPhases = [beforeRead, read$1, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];
    function getNodeName(element) {
      return element ? (element.nodeName || "").toLowerCase() : null;
    }
    function getWindow(node) {
      if (node == null) {
        return window;
      }
      if (node.toString() !== "[object Window]") {
        var ownerDocument = node.ownerDocument;
        return ownerDocument ? ownerDocument.defaultView || window : window;
      }
      return node;
    }
    function isElement$1(node) {
      var OwnElement = getWindow(node).Element;
      return node instanceof OwnElement || node instanceof Element;
    }
    function isHTMLElement(node) {
      var OwnElement = getWindow(node).HTMLElement;
      return node instanceof OwnElement || node instanceof HTMLElement;
    }
    function isShadowRoot(node) {
      if (typeof ShadowRoot === "undefined") {
        return false;
      }
      var OwnElement = getWindow(node).ShadowRoot;
      return node instanceof OwnElement || node instanceof ShadowRoot;
    }
    function applyStyles(_ref) {
      var state = _ref.state;
      Object.keys(state.elements).forEach(function(name2) {
        var style2 = state.styles[name2] || {};
        var attributes = state.attributes[name2] || {};
        var element = state.elements[name2];
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style2);
        Object.keys(attributes).forEach(function(name3) {
          var value = attributes[name3];
          if (value === false) {
            element.removeAttribute(name3);
          } else {
            element.setAttribute(name3, value === true ? "" : value);
          }
        });
      });
    }
    function effect$2(_ref2) {
      var state = _ref2.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: "0",
          top: "0",
          margin: "0"
        },
        arrow: {
          position: "absolute"
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;
      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      }
      return function() {
        Object.keys(state.elements).forEach(function(name2) {
          var element = state.elements[name2];
          var attributes = state.attributes[name2] || {};
          var styleProperties = Object.keys(state.styles.hasOwnProperty(name2) ? state.styles[name2] : initialStyles[name2]);
          var style2 = styleProperties.reduce(function(style3, property) {
            style3[property] = "";
            return style3;
          }, {});
          if (!isHTMLElement(element) || !getNodeName(element)) {
            return;
          }
          Object.assign(element.style, style2);
          Object.keys(attributes).forEach(function(attribute2) {
            element.removeAttribute(attribute2);
          });
        });
      };
    }
    const applyStyles$1 = {
      name: "applyStyles",
      enabled: true,
      phase: "write",
      fn: applyStyles,
      effect: effect$2,
      requires: ["computeStyles"]
    };
    function getBasePlacement(placement) {
      return placement.split("-")[0];
    }
    var max$2 = Math.max;
    var min$1 = Math.min;
    var round = Math.round;
    function getUAString() {
      var uaData = navigator.userAgentData;
      if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
        return uaData.brands.map(function(item) {
          return item.brand + "/" + item.version;
        }).join(" ");
      }
      return navigator.userAgent;
    }
    function isLayoutViewport() {
      return !/^((?!chrome|android).)*safari/i.test(getUAString());
    }
    function getBoundingClientRect(element, includeScale, isFixedStrategy) {
      if (includeScale === void 0) {
        includeScale = false;
      }
      if (isFixedStrategy === void 0) {
        isFixedStrategy = false;
      }
      var clientRect = element.getBoundingClientRect();
      var scaleX = 1;
      var scaleY = 1;
      if (includeScale && isHTMLElement(element)) {
        scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
        scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
      }
      var _ref = isElement$1(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
      var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
      var x2 = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
      var y2 = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
      var width = clientRect.width / scaleX;
      var height = clientRect.height / scaleY;
      return {
        width,
        height,
        top: y2,
        right: x2 + width,
        bottom: y2 + height,
        left: x2,
        x: x2,
        y: y2
      };
    }
    function getLayoutRect(element) {
      var clientRect = getBoundingClientRect(element);
      var width = element.offsetWidth;
      var height = element.offsetHeight;
      if (Math.abs(clientRect.width - width) <= 1) {
        width = clientRect.width;
      }
      if (Math.abs(clientRect.height - height) <= 1) {
        height = clientRect.height;
      }
      return {
        x: element.offsetLeft,
        y: element.offsetTop,
        width,
        height
      };
    }
    function contains$1(parent, child) {
      var rootNode = child.getRootNode && child.getRootNode();
      if (parent.contains(child)) {
        return true;
      } else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;
        do {
          if (next && parent.isSameNode(next)) {
            return true;
          }
          next = next.parentNode || next.host;
        } while (next);
      }
      return false;
    }
    function getComputedStyle$1(element) {
      return getWindow(element).getComputedStyle(element);
    }
    function isTableElement(element) {
      return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
    }
    function getDocumentElement(element) {
      return ((isElement$1(element) ? element.ownerDocument : (
        // $FlowFixMe[prop-missing]
        element.document
      )) || window.document).documentElement;
    }
    function getParentNode(element) {
      if (getNodeName(element) === "html") {
        return element;
      }
      return (
        // this is a quicker (but less type safe) way to save quite some bytes from the bundle
        // $FlowFixMe[incompatible-return]
        // $FlowFixMe[prop-missing]
        element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
        element.parentNode || // DOM Element detected
        (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
        // $FlowFixMe[incompatible-call]: HTMLElement is a Node
        getDocumentElement(element)
      );
    }
    function getTrueOffsetParent(element) {
      if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle$1(element).position === "fixed") {
        return null;
      }
      return element.offsetParent;
    }
    function getContainingBlock(element) {
      var isFirefox = /firefox/i.test(getUAString());
      var isIE = /Trident/i.test(getUAString());
      if (isIE && isHTMLElement(element)) {
        var elementCss = getComputedStyle$1(element);
        if (elementCss.position === "fixed") {
          return null;
        }
      }
      var currentNode = getParentNode(element);
      if (isShadowRoot(currentNode)) {
        currentNode = currentNode.host;
      }
      while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
        var css = getComputedStyle$1(currentNode);
        if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
          return currentNode;
        } else {
          currentNode = currentNode.parentNode;
        }
      }
      return null;
    }
    function getOffsetParent(element) {
      var window2 = getWindow(element);
      var offsetParent = getTrueOffsetParent(element);
      while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
        offsetParent = getTrueOffsetParent(offsetParent);
      }
      if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static")) {
        return window2;
      }
      return offsetParent || getContainingBlock(element) || window2;
    }
    function getMainAxisFromPlacement(placement) {
      return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
    }
    function within(min2, value, max2) {
      return max$2(min2, min$1(value, max2));
    }
    function withinMaxClamp(min2, value, max2) {
      var v2 = within(min2, value, max2);
      return v2 > max2 ? max2 : v2;
    }
    function getFreshSideObject() {
      return {
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      };
    }
    function mergePaddingObject(paddingObject) {
      return Object.assign({}, getFreshSideObject(), paddingObject);
    }
    function expandToHashMap(value, keys) {
      return keys.reduce(function(hashMap, key2) {
        hashMap[key2] = value;
        return hashMap;
      }, {});
    }
    var toPaddingObject = function toPaddingObject2(padding, state) {
      padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
        placement: state.placement
      })) : padding;
      return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    };
    function arrow(_ref) {
      var _state$modifiersData$;
      var state = _ref.state, name2 = _ref.name, options = _ref.options;
      var arrowElement = state.elements.arrow;
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var basePlacement = getBasePlacement(state.placement);
      var axis = getMainAxisFromPlacement(basePlacement);
      var isVertical = [left, right].indexOf(basePlacement) >= 0;
      var len = isVertical ? "height" : "width";
      if (!arrowElement || !popperOffsets2) {
        return;
      }
      var paddingObject = toPaddingObject(options.padding, state);
      var arrowRect = getLayoutRect(arrowElement);
      var minProp = axis === "y" ? top$1 : left;
      var maxProp = axis === "y" ? bottom : right;
      var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
      var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
      var arrowOffsetParent = getOffsetParent(arrowElement);
      var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
      var centerToReference = endDiff / 2 - startDiff / 2;
      var min2 = paddingObject[minProp];
      var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
      var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
      var offset2 = within(min2, center, max2);
      var axisProp = axis;
      state.modifiersData[name2] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
    }
    function effect$1(_ref2) {
      var state = _ref2.state, options = _ref2.options;
      var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
      if (arrowElement == null) {
        return;
      }
      if (typeof arrowElement === "string") {
        arrowElement = state.elements.popper.querySelector(arrowElement);
        if (!arrowElement) {
          return;
        }
      }
      if (!contains$1(state.elements.popper, arrowElement)) {
        return;
      }
      state.elements.arrow = arrowElement;
    }
    const arrow$1 = {
      name: "arrow",
      enabled: true,
      phase: "main",
      fn: arrow,
      effect: effect$1,
      requires: ["popperOffsets"],
      requiresIfExists: ["preventOverflow"]
    };
    function getVariation(placement) {
      return placement.split("-")[1];
    }
    var unsetSides = {
      top: "auto",
      right: "auto",
      bottom: "auto",
      left: "auto"
    };
    function roundOffsetsByDPR(_ref, win) {
      var x2 = _ref.x, y2 = _ref.y;
      var dpr = win.devicePixelRatio || 1;
      return {
        x: round(x2 * dpr) / dpr || 0,
        y: round(y2 * dpr) / dpr || 0
      };
    }
    function mapToStyles(_ref2) {
      var _Object$assign2;
      var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
      var _offsets$x = offsets.x, x2 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y2 = _offsets$y === void 0 ? 0 : _offsets$y;
      var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
        x: x2,
        y: y2
      }) : {
        x: x2,
        y: y2
      };
      x2 = _ref3.x;
      y2 = _ref3.y;
      var hasX = offsets.hasOwnProperty("x");
      var hasY = offsets.hasOwnProperty("y");
      var sideX = left;
      var sideY = top$1;
      var win = window;
      if (adaptive) {
        var offsetParent = getOffsetParent(popper2);
        var heightProp = "clientHeight";
        var widthProp = "clientWidth";
        if (offsetParent === getWindow(popper2)) {
          offsetParent = getDocumentElement(popper2);
          if (getComputedStyle$1(offsetParent).position !== "static" && position === "absolute") {
            heightProp = "scrollHeight";
            widthProp = "scrollWidth";
          }
        }
        offsetParent = offsetParent;
        if (placement === top$1 || (placement === left || placement === right) && variation === end) {
          sideY = bottom;
          var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
            // $FlowFixMe[prop-missing]
            offsetParent[heightProp]
          );
          y2 -= offsetY - popperRect.height;
          y2 *= gpuAcceleration ? 1 : -1;
        }
        if (placement === left || (placement === top$1 || placement === bottom) && variation === end) {
          sideX = right;
          var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
            // $FlowFixMe[prop-missing]
            offsetParent[widthProp]
          );
          x2 -= offsetX - popperRect.width;
          x2 *= gpuAcceleration ? 1 : -1;
        }
      }
      var commonStyles = Object.assign({
        position
      }, adaptive && unsetSides);
      var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
        x: x2,
        y: y2
      }, getWindow(popper2)) : {
        x: x2,
        y: y2
      };
      x2 = _ref4.x;
      y2 = _ref4.y;
      if (gpuAcceleration) {
        var _Object$assign;
        return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x2 + "px, " + y2 + "px)" : "translate3d(" + x2 + "px, " + y2 + "px, 0)", _Object$assign));
      }
      return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y2 + "px" : "", _Object$assign2[sideX] = hasX ? x2 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
    }
    function computeStyles(_ref5) {
      var state = _ref5.state, options = _ref5.options;
      var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
      var commonStyles = {
        placement: getBasePlacement(state.placement),
        variation: getVariation(state.placement),
        popper: state.elements.popper,
        popperRect: state.rects.popper,
        gpuAcceleration,
        isFixed: state.options.strategy === "fixed"
      };
      if (state.modifiersData.popperOffsets != null) {
        state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.popperOffsets,
          position: state.options.strategy,
          adaptive,
          roundOffsets
        })));
      }
      if (state.modifiersData.arrow != null) {
        state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
          offsets: state.modifiersData.arrow,
          position: "absolute",
          adaptive: false,
          roundOffsets
        })));
      }
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-placement": state.placement
      });
    }
    const computeStyles$1 = {
      name: "computeStyles",
      enabled: true,
      phase: "beforeWrite",
      fn: computeStyles,
      data: {}
    };
    var passive = {
      passive: true
    };
    function effect(_ref) {
      var state = _ref.state, instance = _ref.instance, options = _ref.options;
      var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
      var window2 = getWindow(state.elements.popper);
      var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.addEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.addEventListener("resize", instance.update, passive);
      }
      return function() {
        if (scroll) {
          scrollParents.forEach(function(scrollParent) {
            scrollParent.removeEventListener("scroll", instance.update, passive);
          });
        }
        if (resize) {
          window2.removeEventListener("resize", instance.update, passive);
        }
      };
    }
    const eventListeners = {
      name: "eventListeners",
      enabled: true,
      phase: "write",
      fn: function fn2() {
      },
      effect,
      data: {}
    };
    var hash$1 = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    function getOppositePlacement(placement) {
      return placement.replace(/left|right|bottom|top/g, function(matched) {
        return hash$1[matched];
      });
    }
    var hash = {
      start: "end",
      end: "start"
    };
    function getOppositeVariationPlacement(placement) {
      return placement.replace(/start|end/g, function(matched) {
        return hash[matched];
      });
    }
    function getWindowScroll(node) {
      var win = getWindow(node);
      var scrollLeft = win.pageXOffset;
      var scrollTop = win.pageYOffset;
      return {
        scrollLeft,
        scrollTop
      };
    }
    function getWindowScrollBarX(element) {
      return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
    }
    function getViewportRect(element, strategy) {
      var win = getWindow(element);
      var html = getDocumentElement(element);
      var visualViewport = win.visualViewport;
      var width = html.clientWidth;
      var height = html.clientHeight;
      var x2 = 0;
      var y2 = 0;
      if (visualViewport) {
        width = visualViewport.width;
        height = visualViewport.height;
        var layoutViewport = isLayoutViewport();
        if (layoutViewport || !layoutViewport && strategy === "fixed") {
          x2 = visualViewport.offsetLeft;
          y2 = visualViewport.offsetTop;
        }
      }
      return {
        width,
        height,
        x: x2 + getWindowScrollBarX(element),
        y: y2
      };
    }
    function getDocumentRect(element) {
      var _element$ownerDocumen;
      var html = getDocumentElement(element);
      var winScroll = getWindowScroll(element);
      var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
      var width = max$2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
      var height = max$2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
      var x2 = -winScroll.scrollLeft + getWindowScrollBarX(element);
      var y2 = -winScroll.scrollTop;
      if (getComputedStyle$1(body || html).direction === "rtl") {
        x2 += max$2(html.clientWidth, body ? body.clientWidth : 0) - width;
      }
      return {
        width,
        height,
        x: x2,
        y: y2
      };
    }
    function isScrollParent(element) {
      var _getComputedStyle = getComputedStyle$1(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
      return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
    }
    function getScrollParent(node) {
      if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
        return node.ownerDocument.body;
      }
      if (isHTMLElement(node) && isScrollParent(node)) {
        return node;
      }
      return getScrollParent(getParentNode(node));
    }
    function listScrollParents(element, list2) {
      var _element$ownerDocumen;
      if (list2 === void 0) {
        list2 = [];
      }
      var scrollParent = getScrollParent(element);
      var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
      var win = getWindow(scrollParent);
      var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
      var updatedList = list2.concat(target);
      return isBody ? updatedList : (
        // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
        updatedList.concat(listScrollParents(getParentNode(target)))
      );
    }
    function rectToClientRect(rect) {
      return Object.assign({}, rect, {
        left: rect.x,
        top: rect.y,
        right: rect.x + rect.width,
        bottom: rect.y + rect.height
      });
    }
    function getInnerBoundingClientRect(element, strategy) {
      var rect = getBoundingClientRect(element, false, strategy === "fixed");
      rect.top = rect.top + element.clientTop;
      rect.left = rect.left + element.clientLeft;
      rect.bottom = rect.top + element.clientHeight;
      rect.right = rect.left + element.clientWidth;
      rect.width = element.clientWidth;
      rect.height = element.clientHeight;
      rect.x = rect.left;
      rect.y = rect.top;
      return rect;
    }
    function getClientRectFromMixedType(element, clippingParent, strategy) {
      return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement$1(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
    }
    function getClippingParents(element) {
      var clippingParents2 = listScrollParents(getParentNode(element));
      var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle$1(element).position) >= 0;
      var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
      if (!isElement$1(clipperElement)) {
        return [];
      }
      return clippingParents2.filter(function(clippingParent) {
        return isElement$1(clippingParent) && contains$1(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
      });
    }
    function getClippingRect(element, boundary, rootBoundary, strategy) {
      var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
      var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
      var firstClippingParent = clippingParents2[0];
      var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
        var rect = getClientRectFromMixedType(element, clippingParent, strategy);
        accRect.top = max$2(rect.top, accRect.top);
        accRect.right = min$1(rect.right, accRect.right);
        accRect.bottom = min$1(rect.bottom, accRect.bottom);
        accRect.left = max$2(rect.left, accRect.left);
        return accRect;
      }, getClientRectFromMixedType(element, firstClippingParent, strategy));
      clippingRect.width = clippingRect.right - clippingRect.left;
      clippingRect.height = clippingRect.bottom - clippingRect.top;
      clippingRect.x = clippingRect.left;
      clippingRect.y = clippingRect.top;
      return clippingRect;
    }
    function computeOffsets(_ref) {
      var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
      var basePlacement = placement ? getBasePlacement(placement) : null;
      var variation = placement ? getVariation(placement) : null;
      var commonX = reference2.x + reference2.width / 2 - element.width / 2;
      var commonY = reference2.y + reference2.height / 2 - element.height / 2;
      var offsets;
      switch (basePlacement) {
        case top$1:
          offsets = {
            x: commonX,
            y: reference2.y - element.height
          };
          break;
        case bottom:
          offsets = {
            x: commonX,
            y: reference2.y + reference2.height
          };
          break;
        case right:
          offsets = {
            x: reference2.x + reference2.width,
            y: commonY
          };
          break;
        case left:
          offsets = {
            x: reference2.x - element.width,
            y: commonY
          };
          break;
        default:
          offsets = {
            x: reference2.x,
            y: reference2.y
          };
      }
      var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
      if (mainAxis != null) {
        var len = mainAxis === "y" ? "height" : "width";
        switch (variation) {
          case start:
            offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
            break;
          case end:
            offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
            break;
        }
      }
      return offsets;
    }
    function detectOverflow(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
      var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
      var altContext = elementContext === popper ? reference$1 : popper;
      var popperRect = state.rects.popper;
      var element = state.elements[altBoundary ? altContext : elementContext];
      var clippingClientRect = getClippingRect(isElement$1(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
      var referenceClientRect = getBoundingClientRect(state.elements.reference);
      var popperOffsets2 = computeOffsets({
        reference: referenceClientRect,
        element: popperRect,
        strategy: "absolute",
        placement
      });
      var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
      var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
      var overflowOffsets = {
        top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
        bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
        left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
        right: elementClientRect.right - clippingClientRect.right + paddingObject.right
      };
      var offsetData = state.modifiersData.offset;
      if (elementContext === popper && offsetData) {
        var offset2 = offsetData[placement];
        Object.keys(overflowOffsets).forEach(function(key2) {
          var multiply = [right, bottom].indexOf(key2) >= 0 ? 1 : -1;
          var axis = [top$1, bottom].indexOf(key2) >= 0 ? "y" : "x";
          overflowOffsets[key2] += offset2[axis] * multiply;
        });
      }
      return overflowOffsets;
    }
    function computeAutoPlacement(state, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
      var variation = getVariation(placement);
      var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
        return getVariation(placement2) === variation;
      }) : basePlacements;
      var allowedPlacements = placements$1.filter(function(placement2) {
        return allowedAutoPlacements.indexOf(placement2) >= 0;
      });
      if (allowedPlacements.length === 0) {
        allowedPlacements = placements$1;
      }
      var overflows = allowedPlacements.reduce(function(acc, placement2) {
        acc[placement2] = detectOverflow(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding
        })[getBasePlacement(placement2)];
        return acc;
      }, {});
      return Object.keys(overflows).sort(function(a2, b) {
        return overflows[a2] - overflows[b];
      });
    }
    function getExpandedFallbackPlacements(placement) {
      if (getBasePlacement(placement) === auto) {
        return [];
      }
      var oppositePlacement = getOppositePlacement(placement);
      return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
    }
    function flip(_ref) {
      var state = _ref.state, options = _ref.options, name2 = _ref.name;
      if (state.modifiersData[name2]._skip) {
        return;
      }
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
      var preferredPlacement = state.options.placement;
      var basePlacement = getBasePlacement(preferredPlacement);
      var isBasePlacement = basePlacement === preferredPlacement;
      var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
      var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
        return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
          placement: placement2,
          boundary,
          rootBoundary,
          padding,
          flipVariations,
          allowedAutoPlacements
        }) : placement2);
      }, []);
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var checksMap = /* @__PURE__ */ new Map();
      var makeFallbackChecks = true;
      var firstFittingPlacement = placements2[0];
      for (var i2 = 0; i2 < placements2.length; i2++) {
        var placement = placements2[i2];
        var _basePlacement = getBasePlacement(placement);
        var isStartVariation = getVariation(placement) === start;
        var isVertical = [top$1, bottom].indexOf(_basePlacement) >= 0;
        var len = isVertical ? "width" : "height";
        var overflow = detectOverflow(state, {
          placement,
          boundary,
          rootBoundary,
          altBoundary,
          padding
        });
        var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top$1;
        if (referenceRect[len] > popperRect[len]) {
          mainVariationSide = getOppositePlacement(mainVariationSide);
        }
        var altVariationSide = getOppositePlacement(mainVariationSide);
        var checks = [];
        if (checkMainAxis) {
          checks.push(overflow[_basePlacement] <= 0);
        }
        if (checkAltAxis) {
          checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
        }
        if (checks.every(function(check) {
          return check;
        })) {
          firstFittingPlacement = placement;
          makeFallbackChecks = false;
          break;
        }
        checksMap.set(placement, checks);
      }
      if (makeFallbackChecks) {
        var numberOfChecks = flipVariations ? 3 : 1;
        var _loop = function _loop2(_i2) {
          var fittingPlacement = placements2.find(function(placement2) {
            var checks2 = checksMap.get(placement2);
            if (checks2) {
              return checks2.slice(0, _i2).every(function(check) {
                return check;
              });
            }
          });
          if (fittingPlacement) {
            firstFittingPlacement = fittingPlacement;
            return "break";
          }
        };
        for (var _i = numberOfChecks; _i > 0; _i--) {
          var _ret = _loop(_i);
          if (_ret === "break") break;
        }
      }
      if (state.placement !== firstFittingPlacement) {
        state.modifiersData[name2]._skip = true;
        state.placement = firstFittingPlacement;
        state.reset = true;
      }
    }
    const flip$1 = {
      name: "flip",
      enabled: true,
      phase: "main",
      fn: flip,
      requiresIfExists: ["offset"],
      data: {
        _skip: false
      }
    };
    function getSideOffsets(overflow, rect, preventedOffsets) {
      if (preventedOffsets === void 0) {
        preventedOffsets = {
          x: 0,
          y: 0
        };
      }
      return {
        top: overflow.top - rect.height - preventedOffsets.y,
        right: overflow.right - rect.width + preventedOffsets.x,
        bottom: overflow.bottom - rect.height + preventedOffsets.y,
        left: overflow.left - rect.width - preventedOffsets.x
      };
    }
    function isAnySideFullyClipped(overflow) {
      return [top$1, right, bottom, left].some(function(side) {
        return overflow[side] >= 0;
      });
    }
    function hide(_ref) {
      var state = _ref.state, name2 = _ref.name;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var preventedOffsets = state.modifiersData.preventOverflow;
      var referenceOverflow = detectOverflow(state, {
        elementContext: "reference"
      });
      var popperAltOverflow = detectOverflow(state, {
        altBoundary: true
      });
      var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
      var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
      var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
      var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
      state.modifiersData[name2] = {
        referenceClippingOffsets,
        popperEscapeOffsets,
        isReferenceHidden,
        hasPopperEscaped
      };
      state.attributes.popper = Object.assign({}, state.attributes.popper, {
        "data-popper-reference-hidden": isReferenceHidden,
        "data-popper-escaped": hasPopperEscaped
      });
    }
    const hide$1 = {
      name: "hide",
      enabled: true,
      phase: "main",
      requiresIfExists: ["preventOverflow"],
      fn: hide
    };
    function distanceAndSkiddingToXY(placement, rects, offset2) {
      var basePlacement = getBasePlacement(placement);
      var invertDistance = [left, top$1].indexOf(basePlacement) >= 0 ? -1 : 1;
      var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
        placement
      })) : offset2, skidding = _ref[0], distance = _ref[1];
      skidding = skidding || 0;
      distance = (distance || 0) * invertDistance;
      return [left, right].indexOf(basePlacement) >= 0 ? {
        x: distance,
        y: skidding
      } : {
        x: skidding,
        y: distance
      };
    }
    function offset(_ref2) {
      var state = _ref2.state, options = _ref2.options, name2 = _ref2.name;
      var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
      var data = placements.reduce(function(acc, placement) {
        acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
        return acc;
      }, {});
      var _data$state$placement = data[state.placement], x2 = _data$state$placement.x, y2 = _data$state$placement.y;
      if (state.modifiersData.popperOffsets != null) {
        state.modifiersData.popperOffsets.x += x2;
        state.modifiersData.popperOffsets.y += y2;
      }
      state.modifiersData[name2] = data;
    }
    const offset$1 = {
      name: "offset",
      enabled: true,
      phase: "main",
      requires: ["popperOffsets"],
      fn: offset
    };
    function popperOffsets(_ref) {
      var state = _ref.state, name2 = _ref.name;
      state.modifiersData[name2] = computeOffsets({
        reference: state.rects.reference,
        element: state.rects.popper,
        strategy: "absolute",
        placement: state.placement
      });
    }
    const popperOffsets$1 = {
      name: "popperOffsets",
      enabled: true,
      phase: "read",
      fn: popperOffsets,
      data: {}
    };
    function getAltAxis(axis) {
      return axis === "x" ? "y" : "x";
    }
    function preventOverflow(_ref) {
      var state = _ref.state, options = _ref.options, name2 = _ref.name;
      var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
      var overflow = detectOverflow(state, {
        boundary,
        rootBoundary,
        padding,
        altBoundary
      });
      var basePlacement = getBasePlacement(state.placement);
      var variation = getVariation(state.placement);
      var isBasePlacement = !variation;
      var mainAxis = getMainAxisFromPlacement(basePlacement);
      var altAxis = getAltAxis(mainAxis);
      var popperOffsets2 = state.modifiersData.popperOffsets;
      var referenceRect = state.rects.reference;
      var popperRect = state.rects.popper;
      var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
        placement: state.placement
      })) : tetherOffset;
      var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
        mainAxis: tetherOffsetValue,
        altAxis: tetherOffsetValue
      } : Object.assign({
        mainAxis: 0,
        altAxis: 0
      }, tetherOffsetValue);
      var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
      var data = {
        x: 0,
        y: 0
      };
      if (!popperOffsets2) {
        return;
      }
      if (checkMainAxis) {
        var _offsetModifierState$;
        var mainSide = mainAxis === "y" ? top$1 : left;
        var altSide = mainAxis === "y" ? bottom : right;
        var len = mainAxis === "y" ? "height" : "width";
        var offset2 = popperOffsets2[mainAxis];
        var min2 = offset2 + overflow[mainSide];
        var max2 = offset2 - overflow[altSide];
        var additive = tether ? -popperRect[len] / 2 : 0;
        var minLen = variation === start ? referenceRect[len] : popperRect[len];
        var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
        var arrowElement = state.elements.arrow;
        var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
          width: 0,
          height: 0
        };
        var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
        var arrowPaddingMin = arrowPaddingObject[mainSide];
        var arrowPaddingMax = arrowPaddingObject[altSide];
        var arrowLen = within(0, referenceRect[len], arrowRect[len]);
        var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
        var maxOffset2 = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
        var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
        var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
        var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
        var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
        var tetherMax = offset2 + maxOffset2 - offsetModifierValue;
        var preventedOffset = within(tether ? min$1(min2, tetherMin) : min2, offset2, tether ? max$2(max2, tetherMax) : max2);
        popperOffsets2[mainAxis] = preventedOffset;
        data[mainAxis] = preventedOffset - offset2;
      }
      if (checkAltAxis) {
        var _offsetModifierState$2;
        var _mainSide = mainAxis === "x" ? top$1 : left;
        var _altSide = mainAxis === "x" ? bottom : right;
        var _offset = popperOffsets2[altAxis];
        var _len = altAxis === "y" ? "height" : "width";
        var _min = _offset + overflow[_mainSide];
        var _max = _offset - overflow[_altSide];
        var isOriginSide = [top$1, left].indexOf(basePlacement) !== -1;
        var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
        var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
        var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
        var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
        popperOffsets2[altAxis] = _preventedOffset;
        data[altAxis] = _preventedOffset - _offset;
      }
      state.modifiersData[name2] = data;
    }
    const preventOverflow$1 = {
      name: "preventOverflow",
      enabled: true,
      phase: "main",
      fn: preventOverflow,
      requiresIfExists: ["offset"]
    };
    function getHTMLElementScroll(element) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    function getNodeScroll(node) {
      if (node === getWindow(node) || !isHTMLElement(node)) {
        return getWindowScroll(node);
      } else {
        return getHTMLElementScroll(node);
      }
    }
    function isElementScaled(element) {
      var rect = element.getBoundingClientRect();
      var scaleX = round(rect.width) / element.offsetWidth || 1;
      var scaleY = round(rect.height) / element.offsetHeight || 1;
      return scaleX !== 1 || scaleY !== 1;
    }
    function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
      if (isFixed === void 0) {
        isFixed = false;
      }
      var isOffsetParentAnElement = isHTMLElement(offsetParent);
      var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
      var documentElement = getDocumentElement(offsetParent);
      var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
      var scroll = {
        scrollLeft: 0,
        scrollTop: 0
      };
      var offsets = {
        x: 0,
        y: 0
      };
      if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
        if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)) {
          scroll = getNodeScroll(offsetParent);
        }
        if (isHTMLElement(offsetParent)) {
          offsets = getBoundingClientRect(offsetParent, true);
          offsets.x += offsetParent.clientLeft;
          offsets.y += offsetParent.clientTop;
        } else if (documentElement) {
          offsets.x = getWindowScrollBarX(documentElement);
        }
      }
      return {
        x: rect.left + scroll.scrollLeft - offsets.x,
        y: rect.top + scroll.scrollTop - offsets.y,
        width: rect.width,
        height: rect.height
      };
    }
    function order(modifiers2) {
      var map2 = /* @__PURE__ */ new Map();
      var visited = /* @__PURE__ */ new Set();
      var result = [];
      modifiers2.forEach(function(modifier) {
        map2.set(modifier.name, modifier);
      });
      function sort(modifier) {
        visited.add(modifier.name);
        var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
        requires.forEach(function(dep) {
          if (!visited.has(dep)) {
            var depModifier = map2.get(dep);
            if (depModifier) {
              sort(depModifier);
            }
          }
        });
        result.push(modifier);
      }
      modifiers2.forEach(function(modifier) {
        if (!visited.has(modifier.name)) {
          sort(modifier);
        }
      });
      return result;
    }
    function orderModifiers(modifiers2) {
      var orderedModifiers = order(modifiers2);
      return modifierPhases.reduce(function(acc, phase) {
        return acc.concat(orderedModifiers.filter(function(modifier) {
          return modifier.phase === phase;
        }));
      }, []);
    }
    function debounce$2(fn2) {
      var pending;
      return function() {
        if (!pending) {
          pending = new Promise(function(resolve) {
            Promise.resolve().then(function() {
              pending = void 0;
              resolve(fn2());
            });
          });
        }
        return pending;
      };
    }
    function mergeByName(modifiers2) {
      var merged = modifiers2.reduce(function(merged2, current) {
        var existing = merged2[current.name];
        merged2[current.name] = existing ? Object.assign({}, existing, current, {
          options: Object.assign({}, existing.options, current.options),
          data: Object.assign({}, existing.data, current.data)
        }) : current;
        return merged2;
      }, {});
      return Object.keys(merged).map(function(key2) {
        return merged[key2];
      });
    }
    var DEFAULT_OPTIONS = {
      placement: "bottom",
      modifiers: [],
      strategy: "absolute"
    };
    function areValidElements() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return !args.some(function(element) {
        return !(element && typeof element.getBoundingClientRect === "function");
      });
    }
    function popperGenerator(generatorOptions) {
      if (generatorOptions === void 0) {
        generatorOptions = {};
      }
      var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
      return function createPopper2(reference2, popper2, options) {
        if (options === void 0) {
          options = defaultOptions2;
        }
        var state = {
          placement: "bottom",
          orderedModifiers: [],
          options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
          modifiersData: {},
          elements: {
            reference: reference2,
            popper: popper2
          },
          attributes: {},
          styles: {}
        };
        var effectCleanupFns = [];
        var isDestroyed = false;
        var instance = {
          state,
          setOptions: function setOptions(setOptionsAction) {
            var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
            cleanupModifierEffects();
            state.options = Object.assign({}, defaultOptions2, state.options, options2);
            state.scrollParents = {
              reference: isElement$1(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
              popper: listScrollParents(popper2)
            };
            var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
            state.orderedModifiers = orderedModifiers.filter(function(m2) {
              return m2.enabled;
            });
            runModifierEffects();
            return instance.update();
          },
          // Sync update – it will always be executed, even if not necessary. This
          // is useful for low frequency updates where sync behavior simplifies the
          // logic.
          // For high frequency updates (e.g. `resize` and `scroll` events), always
          // prefer the async Popper#update method
          forceUpdate: function forceUpdate() {
            if (isDestroyed) {
              return;
            }
            var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
            if (!areValidElements(reference3, popper3)) {
              return;
            }
            state.rects = {
              reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
              popper: getLayoutRect(popper3)
            };
            state.reset = false;
            state.placement = state.options.placement;
            state.orderedModifiers.forEach(function(modifier) {
              return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
            });
            for (var index = 0; index < state.orderedModifiers.length; index++) {
              if (state.reset === true) {
                state.reset = false;
                index = -1;
                continue;
              }
              var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name2 = _state$orderedModifie.name;
              if (typeof fn2 === "function") {
                state = fn2({
                  state,
                  options: _options,
                  name: name2,
                  instance
                }) || state;
              }
            }
          },
          // Async and optimistically optimized update – it will not be executed if
          // not necessary (debounced to run at most once-per-tick)
          update: debounce$2(function() {
            return new Promise(function(resolve) {
              instance.forceUpdate();
              resolve(state);
            });
          }),
          destroy: function destroy() {
            cleanupModifierEffects();
            isDestroyed = true;
          }
        };
        if (!areValidElements(reference2, popper2)) {
          return instance;
        }
        instance.setOptions(options).then(function(state2) {
          if (!isDestroyed && options.onFirstUpdate) {
            options.onFirstUpdate(state2);
          }
        });
        function runModifierEffects() {
          state.orderedModifiers.forEach(function(_ref) {
            var name2 = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect2 = _ref.effect;
            if (typeof effect2 === "function") {
              var cleanupFn = effect2({
                state,
                name: name2,
                instance,
                options: options2
              });
              var noopFn = function noopFn2() {
              };
              effectCleanupFns.push(cleanupFn || noopFn);
            }
          });
        }
        function cleanupModifierEffects() {
          effectCleanupFns.forEach(function(fn2) {
            return fn2();
          });
          effectCleanupFns = [];
        }
        return instance;
      };
    }
    var createPopper$2 = /* @__PURE__ */ popperGenerator();
    var defaultModifiers$1 = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1];
    var createPopper$1 = /* @__PURE__ */ popperGenerator({
      defaultModifiers: defaultModifiers$1
    });
    var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
    var createPopper = /* @__PURE__ */ popperGenerator({
      defaultModifiers
    });
    const Popper = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      afterMain,
      afterRead,
      afterWrite,
      applyStyles: applyStyles$1,
      arrow: arrow$1,
      auto,
      basePlacements,
      beforeMain,
      beforeRead,
      beforeWrite,
      bottom,
      clippingParents,
      computeStyles: computeStyles$1,
      createPopper,
      createPopperBase: createPopper$2,
      createPopperLite: createPopper$1,
      detectOverflow,
      end,
      eventListeners,
      flip: flip$1,
      hide: hide$1,
      left,
      main,
      modifierPhases,
      offset: offset$1,
      placements,
      popper,
      popperGenerator,
      popperOffsets: popperOffsets$1,
      preventOverflow: preventOverflow$1,
      read: read$1,
      reference: reference$1,
      right,
      start,
      top: top$1,
      variationPlacements,
      viewport,
      write
    }, Symbol.toStringTag, { value: "Module" }));
    /*!
      * Bootstrap v5.3.3 (https://getbootstrap.com/)
      * Copyright 2011-2024 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
      * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)
      */
    const elementMap = /* @__PURE__ */ new Map();
    const Data = {
      set(element, key2, instance) {
        if (!elementMap.has(element)) {
          elementMap.set(element, /* @__PURE__ */ new Map());
        }
        const instanceMap = elementMap.get(element);
        if (!instanceMap.has(key2) && instanceMap.size !== 0) {
          console.error(`Bootstrap doesn't allow more than one instance per element. Bound instance: ${Array.from(instanceMap.keys())[0]}.`);
          return;
        }
        instanceMap.set(key2, instance);
      },
      get(element, key2) {
        if (elementMap.has(element)) {
          return elementMap.get(element).get(key2) || null;
        }
        return null;
      },
      remove(element, key2) {
        if (!elementMap.has(element)) {
          return;
        }
        const instanceMap = elementMap.get(element);
        instanceMap.delete(key2);
        if (instanceMap.size === 0) {
          elementMap.delete(element);
        }
      }
    };
    const MAX_UID = 1e6;
    const MILLISECONDS_MULTIPLIER = 1e3;
    const TRANSITION_END = "transitionend";
    const parseSelector = (selector) => {
      if (selector && window.CSS && window.CSS.escape) {
        selector = selector.replace(/#([^\s"#']+)/g, (match, id) => `#${CSS.escape(id)}`);
      }
      return selector;
    };
    const toType = (object) => {
      if (object === null || object === void 0) {
        return `${object}`;
      }
      return Object.prototype.toString.call(object).match(/\s([a-z]+)/i)[1].toLowerCase();
    };
    const getUID = (prefix) => {
      do {
        prefix += Math.floor(Math.random() * MAX_UID);
      } while (document.getElementById(prefix));
      return prefix;
    };
    const getTransitionDurationFromElement = (element) => {
      if (!element) {
        return 0;
      }
      let {
        transitionDuration,
        transitionDelay
      } = window.getComputedStyle(element);
      const floatTransitionDuration = Number.parseFloat(transitionDuration);
      const floatTransitionDelay = Number.parseFloat(transitionDelay);
      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      }
      transitionDuration = transitionDuration.split(",")[0];
      transitionDelay = transitionDelay.split(",")[0];
      return (Number.parseFloat(transitionDuration) + Number.parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    };
    const triggerTransitionEnd = (element) => {
      element.dispatchEvent(new Event(TRANSITION_END));
    };
    const isElement = (object) => {
      if (!object || typeof object !== "object") {
        return false;
      }
      if (typeof object.jquery !== "undefined") {
        object = object[0];
      }
      return typeof object.nodeType !== "undefined";
    };
    const getElement = (object) => {
      if (isElement(object)) {
        return object.jquery ? object[0] : object;
      }
      if (typeof object === "string" && object.length > 0) {
        return document.querySelector(parseSelector(object));
      }
      return null;
    };
    const isVisible = (element) => {
      if (!isElement(element) || element.getClientRects().length === 0) {
        return false;
      }
      const elementIsVisible = getComputedStyle(element).getPropertyValue("visibility") === "visible";
      const closedDetails = element.closest("details:not([open])");
      if (!closedDetails) {
        return elementIsVisible;
      }
      if (closedDetails !== element) {
        const summary = element.closest("summary");
        if (summary && summary.parentNode !== closedDetails) {
          return false;
        }
        if (summary === null) {
          return false;
        }
      }
      return elementIsVisible;
    };
    const isDisabled = (element) => {
      if (!element || element.nodeType !== Node.ELEMENT_NODE) {
        return true;
      }
      if (element.classList.contains("disabled")) {
        return true;
      }
      if (typeof element.disabled !== "undefined") {
        return element.disabled;
      }
      return element.hasAttribute("disabled") && element.getAttribute("disabled") !== "false";
    };
    const findShadowRoot = (element) => {
      if (!document.documentElement.attachShadow) {
        return null;
      }
      if (typeof element.getRootNode === "function") {
        const root2 = element.getRootNode();
        return root2 instanceof ShadowRoot ? root2 : null;
      }
      if (element instanceof ShadowRoot) {
        return element;
      }
      if (!element.parentNode) {
        return null;
      }
      return findShadowRoot(element.parentNode);
    };
    const noop = () => {
    };
    const reflow = (element) => {
      element.offsetHeight;
    };
    const getjQuery = () => {
      if (window.jQuery && !document.body.hasAttribute("data-bs-no-jquery")) {
        return window.jQuery;
      }
      return null;
    };
    const DOMContentLoadedCallbacks = [];
    const onDOMContentLoaded = (callback) => {
      if (document.readyState === "loading") {
        if (!DOMContentLoadedCallbacks.length) {
          document.addEventListener("DOMContentLoaded", () => {
            for (const callback2 of DOMContentLoadedCallbacks) {
              callback2();
            }
          });
        }
        DOMContentLoadedCallbacks.push(callback);
      } else {
        callback();
      }
    };
    const isRTL = () => document.documentElement.dir === "rtl";
    const defineJQueryPlugin = (plugin) => {
      onDOMContentLoaded(() => {
        const $2 = getjQuery();
        if ($2) {
          const name2 = plugin.NAME;
          const JQUERY_NO_CONFLICT = $2.fn[name2];
          $2.fn[name2] = plugin.jQueryInterface;
          $2.fn[name2].Constructor = plugin;
          $2.fn[name2].noConflict = () => {
            $2.fn[name2] = JQUERY_NO_CONFLICT;
            return plugin.jQueryInterface;
          };
        }
      });
    };
    const execute = (possibleCallback, args = [], defaultValue = possibleCallback) => {
      return typeof possibleCallback === "function" ? possibleCallback(...args) : defaultValue;
    };
    const executeAfterTransition = (callback, transitionElement, waitForTransition = true) => {
      if (!waitForTransition) {
        execute(callback);
        return;
      }
      const durationPadding = 5;
      const emulatedDuration = getTransitionDurationFromElement(transitionElement) + durationPadding;
      let called = false;
      const handler = ({
        target
      }) => {
        if (target !== transitionElement) {
          return;
        }
        called = true;
        transitionElement.removeEventListener(TRANSITION_END, handler);
        execute(callback);
      };
      transitionElement.addEventListener(TRANSITION_END, handler);
      setTimeout(() => {
        if (!called) {
          triggerTransitionEnd(transitionElement);
        }
      }, emulatedDuration);
    };
    const getNextActiveElement = (list2, activeElement, shouldGetNext, isCycleAllowed) => {
      const listLength = list2.length;
      let index = list2.indexOf(activeElement);
      if (index === -1) {
        return !shouldGetNext && isCycleAllowed ? list2[listLength - 1] : list2[0];
      }
      index += shouldGetNext ? 1 : -1;
      if (isCycleAllowed) {
        index = (index + listLength) % listLength;
      }
      return list2[Math.max(0, Math.min(index, listLength - 1))];
    };
    const namespaceRegex = /[^.]*(?=\..*)\.|.*/;
    const stripNameRegex = /\..*/;
    const stripUidRegex = /::\d+$/;
    const eventRegistry = {};
    let uidEvent = 1;
    const customEvents = {
      mouseenter: "mouseover",
      mouseleave: "mouseout"
    };
    const nativeEvents = /* @__PURE__ */ new Set(["click", "dblclick", "mouseup", "mousedown", "contextmenu", "mousewheel", "DOMMouseScroll", "mouseover", "mouseout", "mousemove", "selectstart", "selectend", "keydown", "keypress", "keyup", "orientationchange", "touchstart", "touchmove", "touchend", "touchcancel", "pointerdown", "pointermove", "pointerup", "pointerleave", "pointercancel", "gesturestart", "gesturechange", "gestureend", "focus", "blur", "change", "reset", "select", "submit", "focusin", "focusout", "load", "unload", "beforeunload", "resize", "move", "DOMContentLoaded", "readystatechange", "error", "abort", "scroll"]);
    function makeEventUid(element, uid) {
      return uid && `${uid}::${uidEvent++}` || element.uidEvent || uidEvent++;
    }
    function getElementEvents(element) {
      const uid = makeEventUid(element);
      element.uidEvent = uid;
      eventRegistry[uid] = eventRegistry[uid] || {};
      return eventRegistry[uid];
    }
    function bootstrapHandler(element, fn2) {
      return function handler(event) {
        hydrateObj(event, {
          delegateTarget: element
        });
        if (handler.oneOff) {
          EventHandler.off(element, event.type, fn2);
        }
        return fn2.apply(element, [event]);
      };
    }
    function bootstrapDelegationHandler(element, selector, fn2) {
      return function handler(event) {
        const domElements = element.querySelectorAll(selector);
        for (let {
          target
        } = event; target && target !== this; target = target.parentNode) {
          for (const domElement of domElements) {
            if (domElement !== target) {
              continue;
            }
            hydrateObj(event, {
              delegateTarget: target
            });
            if (handler.oneOff) {
              EventHandler.off(element, event.type, selector, fn2);
            }
            return fn2.apply(target, [event]);
          }
        }
      };
    }
    function findHandler(events, callable, delegationSelector = null) {
      return Object.values(events).find((event) => event.callable === callable && event.delegationSelector === delegationSelector);
    }
    function normalizeParameters(originalTypeEvent, handler, delegationFunction) {
      const isDelegated = typeof handler === "string";
      const callable = isDelegated ? delegationFunction : handler || delegationFunction;
      let typeEvent = getTypeEvent(originalTypeEvent);
      if (!nativeEvents.has(typeEvent)) {
        typeEvent = originalTypeEvent;
      }
      return [isDelegated, callable, typeEvent];
    }
    function addHandler(element, originalTypeEvent, handler, delegationFunction, oneOff) {
      if (typeof originalTypeEvent !== "string" || !element) {
        return;
      }
      let [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
      if (originalTypeEvent in customEvents) {
        const wrapFunction = (fn3) => {
          return function(event) {
            if (!event.relatedTarget || event.relatedTarget !== event.delegateTarget && !event.delegateTarget.contains(event.relatedTarget)) {
              return fn3.call(this, event);
            }
          };
        };
        callable = wrapFunction(callable);
      }
      const events = getElementEvents(element);
      const handlers2 = events[typeEvent] || (events[typeEvent] = {});
      const previousFunction = findHandler(handlers2, callable, isDelegated ? handler : null);
      if (previousFunction) {
        previousFunction.oneOff = previousFunction.oneOff && oneOff;
        return;
      }
      const uid = makeEventUid(callable, originalTypeEvent.replace(namespaceRegex, ""));
      const fn2 = isDelegated ? bootstrapDelegationHandler(element, handler, callable) : bootstrapHandler(element, callable);
      fn2.delegationSelector = isDelegated ? handler : null;
      fn2.callable = callable;
      fn2.oneOff = oneOff;
      fn2.uidEvent = uid;
      handlers2[uid] = fn2;
      element.addEventListener(typeEvent, fn2, isDelegated);
    }
    function removeHandler(element, events, typeEvent, handler, delegationSelector) {
      const fn2 = findHandler(events[typeEvent], handler, delegationSelector);
      if (!fn2) {
        return;
      }
      element.removeEventListener(typeEvent, fn2, Boolean(delegationSelector));
      delete events[typeEvent][fn2.uidEvent];
    }
    function removeNamespacedHandlers(element, events, typeEvent, namespace) {
      const storeElementEvent = events[typeEvent] || {};
      for (const [handlerKey, event] of Object.entries(storeElementEvent)) {
        if (handlerKey.includes(namespace)) {
          removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
        }
      }
    }
    function getTypeEvent(event) {
      event = event.replace(stripNameRegex, "");
      return customEvents[event] || event;
    }
    const EventHandler = {
      on(element, event, handler, delegationFunction) {
        addHandler(element, event, handler, delegationFunction, false);
      },
      one(element, event, handler, delegationFunction) {
        addHandler(element, event, handler, delegationFunction, true);
      },
      off(element, originalTypeEvent, handler, delegationFunction) {
        if (typeof originalTypeEvent !== "string" || !element) {
          return;
        }
        const [isDelegated, callable, typeEvent] = normalizeParameters(originalTypeEvent, handler, delegationFunction);
        const inNamespace = typeEvent !== originalTypeEvent;
        const events = getElementEvents(element);
        const storeElementEvent = events[typeEvent] || {};
        const isNamespace = originalTypeEvent.startsWith(".");
        if (typeof callable !== "undefined") {
          if (!Object.keys(storeElementEvent).length) {
            return;
          }
          removeHandler(element, events, typeEvent, callable, isDelegated ? handler : null);
          return;
        }
        if (isNamespace) {
          for (const elementEvent of Object.keys(events)) {
            removeNamespacedHandlers(element, events, elementEvent, originalTypeEvent.slice(1));
          }
        }
        for (const [keyHandlers, event] of Object.entries(storeElementEvent)) {
          const handlerKey = keyHandlers.replace(stripUidRegex, "");
          if (!inNamespace || originalTypeEvent.includes(handlerKey)) {
            removeHandler(element, events, typeEvent, event.callable, event.delegationSelector);
          }
        }
      },
      trigger(element, event, args) {
        if (typeof event !== "string" || !element) {
          return null;
        }
        const $2 = getjQuery();
        const typeEvent = getTypeEvent(event);
        const inNamespace = event !== typeEvent;
        let jQueryEvent = null;
        let bubbles = true;
        let nativeDispatch = true;
        let defaultPrevented = false;
        if (inNamespace && $2) {
          jQueryEvent = $2.Event(event, args);
          $2(element).trigger(jQueryEvent);
          bubbles = !jQueryEvent.isPropagationStopped();
          nativeDispatch = !jQueryEvent.isImmediatePropagationStopped();
          defaultPrevented = jQueryEvent.isDefaultPrevented();
        }
        const evt = hydrateObj(new Event(event, {
          bubbles,
          cancelable: true
        }), args);
        if (defaultPrevented) {
          evt.preventDefault();
        }
        if (nativeDispatch) {
          element.dispatchEvent(evt);
        }
        if (evt.defaultPrevented && jQueryEvent) {
          jQueryEvent.preventDefault();
        }
        return evt;
      }
    };
    function hydrateObj(obj, meta2 = {}) {
      for (const [key2, value] of Object.entries(meta2)) {
        try {
          obj[key2] = value;
        } catch (_unused) {
          Object.defineProperty(obj, key2, {
            configurable: true,
            get() {
              return value;
            }
          });
        }
      }
      return obj;
    }
    function normalizeData(value) {
      if (value === "true") {
        return true;
      }
      if (value === "false") {
        return false;
      }
      if (value === Number(value).toString()) {
        return Number(value);
      }
      if (value === "" || value === "null") {
        return null;
      }
      if (typeof value !== "string") {
        return value;
      }
      try {
        return JSON.parse(decodeURIComponent(value));
      } catch (_unused) {
        return value;
      }
    }
    function normalizeDataKey(key2) {
      return key2.replace(/[A-Z]/g, (chr) => `-${chr.toLowerCase()}`);
    }
    const Manipulator = {
      setDataAttribute(element, key2, value) {
        element.setAttribute(`data-bs-${normalizeDataKey(key2)}`, value);
      },
      removeDataAttribute(element, key2) {
        element.removeAttribute(`data-bs-${normalizeDataKey(key2)}`);
      },
      getDataAttributes(element) {
        if (!element) {
          return {};
        }
        const attributes = {};
        const bsKeys = Object.keys(element.dataset).filter((key2) => key2.startsWith("bs") && !key2.startsWith("bsConfig"));
        for (const key2 of bsKeys) {
          let pureKey = key2.replace(/^bs/, "");
          pureKey = pureKey.charAt(0).toLowerCase() + pureKey.slice(1, pureKey.length);
          attributes[pureKey] = normalizeData(element.dataset[key2]);
        }
        return attributes;
      },
      getDataAttribute(element, key2) {
        return normalizeData(element.getAttribute(`data-bs-${normalizeDataKey(key2)}`));
      }
    };
    class Config {
      // Getters
      static get Default() {
        return {};
      }
      static get DefaultType() {
        return {};
      }
      static get NAME() {
        throw new Error('You have to implement the static method "NAME", for each component!');
      }
      _getConfig(config2) {
        config2 = this._mergeConfigObj(config2);
        config2 = this._configAfterMerge(config2);
        this._typeCheckConfig(config2);
        return config2;
      }
      _configAfterMerge(config2) {
        return config2;
      }
      _mergeConfigObj(config2, element) {
        const jsonConfig = isElement(element) ? Manipulator.getDataAttribute(element, "config") : {};
        return {
          ...this.constructor.Default,
          ...typeof jsonConfig === "object" ? jsonConfig : {},
          ...isElement(element) ? Manipulator.getDataAttributes(element) : {},
          ...typeof config2 === "object" ? config2 : {}
        };
      }
      _typeCheckConfig(config2, configTypes = this.constructor.DefaultType) {
        for (const [property, expectedTypes] of Object.entries(configTypes)) {
          const value = config2[property];
          const valueType = isElement(value) ? "element" : toType(value);
          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new TypeError(`${this.constructor.NAME.toUpperCase()}: Option "${property}" provided type "${valueType}" but expected type "${expectedTypes}".`);
          }
        }
      }
    }
    const VERSION = "5.3.3";
    class BaseComponent extends Config {
      constructor(element, config2) {
        super();
        element = getElement(element);
        if (!element) {
          return;
        }
        this._element = element;
        this._config = this._getConfig(config2);
        Data.set(this._element, this.constructor.DATA_KEY, this);
      }
      // Public
      dispose() {
        Data.remove(this._element, this.constructor.DATA_KEY);
        EventHandler.off(this._element, this.constructor.EVENT_KEY);
        for (const propertyName2 of Object.getOwnPropertyNames(this)) {
          this[propertyName2] = null;
        }
      }
      _queueCallback(callback, element, isAnimated = true) {
        executeAfterTransition(callback, element, isAnimated);
      }
      _getConfig(config2) {
        config2 = this._mergeConfigObj(config2, this._element);
        config2 = this._configAfterMerge(config2);
        this._typeCheckConfig(config2);
        return config2;
      }
      // Static
      static getInstance(element) {
        return Data.get(getElement(element), this.DATA_KEY);
      }
      static getOrCreateInstance(element, config2 = {}) {
        return this.getInstance(element) || new this(element, typeof config2 === "object" ? config2 : null);
      }
      static get VERSION() {
        return VERSION;
      }
      static get DATA_KEY() {
        return `bs.${this.NAME}`;
      }
      static get EVENT_KEY() {
        return `.${this.DATA_KEY}`;
      }
      static eventName(name2) {
        return `${name2}${this.EVENT_KEY}`;
      }
    }
    const getSelector = (element) => {
      let selector = element.getAttribute("data-bs-target");
      if (!selector || selector === "#") {
        let hrefAttribute = element.getAttribute("href");
        if (!hrefAttribute || !hrefAttribute.includes("#") && !hrefAttribute.startsWith(".")) {
          return null;
        }
        if (hrefAttribute.includes("#") && !hrefAttribute.startsWith("#")) {
          hrefAttribute = `#${hrefAttribute.split("#")[1]}`;
        }
        selector = hrefAttribute && hrefAttribute !== "#" ? hrefAttribute.trim() : null;
      }
      return selector ? selector.split(",").map((sel) => parseSelector(sel)).join(",") : null;
    };
    const SelectorEngine = {
      find(selector, element = document.documentElement) {
        return [].concat(...Element.prototype.querySelectorAll.call(element, selector));
      },
      findOne(selector, element = document.documentElement) {
        return Element.prototype.querySelector.call(element, selector);
      },
      children(element, selector) {
        return [].concat(...element.children).filter((child) => child.matches(selector));
      },
      parents(element, selector) {
        const parents = [];
        let ancestor = element.parentNode.closest(selector);
        while (ancestor) {
          parents.push(ancestor);
          ancestor = ancestor.parentNode.closest(selector);
        }
        return parents;
      },
      prev(element, selector) {
        let previous = element.previousElementSibling;
        while (previous) {
          if (previous.matches(selector)) {
            return [previous];
          }
          previous = previous.previousElementSibling;
        }
        return [];
      },
      // TODO: this is now unused; remove later along with prev()
      next(element, selector) {
        let next = element.nextElementSibling;
        while (next) {
          if (next.matches(selector)) {
            return [next];
          }
          next = next.nextElementSibling;
        }
        return [];
      },
      focusableChildren(element) {
        const focusables = ["a", "button", "input", "textarea", "select", "details", "[tabindex]", '[contenteditable="true"]'].map((selector) => `${selector}:not([tabindex^="-"])`).join(",");
        return this.find(focusables, element).filter((el) => !isDisabled(el) && isVisible(el));
      },
      getSelectorFromElement(element) {
        const selector = getSelector(element);
        if (selector) {
          return SelectorEngine.findOne(selector) ? selector : null;
        }
        return null;
      },
      getElementFromSelector(element) {
        const selector = getSelector(element);
        return selector ? SelectorEngine.findOne(selector) : null;
      },
      getMultipleElementsFromSelector(element) {
        const selector = getSelector(element);
        return selector ? SelectorEngine.find(selector) : [];
      }
    };
    const enableDismissTrigger = (component, method = "hide") => {
      const clickEvent = `click.dismiss${component.EVENT_KEY}`;
      const name2 = component.NAME;
      EventHandler.on(document, clickEvent, `[data-bs-dismiss="${name2}"]`, function(event) {
        if (["A", "AREA"].includes(this.tagName)) {
          event.preventDefault();
        }
        if (isDisabled(this)) {
          return;
        }
        const target = SelectorEngine.getElementFromSelector(this) || this.closest(`.${name2}`);
        const instance = component.getOrCreateInstance(target);
        instance[method]();
      });
    };
    const NAME$f = "alert";
    const DATA_KEY$a = "bs.alert";
    const EVENT_KEY$b = `.${DATA_KEY$a}`;
    const EVENT_CLOSE = `close${EVENT_KEY$b}`;
    const EVENT_CLOSED = `closed${EVENT_KEY$b}`;
    const CLASS_NAME_FADE$5 = "fade";
    const CLASS_NAME_SHOW$8 = "show";
    class Alert extends BaseComponent {
      // Getters
      static get NAME() {
        return NAME$f;
      }
      // Public
      close() {
        const closeEvent = EventHandler.trigger(this._element, EVENT_CLOSE);
        if (closeEvent.defaultPrevented) {
          return;
        }
        this._element.classList.remove(CLASS_NAME_SHOW$8);
        const isAnimated = this._element.classList.contains(CLASS_NAME_FADE$5);
        this._queueCallback(() => this._destroyElement(), this._element, isAnimated);
      }
      // Private
      _destroyElement() {
        this._element.remove();
        EventHandler.trigger(this._element, EVENT_CLOSED);
        this.dispose();
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Alert.getOrCreateInstance(this);
          if (typeof config2 !== "string") {
            return;
          }
          if (data[config2] === void 0 || config2.startsWith("_") || config2 === "constructor") {
            throw new TypeError(`No method named "${config2}"`);
          }
          data[config2](this);
        });
      }
    }
    enableDismissTrigger(Alert, "close");
    defineJQueryPlugin(Alert);
    const NAME$e = "button";
    const DATA_KEY$9 = "bs.button";
    const EVENT_KEY$a = `.${DATA_KEY$9}`;
    const DATA_API_KEY$6 = ".data-api";
    const CLASS_NAME_ACTIVE$3 = "active";
    const SELECTOR_DATA_TOGGLE$5 = '[data-bs-toggle="button"]';
    const EVENT_CLICK_DATA_API$6 = `click${EVENT_KEY$a}${DATA_API_KEY$6}`;
    class Button extends BaseComponent {
      // Getters
      static get NAME() {
        return NAME$e;
      }
      // Public
      toggle() {
        this._element.setAttribute("aria-pressed", this._element.classList.toggle(CLASS_NAME_ACTIVE$3));
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Button.getOrCreateInstance(this);
          if (config2 === "toggle") {
            data[config2]();
          }
        });
      }
    }
    EventHandler.on(document, EVENT_CLICK_DATA_API$6, SELECTOR_DATA_TOGGLE$5, (event) => {
      event.preventDefault();
      const button = event.target.closest(SELECTOR_DATA_TOGGLE$5);
      const data = Button.getOrCreateInstance(button);
      data.toggle();
    });
    defineJQueryPlugin(Button);
    const NAME$d = "swipe";
    const EVENT_KEY$9 = ".bs.swipe";
    const EVENT_TOUCHSTART = `touchstart${EVENT_KEY$9}`;
    const EVENT_TOUCHMOVE = `touchmove${EVENT_KEY$9}`;
    const EVENT_TOUCHEND = `touchend${EVENT_KEY$9}`;
    const EVENT_POINTERDOWN = `pointerdown${EVENT_KEY$9}`;
    const EVENT_POINTERUP = `pointerup${EVENT_KEY$9}`;
    const POINTER_TYPE_TOUCH = "touch";
    const POINTER_TYPE_PEN = "pen";
    const CLASS_NAME_POINTER_EVENT = "pointer-event";
    const SWIPE_THRESHOLD = 40;
    const Default$c = {
      endCallback: null,
      leftCallback: null,
      rightCallback: null
    };
    const DefaultType$c = {
      endCallback: "(function|null)",
      leftCallback: "(function|null)",
      rightCallback: "(function|null)"
    };
    class Swipe extends Config {
      constructor(element, config2) {
        super();
        this._element = element;
        if (!element || !Swipe.isSupported()) {
          return;
        }
        this._config = this._getConfig(config2);
        this._deltaX = 0;
        this._supportPointerEvents = Boolean(window.PointerEvent);
        this._initEvents();
      }
      // Getters
      static get Default() {
        return Default$c;
      }
      static get DefaultType() {
        return DefaultType$c;
      }
      static get NAME() {
        return NAME$d;
      }
      // Public
      dispose() {
        EventHandler.off(this._element, EVENT_KEY$9);
      }
      // Private
      _start(event) {
        if (!this._supportPointerEvents) {
          this._deltaX = event.touches[0].clientX;
          return;
        }
        if (this._eventIsPointerPenTouch(event)) {
          this._deltaX = event.clientX;
        }
      }
      _end(event) {
        if (this._eventIsPointerPenTouch(event)) {
          this._deltaX = event.clientX - this._deltaX;
        }
        this._handleSwipe();
        execute(this._config.endCallback);
      }
      _move(event) {
        this._deltaX = event.touches && event.touches.length > 1 ? 0 : event.touches[0].clientX - this._deltaX;
      }
      _handleSwipe() {
        const absDeltaX = Math.abs(this._deltaX);
        if (absDeltaX <= SWIPE_THRESHOLD) {
          return;
        }
        const direction = absDeltaX / this._deltaX;
        this._deltaX = 0;
        if (!direction) {
          return;
        }
        execute(direction > 0 ? this._config.rightCallback : this._config.leftCallback);
      }
      _initEvents() {
        if (this._supportPointerEvents) {
          EventHandler.on(this._element, EVENT_POINTERDOWN, (event) => this._start(event));
          EventHandler.on(this._element, EVENT_POINTERUP, (event) => this._end(event));
          this._element.classList.add(CLASS_NAME_POINTER_EVENT);
        } else {
          EventHandler.on(this._element, EVENT_TOUCHSTART, (event) => this._start(event));
          EventHandler.on(this._element, EVENT_TOUCHMOVE, (event) => this._move(event));
          EventHandler.on(this._element, EVENT_TOUCHEND, (event) => this._end(event));
        }
      }
      _eventIsPointerPenTouch(event) {
        return this._supportPointerEvents && (event.pointerType === POINTER_TYPE_PEN || event.pointerType === POINTER_TYPE_TOUCH);
      }
      // Static
      static isSupported() {
        return "ontouchstart" in document.documentElement || navigator.maxTouchPoints > 0;
      }
    }
    const NAME$c = "carousel";
    const DATA_KEY$8 = "bs.carousel";
    const EVENT_KEY$8 = `.${DATA_KEY$8}`;
    const DATA_API_KEY$5 = ".data-api";
    const ARROW_LEFT_KEY$1 = "ArrowLeft";
    const ARROW_RIGHT_KEY$1 = "ArrowRight";
    const TOUCHEVENT_COMPAT_WAIT = 500;
    const ORDER_NEXT = "next";
    const ORDER_PREV = "prev";
    const DIRECTION_LEFT = "left";
    const DIRECTION_RIGHT = "right";
    const EVENT_SLIDE = `slide${EVENT_KEY$8}`;
    const EVENT_SLID = `slid${EVENT_KEY$8}`;
    const EVENT_KEYDOWN$1 = `keydown${EVENT_KEY$8}`;
    const EVENT_MOUSEENTER$1 = `mouseenter${EVENT_KEY$8}`;
    const EVENT_MOUSELEAVE$1 = `mouseleave${EVENT_KEY$8}`;
    const EVENT_DRAG_START = `dragstart${EVENT_KEY$8}`;
    const EVENT_LOAD_DATA_API$3 = `load${EVENT_KEY$8}${DATA_API_KEY$5}`;
    const EVENT_CLICK_DATA_API$5 = `click${EVENT_KEY$8}${DATA_API_KEY$5}`;
    const CLASS_NAME_CAROUSEL = "carousel";
    const CLASS_NAME_ACTIVE$2 = "active";
    const CLASS_NAME_SLIDE = "slide";
    const CLASS_NAME_END = "carousel-item-end";
    const CLASS_NAME_START = "carousel-item-start";
    const CLASS_NAME_NEXT = "carousel-item-next";
    const CLASS_NAME_PREV = "carousel-item-prev";
    const SELECTOR_ACTIVE = ".active";
    const SELECTOR_ITEM = ".carousel-item";
    const SELECTOR_ACTIVE_ITEM = SELECTOR_ACTIVE + SELECTOR_ITEM;
    const SELECTOR_ITEM_IMG = ".carousel-item img";
    const SELECTOR_INDICATORS = ".carousel-indicators";
    const SELECTOR_DATA_SLIDE = "[data-bs-slide], [data-bs-slide-to]";
    const SELECTOR_DATA_RIDE = '[data-bs-ride="carousel"]';
    const KEY_TO_DIRECTION = {
      [ARROW_LEFT_KEY$1]: DIRECTION_RIGHT,
      [ARROW_RIGHT_KEY$1]: DIRECTION_LEFT
    };
    const Default$b = {
      interval: 5e3,
      keyboard: true,
      pause: "hover",
      ride: false,
      touch: true,
      wrap: true
    };
    const DefaultType$b = {
      interval: "(number|boolean)",
      // TODO:v6 remove boolean support
      keyboard: "boolean",
      pause: "(string|boolean)",
      ride: "(boolean|string)",
      touch: "boolean",
      wrap: "boolean"
    };
    class Carousel extends BaseComponent {
      constructor(element, config2) {
        super(element, config2);
        this._interval = null;
        this._activeElement = null;
        this._isSliding = false;
        this.touchTimeout = null;
        this._swipeHelper = null;
        this._indicatorsElement = SelectorEngine.findOne(SELECTOR_INDICATORS, this._element);
        this._addEventListeners();
        if (this._config.ride === CLASS_NAME_CAROUSEL) {
          this.cycle();
        }
      }
      // Getters
      static get Default() {
        return Default$b;
      }
      static get DefaultType() {
        return DefaultType$b;
      }
      static get NAME() {
        return NAME$c;
      }
      // Public
      next() {
        this._slide(ORDER_NEXT);
      }
      nextWhenVisible() {
        if (!document.hidden && isVisible(this._element)) {
          this.next();
        }
      }
      prev() {
        this._slide(ORDER_PREV);
      }
      pause() {
        if (this._isSliding) {
          triggerTransitionEnd(this._element);
        }
        this._clearInterval();
      }
      cycle() {
        this._clearInterval();
        this._updateInterval();
        this._interval = setInterval(() => this.nextWhenVisible(), this._config.interval);
      }
      _maybeEnableCycle() {
        if (!this._config.ride) {
          return;
        }
        if (this._isSliding) {
          EventHandler.one(this._element, EVENT_SLID, () => this.cycle());
          return;
        }
        this.cycle();
      }
      to(index) {
        const items = this._getItems();
        if (index > items.length - 1 || index < 0) {
          return;
        }
        if (this._isSliding) {
          EventHandler.one(this._element, EVENT_SLID, () => this.to(index));
          return;
        }
        const activeIndex = this._getItemIndex(this._getActive());
        if (activeIndex === index) {
          return;
        }
        const order2 = index > activeIndex ? ORDER_NEXT : ORDER_PREV;
        this._slide(order2, items[index]);
      }
      dispose() {
        if (this._swipeHelper) {
          this._swipeHelper.dispose();
        }
        super.dispose();
      }
      // Private
      _configAfterMerge(config2) {
        config2.defaultInterval = config2.interval;
        return config2;
      }
      _addEventListeners() {
        if (this._config.keyboard) {
          EventHandler.on(this._element, EVENT_KEYDOWN$1, (event) => this._keydown(event));
        }
        if (this._config.pause === "hover") {
          EventHandler.on(this._element, EVENT_MOUSEENTER$1, () => this.pause());
          EventHandler.on(this._element, EVENT_MOUSELEAVE$1, () => this._maybeEnableCycle());
        }
        if (this._config.touch && Swipe.isSupported()) {
          this._addTouchEventListeners();
        }
      }
      _addTouchEventListeners() {
        for (const img of SelectorEngine.find(SELECTOR_ITEM_IMG, this._element)) {
          EventHandler.on(img, EVENT_DRAG_START, (event) => event.preventDefault());
        }
        const endCallBack = () => {
          if (this._config.pause !== "hover") {
            return;
          }
          this.pause();
          if (this.touchTimeout) {
            clearTimeout(this.touchTimeout);
          }
          this.touchTimeout = setTimeout(() => this._maybeEnableCycle(), TOUCHEVENT_COMPAT_WAIT + this._config.interval);
        };
        const swipeConfig = {
          leftCallback: () => this._slide(this._directionToOrder(DIRECTION_LEFT)),
          rightCallback: () => this._slide(this._directionToOrder(DIRECTION_RIGHT)),
          endCallback: endCallBack
        };
        this._swipeHelper = new Swipe(this._element, swipeConfig);
      }
      _keydown(event) {
        if (/input|textarea/i.test(event.target.tagName)) {
          return;
        }
        const direction = KEY_TO_DIRECTION[event.key];
        if (direction) {
          event.preventDefault();
          this._slide(this._directionToOrder(direction));
        }
      }
      _getItemIndex(element) {
        return this._getItems().indexOf(element);
      }
      _setActiveIndicatorElement(index) {
        if (!this._indicatorsElement) {
          return;
        }
        const activeIndicator = SelectorEngine.findOne(SELECTOR_ACTIVE, this._indicatorsElement);
        activeIndicator.classList.remove(CLASS_NAME_ACTIVE$2);
        activeIndicator.removeAttribute("aria-current");
        const newActiveIndicator = SelectorEngine.findOne(`[data-bs-slide-to="${index}"]`, this._indicatorsElement);
        if (newActiveIndicator) {
          newActiveIndicator.classList.add(CLASS_NAME_ACTIVE$2);
          newActiveIndicator.setAttribute("aria-current", "true");
        }
      }
      _updateInterval() {
        const element = this._activeElement || this._getActive();
        if (!element) {
          return;
        }
        const elementInterval = Number.parseInt(element.getAttribute("data-bs-interval"), 10);
        this._config.interval = elementInterval || this._config.defaultInterval;
      }
      _slide(order2, element = null) {
        if (this._isSliding) {
          return;
        }
        const activeElement = this._getActive();
        const isNext = order2 === ORDER_NEXT;
        const nextElement = element || getNextActiveElement(this._getItems(), activeElement, isNext, this._config.wrap);
        if (nextElement === activeElement) {
          return;
        }
        const nextElementIndex = this._getItemIndex(nextElement);
        const triggerEvent = (eventName) => {
          return EventHandler.trigger(this._element, eventName, {
            relatedTarget: nextElement,
            direction: this._orderToDirection(order2),
            from: this._getItemIndex(activeElement),
            to: nextElementIndex
          });
        };
        const slideEvent = triggerEvent(EVENT_SLIDE);
        if (slideEvent.defaultPrevented) {
          return;
        }
        if (!activeElement || !nextElement) {
          return;
        }
        const isCycling = Boolean(this._interval);
        this.pause();
        this._isSliding = true;
        this._setActiveIndicatorElement(nextElementIndex);
        this._activeElement = nextElement;
        const directionalClassName = isNext ? CLASS_NAME_START : CLASS_NAME_END;
        const orderClassName = isNext ? CLASS_NAME_NEXT : CLASS_NAME_PREV;
        nextElement.classList.add(orderClassName);
        reflow(nextElement);
        activeElement.classList.add(directionalClassName);
        nextElement.classList.add(directionalClassName);
        const completeCallBack = () => {
          nextElement.classList.remove(directionalClassName, orderClassName);
          nextElement.classList.add(CLASS_NAME_ACTIVE$2);
          activeElement.classList.remove(CLASS_NAME_ACTIVE$2, orderClassName, directionalClassName);
          this._isSliding = false;
          triggerEvent(EVENT_SLID);
        };
        this._queueCallback(completeCallBack, activeElement, this._isAnimated());
        if (isCycling) {
          this.cycle();
        }
      }
      _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_SLIDE);
      }
      _getActive() {
        return SelectorEngine.findOne(SELECTOR_ACTIVE_ITEM, this._element);
      }
      _getItems() {
        return SelectorEngine.find(SELECTOR_ITEM, this._element);
      }
      _clearInterval() {
        if (this._interval) {
          clearInterval(this._interval);
          this._interval = null;
        }
      }
      _directionToOrder(direction) {
        if (isRTL()) {
          return direction === DIRECTION_LEFT ? ORDER_PREV : ORDER_NEXT;
        }
        return direction === DIRECTION_LEFT ? ORDER_NEXT : ORDER_PREV;
      }
      _orderToDirection(order2) {
        if (isRTL()) {
          return order2 === ORDER_PREV ? DIRECTION_LEFT : DIRECTION_RIGHT;
        }
        return order2 === ORDER_PREV ? DIRECTION_RIGHT : DIRECTION_LEFT;
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Carousel.getOrCreateInstance(this, config2);
          if (typeof config2 === "number") {
            data.to(config2);
            return;
          }
          if (typeof config2 === "string") {
            if (data[config2] === void 0 || config2.startsWith("_") || config2 === "constructor") {
              throw new TypeError(`No method named "${config2}"`);
            }
            data[config2]();
          }
        });
      }
    }
    EventHandler.on(document, EVENT_CLICK_DATA_API$5, SELECTOR_DATA_SLIDE, function(event) {
      const target = SelectorEngine.getElementFromSelector(this);
      if (!target || !target.classList.contains(CLASS_NAME_CAROUSEL)) {
        return;
      }
      event.preventDefault();
      const carousel = Carousel.getOrCreateInstance(target);
      const slideIndex = this.getAttribute("data-bs-slide-to");
      if (slideIndex) {
        carousel.to(slideIndex);
        carousel._maybeEnableCycle();
        return;
      }
      if (Manipulator.getDataAttribute(this, "slide") === "next") {
        carousel.next();
        carousel._maybeEnableCycle();
        return;
      }
      carousel.prev();
      carousel._maybeEnableCycle();
    });
    EventHandler.on(window, EVENT_LOAD_DATA_API$3, () => {
      const carousels = SelectorEngine.find(SELECTOR_DATA_RIDE);
      for (const carousel of carousels) {
        Carousel.getOrCreateInstance(carousel);
      }
    });
    defineJQueryPlugin(Carousel);
    const NAME$b = "collapse";
    const DATA_KEY$7 = "bs.collapse";
    const EVENT_KEY$7 = `.${DATA_KEY$7}`;
    const DATA_API_KEY$4 = ".data-api";
    const EVENT_SHOW$6 = `show${EVENT_KEY$7}`;
    const EVENT_SHOWN$6 = `shown${EVENT_KEY$7}`;
    const EVENT_HIDE$6 = `hide${EVENT_KEY$7}`;
    const EVENT_HIDDEN$6 = `hidden${EVENT_KEY$7}`;
    const EVENT_CLICK_DATA_API$4 = `click${EVENT_KEY$7}${DATA_API_KEY$4}`;
    const CLASS_NAME_SHOW$7 = "show";
    const CLASS_NAME_COLLAPSE = "collapse";
    const CLASS_NAME_COLLAPSING = "collapsing";
    const CLASS_NAME_COLLAPSED = "collapsed";
    const CLASS_NAME_DEEPER_CHILDREN = `:scope .${CLASS_NAME_COLLAPSE} .${CLASS_NAME_COLLAPSE}`;
    const CLASS_NAME_HORIZONTAL = "collapse-horizontal";
    const WIDTH = "width";
    const HEIGHT = "height";
    const SELECTOR_ACTIVES = ".collapse.show, .collapse.collapsing";
    const SELECTOR_DATA_TOGGLE$4 = '[data-bs-toggle="collapse"]';
    const Default$a = {
      parent: null,
      toggle: true
    };
    const DefaultType$a = {
      parent: "(null|element)",
      toggle: "boolean"
    };
    class Collapse extends BaseComponent {
      constructor(element, config2) {
        super(element, config2);
        this._isTransitioning = false;
        this._triggerArray = [];
        const toggleList = SelectorEngine.find(SELECTOR_DATA_TOGGLE$4);
        for (const elem of toggleList) {
          const selector = SelectorEngine.getSelectorFromElement(elem);
          const filterElement = SelectorEngine.find(selector).filter((foundElement) => foundElement === this._element);
          if (selector !== null && filterElement.length) {
            this._triggerArray.push(elem);
          }
        }
        this._initializeChildren();
        if (!this._config.parent) {
          this._addAriaAndCollapsedClass(this._triggerArray, this._isShown());
        }
        if (this._config.toggle) {
          this.toggle();
        }
      }
      // Getters
      static get Default() {
        return Default$a;
      }
      static get DefaultType() {
        return DefaultType$a;
      }
      static get NAME() {
        return NAME$b;
      }
      // Public
      toggle() {
        if (this._isShown()) {
          this.hide();
        } else {
          this.show();
        }
      }
      show() {
        if (this._isTransitioning || this._isShown()) {
          return;
        }
        let activeChildren = [];
        if (this._config.parent) {
          activeChildren = this._getFirstLevelChildren(SELECTOR_ACTIVES).filter((element) => element !== this._element).map((element) => Collapse.getOrCreateInstance(element, {
            toggle: false
          }));
        }
        if (activeChildren.length && activeChildren[0]._isTransitioning) {
          return;
        }
        const startEvent = EventHandler.trigger(this._element, EVENT_SHOW$6);
        if (startEvent.defaultPrevented) {
          return;
        }
        for (const activeInstance of activeChildren) {
          activeInstance.hide();
        }
        const dimension = this._getDimension();
        this._element.classList.remove(CLASS_NAME_COLLAPSE);
        this._element.classList.add(CLASS_NAME_COLLAPSING);
        this._element.style[dimension] = 0;
        this._addAriaAndCollapsedClass(this._triggerArray, true);
        this._isTransitioning = true;
        const complete = () => {
          this._isTransitioning = false;
          this._element.classList.remove(CLASS_NAME_COLLAPSING);
          this._element.classList.add(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
          this._element.style[dimension] = "";
          EventHandler.trigger(this._element, EVENT_SHOWN$6);
        };
        const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
        const scrollSize = `scroll${capitalizedDimension}`;
        this._queueCallback(complete, this._element, true);
        this._element.style[dimension] = `${this._element[scrollSize]}px`;
      }
      hide() {
        if (this._isTransitioning || !this._isShown()) {
          return;
        }
        const startEvent = EventHandler.trigger(this._element, EVENT_HIDE$6);
        if (startEvent.defaultPrevented) {
          return;
        }
        const dimension = this._getDimension();
        this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_COLLAPSING);
        this._element.classList.remove(CLASS_NAME_COLLAPSE, CLASS_NAME_SHOW$7);
        for (const trigger of this._triggerArray) {
          const element = SelectorEngine.getElementFromSelector(trigger);
          if (element && !this._isShown(element)) {
            this._addAriaAndCollapsedClass([trigger], false);
          }
        }
        this._isTransitioning = true;
        const complete = () => {
          this._isTransitioning = false;
          this._element.classList.remove(CLASS_NAME_COLLAPSING);
          this._element.classList.add(CLASS_NAME_COLLAPSE);
          EventHandler.trigger(this._element, EVENT_HIDDEN$6);
        };
        this._element.style[dimension] = "";
        this._queueCallback(complete, this._element, true);
      }
      _isShown(element = this._element) {
        return element.classList.contains(CLASS_NAME_SHOW$7);
      }
      // Private
      _configAfterMerge(config2) {
        config2.toggle = Boolean(config2.toggle);
        config2.parent = getElement(config2.parent);
        return config2;
      }
      _getDimension() {
        return this._element.classList.contains(CLASS_NAME_HORIZONTAL) ? WIDTH : HEIGHT;
      }
      _initializeChildren() {
        if (!this._config.parent) {
          return;
        }
        const children2 = this._getFirstLevelChildren(SELECTOR_DATA_TOGGLE$4);
        for (const element of children2) {
          const selected = SelectorEngine.getElementFromSelector(element);
          if (selected) {
            this._addAriaAndCollapsedClass([element], this._isShown(selected));
          }
        }
      }
      _getFirstLevelChildren(selector) {
        const children2 = SelectorEngine.find(CLASS_NAME_DEEPER_CHILDREN, this._config.parent);
        return SelectorEngine.find(selector, this._config.parent).filter((element) => !children2.includes(element));
      }
      _addAriaAndCollapsedClass(triggerArray, isOpen) {
        if (!triggerArray.length) {
          return;
        }
        for (const element of triggerArray) {
          element.classList.toggle(CLASS_NAME_COLLAPSED, !isOpen);
          element.setAttribute("aria-expanded", isOpen);
        }
      }
      // Static
      static jQueryInterface(config2) {
        const _config = {};
        if (typeof config2 === "string" && /show|hide/.test(config2)) {
          _config.toggle = false;
        }
        return this.each(function() {
          const data = Collapse.getOrCreateInstance(this, _config);
          if (typeof config2 === "string") {
            if (typeof data[config2] === "undefined") {
              throw new TypeError(`No method named "${config2}"`);
            }
            data[config2]();
          }
        });
      }
    }
    EventHandler.on(document, EVENT_CLICK_DATA_API$4, SELECTOR_DATA_TOGGLE$4, function(event) {
      if (event.target.tagName === "A" || event.delegateTarget && event.delegateTarget.tagName === "A") {
        event.preventDefault();
      }
      for (const element of SelectorEngine.getMultipleElementsFromSelector(this)) {
        Collapse.getOrCreateInstance(element, {
          toggle: false
        }).toggle();
      }
    });
    defineJQueryPlugin(Collapse);
    const NAME$a = "dropdown";
    const DATA_KEY$6 = "bs.dropdown";
    const EVENT_KEY$6 = `.${DATA_KEY$6}`;
    const DATA_API_KEY$3 = ".data-api";
    const ESCAPE_KEY$2 = "Escape";
    const TAB_KEY$1 = "Tab";
    const ARROW_UP_KEY$1 = "ArrowUp";
    const ARROW_DOWN_KEY$1 = "ArrowDown";
    const RIGHT_MOUSE_BUTTON = 2;
    const EVENT_HIDE$5 = `hide${EVENT_KEY$6}`;
    const EVENT_HIDDEN$5 = `hidden${EVENT_KEY$6}`;
    const EVENT_SHOW$5 = `show${EVENT_KEY$6}`;
    const EVENT_SHOWN$5 = `shown${EVENT_KEY$6}`;
    const EVENT_CLICK_DATA_API$3 = `click${EVENT_KEY$6}${DATA_API_KEY$3}`;
    const EVENT_KEYDOWN_DATA_API = `keydown${EVENT_KEY$6}${DATA_API_KEY$3}`;
    const EVENT_KEYUP_DATA_API = `keyup${EVENT_KEY$6}${DATA_API_KEY$3}`;
    const CLASS_NAME_SHOW$6 = "show";
    const CLASS_NAME_DROPUP = "dropup";
    const CLASS_NAME_DROPEND = "dropend";
    const CLASS_NAME_DROPSTART = "dropstart";
    const CLASS_NAME_DROPUP_CENTER = "dropup-center";
    const CLASS_NAME_DROPDOWN_CENTER = "dropdown-center";
    const SELECTOR_DATA_TOGGLE$3 = '[data-bs-toggle="dropdown"]:not(.disabled):not(:disabled)';
    const SELECTOR_DATA_TOGGLE_SHOWN = `${SELECTOR_DATA_TOGGLE$3}.${CLASS_NAME_SHOW$6}`;
    const SELECTOR_MENU = ".dropdown-menu";
    const SELECTOR_NAVBAR = ".navbar";
    const SELECTOR_NAVBAR_NAV = ".navbar-nav";
    const SELECTOR_VISIBLE_ITEMS = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)";
    const PLACEMENT_TOP = isRTL() ? "top-end" : "top-start";
    const PLACEMENT_TOPEND = isRTL() ? "top-start" : "top-end";
    const PLACEMENT_BOTTOM = isRTL() ? "bottom-end" : "bottom-start";
    const PLACEMENT_BOTTOMEND = isRTL() ? "bottom-start" : "bottom-end";
    const PLACEMENT_RIGHT = isRTL() ? "left-start" : "right-start";
    const PLACEMENT_LEFT = isRTL() ? "right-start" : "left-start";
    const PLACEMENT_TOPCENTER = "top";
    const PLACEMENT_BOTTOMCENTER = "bottom";
    const Default$9 = {
      autoClose: true,
      boundary: "clippingParents",
      display: "dynamic",
      offset: [0, 2],
      popperConfig: null,
      reference: "toggle"
    };
    const DefaultType$9 = {
      autoClose: "(boolean|string)",
      boundary: "(string|element)",
      display: "string",
      offset: "(array|string|function)",
      popperConfig: "(null|object|function)",
      reference: "(string|element|object)"
    };
    class Dropdown extends BaseComponent {
      constructor(element, config2) {
        super(element, config2);
        this._popper = null;
        this._parent = this._element.parentNode;
        this._menu = SelectorEngine.next(this._element, SELECTOR_MENU)[0] || SelectorEngine.prev(this._element, SELECTOR_MENU)[0] || SelectorEngine.findOne(SELECTOR_MENU, this._parent);
        this._inNavbar = this._detectNavbar();
      }
      // Getters
      static get Default() {
        return Default$9;
      }
      static get DefaultType() {
        return DefaultType$9;
      }
      static get NAME() {
        return NAME$a;
      }
      // Public
      toggle() {
        return this._isShown() ? this.hide() : this.show();
      }
      show() {
        if (isDisabled(this._element) || this._isShown()) {
          return;
        }
        const relatedTarget = {
          relatedTarget: this._element
        };
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$5, relatedTarget);
        if (showEvent.defaultPrevented) {
          return;
        }
        this._createPopper();
        if ("ontouchstart" in document.documentElement && !this._parent.closest(SELECTOR_NAVBAR_NAV)) {
          for (const element of [].concat(...document.body.children)) {
            EventHandler.on(element, "mouseover", noop);
          }
        }
        this._element.focus();
        this._element.setAttribute("aria-expanded", true);
        this._menu.classList.add(CLASS_NAME_SHOW$6);
        this._element.classList.add(CLASS_NAME_SHOW$6);
        EventHandler.trigger(this._element, EVENT_SHOWN$5, relatedTarget);
      }
      hide() {
        if (isDisabled(this._element) || !this._isShown()) {
          return;
        }
        const relatedTarget = {
          relatedTarget: this._element
        };
        this._completeHide(relatedTarget);
      }
      dispose() {
        if (this._popper) {
          this._popper.destroy();
        }
        super.dispose();
      }
      update() {
        this._inNavbar = this._detectNavbar();
        if (this._popper) {
          this._popper.update();
        }
      }
      // Private
      _completeHide(relatedTarget) {
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$5, relatedTarget);
        if (hideEvent.defaultPrevented) {
          return;
        }
        if ("ontouchstart" in document.documentElement) {
          for (const element of [].concat(...document.body.children)) {
            EventHandler.off(element, "mouseover", noop);
          }
        }
        if (this._popper) {
          this._popper.destroy();
        }
        this._menu.classList.remove(CLASS_NAME_SHOW$6);
        this._element.classList.remove(CLASS_NAME_SHOW$6);
        this._element.setAttribute("aria-expanded", "false");
        Manipulator.removeDataAttribute(this._menu, "popper");
        EventHandler.trigger(this._element, EVENT_HIDDEN$5, relatedTarget);
      }
      _getConfig(config2) {
        config2 = super._getConfig(config2);
        if (typeof config2.reference === "object" && !isElement(config2.reference) && typeof config2.reference.getBoundingClientRect !== "function") {
          throw new TypeError(`${NAME$a.toUpperCase()}: Option "reference" provided type "object" without a required "getBoundingClientRect" method.`);
        }
        return config2;
      }
      _createPopper() {
        if (typeof Popper === "undefined") {
          throw new TypeError("Bootstrap's dropdowns require Popper (https://popper.js.org)");
        }
        let referenceElement = this._element;
        if (this._config.reference === "parent") {
          referenceElement = this._parent;
        } else if (isElement(this._config.reference)) {
          referenceElement = getElement(this._config.reference);
        } else if (typeof this._config.reference === "object") {
          referenceElement = this._config.reference;
        }
        const popperConfig = this._getPopperConfig();
        this._popper = createPopper(referenceElement, this._menu, popperConfig);
      }
      _isShown() {
        return this._menu.classList.contains(CLASS_NAME_SHOW$6);
      }
      _getPlacement() {
        const parentDropdown = this._parent;
        if (parentDropdown.classList.contains(CLASS_NAME_DROPEND)) {
          return PLACEMENT_RIGHT;
        }
        if (parentDropdown.classList.contains(CLASS_NAME_DROPSTART)) {
          return PLACEMENT_LEFT;
        }
        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP_CENTER)) {
          return PLACEMENT_TOPCENTER;
        }
        if (parentDropdown.classList.contains(CLASS_NAME_DROPDOWN_CENTER)) {
          return PLACEMENT_BOTTOMCENTER;
        }
        const isEnd = getComputedStyle(this._menu).getPropertyValue("--bs-position").trim() === "end";
        if (parentDropdown.classList.contains(CLASS_NAME_DROPUP)) {
          return isEnd ? PLACEMENT_TOPEND : PLACEMENT_TOP;
        }
        return isEnd ? PLACEMENT_BOTTOMEND : PLACEMENT_BOTTOM;
      }
      _detectNavbar() {
        return this._element.closest(SELECTOR_NAVBAR) !== null;
      }
      _getOffset() {
        const {
          offset: offset2
        } = this._config;
        if (typeof offset2 === "string") {
          return offset2.split(",").map((value) => Number.parseInt(value, 10));
        }
        if (typeof offset2 === "function") {
          return (popperData) => offset2(popperData, this._element);
        }
        return offset2;
      }
      _getPopperConfig() {
        const defaultBsPopperConfig = {
          placement: this._getPlacement(),
          modifiers: [{
            name: "preventOverflow",
            options: {
              boundary: this._config.boundary
            }
          }, {
            name: "offset",
            options: {
              offset: this._getOffset()
            }
          }]
        };
        if (this._inNavbar || this._config.display === "static") {
          Manipulator.setDataAttribute(this._menu, "popper", "static");
          defaultBsPopperConfig.modifiers = [{
            name: "applyStyles",
            enabled: false
          }];
        }
        return {
          ...defaultBsPopperConfig,
          ...execute(this._config.popperConfig, [defaultBsPopperConfig])
        };
      }
      _selectMenuItem({
        key: key2,
        target
      }) {
        const items = SelectorEngine.find(SELECTOR_VISIBLE_ITEMS, this._menu).filter((element) => isVisible(element));
        if (!items.length) {
          return;
        }
        getNextActiveElement(items, target, key2 === ARROW_DOWN_KEY$1, !items.includes(target)).focus();
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Dropdown.getOrCreateInstance(this, config2);
          if (typeof config2 !== "string") {
            return;
          }
          if (typeof data[config2] === "undefined") {
            throw new TypeError(`No method named "${config2}"`);
          }
          data[config2]();
        });
      }
      static clearMenus(event) {
        if (event.button === RIGHT_MOUSE_BUTTON || event.type === "keyup" && event.key !== TAB_KEY$1) {
          return;
        }
        const openToggles = SelectorEngine.find(SELECTOR_DATA_TOGGLE_SHOWN);
        for (const toggle of openToggles) {
          const context = Dropdown.getInstance(toggle);
          if (!context || context._config.autoClose === false) {
            continue;
          }
          const composedPath = event.composedPath();
          const isMenuTarget = composedPath.includes(context._menu);
          if (composedPath.includes(context._element) || context._config.autoClose === "inside" && !isMenuTarget || context._config.autoClose === "outside" && isMenuTarget) {
            continue;
          }
          if (context._menu.contains(event.target) && (event.type === "keyup" && event.key === TAB_KEY$1 || /input|select|option|textarea|form/i.test(event.target.tagName))) {
            continue;
          }
          const relatedTarget = {
            relatedTarget: context._element
          };
          if (event.type === "click") {
            relatedTarget.clickEvent = event;
          }
          context._completeHide(relatedTarget);
        }
      }
      static dataApiKeydownHandler(event) {
        const isInput = /input|textarea/i.test(event.target.tagName);
        const isEscapeEvent = event.key === ESCAPE_KEY$2;
        const isUpOrDownEvent = [ARROW_UP_KEY$1, ARROW_DOWN_KEY$1].includes(event.key);
        if (!isUpOrDownEvent && !isEscapeEvent) {
          return;
        }
        if (isInput && !isEscapeEvent) {
          return;
        }
        event.preventDefault();
        const getToggleButton = this.matches(SELECTOR_DATA_TOGGLE$3) ? this : SelectorEngine.prev(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.next(this, SELECTOR_DATA_TOGGLE$3)[0] || SelectorEngine.findOne(SELECTOR_DATA_TOGGLE$3, event.delegateTarget.parentNode);
        const instance = Dropdown.getOrCreateInstance(getToggleButton);
        if (isUpOrDownEvent) {
          event.stopPropagation();
          instance.show();
          instance._selectMenuItem(event);
          return;
        }
        if (instance._isShown()) {
          event.stopPropagation();
          instance.hide();
          getToggleButton.focus();
        }
      }
    }
    EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_DATA_TOGGLE$3, Dropdown.dataApiKeydownHandler);
    EventHandler.on(document, EVENT_KEYDOWN_DATA_API, SELECTOR_MENU, Dropdown.dataApiKeydownHandler);
    EventHandler.on(document, EVENT_CLICK_DATA_API$3, Dropdown.clearMenus);
    EventHandler.on(document, EVENT_KEYUP_DATA_API, Dropdown.clearMenus);
    EventHandler.on(document, EVENT_CLICK_DATA_API$3, SELECTOR_DATA_TOGGLE$3, function(event) {
      event.preventDefault();
      Dropdown.getOrCreateInstance(this).toggle();
    });
    defineJQueryPlugin(Dropdown);
    const NAME$9 = "backdrop";
    const CLASS_NAME_FADE$4 = "fade";
    const CLASS_NAME_SHOW$5 = "show";
    const EVENT_MOUSEDOWN = `mousedown.bs.${NAME$9}`;
    const Default$8 = {
      className: "modal-backdrop",
      clickCallback: null,
      isAnimated: false,
      isVisible: true,
      // if false, we use the backdrop helper without adding any element to the dom
      rootElement: "body"
      // give the choice to place backdrop under different elements
    };
    const DefaultType$8 = {
      className: "string",
      clickCallback: "(function|null)",
      isAnimated: "boolean",
      isVisible: "boolean",
      rootElement: "(element|string)"
    };
    class Backdrop extends Config {
      constructor(config2) {
        super();
        this._config = this._getConfig(config2);
        this._isAppended = false;
        this._element = null;
      }
      // Getters
      static get Default() {
        return Default$8;
      }
      static get DefaultType() {
        return DefaultType$8;
      }
      static get NAME() {
        return NAME$9;
      }
      // Public
      show(callback) {
        if (!this._config.isVisible) {
          execute(callback);
          return;
        }
        this._append();
        const element = this._getElement();
        if (this._config.isAnimated) {
          reflow(element);
        }
        element.classList.add(CLASS_NAME_SHOW$5);
        this._emulateAnimation(() => {
          execute(callback);
        });
      }
      hide(callback) {
        if (!this._config.isVisible) {
          execute(callback);
          return;
        }
        this._getElement().classList.remove(CLASS_NAME_SHOW$5);
        this._emulateAnimation(() => {
          this.dispose();
          execute(callback);
        });
      }
      dispose() {
        if (!this._isAppended) {
          return;
        }
        EventHandler.off(this._element, EVENT_MOUSEDOWN);
        this._element.remove();
        this._isAppended = false;
      }
      // Private
      _getElement() {
        if (!this._element) {
          const backdrop = document.createElement("div");
          backdrop.className = this._config.className;
          if (this._config.isAnimated) {
            backdrop.classList.add(CLASS_NAME_FADE$4);
          }
          this._element = backdrop;
        }
        return this._element;
      }
      _configAfterMerge(config2) {
        config2.rootElement = getElement(config2.rootElement);
        return config2;
      }
      _append() {
        if (this._isAppended) {
          return;
        }
        const element = this._getElement();
        this._config.rootElement.append(element);
        EventHandler.on(element, EVENT_MOUSEDOWN, () => {
          execute(this._config.clickCallback);
        });
        this._isAppended = true;
      }
      _emulateAnimation(callback) {
        executeAfterTransition(callback, this._getElement(), this._config.isAnimated);
      }
    }
    const NAME$8 = "focustrap";
    const DATA_KEY$5 = "bs.focustrap";
    const EVENT_KEY$5 = `.${DATA_KEY$5}`;
    const EVENT_FOCUSIN$2 = `focusin${EVENT_KEY$5}`;
    const EVENT_KEYDOWN_TAB = `keydown.tab${EVENT_KEY$5}`;
    const TAB_KEY = "Tab";
    const TAB_NAV_FORWARD = "forward";
    const TAB_NAV_BACKWARD = "backward";
    const Default$7 = {
      autofocus: true,
      trapElement: null
      // The element to trap focus inside of
    };
    const DefaultType$7 = {
      autofocus: "boolean",
      trapElement: "element"
    };
    class FocusTrap extends Config {
      constructor(config2) {
        super();
        this._config = this._getConfig(config2);
        this._isActive = false;
        this._lastTabNavDirection = null;
      }
      // Getters
      static get Default() {
        return Default$7;
      }
      static get DefaultType() {
        return DefaultType$7;
      }
      static get NAME() {
        return NAME$8;
      }
      // Public
      activate() {
        if (this._isActive) {
          return;
        }
        if (this._config.autofocus) {
          this._config.trapElement.focus();
        }
        EventHandler.off(document, EVENT_KEY$5);
        EventHandler.on(document, EVENT_FOCUSIN$2, (event) => this._handleFocusin(event));
        EventHandler.on(document, EVENT_KEYDOWN_TAB, (event) => this._handleKeydown(event));
        this._isActive = true;
      }
      deactivate() {
        if (!this._isActive) {
          return;
        }
        this._isActive = false;
        EventHandler.off(document, EVENT_KEY$5);
      }
      // Private
      _handleFocusin(event) {
        const {
          trapElement
        } = this._config;
        if (event.target === document || event.target === trapElement || trapElement.contains(event.target)) {
          return;
        }
        const elements = SelectorEngine.focusableChildren(trapElement);
        if (elements.length === 0) {
          trapElement.focus();
        } else if (this._lastTabNavDirection === TAB_NAV_BACKWARD) {
          elements[elements.length - 1].focus();
        } else {
          elements[0].focus();
        }
      }
      _handleKeydown(event) {
        if (event.key !== TAB_KEY) {
          return;
        }
        this._lastTabNavDirection = event.shiftKey ? TAB_NAV_BACKWARD : TAB_NAV_FORWARD;
      }
    }
    const SELECTOR_FIXED_CONTENT = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top";
    const SELECTOR_STICKY_CONTENT = ".sticky-top";
    const PROPERTY_PADDING = "padding-right";
    const PROPERTY_MARGIN = "margin-right";
    class ScrollBarHelper {
      constructor() {
        this._element = document.body;
      }
      // Public
      getWidth() {
        const documentWidth = document.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
      }
      hide() {
        const width = this.getWidth();
        this._disableOverFlow();
        this._setElementAttributes(this._element, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
        this._setElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING, (calculatedValue) => calculatedValue + width);
        this._setElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN, (calculatedValue) => calculatedValue - width);
      }
      reset() {
        this._resetElementAttributes(this._element, "overflow");
        this._resetElementAttributes(this._element, PROPERTY_PADDING);
        this._resetElementAttributes(SELECTOR_FIXED_CONTENT, PROPERTY_PADDING);
        this._resetElementAttributes(SELECTOR_STICKY_CONTENT, PROPERTY_MARGIN);
      }
      isOverflowing() {
        return this.getWidth() > 0;
      }
      // Private
      _disableOverFlow() {
        this._saveInitialAttribute(this._element, "overflow");
        this._element.style.overflow = "hidden";
      }
      _setElementAttributes(selector, styleProperty, callback) {
        const scrollbarWidth = this.getWidth();
        const manipulationCallBack = (element) => {
          if (element !== this._element && window.innerWidth > element.clientWidth + scrollbarWidth) {
            return;
          }
          this._saveInitialAttribute(element, styleProperty);
          const calculatedValue = window.getComputedStyle(element).getPropertyValue(styleProperty);
          element.style.setProperty(styleProperty, `${callback(Number.parseFloat(calculatedValue))}px`);
        };
        this._applyManipulationCallback(selector, manipulationCallBack);
      }
      _saveInitialAttribute(element, styleProperty) {
        const actualValue = element.style.getPropertyValue(styleProperty);
        if (actualValue) {
          Manipulator.setDataAttribute(element, styleProperty, actualValue);
        }
      }
      _resetElementAttributes(selector, styleProperty) {
        const manipulationCallBack = (element) => {
          const value = Manipulator.getDataAttribute(element, styleProperty);
          if (value === null) {
            element.style.removeProperty(styleProperty);
            return;
          }
          Manipulator.removeDataAttribute(element, styleProperty);
          element.style.setProperty(styleProperty, value);
        };
        this._applyManipulationCallback(selector, manipulationCallBack);
      }
      _applyManipulationCallback(selector, callBack) {
        if (isElement(selector)) {
          callBack(selector);
          return;
        }
        for (const sel of SelectorEngine.find(selector, this._element)) {
          callBack(sel);
        }
      }
    }
    const NAME$7 = "modal";
    const DATA_KEY$4 = "bs.modal";
    const EVENT_KEY$4 = `.${DATA_KEY$4}`;
    const DATA_API_KEY$2 = ".data-api";
    const ESCAPE_KEY$1 = "Escape";
    const EVENT_HIDE$4 = `hide${EVENT_KEY$4}`;
    const EVENT_HIDE_PREVENTED$1 = `hidePrevented${EVENT_KEY$4}`;
    const EVENT_HIDDEN$4 = `hidden${EVENT_KEY$4}`;
    const EVENT_SHOW$4 = `show${EVENT_KEY$4}`;
    const EVENT_SHOWN$4 = `shown${EVENT_KEY$4}`;
    const EVENT_RESIZE$1 = `resize${EVENT_KEY$4}`;
    const EVENT_CLICK_DISMISS = `click.dismiss${EVENT_KEY$4}`;
    const EVENT_MOUSEDOWN_DISMISS = `mousedown.dismiss${EVENT_KEY$4}`;
    const EVENT_KEYDOWN_DISMISS$1 = `keydown.dismiss${EVENT_KEY$4}`;
    const EVENT_CLICK_DATA_API$2 = `click${EVENT_KEY$4}${DATA_API_KEY$2}`;
    const CLASS_NAME_OPEN = "modal-open";
    const CLASS_NAME_FADE$3 = "fade";
    const CLASS_NAME_SHOW$4 = "show";
    const CLASS_NAME_STATIC = "modal-static";
    const OPEN_SELECTOR$1 = ".modal.show";
    const SELECTOR_DIALOG = ".modal-dialog";
    const SELECTOR_MODAL_BODY = ".modal-body";
    const SELECTOR_DATA_TOGGLE$2 = '[data-bs-toggle="modal"]';
    const Default$6 = {
      backdrop: true,
      focus: true,
      keyboard: true
    };
    const DefaultType$6 = {
      backdrop: "(boolean|string)",
      focus: "boolean",
      keyboard: "boolean"
    };
    class Modal extends BaseComponent {
      constructor(element, config2) {
        super(element, config2);
        this._dialog = SelectorEngine.findOne(SELECTOR_DIALOG, this._element);
        this._backdrop = this._initializeBackDrop();
        this._focustrap = this._initializeFocusTrap();
        this._isShown = false;
        this._isTransitioning = false;
        this._scrollBar = new ScrollBarHelper();
        this._addEventListeners();
      }
      // Getters
      static get Default() {
        return Default$6;
      }
      static get DefaultType() {
        return DefaultType$6;
      }
      static get NAME() {
        return NAME$7;
      }
      // Public
      toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
      show(relatedTarget) {
        if (this._isShown || this._isTransitioning) {
          return;
        }
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$4, {
          relatedTarget
        });
        if (showEvent.defaultPrevented) {
          return;
        }
        this._isShown = true;
        this._isTransitioning = true;
        this._scrollBar.hide();
        document.body.classList.add(CLASS_NAME_OPEN);
        this._adjustDialog();
        this._backdrop.show(() => this._showElement(relatedTarget));
      }
      hide() {
        if (!this._isShown || this._isTransitioning) {
          return;
        }
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$4);
        if (hideEvent.defaultPrevented) {
          return;
        }
        this._isShown = false;
        this._isTransitioning = true;
        this._focustrap.deactivate();
        this._element.classList.remove(CLASS_NAME_SHOW$4);
        this._queueCallback(() => this._hideModal(), this._element, this._isAnimated());
      }
      dispose() {
        EventHandler.off(window, EVENT_KEY$4);
        EventHandler.off(this._dialog, EVENT_KEY$4);
        this._backdrop.dispose();
        this._focustrap.deactivate();
        super.dispose();
      }
      handleUpdate() {
        this._adjustDialog();
      }
      // Private
      _initializeBackDrop() {
        return new Backdrop({
          isVisible: Boolean(this._config.backdrop),
          // 'static' option will be translated to true, and booleans will keep their value,
          isAnimated: this._isAnimated()
        });
      }
      _initializeFocusTrap() {
        return new FocusTrap({
          trapElement: this._element
        });
      }
      _showElement(relatedTarget) {
        if (!document.body.contains(this._element)) {
          document.body.append(this._element);
        }
        this._element.style.display = "block";
        this._element.removeAttribute("aria-hidden");
        this._element.setAttribute("aria-modal", true);
        this._element.setAttribute("role", "dialog");
        this._element.scrollTop = 0;
        const modalBody = SelectorEngine.findOne(SELECTOR_MODAL_BODY, this._dialog);
        if (modalBody) {
          modalBody.scrollTop = 0;
        }
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_SHOW$4);
        const transitionComplete = () => {
          if (this._config.focus) {
            this._focustrap.activate();
          }
          this._isTransitioning = false;
          EventHandler.trigger(this._element, EVENT_SHOWN$4, {
            relatedTarget
          });
        };
        this._queueCallback(transitionComplete, this._dialog, this._isAnimated());
      }
      _addEventListeners() {
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS$1, (event) => {
          if (event.key !== ESCAPE_KEY$1) {
            return;
          }
          if (this._config.keyboard) {
            this.hide();
            return;
          }
          this._triggerBackdropTransition();
        });
        EventHandler.on(window, EVENT_RESIZE$1, () => {
          if (this._isShown && !this._isTransitioning) {
            this._adjustDialog();
          }
        });
        EventHandler.on(this._element, EVENT_MOUSEDOWN_DISMISS, (event) => {
          EventHandler.one(this._element, EVENT_CLICK_DISMISS, (event2) => {
            if (this._element !== event.target || this._element !== event2.target) {
              return;
            }
            if (this._config.backdrop === "static") {
              this._triggerBackdropTransition();
              return;
            }
            if (this._config.backdrop) {
              this.hide();
            }
          });
        });
      }
      _hideModal() {
        this._element.style.display = "none";
        this._element.setAttribute("aria-hidden", true);
        this._element.removeAttribute("aria-modal");
        this._element.removeAttribute("role");
        this._isTransitioning = false;
        this._backdrop.hide(() => {
          document.body.classList.remove(CLASS_NAME_OPEN);
          this._resetAdjustments();
          this._scrollBar.reset();
          EventHandler.trigger(this._element, EVENT_HIDDEN$4);
        });
      }
      _isAnimated() {
        return this._element.classList.contains(CLASS_NAME_FADE$3);
      }
      _triggerBackdropTransition() {
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED$1);
        if (hideEvent.defaultPrevented) {
          return;
        }
        const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        const initialOverflowY = this._element.style.overflowY;
        if (initialOverflowY === "hidden" || this._element.classList.contains(CLASS_NAME_STATIC)) {
          return;
        }
        if (!isModalOverflowing) {
          this._element.style.overflowY = "hidden";
        }
        this._element.classList.add(CLASS_NAME_STATIC);
        this._queueCallback(() => {
          this._element.classList.remove(CLASS_NAME_STATIC);
          this._queueCallback(() => {
            this._element.style.overflowY = initialOverflowY;
          }, this._dialog);
        }, this._dialog);
        this._element.focus();
      }
      /**
       * The following methods are used to handle overflowing modals
       */
      _adjustDialog() {
        const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;
        const scrollbarWidth = this._scrollBar.getWidth();
        const isBodyOverflowing = scrollbarWidth > 0;
        if (isBodyOverflowing && !isModalOverflowing) {
          const property = isRTL() ? "paddingLeft" : "paddingRight";
          this._element.style[property] = `${scrollbarWidth}px`;
        }
        if (!isBodyOverflowing && isModalOverflowing) {
          const property = isRTL() ? "paddingRight" : "paddingLeft";
          this._element.style[property] = `${scrollbarWidth}px`;
        }
      }
      _resetAdjustments() {
        this._element.style.paddingLeft = "";
        this._element.style.paddingRight = "";
      }
      // Static
      static jQueryInterface(config2, relatedTarget) {
        return this.each(function() {
          const data = Modal.getOrCreateInstance(this, config2);
          if (typeof config2 !== "string") {
            return;
          }
          if (typeof data[config2] === "undefined") {
            throw new TypeError(`No method named "${config2}"`);
          }
          data[config2](relatedTarget);
        });
      }
    }
    EventHandler.on(document, EVENT_CLICK_DATA_API$2, SELECTOR_DATA_TOGGLE$2, function(event) {
      const target = SelectorEngine.getElementFromSelector(this);
      if (["A", "AREA"].includes(this.tagName)) {
        event.preventDefault();
      }
      EventHandler.one(target, EVENT_SHOW$4, (showEvent) => {
        if (showEvent.defaultPrevented) {
          return;
        }
        EventHandler.one(target, EVENT_HIDDEN$4, () => {
          if (isVisible(this)) {
            this.focus();
          }
        });
      });
      const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR$1);
      if (alreadyOpen) {
        Modal.getInstance(alreadyOpen).hide();
      }
      const data = Modal.getOrCreateInstance(target);
      data.toggle(this);
    });
    enableDismissTrigger(Modal);
    defineJQueryPlugin(Modal);
    const NAME$6 = "offcanvas";
    const DATA_KEY$3 = "bs.offcanvas";
    const EVENT_KEY$3 = `.${DATA_KEY$3}`;
    const DATA_API_KEY$1 = ".data-api";
    const EVENT_LOAD_DATA_API$2 = `load${EVENT_KEY$3}${DATA_API_KEY$1}`;
    const ESCAPE_KEY = "Escape";
    const CLASS_NAME_SHOW$3 = "show";
    const CLASS_NAME_SHOWING$1 = "showing";
    const CLASS_NAME_HIDING = "hiding";
    const CLASS_NAME_BACKDROP = "offcanvas-backdrop";
    const OPEN_SELECTOR = ".offcanvas.show";
    const EVENT_SHOW$3 = `show${EVENT_KEY$3}`;
    const EVENT_SHOWN$3 = `shown${EVENT_KEY$3}`;
    const EVENT_HIDE$3 = `hide${EVENT_KEY$3}`;
    const EVENT_HIDE_PREVENTED = `hidePrevented${EVENT_KEY$3}`;
    const EVENT_HIDDEN$3 = `hidden${EVENT_KEY$3}`;
    const EVENT_RESIZE = `resize${EVENT_KEY$3}`;
    const EVENT_CLICK_DATA_API$1 = `click${EVENT_KEY$3}${DATA_API_KEY$1}`;
    const EVENT_KEYDOWN_DISMISS = `keydown.dismiss${EVENT_KEY$3}`;
    const SELECTOR_DATA_TOGGLE$1 = '[data-bs-toggle="offcanvas"]';
    const Default$5 = {
      backdrop: true,
      keyboard: true,
      scroll: false
    };
    const DefaultType$5 = {
      backdrop: "(boolean|string)",
      keyboard: "boolean",
      scroll: "boolean"
    };
    class Offcanvas extends BaseComponent {
      constructor(element, config2) {
        super(element, config2);
        this._isShown = false;
        this._backdrop = this._initializeBackDrop();
        this._focustrap = this._initializeFocusTrap();
        this._addEventListeners();
      }
      // Getters
      static get Default() {
        return Default$5;
      }
      static get DefaultType() {
        return DefaultType$5;
      }
      static get NAME() {
        return NAME$6;
      }
      // Public
      toggle(relatedTarget) {
        return this._isShown ? this.hide() : this.show(relatedTarget);
      }
      show(relatedTarget) {
        if (this._isShown) {
          return;
        }
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW$3, {
          relatedTarget
        });
        if (showEvent.defaultPrevented) {
          return;
        }
        this._isShown = true;
        this._backdrop.show();
        if (!this._config.scroll) {
          new ScrollBarHelper().hide();
        }
        this._element.setAttribute("aria-modal", true);
        this._element.setAttribute("role", "dialog");
        this._element.classList.add(CLASS_NAME_SHOWING$1);
        const completeCallBack = () => {
          if (!this._config.scroll || this._config.backdrop) {
            this._focustrap.activate();
          }
          this._element.classList.add(CLASS_NAME_SHOW$3);
          this._element.classList.remove(CLASS_NAME_SHOWING$1);
          EventHandler.trigger(this._element, EVENT_SHOWN$3, {
            relatedTarget
          });
        };
        this._queueCallback(completeCallBack, this._element, true);
      }
      hide() {
        if (!this._isShown) {
          return;
        }
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE$3);
        if (hideEvent.defaultPrevented) {
          return;
        }
        this._focustrap.deactivate();
        this._element.blur();
        this._isShown = false;
        this._element.classList.add(CLASS_NAME_HIDING);
        this._backdrop.hide();
        const completeCallback = () => {
          this._element.classList.remove(CLASS_NAME_SHOW$3, CLASS_NAME_HIDING);
          this._element.removeAttribute("aria-modal");
          this._element.removeAttribute("role");
          if (!this._config.scroll) {
            new ScrollBarHelper().reset();
          }
          EventHandler.trigger(this._element, EVENT_HIDDEN$3);
        };
        this._queueCallback(completeCallback, this._element, true);
      }
      dispose() {
        this._backdrop.dispose();
        this._focustrap.deactivate();
        super.dispose();
      }
      // Private
      _initializeBackDrop() {
        const clickCallback = () => {
          if (this._config.backdrop === "static") {
            EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
            return;
          }
          this.hide();
        };
        const isVisible2 = Boolean(this._config.backdrop);
        return new Backdrop({
          className: CLASS_NAME_BACKDROP,
          isVisible: isVisible2,
          isAnimated: true,
          rootElement: this._element.parentNode,
          clickCallback: isVisible2 ? clickCallback : null
        });
      }
      _initializeFocusTrap() {
        return new FocusTrap({
          trapElement: this._element
        });
      }
      _addEventListeners() {
        EventHandler.on(this._element, EVENT_KEYDOWN_DISMISS, (event) => {
          if (event.key !== ESCAPE_KEY) {
            return;
          }
          if (this._config.keyboard) {
            this.hide();
            return;
          }
          EventHandler.trigger(this._element, EVENT_HIDE_PREVENTED);
        });
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Offcanvas.getOrCreateInstance(this, config2);
          if (typeof config2 !== "string") {
            return;
          }
          if (data[config2] === void 0 || config2.startsWith("_") || config2 === "constructor") {
            throw new TypeError(`No method named "${config2}"`);
          }
          data[config2](this);
        });
      }
    }
    EventHandler.on(document, EVENT_CLICK_DATA_API$1, SELECTOR_DATA_TOGGLE$1, function(event) {
      const target = SelectorEngine.getElementFromSelector(this);
      if (["A", "AREA"].includes(this.tagName)) {
        event.preventDefault();
      }
      if (isDisabled(this)) {
        return;
      }
      EventHandler.one(target, EVENT_HIDDEN$3, () => {
        if (isVisible(this)) {
          this.focus();
        }
      });
      const alreadyOpen = SelectorEngine.findOne(OPEN_SELECTOR);
      if (alreadyOpen && alreadyOpen !== target) {
        Offcanvas.getInstance(alreadyOpen).hide();
      }
      const data = Offcanvas.getOrCreateInstance(target);
      data.toggle(this);
    });
    EventHandler.on(window, EVENT_LOAD_DATA_API$2, () => {
      for (const selector of SelectorEngine.find(OPEN_SELECTOR)) {
        Offcanvas.getOrCreateInstance(selector).show();
      }
    });
    EventHandler.on(window, EVENT_RESIZE, () => {
      for (const element of SelectorEngine.find("[aria-modal][class*=show][class*=offcanvas-]")) {
        if (getComputedStyle(element).position !== "fixed") {
          Offcanvas.getOrCreateInstance(element).hide();
        }
      }
    });
    enableDismissTrigger(Offcanvas);
    defineJQueryPlugin(Offcanvas);
    const ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
    const DefaultAllowlist = {
      // Global attributes allowed on any supplied element below.
      "*": ["class", "dir", "id", "lang", "role", ARIA_ATTRIBUTE_PATTERN],
      a: ["target", "href", "title", "rel"],
      area: [],
      b: [],
      br: [],
      col: [],
      code: [],
      dd: [],
      div: [],
      dl: [],
      dt: [],
      em: [],
      hr: [],
      h1: [],
      h2: [],
      h3: [],
      h4: [],
      h5: [],
      h6: [],
      i: [],
      img: ["src", "srcset", "alt", "title", "width", "height"],
      li: [],
      ol: [],
      p: [],
      pre: [],
      s: [],
      small: [],
      span: [],
      sub: [],
      sup: [],
      strong: [],
      u: [],
      ul: []
    };
    const uriAttributes = /* @__PURE__ */ new Set(["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"]);
    const SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:/?#]*(?:[/?#]|$))/i;
    const allowedAttribute = (attribute2, allowedAttributeList) => {
      const attributeName = attribute2.nodeName.toLowerCase();
      if (allowedAttributeList.includes(attributeName)) {
        if (uriAttributes.has(attributeName)) {
          return Boolean(SAFE_URL_PATTERN.test(attribute2.nodeValue));
        }
        return true;
      }
      return allowedAttributeList.filter((attributeRegex) => attributeRegex instanceof RegExp).some((regex2) => regex2.test(attributeName));
    };
    function sanitizeHtml(unsafeHtml, allowList, sanitizeFunction) {
      if (!unsafeHtml.length) {
        return unsafeHtml;
      }
      if (sanitizeFunction && typeof sanitizeFunction === "function") {
        return sanitizeFunction(unsafeHtml);
      }
      const domParser = new window.DOMParser();
      const createdDocument = domParser.parseFromString(unsafeHtml, "text/html");
      const elements = [].concat(...createdDocument.body.querySelectorAll("*"));
      for (const element of elements) {
        const elementName = element.nodeName.toLowerCase();
        if (!Object.keys(allowList).includes(elementName)) {
          element.remove();
          continue;
        }
        const attributeList = [].concat(...element.attributes);
        const allowedAttributes = [].concat(allowList["*"] || [], allowList[elementName] || []);
        for (const attribute2 of attributeList) {
          if (!allowedAttribute(attribute2, allowedAttributes)) {
            element.removeAttribute(attribute2.nodeName);
          }
        }
      }
      return createdDocument.body.innerHTML;
    }
    const NAME$5 = "TemplateFactory";
    const Default$4 = {
      allowList: DefaultAllowlist,
      content: {},
      // { selector : text ,  selector2 : text2 , }
      extraClass: "",
      html: false,
      sanitize: true,
      sanitizeFn: null,
      template: "<div></div>"
    };
    const DefaultType$4 = {
      allowList: "object",
      content: "object",
      extraClass: "(string|function)",
      html: "boolean",
      sanitize: "boolean",
      sanitizeFn: "(null|function)",
      template: "string"
    };
    const DefaultContentType = {
      entry: "(string|element|function|null)",
      selector: "(string|element)"
    };
    class TemplateFactory extends Config {
      constructor(config2) {
        super();
        this._config = this._getConfig(config2);
      }
      // Getters
      static get Default() {
        return Default$4;
      }
      static get DefaultType() {
        return DefaultType$4;
      }
      static get NAME() {
        return NAME$5;
      }
      // Public
      getContent() {
        return Object.values(this._config.content).map((config2) => this._resolvePossibleFunction(config2)).filter(Boolean);
      }
      hasContent() {
        return this.getContent().length > 0;
      }
      changeContent(content2) {
        this._checkContent(content2);
        this._config.content = {
          ...this._config.content,
          ...content2
        };
        return this;
      }
      toHtml() {
        const templateWrapper = document.createElement("div");
        templateWrapper.innerHTML = this._maybeSanitize(this._config.template);
        for (const [selector, text2] of Object.entries(this._config.content)) {
          this._setContent(templateWrapper, text2, selector);
        }
        const template2 = templateWrapper.children[0];
        const extraClass = this._resolvePossibleFunction(this._config.extraClass);
        if (extraClass) {
          template2.classList.add(...extraClass.split(" "));
        }
        return template2;
      }
      // Private
      _typeCheckConfig(config2) {
        super._typeCheckConfig(config2);
        this._checkContent(config2.content);
      }
      _checkContent(arg) {
        for (const [selector, content2] of Object.entries(arg)) {
          super._typeCheckConfig({
            selector,
            entry: content2
          }, DefaultContentType);
        }
      }
      _setContent(template2, content2, selector) {
        const templateElement = SelectorEngine.findOne(selector, template2);
        if (!templateElement) {
          return;
        }
        content2 = this._resolvePossibleFunction(content2);
        if (!content2) {
          templateElement.remove();
          return;
        }
        if (isElement(content2)) {
          this._putElementInTemplate(getElement(content2), templateElement);
          return;
        }
        if (this._config.html) {
          templateElement.innerHTML = this._maybeSanitize(content2);
          return;
        }
        templateElement.textContent = content2;
      }
      _maybeSanitize(arg) {
        return this._config.sanitize ? sanitizeHtml(arg, this._config.allowList, this._config.sanitizeFn) : arg;
      }
      _resolvePossibleFunction(arg) {
        return execute(arg, [this]);
      }
      _putElementInTemplate(element, templateElement) {
        if (this._config.html) {
          templateElement.innerHTML = "";
          templateElement.append(element);
          return;
        }
        templateElement.textContent = element.textContent;
      }
    }
    const NAME$4 = "tooltip";
    const DISALLOWED_ATTRIBUTES = /* @__PURE__ */ new Set(["sanitize", "allowList", "sanitizeFn"]);
    const CLASS_NAME_FADE$2 = "fade";
    const CLASS_NAME_MODAL = "modal";
    const CLASS_NAME_SHOW$2 = "show";
    const SELECTOR_TOOLTIP_INNER = ".tooltip-inner";
    const SELECTOR_MODAL = `.${CLASS_NAME_MODAL}`;
    const EVENT_MODAL_HIDE = "hide.bs.modal";
    const TRIGGER_HOVER = "hover";
    const TRIGGER_FOCUS = "focus";
    const TRIGGER_CLICK = "click";
    const TRIGGER_MANUAL = "manual";
    const EVENT_HIDE$2 = "hide";
    const EVENT_HIDDEN$2 = "hidden";
    const EVENT_SHOW$2 = "show";
    const EVENT_SHOWN$2 = "shown";
    const EVENT_INSERTED = "inserted";
    const EVENT_CLICK$1 = "click";
    const EVENT_FOCUSIN$1 = "focusin";
    const EVENT_FOCUSOUT$1 = "focusout";
    const EVENT_MOUSEENTER = "mouseenter";
    const EVENT_MOUSELEAVE = "mouseleave";
    const AttachmentMap = {
      AUTO: "auto",
      TOP: "top",
      RIGHT: isRTL() ? "left" : "right",
      BOTTOM: "bottom",
      LEFT: isRTL() ? "right" : "left"
    };
    const Default$3 = {
      allowList: DefaultAllowlist,
      animation: true,
      boundary: "clippingParents",
      container: false,
      customClass: "",
      delay: 0,
      fallbackPlacements: ["top", "right", "bottom", "left"],
      html: false,
      offset: [0, 6],
      placement: "top",
      popperConfig: null,
      sanitize: true,
      sanitizeFn: null,
      selector: false,
      template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
      title: "",
      trigger: "hover focus"
    };
    const DefaultType$3 = {
      allowList: "object",
      animation: "boolean",
      boundary: "(string|element)",
      container: "(string|element|boolean)",
      customClass: "(string|function)",
      delay: "(number|object)",
      fallbackPlacements: "array",
      html: "boolean",
      offset: "(array|string|function)",
      placement: "(string|function)",
      popperConfig: "(null|object|function)",
      sanitize: "boolean",
      sanitizeFn: "(null|function)",
      selector: "(string|boolean)",
      template: "string",
      title: "(string|element|function)",
      trigger: "string"
    };
    class Tooltip extends BaseComponent {
      constructor(element, config2) {
        if (typeof Popper === "undefined") {
          throw new TypeError("Bootstrap's tooltips require Popper (https://popper.js.org)");
        }
        super(element, config2);
        this._isEnabled = true;
        this._timeout = 0;
        this._isHovered = null;
        this._activeTrigger = {};
        this._popper = null;
        this._templateFactory = null;
        this._newContent = null;
        this.tip = null;
        this._setListeners();
        if (!this._config.selector) {
          this._fixTitle();
        }
      }
      // Getters
      static get Default() {
        return Default$3;
      }
      static get DefaultType() {
        return DefaultType$3;
      }
      static get NAME() {
        return NAME$4;
      }
      // Public
      enable() {
        this._isEnabled = true;
      }
      disable() {
        this._isEnabled = false;
      }
      toggleEnabled() {
        this._isEnabled = !this._isEnabled;
      }
      toggle() {
        if (!this._isEnabled) {
          return;
        }
        this._activeTrigger.click = !this._activeTrigger.click;
        if (this._isShown()) {
          this._leave();
          return;
        }
        this._enter();
      }
      dispose() {
        clearTimeout(this._timeout);
        EventHandler.off(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
        if (this._element.getAttribute("data-bs-original-title")) {
          this._element.setAttribute("title", this._element.getAttribute("data-bs-original-title"));
        }
        this._disposePopper();
        super.dispose();
      }
      show() {
        if (this._element.style.display === "none") {
          throw new Error("Please use show on visible elements");
        }
        if (!(this._isWithContent() && this._isEnabled)) {
          return;
        }
        const showEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOW$2));
        const shadowRoot = findShadowRoot(this._element);
        const isInTheDom = (shadowRoot || this._element.ownerDocument.documentElement).contains(this._element);
        if (showEvent.defaultPrevented || !isInTheDom) {
          return;
        }
        this._disposePopper();
        const tip = this._getTipElement();
        this._element.setAttribute("aria-describedby", tip.getAttribute("id"));
        const {
          container
        } = this._config;
        if (!this._element.ownerDocument.documentElement.contains(this.tip)) {
          container.append(tip);
          EventHandler.trigger(this._element, this.constructor.eventName(EVENT_INSERTED));
        }
        this._popper = this._createPopper(tip);
        tip.classList.add(CLASS_NAME_SHOW$2);
        if ("ontouchstart" in document.documentElement) {
          for (const element of [].concat(...document.body.children)) {
            EventHandler.on(element, "mouseover", noop);
          }
        }
        const complete = () => {
          EventHandler.trigger(this._element, this.constructor.eventName(EVENT_SHOWN$2));
          if (this._isHovered === false) {
            this._leave();
          }
          this._isHovered = false;
        };
        this._queueCallback(complete, this.tip, this._isAnimated());
      }
      hide() {
        if (!this._isShown()) {
          return;
        }
        const hideEvent = EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDE$2));
        if (hideEvent.defaultPrevented) {
          return;
        }
        const tip = this._getTipElement();
        tip.classList.remove(CLASS_NAME_SHOW$2);
        if ("ontouchstart" in document.documentElement) {
          for (const element of [].concat(...document.body.children)) {
            EventHandler.off(element, "mouseover", noop);
          }
        }
        this._activeTrigger[TRIGGER_CLICK] = false;
        this._activeTrigger[TRIGGER_FOCUS] = false;
        this._activeTrigger[TRIGGER_HOVER] = false;
        this._isHovered = null;
        const complete = () => {
          if (this._isWithActiveTrigger()) {
            return;
          }
          if (!this._isHovered) {
            this._disposePopper();
          }
          this._element.removeAttribute("aria-describedby");
          EventHandler.trigger(this._element, this.constructor.eventName(EVENT_HIDDEN$2));
        };
        this._queueCallback(complete, this.tip, this._isAnimated());
      }
      update() {
        if (this._popper) {
          this._popper.update();
        }
      }
      // Protected
      _isWithContent() {
        return Boolean(this._getTitle());
      }
      _getTipElement() {
        if (!this.tip) {
          this.tip = this._createTipElement(this._newContent || this._getContentForTemplate());
        }
        return this.tip;
      }
      _createTipElement(content2) {
        const tip = this._getTemplateFactory(content2).toHtml();
        if (!tip) {
          return null;
        }
        tip.classList.remove(CLASS_NAME_FADE$2, CLASS_NAME_SHOW$2);
        tip.classList.add(`bs-${this.constructor.NAME}-auto`);
        const tipId = getUID(this.constructor.NAME).toString();
        tip.setAttribute("id", tipId);
        if (this._isAnimated()) {
          tip.classList.add(CLASS_NAME_FADE$2);
        }
        return tip;
      }
      setContent(content2) {
        this._newContent = content2;
        if (this._isShown()) {
          this._disposePopper();
          this.show();
        }
      }
      _getTemplateFactory(content2) {
        if (this._templateFactory) {
          this._templateFactory.changeContent(content2);
        } else {
          this._templateFactory = new TemplateFactory({
            ...this._config,
            // the `content` var has to be after `this._config`
            // to override config.content in case of popover
            content: content2,
            extraClass: this._resolvePossibleFunction(this._config.customClass)
          });
        }
        return this._templateFactory;
      }
      _getContentForTemplate() {
        return {
          [SELECTOR_TOOLTIP_INNER]: this._getTitle()
        };
      }
      _getTitle() {
        return this._resolvePossibleFunction(this._config.title) || this._element.getAttribute("data-bs-original-title");
      }
      // Private
      _initializeOnDelegatedTarget(event) {
        return this.constructor.getOrCreateInstance(event.delegateTarget, this._getDelegateConfig());
      }
      _isAnimated() {
        return this._config.animation || this.tip && this.tip.classList.contains(CLASS_NAME_FADE$2);
      }
      _isShown() {
        return this.tip && this.tip.classList.contains(CLASS_NAME_SHOW$2);
      }
      _createPopper(tip) {
        const placement = execute(this._config.placement, [this, tip, this._element]);
        const attachment = AttachmentMap[placement.toUpperCase()];
        return createPopper(this._element, tip, this._getPopperConfig(attachment));
      }
      _getOffset() {
        const {
          offset: offset2
        } = this._config;
        if (typeof offset2 === "string") {
          return offset2.split(",").map((value) => Number.parseInt(value, 10));
        }
        if (typeof offset2 === "function") {
          return (popperData) => offset2(popperData, this._element);
        }
        return offset2;
      }
      _resolvePossibleFunction(arg) {
        return execute(arg, [this._element]);
      }
      _getPopperConfig(attachment) {
        const defaultBsPopperConfig = {
          placement: attachment,
          modifiers: [{
            name: "flip",
            options: {
              fallbackPlacements: this._config.fallbackPlacements
            }
          }, {
            name: "offset",
            options: {
              offset: this._getOffset()
            }
          }, {
            name: "preventOverflow",
            options: {
              boundary: this._config.boundary
            }
          }, {
            name: "arrow",
            options: {
              element: `.${this.constructor.NAME}-arrow`
            }
          }, {
            name: "preSetPlacement",
            enabled: true,
            phase: "beforeMain",
            fn: (data) => {
              this._getTipElement().setAttribute("data-popper-placement", data.state.placement);
            }
          }]
        };
        return {
          ...defaultBsPopperConfig,
          ...execute(this._config.popperConfig, [defaultBsPopperConfig])
        };
      }
      _setListeners() {
        const triggers = this._config.trigger.split(" ");
        for (const trigger of triggers) {
          if (trigger === "click") {
            EventHandler.on(this._element, this.constructor.eventName(EVENT_CLICK$1), this._config.selector, (event) => {
              const context = this._initializeOnDelegatedTarget(event);
              context.toggle();
            });
          } else if (trigger !== TRIGGER_MANUAL) {
            const eventIn = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSEENTER) : this.constructor.eventName(EVENT_FOCUSIN$1);
            const eventOut = trigger === TRIGGER_HOVER ? this.constructor.eventName(EVENT_MOUSELEAVE) : this.constructor.eventName(EVENT_FOCUSOUT$1);
            EventHandler.on(this._element, eventIn, this._config.selector, (event) => {
              const context = this._initializeOnDelegatedTarget(event);
              context._activeTrigger[event.type === "focusin" ? TRIGGER_FOCUS : TRIGGER_HOVER] = true;
              context._enter();
            });
            EventHandler.on(this._element, eventOut, this._config.selector, (event) => {
              const context = this._initializeOnDelegatedTarget(event);
              context._activeTrigger[event.type === "focusout" ? TRIGGER_FOCUS : TRIGGER_HOVER] = context._element.contains(event.relatedTarget);
              context._leave();
            });
          }
        }
        this._hideModalHandler = () => {
          if (this._element) {
            this.hide();
          }
        };
        EventHandler.on(this._element.closest(SELECTOR_MODAL), EVENT_MODAL_HIDE, this._hideModalHandler);
      }
      _fixTitle() {
        const title = this._element.getAttribute("title");
        if (!title) {
          return;
        }
        if (!this._element.getAttribute("aria-label") && !this._element.textContent.trim()) {
          this._element.setAttribute("aria-label", title);
        }
        this._element.setAttribute("data-bs-original-title", title);
        this._element.removeAttribute("title");
      }
      _enter() {
        if (this._isShown() || this._isHovered) {
          this._isHovered = true;
          return;
        }
        this._isHovered = true;
        this._setTimeout(() => {
          if (this._isHovered) {
            this.show();
          }
        }, this._config.delay.show);
      }
      _leave() {
        if (this._isWithActiveTrigger()) {
          return;
        }
        this._isHovered = false;
        this._setTimeout(() => {
          if (!this._isHovered) {
            this.hide();
          }
        }, this._config.delay.hide);
      }
      _setTimeout(handler, timeout) {
        clearTimeout(this._timeout);
        this._timeout = setTimeout(handler, timeout);
      }
      _isWithActiveTrigger() {
        return Object.values(this._activeTrigger).includes(true);
      }
      _getConfig(config2) {
        const dataAttributes = Manipulator.getDataAttributes(this._element);
        for (const dataAttribute of Object.keys(dataAttributes)) {
          if (DISALLOWED_ATTRIBUTES.has(dataAttribute)) {
            delete dataAttributes[dataAttribute];
          }
        }
        config2 = {
          ...dataAttributes,
          ...typeof config2 === "object" && config2 ? config2 : {}
        };
        config2 = this._mergeConfigObj(config2);
        config2 = this._configAfterMerge(config2);
        this._typeCheckConfig(config2);
        return config2;
      }
      _configAfterMerge(config2) {
        config2.container = config2.container === false ? document.body : getElement(config2.container);
        if (typeof config2.delay === "number") {
          config2.delay = {
            show: config2.delay,
            hide: config2.delay
          };
        }
        if (typeof config2.title === "number") {
          config2.title = config2.title.toString();
        }
        if (typeof config2.content === "number") {
          config2.content = config2.content.toString();
        }
        return config2;
      }
      _getDelegateConfig() {
        const config2 = {};
        for (const [key2, value] of Object.entries(this._config)) {
          if (this.constructor.Default[key2] !== value) {
            config2[key2] = value;
          }
        }
        config2.selector = false;
        config2.trigger = "manual";
        return config2;
      }
      _disposePopper() {
        if (this._popper) {
          this._popper.destroy();
          this._popper = null;
        }
        if (this.tip) {
          this.tip.remove();
          this.tip = null;
        }
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Tooltip.getOrCreateInstance(this, config2);
          if (typeof config2 !== "string") {
            return;
          }
          if (typeof data[config2] === "undefined") {
            throw new TypeError(`No method named "${config2}"`);
          }
          data[config2]();
        });
      }
    }
    defineJQueryPlugin(Tooltip);
    const NAME$3 = "popover";
    const SELECTOR_TITLE = ".popover-header";
    const SELECTOR_CONTENT = ".popover-body";
    const Default$2 = {
      ...Tooltip.Default,
      content: "",
      offset: [0, 8],
      placement: "right",
      template: '<div class="popover" role="tooltip"><div class="popover-arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
      trigger: "click"
    };
    const DefaultType$2 = {
      ...Tooltip.DefaultType,
      content: "(null|string|element|function)"
    };
    class Popover extends Tooltip {
      // Getters
      static get Default() {
        return Default$2;
      }
      static get DefaultType() {
        return DefaultType$2;
      }
      static get NAME() {
        return NAME$3;
      }
      // Overrides
      _isWithContent() {
        return this._getTitle() || this._getContent();
      }
      // Private
      _getContentForTemplate() {
        return {
          [SELECTOR_TITLE]: this._getTitle(),
          [SELECTOR_CONTENT]: this._getContent()
        };
      }
      _getContent() {
        return this._resolvePossibleFunction(this._config.content);
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Popover.getOrCreateInstance(this, config2);
          if (typeof config2 !== "string") {
            return;
          }
          if (typeof data[config2] === "undefined") {
            throw new TypeError(`No method named "${config2}"`);
          }
          data[config2]();
        });
      }
    }
    defineJQueryPlugin(Popover);
    const NAME$2 = "scrollspy";
    const DATA_KEY$2 = "bs.scrollspy";
    const EVENT_KEY$2 = `.${DATA_KEY$2}`;
    const DATA_API_KEY = ".data-api";
    const EVENT_ACTIVATE = `activate${EVENT_KEY$2}`;
    const EVENT_CLICK = `click${EVENT_KEY$2}`;
    const EVENT_LOAD_DATA_API$1 = `load${EVENT_KEY$2}${DATA_API_KEY}`;
    const CLASS_NAME_DROPDOWN_ITEM = "dropdown-item";
    const CLASS_NAME_ACTIVE$1 = "active";
    const SELECTOR_DATA_SPY = '[data-bs-spy="scroll"]';
    const SELECTOR_TARGET_LINKS = "[href]";
    const SELECTOR_NAV_LIST_GROUP = ".nav, .list-group";
    const SELECTOR_NAV_LINKS = ".nav-link";
    const SELECTOR_NAV_ITEMS = ".nav-item";
    const SELECTOR_LIST_ITEMS = ".list-group-item";
    const SELECTOR_LINK_ITEMS = `${SELECTOR_NAV_LINKS}, ${SELECTOR_NAV_ITEMS} > ${SELECTOR_NAV_LINKS}, ${SELECTOR_LIST_ITEMS}`;
    const SELECTOR_DROPDOWN = ".dropdown";
    const SELECTOR_DROPDOWN_TOGGLE$1 = ".dropdown-toggle";
    const Default$1 = {
      offset: null,
      // TODO: v6 @deprecated, keep it for backwards compatibility reasons
      rootMargin: "0px 0px -25%",
      smoothScroll: false,
      target: null,
      threshold: [0.1, 0.5, 1]
    };
    const DefaultType$1 = {
      offset: "(number|null)",
      // TODO v6 @deprecated, keep it for backwards compatibility reasons
      rootMargin: "string",
      smoothScroll: "boolean",
      target: "element",
      threshold: "array"
    };
    class ScrollSpy extends BaseComponent {
      constructor(element, config2) {
        super(element, config2);
        this._targetLinks = /* @__PURE__ */ new Map();
        this._observableSections = /* @__PURE__ */ new Map();
        this._rootElement = getComputedStyle(this._element).overflowY === "visible" ? null : this._element;
        this._activeTarget = null;
        this._observer = null;
        this._previousScrollData = {
          visibleEntryTop: 0,
          parentScrollTop: 0
        };
        this.refresh();
      }
      // Getters
      static get Default() {
        return Default$1;
      }
      static get DefaultType() {
        return DefaultType$1;
      }
      static get NAME() {
        return NAME$2;
      }
      // Public
      refresh() {
        this._initializeTargetsAndObservables();
        this._maybeEnableSmoothScroll();
        if (this._observer) {
          this._observer.disconnect();
        } else {
          this._observer = this._getNewObserver();
        }
        for (const section of this._observableSections.values()) {
          this._observer.observe(section);
        }
      }
      dispose() {
        this._observer.disconnect();
        super.dispose();
      }
      // Private
      _configAfterMerge(config2) {
        config2.target = getElement(config2.target) || document.body;
        config2.rootMargin = config2.offset ? `${config2.offset}px 0px -30%` : config2.rootMargin;
        if (typeof config2.threshold === "string") {
          config2.threshold = config2.threshold.split(",").map((value) => Number.parseFloat(value));
        }
        return config2;
      }
      _maybeEnableSmoothScroll() {
        if (!this._config.smoothScroll) {
          return;
        }
        EventHandler.off(this._config.target, EVENT_CLICK);
        EventHandler.on(this._config.target, EVENT_CLICK, SELECTOR_TARGET_LINKS, (event) => {
          const observableSection = this._observableSections.get(event.target.hash);
          if (observableSection) {
            event.preventDefault();
            const root2 = this._rootElement || window;
            const height = observableSection.offsetTop - this._element.offsetTop;
            if (root2.scrollTo) {
              root2.scrollTo({
                top: height,
                behavior: "smooth"
              });
              return;
            }
            root2.scrollTop = height;
          }
        });
      }
      _getNewObserver() {
        const options = {
          root: this._rootElement,
          threshold: this._config.threshold,
          rootMargin: this._config.rootMargin
        };
        return new IntersectionObserver((entries) => this._observerCallback(entries), options);
      }
      // The logic of selection
      _observerCallback(entries) {
        const targetElement = (entry) => this._targetLinks.get(`#${entry.target.id}`);
        const activate = (entry) => {
          this._previousScrollData.visibleEntryTop = entry.target.offsetTop;
          this._process(targetElement(entry));
        };
        const parentScrollTop = (this._rootElement || document.documentElement).scrollTop;
        const userScrollsDown = parentScrollTop >= this._previousScrollData.parentScrollTop;
        this._previousScrollData.parentScrollTop = parentScrollTop;
        for (const entry of entries) {
          if (!entry.isIntersecting) {
            this._activeTarget = null;
            this._clearActiveClass(targetElement(entry));
            continue;
          }
          const entryIsLowerThanPrevious = entry.target.offsetTop >= this._previousScrollData.visibleEntryTop;
          if (userScrollsDown && entryIsLowerThanPrevious) {
            activate(entry);
            if (!parentScrollTop) {
              return;
            }
            continue;
          }
          if (!userScrollsDown && !entryIsLowerThanPrevious) {
            activate(entry);
          }
        }
      }
      _initializeTargetsAndObservables() {
        this._targetLinks = /* @__PURE__ */ new Map();
        this._observableSections = /* @__PURE__ */ new Map();
        const targetLinks = SelectorEngine.find(SELECTOR_TARGET_LINKS, this._config.target);
        for (const anchor of targetLinks) {
          if (!anchor.hash || isDisabled(anchor)) {
            continue;
          }
          const observableSection = SelectorEngine.findOne(decodeURI(anchor.hash), this._element);
          if (isVisible(observableSection)) {
            this._targetLinks.set(decodeURI(anchor.hash), anchor);
            this._observableSections.set(anchor.hash, observableSection);
          }
        }
      }
      _process(target) {
        if (this._activeTarget === target) {
          return;
        }
        this._clearActiveClass(this._config.target);
        this._activeTarget = target;
        target.classList.add(CLASS_NAME_ACTIVE$1);
        this._activateParents(target);
        EventHandler.trigger(this._element, EVENT_ACTIVATE, {
          relatedTarget: target
        });
      }
      _activateParents(target) {
        if (target.classList.contains(CLASS_NAME_DROPDOWN_ITEM)) {
          SelectorEngine.findOne(SELECTOR_DROPDOWN_TOGGLE$1, target.closest(SELECTOR_DROPDOWN)).classList.add(CLASS_NAME_ACTIVE$1);
          return;
        }
        for (const listGroup of SelectorEngine.parents(target, SELECTOR_NAV_LIST_GROUP)) {
          for (const item of SelectorEngine.prev(listGroup, SELECTOR_LINK_ITEMS)) {
            item.classList.add(CLASS_NAME_ACTIVE$1);
          }
        }
      }
      _clearActiveClass(parent) {
        parent.classList.remove(CLASS_NAME_ACTIVE$1);
        const activeNodes = SelectorEngine.find(`${SELECTOR_TARGET_LINKS}.${CLASS_NAME_ACTIVE$1}`, parent);
        for (const node of activeNodes) {
          node.classList.remove(CLASS_NAME_ACTIVE$1);
        }
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = ScrollSpy.getOrCreateInstance(this, config2);
          if (typeof config2 !== "string") {
            return;
          }
          if (data[config2] === void 0 || config2.startsWith("_") || config2 === "constructor") {
            throw new TypeError(`No method named "${config2}"`);
          }
          data[config2]();
        });
      }
    }
    EventHandler.on(window, EVENT_LOAD_DATA_API$1, () => {
      for (const spy of SelectorEngine.find(SELECTOR_DATA_SPY)) {
        ScrollSpy.getOrCreateInstance(spy);
      }
    });
    defineJQueryPlugin(ScrollSpy);
    const NAME$1 = "tab";
    const DATA_KEY$1 = "bs.tab";
    const EVENT_KEY$1 = `.${DATA_KEY$1}`;
    const EVENT_HIDE$1 = `hide${EVENT_KEY$1}`;
    const EVENT_HIDDEN$1 = `hidden${EVENT_KEY$1}`;
    const EVENT_SHOW$1 = `show${EVENT_KEY$1}`;
    const EVENT_SHOWN$1 = `shown${EVENT_KEY$1}`;
    const EVENT_CLICK_DATA_API = `click${EVENT_KEY$1}`;
    const EVENT_KEYDOWN = `keydown${EVENT_KEY$1}`;
    const EVENT_LOAD_DATA_API = `load${EVENT_KEY$1}`;
    const ARROW_LEFT_KEY = "ArrowLeft";
    const ARROW_RIGHT_KEY = "ArrowRight";
    const ARROW_UP_KEY = "ArrowUp";
    const ARROW_DOWN_KEY = "ArrowDown";
    const HOME_KEY = "Home";
    const END_KEY = "End";
    const CLASS_NAME_ACTIVE = "active";
    const CLASS_NAME_FADE$1 = "fade";
    const CLASS_NAME_SHOW$1 = "show";
    const CLASS_DROPDOWN = "dropdown";
    const SELECTOR_DROPDOWN_TOGGLE = ".dropdown-toggle";
    const SELECTOR_DROPDOWN_MENU = ".dropdown-menu";
    const NOT_SELECTOR_DROPDOWN_TOGGLE = `:not(${SELECTOR_DROPDOWN_TOGGLE})`;
    const SELECTOR_TAB_PANEL = '.list-group, .nav, [role="tablist"]';
    const SELECTOR_OUTER = ".nav-item, .list-group-item";
    const SELECTOR_INNER = `.nav-link${NOT_SELECTOR_DROPDOWN_TOGGLE}, .list-group-item${NOT_SELECTOR_DROPDOWN_TOGGLE}, [role="tab"]${NOT_SELECTOR_DROPDOWN_TOGGLE}`;
    const SELECTOR_DATA_TOGGLE = '[data-bs-toggle="tab"], [data-bs-toggle="pill"], [data-bs-toggle="list"]';
    const SELECTOR_INNER_ELEM = `${SELECTOR_INNER}, ${SELECTOR_DATA_TOGGLE}`;
    const SELECTOR_DATA_TOGGLE_ACTIVE = `.${CLASS_NAME_ACTIVE}[data-bs-toggle="tab"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="pill"], .${CLASS_NAME_ACTIVE}[data-bs-toggle="list"]`;
    let Tab$1 = class Tab2 extends BaseComponent {
      constructor(element) {
        super(element);
        this._parent = this._element.closest(SELECTOR_TAB_PANEL);
        if (!this._parent) {
          return;
        }
        this._setInitialAttributes(this._parent, this._getChildren());
        EventHandler.on(this._element, EVENT_KEYDOWN, (event) => this._keydown(event));
      }
      // Getters
      static get NAME() {
        return NAME$1;
      }
      // Public
      show() {
        const innerElem = this._element;
        if (this._elemIsActive(innerElem)) {
          return;
        }
        const active = this._getActiveElem();
        const hideEvent = active ? EventHandler.trigger(active, EVENT_HIDE$1, {
          relatedTarget: innerElem
        }) : null;
        const showEvent = EventHandler.trigger(innerElem, EVENT_SHOW$1, {
          relatedTarget: active
        });
        if (showEvent.defaultPrevented || hideEvent && hideEvent.defaultPrevented) {
          return;
        }
        this._deactivate(active, innerElem);
        this._activate(innerElem, active);
      }
      // Private
      _activate(element, relatedElem) {
        if (!element) {
          return;
        }
        element.classList.add(CLASS_NAME_ACTIVE);
        this._activate(SelectorEngine.getElementFromSelector(element));
        const complete = () => {
          if (element.getAttribute("role") !== "tab") {
            element.classList.add(CLASS_NAME_SHOW$1);
            return;
          }
          element.removeAttribute("tabindex");
          element.setAttribute("aria-selected", true);
          this._toggleDropDown(element, true);
          EventHandler.trigger(element, EVENT_SHOWN$1, {
            relatedTarget: relatedElem
          });
        };
        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
      }
      _deactivate(element, relatedElem) {
        if (!element) {
          return;
        }
        element.classList.remove(CLASS_NAME_ACTIVE);
        element.blur();
        this._deactivate(SelectorEngine.getElementFromSelector(element));
        const complete = () => {
          if (element.getAttribute("role") !== "tab") {
            element.classList.remove(CLASS_NAME_SHOW$1);
            return;
          }
          element.setAttribute("aria-selected", false);
          element.setAttribute("tabindex", "-1");
          this._toggleDropDown(element, false);
          EventHandler.trigger(element, EVENT_HIDDEN$1, {
            relatedTarget: relatedElem
          });
        };
        this._queueCallback(complete, element, element.classList.contains(CLASS_NAME_FADE$1));
      }
      _keydown(event) {
        if (![ARROW_LEFT_KEY, ARROW_RIGHT_KEY, ARROW_UP_KEY, ARROW_DOWN_KEY, HOME_KEY, END_KEY].includes(event.key)) {
          return;
        }
        event.stopPropagation();
        event.preventDefault();
        const children2 = this._getChildren().filter((element) => !isDisabled(element));
        let nextActiveElement;
        if ([HOME_KEY, END_KEY].includes(event.key)) {
          nextActiveElement = children2[event.key === HOME_KEY ? 0 : children2.length - 1];
        } else {
          const isNext = [ARROW_RIGHT_KEY, ARROW_DOWN_KEY].includes(event.key);
          nextActiveElement = getNextActiveElement(children2, event.target, isNext, true);
        }
        if (nextActiveElement) {
          nextActiveElement.focus({
            preventScroll: true
          });
          Tab2.getOrCreateInstance(nextActiveElement).show();
        }
      }
      _getChildren() {
        return SelectorEngine.find(SELECTOR_INNER_ELEM, this._parent);
      }
      _getActiveElem() {
        return this._getChildren().find((child) => this._elemIsActive(child)) || null;
      }
      _setInitialAttributes(parent, children2) {
        this._setAttributeIfNotExists(parent, "role", "tablist");
        for (const child of children2) {
          this._setInitialAttributesOnChild(child);
        }
      }
      _setInitialAttributesOnChild(child) {
        child = this._getInnerElement(child);
        const isActive = this._elemIsActive(child);
        const outerElem = this._getOuterElement(child);
        child.setAttribute("aria-selected", isActive);
        if (outerElem !== child) {
          this._setAttributeIfNotExists(outerElem, "role", "presentation");
        }
        if (!isActive) {
          child.setAttribute("tabindex", "-1");
        }
        this._setAttributeIfNotExists(child, "role", "tab");
        this._setInitialAttributesOnTargetPanel(child);
      }
      _setInitialAttributesOnTargetPanel(child) {
        const target = SelectorEngine.getElementFromSelector(child);
        if (!target) {
          return;
        }
        this._setAttributeIfNotExists(target, "role", "tabpanel");
        if (child.id) {
          this._setAttributeIfNotExists(target, "aria-labelledby", `${child.id}`);
        }
      }
      _toggleDropDown(element, open) {
        const outerElem = this._getOuterElement(element);
        if (!outerElem.classList.contains(CLASS_DROPDOWN)) {
          return;
        }
        const toggle = (selector, className2) => {
          const element2 = SelectorEngine.findOne(selector, outerElem);
          if (element2) {
            element2.classList.toggle(className2, open);
          }
        };
        toggle(SELECTOR_DROPDOWN_TOGGLE, CLASS_NAME_ACTIVE);
        toggle(SELECTOR_DROPDOWN_MENU, CLASS_NAME_SHOW$1);
        outerElem.setAttribute("aria-expanded", open);
      }
      _setAttributeIfNotExists(element, attribute2, value) {
        if (!element.hasAttribute(attribute2)) {
          element.setAttribute(attribute2, value);
        }
      }
      _elemIsActive(elem) {
        return elem.classList.contains(CLASS_NAME_ACTIVE);
      }
      // Try to get the inner element (usually the .nav-link)
      _getInnerElement(elem) {
        return elem.matches(SELECTOR_INNER_ELEM) ? elem : SelectorEngine.findOne(SELECTOR_INNER_ELEM, elem);
      }
      // Try to get the outer element (usually the .nav-item)
      _getOuterElement(elem) {
        return elem.closest(SELECTOR_OUTER) || elem;
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Tab2.getOrCreateInstance(this);
          if (typeof config2 !== "string") {
            return;
          }
          if (data[config2] === void 0 || config2.startsWith("_") || config2 === "constructor") {
            throw new TypeError(`No method named "${config2}"`);
          }
          data[config2]();
        });
      }
    };
    EventHandler.on(document, EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE, function(event) {
      if (["A", "AREA"].includes(this.tagName)) {
        event.preventDefault();
      }
      if (isDisabled(this)) {
        return;
      }
      Tab$1.getOrCreateInstance(this).show();
    });
    EventHandler.on(window, EVENT_LOAD_DATA_API, () => {
      for (const element of SelectorEngine.find(SELECTOR_DATA_TOGGLE_ACTIVE)) {
        Tab$1.getOrCreateInstance(element);
      }
    });
    defineJQueryPlugin(Tab$1);
    const NAME = "toast";
    const DATA_KEY = "bs.toast";
    const EVENT_KEY = `.${DATA_KEY}`;
    const EVENT_MOUSEOVER = `mouseover${EVENT_KEY}`;
    const EVENT_MOUSEOUT = `mouseout${EVENT_KEY}`;
    const EVENT_FOCUSIN = `focusin${EVENT_KEY}`;
    const EVENT_FOCUSOUT = `focusout${EVENT_KEY}`;
    const EVENT_HIDE = `hide${EVENT_KEY}`;
    const EVENT_HIDDEN = `hidden${EVENT_KEY}`;
    const EVENT_SHOW = `show${EVENT_KEY}`;
    const EVENT_SHOWN = `shown${EVENT_KEY}`;
    const CLASS_NAME_FADE = "fade";
    const CLASS_NAME_HIDE = "hide";
    const CLASS_NAME_SHOW = "show";
    const CLASS_NAME_SHOWING = "showing";
    const DefaultType = {
      animation: "boolean",
      autohide: "boolean",
      delay: "number"
    };
    const Default = {
      animation: true,
      autohide: true,
      delay: 5e3
    };
    class Toast extends BaseComponent {
      constructor(element, config2) {
        super(element, config2);
        this._timeout = null;
        this._hasMouseInteraction = false;
        this._hasKeyboardInteraction = false;
        this._setListeners();
      }
      // Getters
      static get Default() {
        return Default;
      }
      static get DefaultType() {
        return DefaultType;
      }
      static get NAME() {
        return NAME;
      }
      // Public
      show() {
        const showEvent = EventHandler.trigger(this._element, EVENT_SHOW);
        if (showEvent.defaultPrevented) {
          return;
        }
        this._clearTimeout();
        if (this._config.animation) {
          this._element.classList.add(CLASS_NAME_FADE);
        }
        const complete = () => {
          this._element.classList.remove(CLASS_NAME_SHOWING);
          EventHandler.trigger(this._element, EVENT_SHOWN);
          this._maybeScheduleHide();
        };
        this._element.classList.remove(CLASS_NAME_HIDE);
        reflow(this._element);
        this._element.classList.add(CLASS_NAME_SHOW, CLASS_NAME_SHOWING);
        this._queueCallback(complete, this._element, this._config.animation);
      }
      hide() {
        if (!this.isShown()) {
          return;
        }
        const hideEvent = EventHandler.trigger(this._element, EVENT_HIDE);
        if (hideEvent.defaultPrevented) {
          return;
        }
        const complete = () => {
          this._element.classList.add(CLASS_NAME_HIDE);
          this._element.classList.remove(CLASS_NAME_SHOWING, CLASS_NAME_SHOW);
          EventHandler.trigger(this._element, EVENT_HIDDEN);
        };
        this._element.classList.add(CLASS_NAME_SHOWING);
        this._queueCallback(complete, this._element, this._config.animation);
      }
      dispose() {
        this._clearTimeout();
        if (this.isShown()) {
          this._element.classList.remove(CLASS_NAME_SHOW);
        }
        super.dispose();
      }
      isShown() {
        return this._element.classList.contains(CLASS_NAME_SHOW);
      }
      // Private
      _maybeScheduleHide() {
        if (!this._config.autohide) {
          return;
        }
        if (this._hasMouseInteraction || this._hasKeyboardInteraction) {
          return;
        }
        this._timeout = setTimeout(() => {
          this.hide();
        }, this._config.delay);
      }
      _onInteraction(event, isInteracting) {
        switch (event.type) {
          case "mouseover":
          case "mouseout": {
            this._hasMouseInteraction = isInteracting;
            break;
          }
          case "focusin":
          case "focusout": {
            this._hasKeyboardInteraction = isInteracting;
            break;
          }
        }
        if (isInteracting) {
          this._clearTimeout();
          return;
        }
        const nextElement = event.relatedTarget;
        if (this._element === nextElement || this._element.contains(nextElement)) {
          return;
        }
        this._maybeScheduleHide();
      }
      _setListeners() {
        EventHandler.on(this._element, EVENT_MOUSEOVER, (event) => this._onInteraction(event, true));
        EventHandler.on(this._element, EVENT_MOUSEOUT, (event) => this._onInteraction(event, false));
        EventHandler.on(this._element, EVENT_FOCUSIN, (event) => this._onInteraction(event, true));
        EventHandler.on(this._element, EVENT_FOCUSOUT, (event) => this._onInteraction(event, false));
      }
      _clearTimeout() {
        clearTimeout(this._timeout);
        this._timeout = null;
      }
      // Static
      static jQueryInterface(config2) {
        return this.each(function() {
          const data = Toast.getOrCreateInstance(this, config2);
          if (typeof config2 === "string") {
            if (typeof data[config2] === "undefined") {
              throw new TypeError(`No method named "${config2}"`);
            }
            data[config2](this);
          }
        });
      }
    }
    enableDismissTrigger(Toast);
    defineJQueryPlugin(Toast);
    var t$2, r$1, u, i$2, o = 0, f = [], c$1 = l$1, e$1 = c$1.__b, a = c$1.__r, v = c$1.diffed, l = c$1.__c, m = c$1.unmount, s = c$1.__;
    function d(n2, t2) {
      c$1.__h && c$1.__h(r$1, n2, o || t2), o = 0;
      var u2 = r$1.__H || (r$1.__H = { __: [], __h: [] });
      return n2 >= u2.__.length && u2.__.push({}), u2.__[n2];
    }
    function h(n2) {
      return o = 1, p(D, n2);
    }
    function p(n2, u2, i2) {
      var o2 = d(t$2++, 2);
      if (o2.t = n2, !o2.__c && (o2.__ = [i2 ? i2(u2) : D(void 0, u2), function(n3) {
        var t2 = o2.__N ? o2.__N[0] : o2.__[0], r2 = o2.t(t2, n3);
        t2 !== r2 && (o2.__N = [r2, o2.__[1]], o2.__c.setState({}));
      }], o2.__c = r$1, !r$1.u)) {
        var f2 = function(n3, t2, r2) {
          if (!o2.__c.__H) return true;
          var u3 = o2.__c.__H.__.filter(function(n4) {
            return !!n4.__c;
          });
          if (u3.every(function(n4) {
            return !n4.__N;
          })) return !c2 || c2.call(this, n3, t2, r2);
          var i3 = o2.__c.props !== n3;
          return u3.forEach(function(n4) {
            if (n4.__N) {
              var t3 = n4.__[0];
              n4.__ = n4.__N, n4.__N = void 0, t3 !== n4.__[0] && (i3 = true);
            }
          }), c2 && c2.call(this, n3, t2, r2) || i3;
        };
        r$1.u = true;
        var c2 = r$1.shouldComponentUpdate, e2 = r$1.componentWillUpdate;
        r$1.componentWillUpdate = function(n3, t2, r2) {
          if (this.__e) {
            var u3 = c2;
            c2 = void 0, f2(n3, t2, r2), c2 = u3;
          }
          e2 && e2.call(this, n3, t2, r2);
        }, r$1.shouldComponentUpdate = f2;
      }
      return o2.__N || o2.__;
    }
    function y(n2, u2) {
      var i2 = d(t$2++, 3);
      !c$1.__s && C$1(i2.__H, u2) && (i2.__ = n2, i2.i = u2, r$1.__H.__h.push(i2));
    }
    function _(n2, u2) {
      var i2 = d(t$2++, 4);
      !c$1.__s && C$1(i2.__H, u2) && (i2.__ = n2, i2.i = u2, r$1.__h.push(i2));
    }
    function A$1(n2) {
      return o = 5, T$1(function() {
        return { current: n2 };
      }, []);
    }
    function F$1(n2, t2, r2) {
      o = 6, _(function() {
        return "function" == typeof n2 ? (n2(t2()), function() {
          return n2(null);
        }) : n2 ? (n2.current = t2(), function() {
          return n2.current = null;
        }) : void 0;
      }, null == r2 ? r2 : r2.concat(n2));
    }
    function T$1(n2, r2) {
      var u2 = d(t$2++, 7);
      return C$1(u2.__H, r2) && (u2.__ = n2(), u2.__H = r2, u2.__h = n2), u2.__;
    }
    function q$1(n2, t2) {
      return o = 8, T$1(function() {
        return n2;
      }, t2);
    }
    function j() {
      for (var n2; n2 = f.shift(); ) if (n2.__P && n2.__H) try {
        n2.__H.__h.forEach(z$1), n2.__H.__h.forEach(B$1), n2.__H.__h = [];
      } catch (t2) {
        n2.__H.__h = [], c$1.__e(t2, n2.__v);
      }
    }
    c$1.__b = function(n2) {
      r$1 = null, e$1 && e$1(n2);
    }, c$1.__ = function(n2, t2) {
      n2 && t2.__k && t2.__k.__m && (n2.__m = t2.__k.__m), s && s(n2, t2);
    }, c$1.__r = function(n2) {
      a && a(n2), t$2 = 0;
      var i2 = (r$1 = n2.__c).__H;
      i2 && (u === r$1 ? (i2.__h = [], r$1.__h = [], i2.__.forEach(function(n3) {
        n3.__N && (n3.__ = n3.__N), n3.i = n3.__N = void 0;
      })) : (i2.__h.forEach(z$1), i2.__h.forEach(B$1), i2.__h = [], t$2 = 0)), u = r$1;
    }, c$1.diffed = function(n2) {
      v && v(n2);
      var t2 = n2.__c;
      t2 && t2.__H && (t2.__H.__h.length && (1 !== f.push(t2) && i$2 === c$1.requestAnimationFrame || ((i$2 = c$1.requestAnimationFrame) || w)(j)), t2.__H.__.forEach(function(n3) {
        n3.i && (n3.__H = n3.i), n3.i = void 0;
      })), u = r$1 = null;
    }, c$1.__c = function(n2, t2) {
      t2.some(function(n3) {
        try {
          n3.__h.forEach(z$1), n3.__h = n3.__h.filter(function(n4) {
            return !n4.__ || B$1(n4);
          });
        } catch (r2) {
          t2.some(function(n4) {
            n4.__h && (n4.__h = []);
          }), t2 = [], c$1.__e(r2, n3.__v);
        }
      }), l && l(n2, t2);
    }, c$1.unmount = function(n2) {
      m && m(n2);
      var t2, r2 = n2.__c;
      r2 && r2.__H && (r2.__H.__.forEach(function(n3) {
        try {
          z$1(n3);
        } catch (n4) {
          t2 = n4;
        }
      }), r2.__H = void 0, t2 && c$1.__e(t2, r2.__v));
    };
    var k = "function" == typeof requestAnimationFrame;
    function w(n2) {
      var t2, r2 = function() {
        clearTimeout(u2), k && cancelAnimationFrame(t2), setTimeout(n2);
      }, u2 = setTimeout(r2, 100);
      k && (t2 = requestAnimationFrame(r2));
    }
    function z$1(n2) {
      var t2 = r$1, u2 = n2.__c;
      "function" == typeof u2 && (n2.__c = void 0, u2()), r$1 = t2;
    }
    function B$1(n2) {
      var t2 = r$1;
      n2.__c = n2.__(), r$1 = t2;
    }
    function C$1(n2, t2) {
      return !n2 || n2.length !== t2.length || t2.some(function(t3, r2) {
        return t3 !== n2[r2];
      });
    }
    function D(n2, t2) {
      return "function" == typeof t2 ? t2(n2) : t2;
    }
    const arrayToString = (val) => {
      val = Array.isArray(val) ? val : [val];
      return val.join(", ");
    };
    const inputString = (input) => {
      if (typeof input === "string") {
        return [input];
      } else {
        return input.map((inp) => {
          if (typeof inp === "string") {
            return inp;
          } else {
            const content2 = inp.content;
            if (typeof content2 === "string") {
              return content2;
            } else {
              const result = content2.map((con) => {
                if (con.type === "text") {
                  return con.text;
                } else {
                  return "";
                }
              });
              return result.join("\n");
            }
          }
        });
      }
    };
    const formatDataset = (name2, samples, epochs) => {
      const perEpochSamples = epochs > 0 ? samples / epochs : samples;
      return `${name2 ? "— " : ""}${perEpochSamples + " "}${epochs > 1 ? `x ${epochs} ` : ""}${samples === 1 ? "sample" : "samples"}`;
    };
    const formatTime$1 = (seconds) => {
      if (seconds < 60) {
        return `${seconds} sec`;
      } else if (seconds < 60 * 60) {
        return `${Math.floor(seconds / 60)} min ${seconds % 60} sec`;
      } else if (seconds < 60 * 60 * 24) {
        const hours = Math.floor(seconds / (60 * 60));
        const minutes = Math.floor(seconds % (60 * 60) / 60);
        const remainingSeconds = seconds % 60;
        return `${hours} hr ${minutes} min ${remainingSeconds} sec`;
      } else {
        const days = Math.floor(seconds / (60 * 60 * 24));
        const hours = Math.floor(seconds % (60 * 60 * 24) / (60 * 60));
        const minutes = Math.floor(seconds % (60 * 60) / 60);
        const remainingSeconds = seconds % 60;
        return `${days} days ${hours} hr ${minutes} min ${remainingSeconds} sec`;
      }
    };
    function formatPrettyDecimal(num2) {
      const numDecimalPlaces = num2.toString().includes(".") ? num2.toString().split(".")[1].length : 0;
      if (numDecimalPlaces === 0) {
        return num2.toFixed(1);
      } else if (numDecimalPlaces > 3) {
        return num2.toFixed(3);
      } else {
        return num2.toString();
      }
    }
    function formatDecimalNoTrailingZeroes(num2) {
      if (typeof num2 !== "number") {
        return num2;
      }
      if (num2.toString().includes(".")) {
        const decimal = num2.toString().split(".")[1];
        const trimmed = decimal.replace(/\.?0+$/, "");
        return num2.toFixed(trimmed.length);
      } else {
        return num2.toFixed(0);
      }
    }
    function toTitleCase(str2) {
      return str2.split(" ").map((w2) => w2[0].toUpperCase() + w2.substr(1).toLowerCase()).join(" ");
    }
    function formatNoDecimal(num2) {
      if (typeof num2 !== "number") {
        return num2;
      }
      const rounded = Math.round(num2);
      return rounded.toFixed(0);
    }
    function formatNumber(num2) {
      return num2.toLocaleString(navigator.language, {
        minimumFractionDigits: 0,
        maximumFractionDigits: 5
      });
    }
    function formatDateTime(date) {
      const options = {
        year: "2-digit",
        month: "2-digit",
        day: "2-digit",
        hour: "numeric",
        minute: "2-digit",
        second: "2-digit",
        hour12: true
      };
      return new Intl.DateTimeFormat(void 0, options).format(date);
    }
    function formatDuration(start2, end2) {
      const durationMs = end2.getTime() - start2.getTime();
      const durationSec = durationMs / 1e3;
      return formatTime$1(durationSec);
    }
    const filename = (path) => {
      const pathparts = path.split("/");
      const basename = pathparts.slice(-1)[0];
      const match = basename.match(/(.*)\.\S+$/);
      if (match) {
        return match[1];
      } else {
        return path;
      }
    };
    const dirname = (path) => {
      const pathparts = path.split("/");
      if (pathparts.length > 1) {
        pathparts.pop();
      }
      return pathparts.join("/");
    };
    function sleep$1(ms) {
      return new Promise((resolve) => setTimeout(resolve, ms));
    }
    function throttle$1(func, wait, options) {
      var context, args, result;
      var timeout = null;
      var previous = 0;
      if (!options) options = {};
      var later = function() {
        previous = options.leading === false ? 0 : Date.now();
        timeout = null;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      };
      return function() {
        var now = Date.now();
        if (!previous && options.leading === false) previous = now;
        var remaining = wait - (now - previous);
        context = this;
        args = arguments;
        if (remaining <= 0 || remaining > wait) {
          if (timeout) {
            clearTimeout(timeout);
            timeout = null;
          }
          previous = now;
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        } else if (!timeout && options.trailing !== false) {
          timeout = setTimeout(later, remaining);
        }
        return result;
      };
    }
    function debounce$1(func, wait, options = {}) {
      let timeout, context, args, result;
      let lastCallTime = null;
      const later = () => {
        const last = Date.now() - lastCallTime;
        if (last < wait && last >= 0) {
          timeout = setTimeout(later, wait - last);
        } else {
          timeout = null;
          if (!options.leading) {
            result = func.apply(context, args);
            if (!timeout) context = args = null;
          }
        }
      };
      return function() {
        context = this;
        args = arguments;
        lastCallTime = Date.now();
        const callNow = options.leading && !timeout;
        if (!timeout) {
          timeout = setTimeout(later, wait);
        }
        if (callNow) {
          result = func.apply(context, args);
          context = args = null;
        }
        return result;
      };
    }
    const clearDocumentSelection = () => {
      const sel = window.getSelection();
      if (sel) {
        if (sel.removeAllRanges) {
          sel.removeAllRanges();
        } else if (sel.empty) {
          sel.empty();
        }
      }
    };
    const ApplicationIcons = {
      approve: "bi bi-shield",
      approvals: {
        approve: "bi bi-shield-check",
        reject: "bi bi-shield-x",
        terminate: "bi bi-shield-exclamation",
        escalate: "bi bi-box-arrow-up",
        modify: "bi bi-pencil-square"
      },
      arrows: {
        right: "bi bi-arrow-right",
        down: "bi bi-arrow-down",
        up: "bi bi-arrow-up"
      },
      caret: {
        right: "bi bi-caret-right",
        down: "bi bi-caret-down"
      },
      changes: {
        add: "bi bi-plus",
        remove: "bi bi-dash",
        replace: "bi bi-plus-slash-minus"
      },
      chevron: {
        right: "bi bi-chevron-right",
        down: "bi bi-chevron-down"
      },
      collapse: {
        all: "bi bi-arrows-collapse",
        up: "bi bi-chevron-up"
      },
      close: "bi bi-x",
      config: "bi bi-gear",
      confirm: "bi bi-check",
      copy: "bi bi-copy",
      epoch: (epoch) => {
        return `bi bi-${epoch}-circle`;
      },
      error: "bi bi-exclamation-circle",
      "expand-all": "bi bi-arrows-expand",
      "expand-down": "bi bi-chevron-down",
      fork: "bi bi-signpost-split",
      info: "bi bi-info-circle",
      input: "bi bi-terminal",
      inspect: "bi bi-gear",
      json: "bi bi-filetype-json",
      limits: {
        messages: "bi bi-chat-right-text",
        context: "bi bi-person-workspace",
        operator: "bi bi-person-workspace",
        tokens: "bi bi-list",
        time: "bi bi-stopwatch"
      },
      logging: {
        notset: "bi bi-card-text",
        debug: "bi bi-bug",
        http: "bi bi-download",
        info: "bi bi-info-square",
        warning: "bi bi-exclamation-triangle",
        error: "bi bi-x-circle",
        critical: "bi bi-fire"
      },
      menu: "bi bi-list",
      messages: "bi bi-chat-right-text",
      metadata: "bi bi-table",
      model: "bi bi-grid-3x3-gap",
      "toggle-right": "bi bi-chevron-right",
      more: "bi bi-zoom-in",
      "multiple-choice": "bi bi-card-list",
      next: "bi bi-chevron-right",
      play: "bi bi-play-fill",
      previous: "bi bi-chevron-left",
      refresh: "bi bi-arrow-clockwise",
      role: {
        user: "bi bi-person",
        system: "bi bi-cpu",
        assistant: "bi bi-robot",
        tool: "bi bi-tools",
        unknown: "bi bi-patch-question"
      },
      running: "bi bi-stars",
      sample: "bi bi-database",
      samples: "bi bi-file-spreadsheet",
      scorer: "bi bi-calculator",
      search: "bi bi-search",
      solvers: {
        default: "bi bi-arrow-return-right",
        generate: "bi bi-share",
        chain_of_thought: "bi bi-link",
        self_critique: "bi bi-arrow-left-right",
        system_message: "bi bi-cpu",
        use_tools: "bi bi-tools"
      },
      step: "bi bi-fast-forward-btn",
      subtask: "bi bi-subtract",
      transcript: "bi bi-list-columns-reverse",
      usage: "bi bi-stopwatch"
    };
    const kBaseFontSize = 0.9;
    const ScaleBaseFont = (scale) => {
      return `${kBaseFontSize + scale}rem`;
    };
    const FontSize = {
      title: ScaleBaseFont(0.6),
      "title-secondary": ScaleBaseFont(0.4),
      larger: ScaleBaseFont(0.2),
      large: ScaleBaseFont(0.1),
      base: ScaleBaseFont(0),
      small: ScaleBaseFont(-0.1),
      smaller: ScaleBaseFont(-0.1)
    };
    const TextStyle = {
      label: {
        textTransform: "uppercase"
      },
      secondary: {
        color: "var(--bs-secondary)"
      },
      tertiary: {
        color: "var(--bs-tertiary-color)"
      }
    };
    const ErrorPanel = ({ id, classes, title, error: error2 }) => {
      const emptyStyle = {
        display: "flex",
        flex: "0 0 content",
        alignItems: "center",
        justifyContent: "center"
      };
      const message = error2.message;
      const stack2 = error2.stack;
      return m$1`
    <div style=${{ overflowY: "auto", height: "100vh" }}>
      <div
        ...${{ id }}
        class="${classes ? classes : ""}"
        style=${{
        ...emptyStyle,
        flexDirection: "column",
        minHeight: "10rem",
        marginTop: "4rem",
        marginBottom: "4em",
        width: "100vw"
      }}
      >
        <div style=${{ ...emptyStyle, fontSize: FontSize.larger }}>
          <div>
            <i
              class="${ApplicationIcons.error}"
              style="${{ marginRight: "0.5rem", color: "var(--bs-red)" }}"
            ></i>
          </div>
          <div>${title || ""}</div>
        </div>
        <div
          style=${{
        display: "inline-block",
        fontSize: FontSize.smaller,
        marginTop: "1rem",
        border: "solid 1px var(--bs-border-color)",
        borderRadius: "var(--bs-border-radius)",
        padding: "1em",
        maxWidth: "80%"
      }}
        >
          <div>
            Error: ${message || ""}
            ${stack2 && error2.displayStack !== false && m$1`
              <pre
                style=${{ fontSize: FontSize.smaller, whiteSpace: "pre-wrap" }}
              >
            <code>
              at ${stack2}
            </code>
          </pre>
            `}
          </div>
        </div>
      </div>
    </div>
  `;
    };
    class AppErrorBoundary extends x$1 {
      constructor(props) {
        super(props);
        this.state = { hasError: false };
      }
      static getDerivedStateFromError(error2) {
        return { hasError: true, error: error2 };
      }
      componentDidCatch(error2, errorInfo) {
        console.log({ error: error2, errorInfo });
      }
      render() {
        if (this.state.hasError) {
          console.error({ e: this.state.error });
          return m$1`<${ErrorPanel}
        title="An unexpected error occurred."
        error="${this.state.error}"
      />`;
        }
        return this.props.children;
      }
    }
    const ProgressBar = ({ style: style2, containerStyle, animating }) => {
      const emptyStyle = {
        display: "flex",
        textAlign: "center",
        flex: "0 0 content",
        alignItems: "center",
        justifyContent: "center",
        border: "none",
        padding: "0",
        zIndex: 1001,
        width: "100%",
        height: "0px",
        overflow: "visible"
      };
      const progressContainerStyle = {
        width: "100%",
        height: "2px",
        ...containerStyle,
        background: "#ffffff00"
      };
      const progressBarStyle = {
        width: "5%",
        height: "2px",
        ...style2
      };
      return m$1`
    <div style=${emptyStyle} class="empty-message">
      <div
        class="progress"
        role="progressbar"
        aria-label="Basic example"
        aria-valuenow="25"
        aria-valuemin="0"
        aria-valuemax="100"
        style=${progressContainerStyle}
      >
        ${animating ? m$1`<div
              class="progress-bar left-to-right-animate"
              style=${progressBarStyle}
            ></div>` : ""}
      </div>
    </div>
  `;
    };
    const ApplicationStyles = {
      moreButton: {
        maxHeight: "1.8em",
        fontSize: FontSize.smaller,
        padding: "0 0.2em 0 0.2em",
        ...TextStyle.secondary
      },
      threeLineClamp: {
        display: "-webkit-box",
        "-webkit-line-clamp": "3",
        "-webkit-box-orient": "vertical",
        overflow: "hidden"
      },
      lineClamp: (len) => {
        return {
          display: "-webkit-box",
          "-webkit-line-clamp": `${len}`,
          "-webkit-box-orient": "vertical",
          overflow: "hidden"
        };
      },
      wrapText: () => {
        return {
          whiteSpace: "nowrap",
          textOverflow: "ellipsis",
          overflow: "hidden"
        };
      },
      scoreFills: {
        green: {
          backgroundColor: "var(--bs-success)",
          borderColor: "var(--bs-success)",
          color: "var(--bs-body-bg)"
        },
        red: {
          backgroundColor: "var(--bs-danger)",
          borderColor: "var(--bs-danger)",
          color: "var(--bs-body-bg)"
        },
        orange: {
          backgroundColor: "var(--bs-orange)",
          borderColor: "var(--bs-orange)",
          color: "var(--bs-body-bg)"
        }
      }
    };
    const Sidebar = ({
      offcanvas,
      logs,
      loading,
      logHeaders,
      selectedIndex,
      onSelectedIndexChanged
    }) => {
      const btnOffCanClass = offcanvas ? "" : " d-md-none";
      const sidebarOffCanClass = offcanvas ? " offcanvas" : " offcanvas-md";
      return m$1`
    <div
      class="sidebar border-end offcanvas-start${sidebarOffCanClass}"
      id="sidebarOffCanvas"
      style=${{ display: "flex", flexDirection: "column", height: "100%" }}
    >
      <div
        style=${{
        display: "grid",
        gridTemplateColumns: "minmax(0, 1fr) auto",
        columnGap: "0.2rem",
        alignItems: "center",
        paddingLeft: "0.5rem",
        opacity: "0.7",
        position: "fixed",
        width: "var(--sidebar-width)",
        zIndex: 10,
        borderBottom: "solid var(--bs-light-border-subtle) 1px",
        paddingBottom: "0.5rem",
        paddingTop: "0.5rem",
        height: "3.6em"
      }}
      >
        <${LogDirectoryTitle} log_dir=${logs.log_dir} offcanvas=${offcanvas} />
        <button
          id="sidebarToggle"
          class="btn d-inline${btnOffCanClass}"
          type="button"
          data-bs-toggle="offcanvas"
          data-bs-target="#sidebarOffCanvas"
          aria-controls="sidebarOffCanvas"
          style=${{
        padding: ".1rem",
        alignSelf: "end",
        width: "40px",
        flex: "0 0 content"
      }}
        >
          <i class=${ApplicationIcons.close}></i>
        </button>
      </div>
      <div style=${{ marginTop: "3.6em", zIndex: 3 }}>
        <${ProgressBar} animating=${loading} style=${{ marginTop: "-2px" }} />
      </div>
      <ul
        class="list-group"
        style=${{ flexGrow: 1, overflowY: "auto", marginTop: "-3px" }}
      >
        ${logs.files.map((file, index) => {
        var _a2, _b2, _c, _d, _e, _f, _g, _h, _i;
        const active = index === selectedIndex ? " active" : "";
        const logHeader = logHeaders[file.name];
        const hyperparameters = logHeader ? {
          ...(_a2 = logHeader.plan) == null ? void 0 : _a2.config,
          ...(_b2 = logHeader.eval) == null ? void 0 : _b2.task_args
        } : void 0;
        const model = (_c = logHeader == null ? void 0 : logHeader.eval) == null ? void 0 : _c.model;
        const dataset = (_d = logHeader == null ? void 0 : logHeader.eval) == null ? void 0 : _d.dataset;
        const uniqScorers = /* @__PURE__ */ new Set();
        (_f = (_e = logHeader == null ? void 0 : logHeader.results) == null ? void 0 : _e.scores) == null ? void 0 : _f.forEach((scorer2) => {
          uniqScorers.add(scorer2.name);
        });
        const scorer = Array.from(uniqScorers).join(",");
        const scorerLabel = Object.keys(((_g = logHeader == null ? void 0 : logHeader.results) == null ? void 0 : _g.scores) || {}).length === 1 ? "scorer" : "scorers";
        const completed = (_h = logHeader == null ? void 0 : logHeader.stats) == null ? void 0 : _h.completed_at;
        const time = completed ? new Date(completed) : void 0;
        const timeStr = time ? `${time.toDateString()}
          ${time.toLocaleTimeString([], {
          hour: "2-digit",
          minute: "2-digit"
        })}` : "";
        return m$1`
            <li
              class="list-group-item list-group-item-action${active}"
              onclick=${() => onSelectedIndexChanged(index)}
            >
              <div
                style=${{
          display: "flex",
          flexDirection: "row",
          justifyContent: "space-between"
        }}
              >
                <div style=${{ overflow: "hidden" }}>
                  <div
                    style=${{
          fontSize: FontSize["title-secondary"],
          whiteSpace: "nowrap",
          overflow: "hidden",
          textOverflow: "ellipsis"
        }}
                  >
                    ${((_i = logHeader == null ? void 0 : logHeader.eval) == null ? void 0 : _i.task) || file.task}
                  </div>
                  <small class="mb-1" style=${{ fontSize: FontSize.small }}>
                    ${timeStr}
                  </small>

                  ${model ? m$1` <div>
                        <small
                          class="mb-1"
                          style=${{ fontSize: FontSize.small }}
                          >${model}</small
                        >
                      </div>` : ""}
                </div>
                <${EvalStatus} logHeader=${logHeader} />
              </div>
              <div
                style=${{
          marginTop: "1em",
          ...ApplicationStyles.threeLineClamp
        }}
              >
                <small class="mb-1">
                  ${hyperparameters ? Object.keys(hyperparameters).map((key2) => {
          const val = hyperparameters[key2];
          if (Array.isArray(val) || typeof val === "object") {
            return `${key2}: ${JSON.stringify(val)}`;
          } else {
            return `${key2}: ${val}`;
          }
        }).join(", ") : ""}
                </small>
              </div>
              ${(dataset || scorer) && (logHeader == null ? void 0 : logHeader.status) === "success" ? m$1`<div
                    style=${{
          display: "flex",
          justifyContent: "space-between",
          marginTop: "0em",
          fontSize: FontSize.small
        }}
                  >
                    <span>dataset: ${dataset.name || "(samples)"}</span
                    ><span>${scorerLabel}: ${scorer}</span>
                  </div>` : ""}
            </li>
          `;
      })}
      </ul>
    </div>
  `;
    };
    const prettyDir = (path) => {
      try {
        let url = new URL(path);
        if (url.protocol === "file:") {
          return url.pathname;
        } else {
          return path;
        }
      } catch {
        return path;
      }
    };
    const EvalStatus = ({ logHeader }) => {
      var _a2, _b2;
      switch (logHeader == null ? void 0 : logHeader.status) {
        case "error":
          return m$1`<${StatusError} message="Error" />`;
        case "cancelled":
          return m$1`<${StatusCancelled} message="Cancelled" />`;
        case "started":
          return m$1`<${StatusRunning} message="Running" />`;
        default:
          if (((_a2 = logHeader == null ? void 0 : logHeader.results) == null ? void 0 : _a2.scores) && ((_b2 = logHeader.results) == null ? void 0 : _b2.scores.length) > 0) {
            if (logHeader.results.scores.length === 1) {
              return m$1`<${SidebarScore}
            scorer=${logHeader.results.scores[0]}
          />`;
            } else {
              return m$1`<${SidebarScores} scores=${logHeader.results.scores} />`;
            }
          } else {
            return "";
          }
      }
    };
    const SidebarScore = ({ scorer }) => {
      return m$1`<div
    style=${{
        display: "flex",
        flexDirection: "row",
        flexWrap: "wrap",
        justifyContent: "flex-end"
      }}
  >
    ${Object.keys(scorer.metrics).map((metric) => {
        return m$1`
        <div
          style=${{
          display: "flex",
          flexDirection: "column",
          alignItems: "flex-end",
          marginLeft: "1em",
          marginBottom: "0.4em",
          marginTop: "0.5rem"
        }}
        >
          <div
            style=${{
          marginBottom: "-0.3em",
          fontSize: FontSize.small,
          ...TextStyle.label,
          ...TextStyle.secondary
        }}
          >
            ${scorer.metrics[metric].name}
          </div>
          ${scorer.reducer ? m$1`<div
                style=${{
          fontSize: FontSize.small,
          marginBottom: "-0.2rem"
        }}
              >
                ${scorer.reducer}
              </div>` : ""}
          <div style=${{ fontSize: FontSize["title-secondary"] }}>
            ${formatPrettyDecimal(scorer.metrics[metric].value)}
          </div>
        </div>
      `;
      })}
  </div>`;
    };
    const SidebarScores = ({ scores }) => {
      return m$1`<div
    style=${{
        display: "flex",
        flexDirection: "row",
        flexWrap: "wrap",
        justifyContent: "flex-end",
        rowGap: "1em"
      }}
  >
    ${scores.map((score2) => {
        const name2 = score2.name;
        const reducer = score2.reducer;
        return m$1`
        <div
          style=${{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          marginLeft: "1em"
        }}
        >
          <div
            style=${{
          fontSize: FontSize.base,
          width: "100%",
          fontWeight: 300,
          borderBottom: "solid var(--bs-border-color) 1px",
          ...TextStyle.label,
          ...TextStyle.secondary
        }}
          >
            ${name2}
          </div>
          ${reducer ? m$1` <div
                style=${{
          fontSize: FontSize.smaller,
          width: "100%",
          fontWeight: 300
        }}
              >
                ${reducer}
              </div>` : ""}
          <div
            style=${{
          fontSize: FontSize.smaller,
          display: "grid",
          gridTemplateColumns: "max-content max-content",
          gridGap: "0 0.3rem"
        }}
          >
            ${Object.keys(score2.metrics).map((key2) => {
          const metric = score2.metrics[key2];
          return m$1` <div
                  style=${{ ...TextStyle.label, ...TextStyle.secondary }}
                >
                  ${metric.name}
                </div>
                <div style=${{ fontWeight: "600" }}>
                  ${formatPrettyDecimal(metric.value)}
                </div>`;
        })}
          </div>
        </div>
      `;
      })}
  </div>`;
    };
    const StatusCancelled = ({ message }) => {
      return m$1`<div
    style=${{
        marginTop: "0.2em",
        fontSize: FontSize.small,
        ...TextStyle.label,
        ...TextStyle.secondary
      }}
  >
    ${message}
  </div>`;
    };
    const StatusRunning = ({ message }) => {
      return m$1` <div
    style=${{
        display: "grid",
        gridTemplateColumns: "max-content max-content",
        columnGap: "0.5em",
        marginTop: "0.3em",
        fontSize: FontSize.small,
        ...TextStyle.secondary,
        ...TextStyle.label
      }}
  >
    <div>${message}</div>
  </div>`;
    };
    const StatusError = ({ message }) => {
      return m$1`<div
    style=${{
        color: "var(--bs-danger)",
        marginTop: "0.2em",
        fontSize: FontSize.small,
        ...TextStyle.label
      }}
  >
    ${message}
  </div>`;
    };
    const LogDirectoryTitle = ({ log_dir, offcanvas }) => {
      if (log_dir) {
        const displayDir = prettyDir(log_dir);
        return m$1`<div style=${{ display: "flex", flexDirection: "column" }}>
      <span
        style=${{
          fontSize: FontSize.smaller,
          ...TextStyle.label,
          ...TextStyle.secondary
        }}
        >Log Directory</span
      >
      <span
        title=${displayDir}
        style=${{
          fontSize: FontSize.base,
          overflow: "hidden",
          whiteSpace: "nowrap",
          textOverflow: "ellipsis"
        }}
        >${offcanvas ? displayDir : ""}</span
      >
    </div>`;
      } else {
        return m$1`<span
      style=${{
          fontSize: FontSize.title
        }}
      >${offcanvas ? "Log History" : ""}
    </span>`;
      }
    };
    const EmptyPanel = ({ id, classes, height, style: style2, children: children2 }) => {
      const emptyStyle = {
        display: "flex",
        textAlign: "center",
        flex: "0 0 content",
        alignItems: "center",
        justifyContent: "center",
        height: height ? height : "10rem"
      };
      return m$1`
    <div
      ...${{ id }}
      class="${classes ? classes : ""}"
      style=${{ width: "100%" }}
    >
      <div style=${{ ...emptyStyle, ...style2 }}>
        <div>${children2 || ""}</div>
      </div>
    </div>
  `;
    };
    const TabSet = ({ id, type, classes, tools, styles, children: children2 }) => {
      if (!id) {
        throw new Error("Tabsets require an id to function properly");
      }
      const tabs = children2;
      const tabType = type || "tabs";
      const tabSetStyle = {
        alignItems: "space-between"
      };
      return m$1`<ul
      ...${{ id }}
      class="nav nav-${tabType} ${classes ? classes : ""}"
      role="tablist"
      aria-orientation="horizontal"
      style=${{ ...tabSetStyle, ...styles.tabSet }}
    >
      <${Tabs} tabs=${tabs} type=${tabType} style=${styles.tabs} />
      <${TabTools} tools=${tools} />
    </ul>
    <${TabPanels} id=${id} tabs=${tabs} style=${styles.tabBody} />`;
    };
    const TabPanel = ({
      id,
      index,
      selected,
      style: style2,
      scrollable,
      scrollRef,
      classes,
      scrollPosition,
      setScrollPosition,
      children: children2
    }) => {
      const tabContentsId = computeTabContentsId(id, index);
      const tabContentsRef = scrollRef || A$1(
        /** @type {HTMLElement|null} */
        null
      );
      y(() => {
        setTimeout(() => {
          if (scrollPosition !== void 0 && tabContentsRef.current && tabContentsRef.current.scrollTop !== scrollPosition) {
            tabContentsRef.current.scrollTop = scrollPosition;
          }
        }, 0);
      });
      const onScroll = q$1(
        (e2) => {
          setScrollPosition(e2.srcElement.scrollTop);
        },
        [setScrollPosition]
      );
      return m$1`<div
    id="${tabContentsId}"
    ref=${tabContentsRef}
    class="tab-pane show${selected ? " active" : ""}${classes ? ` ${classes}` : ""}"
    style=${{
        flex: "1",
        overflowY: scrollable === void 0 || scrollable ? "auto" : "hidden",
        ...style2
      }}
    onscroll=${onScroll}
  >
    ${children2}
  </div>`;
    };
    const Tabs = ({ tabs, type, style: style2 }) => {
      return tabs.map((tab, index) => {
        return m$1` <${Tab}
      type=${type || "tabs"}
      tab=${tab}
      index=${index}
      style=${style2}
    />`;
      });
    };
    const Tab = ({ type, tab, index, style: style2 }) => {
      const tabId = tab.props.id || computeTabId("tabset", index);
      const tabContentsId = computeTabContentsId(tab.props.id, index);
      const isActive = tab.props.selected;
      const tabStyle = {
        color: "var(--bs-body-color)",
        ...style2,
        padding: "0.25rem 0.5rem",
        borderTopLeftRadius: "var(--bs-border-radius)",
        borderTopRightRadius: "var(--bs-border-radius)",
        ...TextStyle.label,
        fontSize: FontSize.small,
        fontWeight: 500,
        marginTop: "2px",
        marginBottom: "-1px"
      };
      const pillStyle = {
        ...style2
      };
      return m$1`
    <li class="nav-item" role="presentation" style=${{ alignSelf: "end" }}>
      <button
        id="${tabId}"
        style=${type === "tabs" ? tabStyle : pillStyle}
        class="nav-link ${isActive ? "active" : ""}"
        data-bs-toggle="tab"
        data-bs-target="#${tabContentsId}"
        type="button"
        role="tab"
        aria-controls="${tabContentsId}"
        aria-selected="${isActive ? true : false}"
        ...${{
        onclick: (e2) => {
          tab.props.onSelected(e2);
          return false;
        }
      }}
      >
        ${tab.props.icon ? m$1`<i
              class="${tab.props.icon}"
              style=${{ marginRight: "0.5em" }}
            ></i>` : ""}
        ${tab.props.title}
      </button>
    </li>
  `;
    };
    const TabTools = ({ tools }) => {
      return m$1`<div
    class="tab-tools"
    style=${{
        flexBasis: "auto",
        marginLeft: "auto",
        display: "flex",
        alignItems: "center",
        justifyContent: "end",
        flexWrap: "wrap",
        rowGap: "0.3rem"
      }}
  >
    ${tools}
  </div>`;
    };
    const TabPanels = ({ id, tabs, style: style2 }) => {
      return m$1`<div class="tab-content" id="${id}-content" style=${{ ...style2 }}>
    ${tabs.map((tab, index) => {
        tab.props.index = index;
        return tab;
      })}
  </div>`;
    };
    const computeTabId = (id, index) => {
      return `${id}-${index}`;
    };
    const computeTabContentsId = (id, index) => {
      return `${id}-contents-${index}`;
    };
    const ToolButton = ({ name: name2, classes, icon, onclick, ...rest }) => {
      const attr = {
        type: "button",
        class: `btn btn-tools ${classes || ""}`,
        onclick,
        ...rest
      };
      const iconEl = icon ? m$1`<i class="${icon}" style=${{ marginRight: "0.5em" }}></i>` : "";
      return g$1("button", attr, m$1`${iconEl}${name2}`);
    };
    const ghCommitUrl = (origin, commit) => {
      const baseUrl = origin.replace(/\.git$/, "");
      return `${baseUrl}/commit/${commit}`;
    };
    const CardHeader = ({ id, icon, label, classes, style: style2, children: children2 }) => {
      return m$1`<div
    class="${classes || ""}"
    ...${{ id }}
    style=${{
        display: "grid",
        gridTemplateColumns: "max-content auto",
        columnGap: "0em",
        padding: "0.5em 0.5em 0.5em 0.5em",
        fontSize: FontSize.small,
        fontWeight: 600,
        ...TextStyle.label,
        ...style2
      }}
  >
    ${icon ? m$1`<i
          class="${icon}"
          style=${{
        paddingRight: "0.2rem"
      }}
        ></i>` : m$1`<span
          style=${{
        paddingRight: "0.2rem"
      }}
        ></span>`}
    ${label ? label : ""} ${children2}
  </div> `;
    };
    const CardBody = ({ id, classes, style: style2, children: children2 }) => {
      return m$1`<div
    class="${classes || ""}"
    ...${{ id }}
    style=${{
        backgroundColor: "var(--bs-body-bg)",
        border: "solid 1px var(--bs-light-border-subtle)",
        borderRadius: "var(--bs-border-radius)",
        margin: "0 8px 8px 8px",
        padding: "0.5em",
        ...style2
      }}
  >
    ${children2}
  </div>`;
    };
    const Card = ({ id, classes, style: style2, children: children2 }) => {
      return m$1`
    <div
      class="${classes || ""}"
      ...${{ id }}
      style=${{
        backgroundColor: "var(--bs-light-bg-subtle)",
        border: "solid 1px var(--bs-light-border-subtle)",
        borderRadius: "var(--bs-border-radius)",
        marginBottom: "1.5em",
        ...style2
      }}
    >
      ${children2}
    </div>
  `;
    };
    var e, t$1, r = {
      exports: {}
    };
    e = r, t$1 = function(e2, t2) {
      Object.defineProperty(t2, "__esModule", {
        value: true
      }), t2.ANSIOutput = t2.ANSIColor = t2.ANSIFont = t2.ANSIStyle = void 0;
      let r2 = 0;
      const n2 = () => ("" + ++r2).padStart(16, "0");
      var o2, i2, s2, a2, u2, l2, g2;
      (function(e3) {
        e3.Bold = "ansiBold", e3.Dim = "ansiDim", e3.Italic = "ansiItalic", e3.Underlined = "ansiUnderlined", e3.SlowBlink = "ansiSlowBlink", e3.RapidBlink = "ansiRapidBlink", e3.Hidden = "ansiHidden", e3.CrossedOut = "ansiCrossedOut", e3.Fraktur = "ansiFraktur", e3.DoubleUnderlined = "ansiDoubleUnderlined", e3.Framed = "ansiFramed", e3.Encircled = "ansiEncircled", e3.Overlined = "ansiOverlined", e3.Superscript = "ansiSuperscript", e3.Subscript = "ansiSubscript";
      })(o2 || (t2.ANSIStyle = o2 = {})), function(e3) {
        e3.AlternativeFont1 = "ansiAlternativeFont1", e3.AlternativeFont2 = "ansiAlternativeFont2", e3.AlternativeFont3 = "ansiAlternativeFont3", e3.AlternativeFont4 = "ansiAlternativeFont4", e3.AlternativeFont5 = "ansiAlternativeFont5", e3.AlternativeFont6 = "ansiAlternativeFont6", e3.AlternativeFont7 = "ansiAlternativeFont7", e3.AlternativeFont8 = "ansiAlternativeFont8", e3.AlternativeFont9 = "ansiAlternativeFont9";
      }(i2 || (t2.ANSIFont = i2 = {})), function(e3) {
        e3.Black = "ansiBlack", e3.Red = "ansiRed", e3.Green = "ansiGreen", e3.Yellow = "ansiYellow", e3.Blue = "ansiBlue", e3.Magenta = "ansiMagenta", e3.Cyan = "ansiCyan", e3.White = "ansiWhite", e3.BrightBlack = "ansiBrightBlack", e3.BrightRed = "ansiBrightRed", e3.BrightGreen = "ansiBrightGreen", e3.BrightYellow = "ansiBrightYellow", e3.BrightBlue = "ansiBrightBlue", e3.BrightMagenta = "ansiBrightMagenta", e3.BrightCyan = "ansiBrightCyan", e3.BrightWhite = "ansiBrightWhite";
      }(s2 || (t2.ANSIColor = s2 = {}));
      class h2 {
        constructor() {
          __publicField(this, "_parserState", g2.BufferingOutput);
          __publicField(this, "_controlSequence", "");
          __publicField(this, "_sgrState");
          __publicField(this, "_outputLines", []);
          __publicField(this, "_outputLine", 0);
          __publicField(this, "_outputColumn", 0);
          __publicField(this, "_buffer", "");
          __publicField(this, "_pendingNewline", false);
        }
        get outputLines() {
          return this.flushBuffer(), this._outputLines;
        }
        static processOutput(e3) {
          const t3 = new h2();
          return t3.processOutput(e3), t3.outputLines;
        }
        processOutput(e3) {
          for (let t3 = 0; t3 < e3.length; t3++) {
            this._pendingNewline && (this.flushBuffer(), this._outputLine++, this._outputColumn = 0, this._pendingNewline = false);
            const r3 = e3.charAt(t3);
            this._parserState === g2.BufferingOutput ? "\x1B" === r3 ? (this.flushBuffer(), this._parserState = g2.ControlSequenceStarted) : "" === r3 ? (this.flushBuffer(), this._parserState = g2.ParsingControlSequence) : this.processCharacter(r3) : this._parserState === g2.ControlSequenceStarted ? "[" === r3 ? this._parserState = g2.ParsingControlSequence : (this._parserState = g2.BufferingOutput, this.processCharacter(r3)) : this._parserState === g2.ParsingControlSequence && (this._controlSequence += r3, r3.match(/^[A-Za-z]$/) && this.processControlSequence());
          }
          this.flushBuffer();
        }
        flushBuffer() {
          for (let e3 = this._outputLines.length; e3 < this._outputLine + 1; e3++) this._outputLines.push(new d2());
          this._buffer && (this._outputLines[this._outputLine].insert(this._buffer, this._outputColumn, this._sgrState), this._outputColumn += this._buffer.length, this._buffer = "");
        }
        processCharacter(e3) {
          switch (e3) {
            case "\n":
              this._pendingNewline = true;
              break;
            case "\r":
              this.flushBuffer(), this._outputColumn = 0;
              break;
            default:
              this._buffer += e3;
          }
        }
        processControlSequence() {
          switch (this._controlSequence.charAt(this._controlSequence.length - 1)) {
            case "A":
              this.processCUU();
              break;
            case "B":
              this.processCUD();
              break;
            case "C":
              this.processCUF();
              break;
            case "D":
              this.processCUB();
              break;
            case "H":
              this.processCUP();
              break;
            case "J":
              this.processED();
              break;
            case "K":
              this.processEL();
              break;
            case "m":
              this.processSGR();
          }
          this._controlSequence = "", this._parserState = g2.BufferingOutput;
        }
        processCUU() {
          const e3 = this._controlSequence.match(/^([0-9]*)A$/);
          e3 && (this._outputLine = Math.max(this._outputLine - k2(e3[1], 1, 1), 0));
        }
        processCUD() {
          const e3 = this._controlSequence.match(/^([0-9]*)B$/);
          e3 && (this._outputLine = this._outputLine + k2(e3[1], 1, 1));
        }
        processCUF() {
          const e3 = this._controlSequence.match(/^([0-9]*)C$/);
          e3 && (this._outputColumn = this._outputColumn + k2(e3[1], 1, 1));
        }
        processCUB() {
          const e3 = this._controlSequence.match(/^([0-9]*)D$/);
          e3 && (this._outputColumn = Math.max(this._outputColumn - k2(e3[1], 1, 1), 0));
        }
        processCUP() {
          const e3 = this._controlSequence.match(/^([0-9]*)(?:;?([0-9]*))H$/);
          e3 && (this._outputLine = k2(e3[1], 1, 1) - 1, this._outputColumn = k2(e3[2], 1, 1) - 1);
        }
        processED() {
          const e3 = this._controlSequence.match(/^([0-9]*)J$/);
          if (e3) switch (p2(e3[1], 0)) {
            case 0:
              this._outputLines[this._outputLine].clearToEndOfLine(this._outputColumn);
              for (let e4 = this._outputLine + 1; e4 < this._outputLines.length; e4++) this._outputLines[e4].clearEntireLine();
              break;
            case 1:
              this._outputLines[this._outputLine].clearToBeginningOfLine(this._outputColumn);
              for (let e4 = 0; e4 < this._outputLine; e4++) this._outputLines[e4].clearEntireLine();
              break;
            case 2:
              for (let e4 = 0; e4 < this._outputLines.length; e4++) this._outputLines[e4].clearEntireLine();
          }
        }
        processEL() {
          const e3 = this._controlSequence.match(/^([0-9]*)K$/);
          if (e3) {
            const t3 = this._outputLines[this._outputLine];
            switch (p2(e3[1], 0)) {
              case 0:
                t3.clearToEndOfLine(this._outputColumn);
                break;
              case 1:
                t3.clearToBeginningOfLine(this._outputColumn);
                break;
              case 2:
                t3.clearEntireLine();
            }
          }
        }
        processSGR() {
          const e3 = this._sgrState ? this._sgrState.copy() : new c2(), t3 = this._controlSequence.slice(0, -1).split(";").map((e4) => "" === e4 ? a2.Reset : parseInt(e4, 10));
          for (let r3 = 0; r3 < t3.length; r3++) {
            const n3 = () => {
              if (r3 + 1 !== t3.length) switch (t3[++r3]) {
                case u2.Color256: {
                  if (r3 + 1 === t3.length) return;
                  const e4 = t3[++r3];
                  switch (e4) {
                    case l2.Black:
                      return s2.Black;
                    case l2.Red:
                      return s2.Red;
                    case l2.Green:
                      return s2.Green;
                    case l2.Yellow:
                      return s2.Yellow;
                    case l2.Blue:
                      return s2.Blue;
                    case l2.Magenta:
                      return s2.Magenta;
                    case l2.Cyan:
                      return s2.Cyan;
                    case l2.White:
                      return s2.White;
                    case l2.BrightBlack:
                      return s2.BrightBlack;
                    case l2.BrightRed:
                      return s2.BrightRed;
                    case l2.BrightGreen:
                      return s2.BrightGreen;
                    case l2.BrightYellow:
                      return s2.BrightYellow;
                    case l2.BrightBlue:
                      return s2.BrightBlue;
                    case l2.BrightMagenta:
                      return s2.BrightMagenta;
                    case l2.BrightCyan:
                      return s2.BrightCyan;
                    case l2.BrightWhite:
                      return s2.BrightWhite;
                    default:
                      if (e4 % 1 != 0) return;
                      if (e4 >= 16 && e4 <= 231) {
                        let t4 = e4 - 16, r4 = t4 % 6;
                        t4 = (t4 - r4) / 6;
                        let n4 = t4 % 6;
                        t4 = (t4 - n4) / 6;
                        let o3 = t4;
                        return r4 = Math.round(255 * r4 / 5), n4 = Math.round(255 * n4 / 5), o3 = Math.round(255 * o3 / 5), "#" + _2(o3) + _2(n4) + _2(r4);
                      }
                      if (e4 >= 232 && e4 <= 255) {
                        const t4 = Math.round((e4 - 232) / 23 * 255), r4 = _2(t4);
                        return "#" + r4 + r4 + r4;
                      }
                      return;
                  }
                }
                case u2.ColorRGB: {
                  const e4 = [0, 0, 0];
                  for (let n4 = 0; n4 < 3 && r3 + 1 < t3.length; n4++) e4[n4] = t3[++r3];
                  return "#" + _2(e4[0]) + _2(e4[1]) + _2(e4[2]);
                }
              }
            };
            switch (t3[r3]) {
              case a2.Reset:
                e3.reset();
                break;
              case a2.Bold:
                e3.setStyle(o2.Bold);
                break;
              case a2.Dim:
                e3.setStyle(o2.Dim);
                break;
              case a2.Italic:
                e3.setStyle(o2.Italic);
                break;
              case a2.Underlined:
                e3.setStyle(o2.Underlined, o2.DoubleUnderlined);
                break;
              case a2.SlowBlink:
                e3.setStyle(o2.SlowBlink, o2.RapidBlink);
                break;
              case a2.RapidBlink:
                e3.setStyle(o2.RapidBlink, o2.SlowBlink);
                break;
              case a2.Reversed:
                e3.setReversed(true);
                break;
              case a2.Hidden:
                e3.setStyle(o2.Hidden);
                break;
              case a2.CrossedOut:
                e3.setStyle(o2.CrossedOut);
                break;
              case a2.PrimaryFont:
                e3.setFont();
                break;
              case a2.AlternativeFont1:
                e3.setFont(i2.AlternativeFont1);
                break;
              case a2.AlternativeFont2:
                e3.setFont(i2.AlternativeFont2);
                break;
              case a2.AlternativeFont3:
                e3.setFont(i2.AlternativeFont3);
                break;
              case a2.AlternativeFont4:
                e3.setFont(i2.AlternativeFont4);
                break;
              case a2.AlternativeFont5:
                e3.setFont(i2.AlternativeFont5);
                break;
              case a2.AlternativeFont6:
                e3.setFont(i2.AlternativeFont6);
                break;
              case a2.AlternativeFont7:
                e3.setFont(i2.AlternativeFont7);
                break;
              case a2.AlternativeFont8:
                e3.setFont(i2.AlternativeFont8);
                break;
              case a2.AlternativeFont9:
                e3.setFont(i2.AlternativeFont9);
                break;
              case a2.Fraktur:
                e3.setStyle(o2.Fraktur);
                break;
              case a2.DoubleUnderlined:
                e3.setStyle(o2.DoubleUnderlined, o2.Underlined);
                break;
              case a2.NormalIntensity:
                e3.deleteStyles(o2.Bold, o2.Dim);
                break;
              case a2.NotItalicNotFraktur:
                e3.deleteStyles(o2.Italic, o2.Fraktur);
                break;
              case a2.NotUnderlined:
                e3.deleteStyles(o2.Underlined, o2.DoubleUnderlined);
                break;
              case a2.NotBlinking:
                e3.deleteStyles(o2.SlowBlink, o2.RapidBlink);
                break;
              case a2.ProportionalSpacing:
                break;
              case a2.NotReversed:
                e3.setReversed(false);
                break;
              case a2.Reveal:
                e3.deleteStyles(o2.Hidden);
                break;
              case a2.NotCrossedOut:
                e3.deleteStyles(o2.CrossedOut);
                break;
              case a2.ForegroundBlack:
                e3.setForegroundColor(s2.Black);
                break;
              case a2.ForegroundRed:
                e3.setForegroundColor(s2.Red);
                break;
              case a2.ForegroundGreen:
                e3.setForegroundColor(s2.Green);
                break;
              case a2.ForegroundYellow:
                e3.setForegroundColor(s2.Yellow);
                break;
              case a2.ForegroundBlue:
                e3.setForegroundColor(s2.Blue);
                break;
              case a2.ForegroundMagenta:
                e3.setForegroundColor(s2.Magenta);
                break;
              case a2.ForegroundCyan:
                e3.setForegroundColor(s2.Cyan);
                break;
              case a2.ForegroundWhite:
                e3.setForegroundColor(s2.White);
                break;
              case a2.SetForeground: {
                const t4 = n3();
                t4 && e3.setForegroundColor(t4);
                break;
              }
              case a2.DefaultForeground:
                e3.setForegroundColor();
                break;
              case a2.BackgroundBlack:
                e3.setBackgroundColor(s2.Black);
                break;
              case a2.BackgroundRed:
                e3.setBackgroundColor(s2.Red);
                break;
              case a2.BackgroundGreen:
                e3.setBackgroundColor(s2.Green);
                break;
              case a2.BackgroundYellow:
                e3.setBackgroundColor(s2.Yellow);
                break;
              case a2.BackgroundBlue:
                e3.setBackgroundColor(s2.Blue);
                break;
              case a2.BackgroundMagenta:
                e3.setBackgroundColor(s2.Magenta);
                break;
              case a2.BackgroundCyan:
                e3.setBackgroundColor(s2.Cyan);
                break;
              case a2.BackgroundWhite:
                e3.setBackgroundColor(s2.White);
                break;
              case a2.SetBackground: {
                const t4 = n3();
                t4 && e3.setBackgroundColor(t4);
                break;
              }
              case a2.DefaultBackground:
                e3.setBackgroundColor();
                break;
              case a2.ForegroundBrightBlack:
                e3.setForegroundColor(s2.BrightBlack);
                break;
              case a2.ForegroundBrightRed:
                e3.setForegroundColor(s2.BrightRed);
                break;
              case a2.ForegroundBrightGreen:
                e3.setForegroundColor(s2.BrightGreen);
                break;
              case a2.ForegroundBrightYellow:
                e3.setForegroundColor(s2.BrightYellow);
                break;
              case a2.ForegroundBrightBlue:
                e3.setForegroundColor(s2.BrightBlue);
                break;
              case a2.ForegroundBrightMagenta:
                e3.setForegroundColor(s2.BrightMagenta);
                break;
              case a2.ForegroundBrightCyan:
                e3.setForegroundColor(s2.BrightCyan);
                break;
              case a2.ForegroundBrightWhite:
                e3.setForegroundColor(s2.BrightWhite);
                break;
              case a2.BackgroundBrightBlack:
                e3.setBackgroundColor(s2.BrightBlack);
                break;
              case a2.BackgroundBrightRed:
                e3.setBackgroundColor(s2.BrightRed);
                break;
              case a2.BackgroundBrightGreen:
                e3.setBackgroundColor(s2.BrightGreen);
                break;
              case a2.BackgroundBrightYellow:
                e3.setBackgroundColor(s2.BrightYellow);
                break;
              case a2.BackgroundBrightBlue:
                e3.setBackgroundColor(s2.BrightBlue);
                break;
              case a2.BackgroundBrightMagenta:
                e3.setBackgroundColor(s2.BrightMagenta);
                break;
              case a2.BackgroundBrightCyan:
                e3.setBackgroundColor(s2.BrightCyan);
                break;
              case a2.BackgroundBrightWhite:
                e3.setBackgroundColor(s2.BrightWhite);
            }
          }
          c2.equivalent(e3, this._sgrState) || (this._sgrState = e3);
        }
      }
      t2.ANSIOutput = h2, function(e3) {
        e3[e3.Reset = 0] = "Reset", e3[e3.Bold = 1] = "Bold", e3[e3.Dim = 2] = "Dim", e3[e3.Italic = 3] = "Italic", e3[e3.Underlined = 4] = "Underlined", e3[e3.SlowBlink = 5] = "SlowBlink", e3[e3.RapidBlink = 6] = "RapidBlink", e3[e3.Reversed = 7] = "Reversed", e3[e3.Hidden = 8] = "Hidden", e3[e3.CrossedOut = 9] = "CrossedOut", e3[e3.PrimaryFont = 10] = "PrimaryFont", e3[e3.AlternativeFont1 = 11] = "AlternativeFont1", e3[e3.AlternativeFont2 = 12] = "AlternativeFont2", e3[e3.AlternativeFont3 = 13] = "AlternativeFont3", e3[e3.AlternativeFont4 = 14] = "AlternativeFont4", e3[e3.AlternativeFont5 = 15] = "AlternativeFont5", e3[e3.AlternativeFont6 = 16] = "AlternativeFont6", e3[e3.AlternativeFont7 = 17] = "AlternativeFont7", e3[e3.AlternativeFont8 = 18] = "AlternativeFont8", e3[e3.AlternativeFont9 = 19] = "AlternativeFont9", e3[e3.Fraktur = 20] = "Fraktur", e3[e3.DoubleUnderlined = 21] = "DoubleUnderlined", e3[e3.NormalIntensity = 22] = "NormalIntensity", e3[e3.NotItalicNotFraktur = 23] = "NotItalicNotFraktur", e3[e3.NotUnderlined = 24] = "NotUnderlined", e3[e3.NotBlinking = 25] = "NotBlinking", e3[e3.ProportionalSpacing = 26] = "ProportionalSpacing", e3[e3.NotReversed = 27] = "NotReversed", e3[e3.Reveal = 28] = "Reveal", e3[e3.NotCrossedOut = 29] = "NotCrossedOut", e3[e3.ForegroundBlack = 30] = "ForegroundBlack", e3[e3.ForegroundRed = 31] = "ForegroundRed", e3[e3.ForegroundGreen = 32] = "ForegroundGreen", e3[e3.ForegroundYellow = 33] = "ForegroundYellow", e3[e3.ForegroundBlue = 34] = "ForegroundBlue", e3[e3.ForegroundMagenta = 35] = "ForegroundMagenta", e3[e3.ForegroundCyan = 36] = "ForegroundCyan", e3[e3.ForegroundWhite = 37] = "ForegroundWhite", e3[e3.SetForeground = 38] = "SetForeground", e3[e3.DefaultForeground = 39] = "DefaultForeground", e3[e3.BackgroundBlack = 40] = "BackgroundBlack", e3[e3.BackgroundRed = 41] = "BackgroundRed", e3[e3.BackgroundGreen = 42] = "BackgroundGreen", e3[e3.BackgroundYellow = 43] = "BackgroundYellow", e3[e3.BackgroundBlue = 44] = "BackgroundBlue", e3[e3.BackgroundMagenta = 45] = "BackgroundMagenta", e3[e3.BackgroundCyan = 46] = "BackgroundCyan", e3[e3.BackgroundWhite = 47] = "BackgroundWhite", e3[e3.SetBackground = 48] = "SetBackground", e3[e3.DefaultBackground = 49] = "DefaultBackground", e3[e3.DisableProportionalSpacing = 50] = "DisableProportionalSpacing", e3[e3.Framed = 51] = "Framed", e3[e3.Encircled = 52] = "Encircled", e3[e3.Overlined = 53] = "Overlined", e3[e3.NotFramedNotEncircled = 54] = "NotFramedNotEncircled", e3[e3.NotOverlined = 55] = "NotOverlined", e3[e3.SetUnderline = 58] = "SetUnderline", e3[e3.DefaultUnderline = 59] = "DefaultUnderline", e3[e3.IdeogramUnderlineOrRightSideLine = 60] = "IdeogramUnderlineOrRightSideLine", e3[e3.IdeogramDoubleUnderlineOrDoubleRightSideLine = 61] = "IdeogramDoubleUnderlineOrDoubleRightSideLine", e3[e3.IdeogramOverlineOrLeftSideLine = 62] = "IdeogramOverlineOrLeftSideLine", e3[e3.IdeogramDoubleOverlineOrDoubleLeftSideLine = 63] = "IdeogramDoubleOverlineOrDoubleLeftSideLine", e3[e3.IdeogramStressMarking = 64] = "IdeogramStressMarking", e3[e3.NoIdeogramAttributes = 65] = "NoIdeogramAttributes", e3[e3.Superscript = 73] = "Superscript", e3[e3.Subscript = 74] = "Subscript", e3[e3.NotSuperscriptNotSubscript = 75] = "NotSuperscriptNotSubscript", e3[e3.ForegroundBrightBlack = 90] = "ForegroundBrightBlack", e3[e3.ForegroundBrightRed = 91] = "ForegroundBrightRed", e3[e3.ForegroundBrightGreen = 92] = "ForegroundBrightGreen", e3[e3.ForegroundBrightYellow = 93] = "ForegroundBrightYellow", e3[e3.ForegroundBrightBlue = 94] = "ForegroundBrightBlue", e3[e3.ForegroundBrightMagenta = 95] = "ForegroundBrightMagenta", e3[e3.ForegroundBrightCyan = 96] = "ForegroundBrightCyan", e3[e3.ForegroundBrightWhite = 97] = "ForegroundBrightWhite", e3[e3.BackgroundBrightBlack = 100] = "BackgroundBrightBlack", e3[e3.BackgroundBrightRed = 101] = "BackgroundBrightRed", e3[e3.BackgroundBrightGreen = 102] = "BackgroundBrightGreen", e3[e3.BackgroundBrightYellow = 103] = "BackgroundBrightYellow", e3[e3.BackgroundBrightBlue = 104] = "BackgroundBrightBlue", e3[e3.BackgroundBrightMagenta = 105] = "BackgroundBrightMagenta", e3[e3.BackgroundBrightCyan = 106] = "BackgroundBrightCyan", e3[e3.BackgroundBrightWhite = 107] = "BackgroundBrightWhite";
      }(a2 || (a2 = {})), function(e3) {
        e3[e3.Color256 = 5] = "Color256", e3[e3.ColorRGB = 2] = "ColorRGB";
      }(u2 || (u2 = {})), function(e3) {
        e3[e3.Black = 0] = "Black", e3[e3.Red = 1] = "Red", e3[e3.Green = 2] = "Green", e3[e3.Yellow = 3] = "Yellow", e3[e3.Blue = 4] = "Blue", e3[e3.Magenta = 5] = "Magenta", e3[e3.Cyan = 6] = "Cyan", e3[e3.White = 7] = "White", e3[e3.BrightBlack = 8] = "BrightBlack", e3[e3.BrightRed = 9] = "BrightRed", e3[e3.BrightGreen = 10] = "BrightGreen", e3[e3.BrightYellow = 11] = "BrightYellow", e3[e3.BrightBlue = 12] = "BrightBlue", e3[e3.BrightMagenta = 13] = "BrightMagenta", e3[e3.BrightCyan = 14] = "BrightCyan", e3[e3.BrightWhite = 15] = "BrightWhite";
      }(l2 || (l2 = {})), function(e3) {
        e3[e3.BufferingOutput = 0] = "BufferingOutput", e3[e3.ControlSequenceStarted = 1] = "ControlSequenceStarted", e3[e3.ParsingControlSequence = 2] = "ParsingControlSequence";
      }(g2 || (g2 = {}));
      class c2 {
        constructor() {
          __publicField(this, "_styles");
          __publicField(this, "_foregroundColor");
          __publicField(this, "_backgroundColor");
          __publicField(this, "_underlinedColor");
          __publicField(this, "_reversed");
          __publicField(this, "_font");
        }
        reset() {
          this._styles = void 0, this._foregroundColor = void 0, this._backgroundColor = void 0, this._underlinedColor = void 0, this._reversed = void 0, this._font = void 0;
        }
        copy() {
          const e3 = new c2();
          if (this._styles && this._styles.size) {
            const t3 = /* @__PURE__ */ new Set();
            this._styles.forEach((e4) => t3.add(e4)), e3._styles = t3;
          }
          return e3._foregroundColor = this._foregroundColor, e3._backgroundColor = this._backgroundColor, e3._underlinedColor = this._underlinedColor, e3._reversed = this._reversed, e3._font = this._font, e3;
        }
        setStyle(e3, ...t3) {
          if (this._styles) for (const e4 of t3) this._styles.delete(e4);
          else this._styles = /* @__PURE__ */ new Set();
          this._styles.add(e3);
        }
        deleteStyles(...e3) {
          if (this._styles) {
            for (const t3 of e3) this._styles.delete(t3);
            this._styles.size || (this._styles = void 0);
          }
        }
        setForegroundColor(e3) {
          this._reversed ? this._backgroundColor = e3 : this._foregroundColor = e3;
        }
        setBackgroundColor(e3) {
          this._reversed ? this._foregroundColor = e3 : this._backgroundColor = e3;
        }
        setReversed(e3) {
          e3 ? this._reversed || (this._reversed = true, this.reverseForegroundAndBackgroundColors()) : this._reversed && (this._reversed = void 0, this.reverseForegroundAndBackgroundColors());
        }
        setFont(e3) {
          this._font = e3;
        }
        static equivalent(e3, t3) {
          const r3 = (e4, t4) => t4 instanceof Set ? t4.size ? [...t4] : void 0 : t4;
          return e3 === t3 || JSON.stringify(e3, r3) === JSON.stringify(t3, r3);
        }
        get styles() {
          return this._styles ? [...this._styles] : void 0;
        }
        get foregroundColor() {
          if (this._backgroundColor && !this._foregroundColor) switch (this._backgroundColor) {
            case s2.Black:
            case s2.BrightBlack:
            case s2.Red:
            case s2.BrightRed:
              return s2.White;
            case s2.Green:
            case s2.BrightGreen:
            case s2.Yellow:
            case s2.BrightYellow:
            case s2.Blue:
            case s2.BrightBlue:
            case s2.Magenta:
            case s2.BrightMagenta:
            case s2.Cyan:
            case s2.BrightCyan:
            case s2.White:
            case s2.BrightWhite:
              return s2.Black;
          }
          return this._foregroundColor;
        }
        get backgroundColor() {
          return this._backgroundColor;
        }
        get underlinedColor() {
          return this._underlinedColor;
        }
        get font() {
          return this._font;
        }
        reverseForegroundAndBackgroundColors() {
          const e3 = this._foregroundColor;
          this._foregroundColor = this._backgroundColor, this._backgroundColor = e3;
        }
      }
      class d2 {
        constructor() {
          __publicField(this, "_id", n2());
          __publicField(this, "_outputRuns", []);
          __publicField(this, "_totalLength", 0);
        }
        clearEntireLine() {
          this._totalLength && (this._outputRuns = [new B2(" ".repeat(this._totalLength))]);
        }
        clearToEndOfLine(e3) {
          if ((e3 = Math.max(e3, 0)) >= this._totalLength) return;
          if (0 === e3) return void this.clearEntireLine();
          let t3, r3, n3 = 0;
          for (let o4 = 0; o4 < this._outputRuns.length; o4++) {
            const i4 = this._outputRuns[o4];
            if (e3 < n3 + i4.text.length) {
              t3 = i4, r3 = o4;
              break;
            }
            n3 += i4.text.length;
          }
          if (void 0 === t3 || void 0 === r3) return;
          const o3 = e3 - n3, i3 = " ".repeat(this._totalLength - e3), s3 = [];
          if (o3) {
            const e4 = t3.text.slice(0, o3);
            s3.push(new B2(e4, t3.sgrState)), s3.push(new B2(i3));
          } else s3.push(new B2(i3));
          this.outputRuns.splice(r3, this._outputRuns.length - r3, ...s3);
        }
        clearToBeginningOfLine(e3) {
          if (0 === (e3 = Math.max(e3, 0))) return;
          if (e3 >= this._totalLength) return void this.clearEntireLine();
          let t3, r3, n3 = 0;
          for (let o4 = this._outputRuns.length - 1; o4 >= 0; o4--) {
            const i4 = this._outputRuns[o4];
            if (e3 >= n3 - i4.text.length) {
              t3 = i4, r3 = o4;
              break;
            }
            n3 -= i4.text.length;
          }
          if (void 0 === t3 || void 0 === r3) return;
          const o3 = n3 - e3, i3 = " ".repeat(e3), s3 = [new B2(i3)];
          if (o3) {
            const e4 = t3.text.slice(-o3);
            s3.push(new B2(e4, t3.sgrState));
          }
          this.outputRuns.splice(0, this._outputRuns.length - r3, ...s3);
        }
        insert(e3, t3, r3) {
          if (!e3.length) return;
          if (t3 === this._totalLength) {
            if (this._totalLength += e3.length, this._outputRuns.length) {
              const t4 = this._outputRuns[this._outputRuns.length - 1];
              if (c2.equivalent(t4.sgrState, r3)) return void t4.appendText(e3);
            }
            return void this._outputRuns.push(new B2(e3, r3));
          }
          if (t3 > this._totalLength) {
            const n4 = " ".repeat(t3 - this._totalLength);
            if (this._totalLength += n4.length + e3.length, !r3 && this._outputRuns.length) {
              const t4 = this._outputRuns[this._outputRuns.length - 1];
              if (!t4.sgrState) return t4.appendText(n4), void t4.appendText(e3);
            }
            r3 ? (this._outputRuns.push(new B2(n4)), this._outputRuns.push(new B2(e3, r3))) : this._outputRuns.push(new B2(n4 + e3));
          }
          let n3, o3 = 0;
          for (let e4 = 0; e4 < this._outputRuns.length; e4++) {
            const r4 = this._outputRuns[e4];
            if (t3 < o3 + r4.text.length) {
              n3 = e4;
              break;
            }
            o3 += r4.text.length;
          }
          if (void 0 === n3) return void this._outputRuns.push(new B2(e3, r3));
          if (t3 + e3.length >= this._totalLength) {
            const i4 = t3 - o3, s4 = [];
            if (i4) {
              const t4 = this._outputRuns[n3], o4 = t4.text.slice(0, i4);
              c2.equivalent(t4.sgrState, r3) ? s4.push(new B2(o4 + e3, r3)) : (s4.push(new B2(o4, t4.sgrState)), s4.push(new B2(e3, r3)));
            } else s4.push(new B2(e3, r3));
            return this.outputRuns.splice(n3, 1, ...s4), void (this._totalLength = o3 + i4 + e3.length);
          }
          let i3, s3 = this._totalLength;
          for (let r4 = this._outputRuns.length - 1; r4 >= 0; r4--) {
            const n4 = this._outputRuns[r4];
            if (t3 + e3.length > s3 - n4.text.length) {
              i3 = r4;
              break;
            }
            s3 -= n4.text.length;
          }
          if (void 0 === i3) return void this._outputRuns.push(new B2(e3, r3));
          const a3 = [], u3 = t3 - o3;
          if (u3) {
            const e4 = this._outputRuns[n3], t4 = e4.text.slice(0, u3);
            a3.push(new B2(t4, e4.sgrState));
          }
          a3.push(new B2(e3, r3));
          const l3 = s3 - (t3 + e3.length);
          if (l3) {
            const e4 = this._outputRuns[i3], t4 = e4.text.slice(-l3);
            a3.push(new B2(t4, e4.sgrState));
          }
          this._outputRuns.splice(n3, i3 - n3 + 1, ...a3), this._outputRuns.length > 1 && (this._outputRuns = B2.optimizeOutputRuns(this._outputRuns)), this._totalLength = this._outputRuns.reduce((e4, t4) => e4 + t4.text.length, 0);
        }
        get id() {
          return this._id;
        }
        get outputRuns() {
          return this._outputRuns;
        }
      }
      class B2 {
        constructor(e3, t3) {
          __publicField(this, "_id", n2());
          __publicField(this, "_sgrState");
          __publicField(this, "_text");
          this._sgrState = t3, this._text = e3;
        }
        get sgrState() {
          return this._sgrState;
        }
        static optimizeOutputRuns(e3) {
          const t3 = [e3[0]];
          for (let r3 = 1, n3 = 0; r3 < e3.length; r3++) {
            const o3 = e3[r3];
            c2.equivalent(t3[n3].sgrState, o3.sgrState) ? t3[n3]._text += o3.text : t3[++n3] = o3;
          }
          return t3;
        }
        appendText(e3) {
          this._text += e3;
        }
        get id() {
          return this._id;
        }
        get format() {
          return this._sgrState;
        }
        get text() {
          return this._text;
        }
      }
      const k2 = (e3, t3, r3) => {
        const n3 = p2(e3, t3);
        return Math.max(n3, r3);
      }, p2 = (e3, t3) => {
        const r3 = parseInt(e3);
        return Number.isNaN(r3) ? t3 : r3;
      }, _2 = (e3) => {
        const t3 = Math.max(Math.min(255, e3), 0).toString(16);
        return 2 === t3.length ? t3 : "0" + t3;
      };
    }(0, r.exports), void 0 !== t$1 && (e.exports = t$1);
    var n = r.exports;
    const ANSIDisplay = ({ output, style: style2 }) => {
      const ansiOutput = new n.ANSIOutput();
      ansiOutput.processOutput(output);
      let firstOutput = false;
      return m$1`<div class="ansi-display" style=${{ ...style2 }}>
    ${ansiOutput.outputLines.map((line2) => {
        firstOutput = firstOutput || !!line2.outputRuns.length;
        return m$1`<div class="ansi-display-line">
        ${!line2.outputRuns.length ? firstOutput ? m$1`<br />` : null : line2.outputRuns.map(
          (outputRun) => m$1`<${OutputRun}
                  key=${outputRun.id}
                  outputRun=${outputRun}
                />`
        )}
      </div>`;
      })}
  </div>`;
    };
    const kForeground = 0;
    const kBackground = 1;
    const OutputRun = ({ outputRun }) => {
      const computeStyles2 = (styles) => {
        let cssProperties = {};
        if (styles) {
          styles.forEach((style2) => {
            switch (style2) {
              case n.ANSIStyle.Bold:
                cssProperties = { ...cssProperties, ...{ fontWeight: "bold" } };
                break;
              case n.ANSIStyle.Dim:
                cssProperties = { ...cssProperties, ...{ fontWeight: "lighter" } };
                break;
              case n.ANSIStyle.Italic:
                cssProperties = { ...cssProperties, ...{ fontStyle: "italic" } };
                break;
              case n.ANSIStyle.Underlined:
                cssProperties = {
                  ...cssProperties,
                  ...{
                    textDecorationLine: "underline",
                    textDecorationStyle: "solid"
                  }
                };
                break;
              case n.ANSIStyle.SlowBlink:
                cssProperties = {
                  ...cssProperties,
                  ...{ animation: "ansi-display-run-blink 1s linear infinite" }
                };
                break;
              case n.ANSIStyle.RapidBlink:
                cssProperties = {
                  ...cssProperties,
                  ...{ animation: "ansi-display-run-blink 0.5s linear infinite" }
                };
                break;
              case n.ANSIStyle.Hidden:
                cssProperties = { ...cssProperties, ...{ visibility: "hidden" } };
                break;
              case n.ANSIStyle.CrossedOut:
                cssProperties = {
                  ...cssProperties,
                  ...{
                    textDecorationLine: "line-through",
                    textDecorationStyle: "solid"
                  }
                };
                break;
              case n.ANSIStyle.DoubleUnderlined:
                cssProperties = {
                  ...cssProperties,
                  ...{
                    textDecorationLine: "underline",
                    textDecorationStyle: "double"
                  }
                };
                break;
            }
          });
        }
        return cssProperties;
      };
      const computeForegroundBackgroundColor = (colorType, color) => {
        switch (color) {
          case void 0:
            return {};
          case n.ANSIColor.Black:
          case n.ANSIColor.Red:
          case n.ANSIColor.Green:
          case n.ANSIColor.Yellow:
          case n.ANSIColor.Blue:
          case n.ANSIColor.Magenta:
          case n.ANSIColor.Cyan:
          case n.ANSIColor.White:
          case n.ANSIColor.BrightBlack:
          case n.ANSIColor.BrightRed:
          case n.ANSIColor.BrightGreen:
          case n.ANSIColor.BrightYellow:
          case n.ANSIColor.BrightBlue:
          case n.ANSIColor.BrightMagenta:
          case n.ANSIColor.BrightCyan:
          case n.ANSIColor.BrightWhite:
            if (colorType === kForeground) {
              return { color: `var(--${color})` };
            } else {
              return { background: `var(--${color})` };
            }
          default:
            if (colorType === kForeground) {
              return { color };
            } else {
              return { background: color };
            }
        }
      };
      const computeCSSProperties = (outputRun2) => {
        return !outputRun2.format ? {} : {
          ...computeStyles2(outputRun2.format.styles),
          ...computeForegroundBackgroundColor(
            kForeground,
            outputRun2.format.foregroundColor
          ),
          ...computeForegroundBackgroundColor(
            kBackground,
            outputRun2.format.backgroundColor
          )
        };
      };
      return m$1`<span style=${computeCSSProperties(outputRun)}
    >${outputRun.text}</span
  >`;
    };
    const Buckets = {
      first: 0,
      intermediate: 10,
      final: 1e3
    };
    const decodeCache = {};
    function getDecodeCache(exclude) {
      let cache = decodeCache[exclude];
      if (cache) {
        return cache;
      }
      cache = decodeCache[exclude] = [];
      for (let i2 = 0; i2 < 128; i2++) {
        const ch3 = String.fromCharCode(i2);
        cache.push(ch3);
      }
      for (let i2 = 0; i2 < exclude.length; i2++) {
        const ch3 = exclude.charCodeAt(i2);
        cache[ch3] = "%" + ("0" + ch3.toString(16).toUpperCase()).slice(-2);
      }
      return cache;
    }
    function decode$1(string2, exclude) {
      if (typeof exclude !== "string") {
        exclude = decode$1.defaultChars;
      }
      const cache = getDecodeCache(exclude);
      return string2.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
        let result = "";
        for (let i2 = 0, l2 = seq.length; i2 < l2; i2 += 3) {
          const b1 = parseInt(seq.slice(i2 + 1, i2 + 3), 16);
          if (b1 < 128) {
            result += cache[b1];
            continue;
          }
          if ((b1 & 224) === 192 && i2 + 3 < l2) {
            const b2 = parseInt(seq.slice(i2 + 4, i2 + 6), 16);
            if ((b2 & 192) === 128) {
              const chr = b1 << 6 & 1984 | b2 & 63;
              if (chr < 128) {
                result += "��";
              } else {
                result += String.fromCharCode(chr);
              }
              i2 += 3;
              continue;
            }
          }
          if ((b1 & 240) === 224 && i2 + 6 < l2) {
            const b2 = parseInt(seq.slice(i2 + 4, i2 + 6), 16);
            const b3 = parseInt(seq.slice(i2 + 7, i2 + 9), 16);
            if ((b2 & 192) === 128 && (b3 & 192) === 128) {
              const chr = b1 << 12 & 61440 | b2 << 6 & 4032 | b3 & 63;
              if (chr < 2048 || chr >= 55296 && chr <= 57343) {
                result += "���";
              } else {
                result += String.fromCharCode(chr);
              }
              i2 += 6;
              continue;
            }
          }
          if ((b1 & 248) === 240 && i2 + 9 < l2) {
            const b2 = parseInt(seq.slice(i2 + 4, i2 + 6), 16);
            const b3 = parseInt(seq.slice(i2 + 7, i2 + 9), 16);
            const b4 = parseInt(seq.slice(i2 + 10, i2 + 12), 16);
            if ((b2 & 192) === 128 && (b3 & 192) === 128 && (b4 & 192) === 128) {
              let chr = b1 << 18 & 1835008 | b2 << 12 & 258048 | b3 << 6 & 4032 | b4 & 63;
              if (chr < 65536 || chr > 1114111) {
                result += "����";
              } else {
                chr -= 65536;
                result += String.fromCharCode(55296 + (chr >> 10), 56320 + (chr & 1023));
              }
              i2 += 9;
              continue;
            }
          }
          result += "�";
        }
        return result;
      });
    }
    decode$1.defaultChars = ";/?:@&=+$,#";
    decode$1.componentChars = "";
    const encodeCache = {};
    function getEncodeCache(exclude) {
      let cache = encodeCache[exclude];
      if (cache) {
        return cache;
      }
      cache = encodeCache[exclude] = [];
      for (let i2 = 0; i2 < 128; i2++) {
        const ch3 = String.fromCharCode(i2);
        if (/^[0-9a-z]$/i.test(ch3)) {
          cache.push(ch3);
        } else {
          cache.push("%" + ("0" + i2.toString(16).toUpperCase()).slice(-2));
        }
      }
      for (let i2 = 0; i2 < exclude.length; i2++) {
        cache[exclude.charCodeAt(i2)] = exclude[i2];
      }
      return cache;
    }
    function encode$1(string2, exclude, keepEscaped) {
      if (typeof exclude !== "string") {
        keepEscaped = exclude;
        exclude = encode$1.defaultChars;
      }
      if (typeof keepEscaped === "undefined") {
        keepEscaped = true;
      }
      const cache = getEncodeCache(exclude);
      let result = "";
      for (let i2 = 0, l2 = string2.length; i2 < l2; i2++) {
        const code2 = string2.charCodeAt(i2);
        if (keepEscaped && code2 === 37 && i2 + 2 < l2) {
          if (/^[0-9a-f]{2}$/i.test(string2.slice(i2 + 1, i2 + 3))) {
            result += string2.slice(i2, i2 + 3);
            i2 += 2;
            continue;
          }
        }
        if (code2 < 128) {
          result += cache[code2];
          continue;
        }
        if (code2 >= 55296 && code2 <= 57343) {
          if (code2 >= 55296 && code2 <= 56319 && i2 + 1 < l2) {
            const nextCode = string2.charCodeAt(i2 + 1);
            if (nextCode >= 56320 && nextCode <= 57343) {
              result += encodeURIComponent(string2[i2] + string2[i2 + 1]);
              i2++;
              continue;
            }
          }
          result += "%EF%BF%BD";
          continue;
        }
        result += encodeURIComponent(string2[i2]);
      }
      return result;
    }
    encode$1.defaultChars = ";/?:@&=+$,-_.!~*'()#";
    encode$1.componentChars = "-_.!~*'()";
    function format$1(url) {
      let result = "";
      result += url.protocol || "";
      result += url.slashes ? "//" : "";
      result += url.auth ? url.auth + "@" : "";
      if (url.hostname && url.hostname.indexOf(":") !== -1) {
        result += "[" + url.hostname + "]";
      } else {
        result += url.hostname || "";
      }
      result += url.port ? ":" + url.port : "";
      result += url.pathname || "";
      result += url.search || "";
      result += url.hash || "";
      return result;
    }
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.pathname = null;
    }
    const protocolPattern = /^([a-z0-9.+-]+:)/i;
    const portPattern = /:[0-9]*$/;
    const simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
    const delims = ["<", ">", '"', "`", " ", "\r", "\n", "	"];
    const unwise = ["{", "}", "|", "\\", "^", "`"].concat(delims);
    const autoEscape = ["'"].concat(unwise);
    const nonHostChars = ["%", "/", "?", ";", "#"].concat(autoEscape);
    const hostEndingChars = ["/", "?", "#"];
    const hostnameMaxLen = 255;
    const hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
    const hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
    const hostlessProtocol = {
      javascript: true,
      "javascript:": true
    };
    const slashedProtocol = {
      http: true,
      https: true,
      ftp: true,
      gopher: true,
      file: true,
      "http:": true,
      "https:": true,
      "ftp:": true,
      "gopher:": true,
      "file:": true
    };
    function urlParse(url, slashesDenoteHost) {
      if (url && url instanceof Url) return url;
      const u2 = new Url();
      u2.parse(url, slashesDenoteHost);
      return u2;
    }
    Url.prototype.parse = function(url, slashesDenoteHost) {
      let lowerProto, hec, slashes;
      let rest = url;
      rest = rest.trim();
      if (!slashesDenoteHost && url.split("#").length === 1) {
        const simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
          }
          return this;
        }
      }
      let proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        lowerProto = proto.toLowerCase();
        this.protocol = proto;
        rest = rest.substr(proto.length);
      }
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
      if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        let hostEnd = -1;
        for (let i2 = 0; i2 < hostEndingChars.length; i2++) {
          hec = rest.indexOf(hostEndingChars[i2]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        let auth, atSign;
        if (hostEnd === -1) {
          atSign = rest.lastIndexOf("@");
        } else {
          atSign = rest.lastIndexOf("@", hostEnd);
        }
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = auth;
        }
        hostEnd = -1;
        for (let i2 = 0; i2 < nonHostChars.length; i2++) {
          hec = rest.indexOf(nonHostChars[i2]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }
        if (rest[hostEnd - 1] === ":") {
          hostEnd--;
        }
        const host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        this.parseHost(host);
        this.hostname = this.hostname || "";
        const ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        if (!ipv6Hostname) {
          const hostparts = this.hostname.split(/\./);
          for (let i2 = 0, l2 = hostparts.length; i2 < l2; i2++) {
            const part = hostparts[i2];
            if (!part) {
              continue;
            }
            if (!part.match(hostnamePartPattern)) {
              let newpart = "";
              for (let j2 = 0, k2 = part.length; j2 < k2; j2++) {
                if (part.charCodeAt(j2) > 127) {
                  newpart += "x";
                } else {
                  newpart += part[j2];
                }
              }
              if (!newpart.match(hostnamePartPattern)) {
                const validParts = hostparts.slice(0, i2);
                const notHost = hostparts.slice(i2 + 1);
                const bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = notHost.join(".") + rest;
                }
                this.hostname = validParts.join(".");
                break;
              }
            }
          }
        }
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = "";
        }
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        }
      }
      const hash2 = rest.indexOf("#");
      if (hash2 !== -1) {
        this.hash = rest.substr(hash2);
        rest = rest.slice(0, hash2);
      }
      const qm = rest.indexOf("?");
      if (qm !== -1) {
        this.search = rest.substr(qm);
        rest = rest.slice(0, qm);
      }
      if (rest) {
        this.pathname = rest;
      }
      if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
        this.pathname = "";
      }
      return this;
    };
    Url.prototype.parseHost = function(host) {
      let port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ":") {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) {
        this.hostname = host;
      }
    };
    const mdurl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      decode: decode$1,
      encode: encode$1,
      format: format$1,
      parse: urlParse
    }, Symbol.toStringTag, { value: "Module" }));
    const Any = /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
    const Cc = /[\0-\x1F\x7F-\x9F]/;
    const regex$1 = /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
    const P$1 = /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
    const regex = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/;
    const Z = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
    const ucmicro = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      Any,
      Cc,
      Cf: regex$1,
      P: P$1,
      S: regex,
      Z
    }, Symbol.toStringTag, { value: "Module" }));
    const htmlDecodeTree = new Uint16Array(
      // prettier-ignore
      'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'.split("").map((c2) => c2.charCodeAt(0))
    );
    const xmlDecodeTree = new Uint16Array(
      // prettier-ignore
      "Ȁaglq	\x1Bɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢".split("").map((c2) => c2.charCodeAt(0))
    );
    var _a$2;
    const decodeMap = /* @__PURE__ */ new Map([
      [0, 65533],
      // C1 Unicode control character reference replacements
      [128, 8364],
      [130, 8218],
      [131, 402],
      [132, 8222],
      [133, 8230],
      [134, 8224],
      [135, 8225],
      [136, 710],
      [137, 8240],
      [138, 352],
      [139, 8249],
      [140, 338],
      [142, 381],
      [145, 8216],
      [146, 8217],
      [147, 8220],
      [148, 8221],
      [149, 8226],
      [150, 8211],
      [151, 8212],
      [152, 732],
      [153, 8482],
      [154, 353],
      [155, 8250],
      [156, 339],
      [158, 382],
      [159, 376]
    ]);
    const fromCodePoint$2 = (
      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
      (_a$2 = String.fromCodePoint) !== null && _a$2 !== void 0 ? _a$2 : function(codePoint) {
        let output = "";
        if (codePoint > 65535) {
          codePoint -= 65536;
          output += String.fromCharCode(codePoint >>> 10 & 1023 | 55296);
          codePoint = 56320 | codePoint & 1023;
        }
        output += String.fromCharCode(codePoint);
        return output;
      }
    );
    function replaceCodePoint(codePoint) {
      var _a2;
      if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
        return 65533;
      }
      return (_a2 = decodeMap.get(codePoint)) !== null && _a2 !== void 0 ? _a2 : codePoint;
    }
    var CharCodes;
    (function(CharCodes2) {
      CharCodes2[CharCodes2["NUM"] = 35] = "NUM";
      CharCodes2[CharCodes2["SEMI"] = 59] = "SEMI";
      CharCodes2[CharCodes2["EQUALS"] = 61] = "EQUALS";
      CharCodes2[CharCodes2["ZERO"] = 48] = "ZERO";
      CharCodes2[CharCodes2["NINE"] = 57] = "NINE";
      CharCodes2[CharCodes2["LOWER_A"] = 97] = "LOWER_A";
      CharCodes2[CharCodes2["LOWER_F"] = 102] = "LOWER_F";
      CharCodes2[CharCodes2["LOWER_X"] = 120] = "LOWER_X";
      CharCodes2[CharCodes2["LOWER_Z"] = 122] = "LOWER_Z";
      CharCodes2[CharCodes2["UPPER_A"] = 65] = "UPPER_A";
      CharCodes2[CharCodes2["UPPER_F"] = 70] = "UPPER_F";
      CharCodes2[CharCodes2["UPPER_Z"] = 90] = "UPPER_Z";
    })(CharCodes || (CharCodes = {}));
    const TO_LOWER_BIT = 32;
    var BinTrieFlags;
    (function(BinTrieFlags2) {
      BinTrieFlags2[BinTrieFlags2["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
      BinTrieFlags2[BinTrieFlags2["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
      BinTrieFlags2[BinTrieFlags2["JUMP_TABLE"] = 127] = "JUMP_TABLE";
    })(BinTrieFlags || (BinTrieFlags = {}));
    function isNumber(code2) {
      return code2 >= CharCodes.ZERO && code2 <= CharCodes.NINE;
    }
    function isHexadecimalCharacter(code2) {
      return code2 >= CharCodes.UPPER_A && code2 <= CharCodes.UPPER_F || code2 >= CharCodes.LOWER_A && code2 <= CharCodes.LOWER_F;
    }
    function isAsciiAlphaNumeric(code2) {
      return code2 >= CharCodes.UPPER_A && code2 <= CharCodes.UPPER_Z || code2 >= CharCodes.LOWER_A && code2 <= CharCodes.LOWER_Z || isNumber(code2);
    }
    function isEntityInAttributeInvalidEnd(code2) {
      return code2 === CharCodes.EQUALS || isAsciiAlphaNumeric(code2);
    }
    var EntityDecoderState;
    (function(EntityDecoderState2) {
      EntityDecoderState2[EntityDecoderState2["EntityStart"] = 0] = "EntityStart";
      EntityDecoderState2[EntityDecoderState2["NumericStart"] = 1] = "NumericStart";
      EntityDecoderState2[EntityDecoderState2["NumericDecimal"] = 2] = "NumericDecimal";
      EntityDecoderState2[EntityDecoderState2["NumericHex"] = 3] = "NumericHex";
      EntityDecoderState2[EntityDecoderState2["NamedEntity"] = 4] = "NamedEntity";
    })(EntityDecoderState || (EntityDecoderState = {}));
    var DecodingMode;
    (function(DecodingMode2) {
      DecodingMode2[DecodingMode2["Legacy"] = 0] = "Legacy";
      DecodingMode2[DecodingMode2["Strict"] = 1] = "Strict";
      DecodingMode2[DecodingMode2["Attribute"] = 2] = "Attribute";
    })(DecodingMode || (DecodingMode = {}));
    class EntityDecoder {
      constructor(decodeTree, emitCodePoint, errors2) {
        this.decodeTree = decodeTree;
        this.emitCodePoint = emitCodePoint;
        this.errors = errors2;
        this.state = EntityDecoderState.EntityStart;
        this.consumed = 1;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.decodeMode = DecodingMode.Strict;
      }
      /** Resets the instance to make it reusable. */
      startEntity(decodeMode) {
        this.decodeMode = decodeMode;
        this.state = EntityDecoderState.EntityStart;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.consumed = 1;
      }
      /**
       * Write an entity to the decoder. This can be called multiple times with partial entities.
       * If the entity is incomplete, the decoder will return -1.
       *
       * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
       * entity is incomplete, and resume when the next string is written.
       *
       * @param string The string containing the entity (or a continuation of the entity).
       * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      write(str2, offset2) {
        switch (this.state) {
          case EntityDecoderState.EntityStart: {
            if (str2.charCodeAt(offset2) === CharCodes.NUM) {
              this.state = EntityDecoderState.NumericStart;
              this.consumed += 1;
              return this.stateNumericStart(str2, offset2 + 1);
            }
            this.state = EntityDecoderState.NamedEntity;
            return this.stateNamedEntity(str2, offset2);
          }
          case EntityDecoderState.NumericStart: {
            return this.stateNumericStart(str2, offset2);
          }
          case EntityDecoderState.NumericDecimal: {
            return this.stateNumericDecimal(str2, offset2);
          }
          case EntityDecoderState.NumericHex: {
            return this.stateNumericHex(str2, offset2);
          }
          case EntityDecoderState.NamedEntity: {
            return this.stateNamedEntity(str2, offset2);
          }
        }
      }
      /**
       * Switches between the numeric decimal and hexadecimal states.
       *
       * Equivalent to the `Numeric character reference state` in the HTML spec.
       *
       * @param str The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericStart(str2, offset2) {
        if (offset2 >= str2.length) {
          return -1;
        }
        if ((str2.charCodeAt(offset2) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
          this.state = EntityDecoderState.NumericHex;
          this.consumed += 1;
          return this.stateNumericHex(str2, offset2 + 1);
        }
        this.state = EntityDecoderState.NumericDecimal;
        return this.stateNumericDecimal(str2, offset2);
      }
      addToNumericResult(str2, start2, end2, base2) {
        if (start2 !== end2) {
          const digitCount = end2 - start2;
          this.result = this.result * Math.pow(base2, digitCount) + parseInt(str2.substr(start2, digitCount), base2);
          this.consumed += digitCount;
        }
      }
      /**
       * Parses a hexadecimal numeric entity.
       *
       * Equivalent to the `Hexademical character reference state` in the HTML spec.
       *
       * @param str The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericHex(str2, offset2) {
        const startIdx = offset2;
        while (offset2 < str2.length) {
          const char = str2.charCodeAt(offset2);
          if (isNumber(char) || isHexadecimalCharacter(char)) {
            offset2 += 1;
          } else {
            this.addToNumericResult(str2, startIdx, offset2, 16);
            return this.emitNumericEntity(char, 3);
          }
        }
        this.addToNumericResult(str2, startIdx, offset2, 16);
        return -1;
      }
      /**
       * Parses a decimal numeric entity.
       *
       * Equivalent to the `Decimal character reference state` in the HTML spec.
       *
       * @param str The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNumericDecimal(str2, offset2) {
        const startIdx = offset2;
        while (offset2 < str2.length) {
          const char = str2.charCodeAt(offset2);
          if (isNumber(char)) {
            offset2 += 1;
          } else {
            this.addToNumericResult(str2, startIdx, offset2, 10);
            return this.emitNumericEntity(char, 2);
          }
        }
        this.addToNumericResult(str2, startIdx, offset2, 10);
        return -1;
      }
      /**
       * Validate and emit a numeric entity.
       *
       * Implements the logic from the `Hexademical character reference start
       * state` and `Numeric character reference end state` in the HTML spec.
       *
       * @param lastCp The last code point of the entity. Used to see if the
       *               entity was terminated with a semicolon.
       * @param expectedLength The minimum number of characters that should be
       *                       consumed. Used to validate that at least one digit
       *                       was consumed.
       * @returns The number of characters that were consumed.
       */
      emitNumericEntity(lastCp, expectedLength) {
        var _a2;
        if (this.consumed <= expectedLength) {
          (_a2 = this.errors) === null || _a2 === void 0 ? void 0 : _a2.absenceOfDigitsInNumericCharacterReference(this.consumed);
          return 0;
        }
        if (lastCp === CharCodes.SEMI) {
          this.consumed += 1;
        } else if (this.decodeMode === DecodingMode.Strict) {
          return 0;
        }
        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
        if (this.errors) {
          if (lastCp !== CharCodes.SEMI) {
            this.errors.missingSemicolonAfterCharacterReference();
          }
          this.errors.validateNumericCharacterReference(this.result);
        }
        return this.consumed;
      }
      /**
       * Parses a named entity.
       *
       * Equivalent to the `Named character reference state` in the HTML spec.
       *
       * @param str The string containing the entity (or a continuation of the entity).
       * @param offset The current offset.
       * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
       */
      stateNamedEntity(str2, offset2) {
        const { decodeTree } = this;
        let current = decodeTree[this.treeIndex];
        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
        for (; offset2 < str2.length; offset2++, this.excess++) {
          const char = str2.charCodeAt(offset2);
          this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
          if (this.treeIndex < 0) {
            return this.result === 0 || // If we are parsing an attribute
            this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
            (valueLength === 0 || // And there should be no invalid characters.
            isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
          }
          current = decodeTree[this.treeIndex];
          valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
          if (valueLength !== 0) {
            if (char === CharCodes.SEMI) {
              return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
            }
            if (this.decodeMode !== DecodingMode.Strict) {
              this.result = this.treeIndex;
              this.consumed += this.excess;
              this.excess = 0;
            }
          }
        }
        return -1;
      }
      /**
       * Emit a named entity that was not terminated with a semicolon.
       *
       * @returns The number of characters consumed.
       */
      emitNotTerminatedNamedEntity() {
        var _a2;
        const { result, decodeTree } = this;
        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
        this.emitNamedEntityData(result, valueLength, this.consumed);
        (_a2 = this.errors) === null || _a2 === void 0 ? void 0 : _a2.missingSemicolonAfterCharacterReference();
        return this.consumed;
      }
      /**
       * Emit a named entity.
       *
       * @param result The index of the entity in the decode tree.
       * @param valueLength The number of bytes in the entity.
       * @param consumed The number of characters consumed.
       *
       * @returns The number of characters consumed.
       */
      emitNamedEntityData(result, valueLength, consumed) {
        const { decodeTree } = this;
        this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
        if (valueLength === 3) {
          this.emitCodePoint(decodeTree[result + 2], consumed);
        }
        return consumed;
      }
      /**
       * Signal to the parser that the end of the input was reached.
       *
       * Remaining data will be emitted and relevant errors will be produced.
       *
       * @returns The number of characters consumed.
       */
      end() {
        var _a2;
        switch (this.state) {
          case EntityDecoderState.NamedEntity: {
            return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
          }
          case EntityDecoderState.NumericDecimal: {
            return this.emitNumericEntity(0, 2);
          }
          case EntityDecoderState.NumericHex: {
            return this.emitNumericEntity(0, 3);
          }
          case EntityDecoderState.NumericStart: {
            (_a2 = this.errors) === null || _a2 === void 0 ? void 0 : _a2.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
          }
          case EntityDecoderState.EntityStart: {
            return 0;
          }
        }
      }
    }
    function getDecoder(decodeTree) {
      let ret = "";
      const decoder = new EntityDecoder(decodeTree, (str2) => ret += fromCodePoint$2(str2));
      return function decodeWithTrie(str2, decodeMode) {
        let lastIndex = 0;
        let offset2 = 0;
        while ((offset2 = str2.indexOf("&", offset2)) >= 0) {
          ret += str2.slice(lastIndex, offset2);
          decoder.startEntity(decodeMode);
          const len = decoder.write(
            str2,
            // Skip the "&"
            offset2 + 1
          );
          if (len < 0) {
            lastIndex = offset2 + decoder.end();
            break;
          }
          lastIndex = offset2 + len;
          offset2 = len === 0 ? lastIndex + 1 : lastIndex;
        }
        const result = ret + str2.slice(lastIndex);
        ret = "";
        return result;
      };
    }
    function determineBranch(decodeTree, current, nodeIdx, char) {
      const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
      const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
      if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
      }
      if (jumpOffset) {
        const value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
      }
      let lo = nodeIdx;
      let hi = lo + branchCount - 1;
      while (lo <= hi) {
        const mid = lo + hi >>> 1;
        const midVal = decodeTree[mid];
        if (midVal < char) {
          lo = mid + 1;
        } else if (midVal > char) {
          hi = mid - 1;
        } else {
          return decodeTree[mid + branchCount];
        }
      }
      return -1;
    }
    const htmlDecoder = getDecoder(htmlDecodeTree);
    getDecoder(xmlDecodeTree);
    function decodeHTML(str2, mode = DecodingMode.Legacy) {
      return htmlDecoder(str2, mode);
    }
    function _class$1(obj) {
      return Object.prototype.toString.call(obj);
    }
    function isString$1(obj) {
      return _class$1(obj) === "[object String]";
    }
    const _hasOwnProperty = Object.prototype.hasOwnProperty;
    function has(object, key2) {
      return _hasOwnProperty.call(object, key2);
    }
    function assign$1(obj) {
      const sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function(source2) {
        if (!source2) {
          return;
        }
        if (typeof source2 !== "object") {
          throw new TypeError(source2 + "must be object");
        }
        Object.keys(source2).forEach(function(key2) {
          obj[key2] = source2[key2];
        });
      });
      return obj;
    }
    function arrayReplaceAt(src, pos2, newElements) {
      return [].concat(src.slice(0, pos2), newElements, src.slice(pos2 + 1));
    }
    function isValidEntityCode(c2) {
      if (c2 >= 55296 && c2 <= 57343) {
        return false;
      }
      if (c2 >= 64976 && c2 <= 65007) {
        return false;
      }
      if ((c2 & 65535) === 65535 || (c2 & 65535) === 65534) {
        return false;
      }
      if (c2 >= 0 && c2 <= 8) {
        return false;
      }
      if (c2 === 11) {
        return false;
      }
      if (c2 >= 14 && c2 <= 31) {
        return false;
      }
      if (c2 >= 127 && c2 <= 159) {
        return false;
      }
      if (c2 > 1114111) {
        return false;
      }
      return true;
    }
    function fromCodePoint$1(c2) {
      if (c2 > 65535) {
        c2 -= 65536;
        const surrogate1 = 55296 + (c2 >> 10);
        const surrogate2 = 56320 + (c2 & 1023);
        return String.fromCharCode(surrogate1, surrogate2);
      }
      return String.fromCharCode(c2);
    }
    const UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g;
    const ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
    const UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + "|" + ENTITY_RE.source, "gi");
    const DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;
    function replaceEntityPattern(match, name2) {
      if (name2.charCodeAt(0) === 35 && DIGITAL_ENTITY_TEST_RE.test(name2)) {
        const code2 = name2[1].toLowerCase() === "x" ? parseInt(name2.slice(2), 16) : parseInt(name2.slice(1), 10);
        if (isValidEntityCode(code2)) {
          return fromCodePoint$1(code2);
        }
        return match;
      }
      const decoded = decodeHTML(match);
      if (decoded !== match) {
        return decoded;
      }
      return match;
    }
    function unescapeMd(str2) {
      if (str2.indexOf("\\") < 0) {
        return str2;
      }
      return str2.replace(UNESCAPE_MD_RE, "$1");
    }
    function unescapeAll(str2) {
      if (str2.indexOf("\\") < 0 && str2.indexOf("&") < 0) {
        return str2;
      }
      return str2.replace(UNESCAPE_ALL_RE, function(match, escaped, entity2) {
        if (escaped) {
          return escaped;
        }
        return replaceEntityPattern(match, entity2);
      });
    }
    const HTML_ESCAPE_TEST_RE = /[&<>"]/;
    const HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
    const HTML_REPLACEMENTS = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;"
    };
    function replaceUnsafeChar(ch3) {
      return HTML_REPLACEMENTS[ch3];
    }
    function escapeHtml(str2) {
      if (HTML_ESCAPE_TEST_RE.test(str2)) {
        return str2.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
      }
      return str2;
    }
    const REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
    function escapeRE$1(str2) {
      return str2.replace(REGEXP_ESCAPE_RE, "\\$&");
    }
    function isSpace(code2) {
      switch (code2) {
        case 9:
        case 32:
          return true;
      }
      return false;
    }
    function isWhiteSpace(code2) {
      if (code2 >= 8192 && code2 <= 8202) {
        return true;
      }
      switch (code2) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 32:
        case 160:
        case 5760:
        case 8239:
        case 8287:
        case 12288:
          return true;
      }
      return false;
    }
    function isPunctChar(ch3) {
      return P$1.test(ch3) || regex.test(ch3);
    }
    function isMdAsciiPunct(ch3) {
      switch (ch3) {
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 123:
        case 124:
        case 125:
        case 126:
          return true;
        default:
          return false;
      }
    }
    function normalizeReference(str2) {
      str2 = str2.trim().replace(/\s+/g, " ");
      if ("ẞ".toLowerCase() === "Ṿ") {
        str2 = str2.replace(/ẞ/g, "ß");
      }
      return str2.toLowerCase().toUpperCase();
    }
    const lib$1 = { mdurl, ucmicro };
    const utils = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      arrayReplaceAt,
      assign: assign$1,
      escapeHtml,
      escapeRE: escapeRE$1,
      fromCodePoint: fromCodePoint$1,
      has,
      isMdAsciiPunct,
      isPunctChar,
      isSpace,
      isString: isString$1,
      isValidEntityCode,
      isWhiteSpace,
      lib: lib$1,
      normalizeReference,
      unescapeAll,
      unescapeMd
    }, Symbol.toStringTag, { value: "Module" }));
    function parseLinkLabel(state, start2, disableNested) {
      let level, found, marker, prevPos;
      const max2 = state.posMax;
      const oldPos = state.pos;
      state.pos = start2 + 1;
      level = 1;
      while (state.pos < max2) {
        marker = state.src.charCodeAt(state.pos);
        if (marker === 93) {
          level--;
          if (level === 0) {
            found = true;
            break;
          }
        }
        prevPos = state.pos;
        state.md.inline.skipToken(state);
        if (marker === 91) {
          if (prevPos === state.pos - 1) {
            level++;
          } else if (disableNested) {
            state.pos = oldPos;
            return -1;
          }
        }
      }
      let labelEnd = -1;
      if (found) {
        labelEnd = state.pos;
      }
      state.pos = oldPos;
      return labelEnd;
    }
    function parseLinkDestination(str2, start2, max2) {
      let code2;
      let pos2 = start2;
      const result = {
        ok: false,
        pos: 0,
        str: ""
      };
      if (str2.charCodeAt(pos2) === 60) {
        pos2++;
        while (pos2 < max2) {
          code2 = str2.charCodeAt(pos2);
          if (code2 === 10) {
            return result;
          }
          if (code2 === 60) {
            return result;
          }
          if (code2 === 62) {
            result.pos = pos2 + 1;
            result.str = unescapeAll(str2.slice(start2 + 1, pos2));
            result.ok = true;
            return result;
          }
          if (code2 === 92 && pos2 + 1 < max2) {
            pos2 += 2;
            continue;
          }
          pos2++;
        }
        return result;
      }
      let level = 0;
      while (pos2 < max2) {
        code2 = str2.charCodeAt(pos2);
        if (code2 === 32) {
          break;
        }
        if (code2 < 32 || code2 === 127) {
          break;
        }
        if (code2 === 92 && pos2 + 1 < max2) {
          if (str2.charCodeAt(pos2 + 1) === 32) {
            break;
          }
          pos2 += 2;
          continue;
        }
        if (code2 === 40) {
          level++;
          if (level > 32) {
            return result;
          }
        }
        if (code2 === 41) {
          if (level === 0) {
            break;
          }
          level--;
        }
        pos2++;
      }
      if (start2 === pos2) {
        return result;
      }
      if (level !== 0) {
        return result;
      }
      result.str = unescapeAll(str2.slice(start2, pos2));
      result.pos = pos2;
      result.ok = true;
      return result;
    }
    function parseLinkTitle(str2, start2, max2, prev_state) {
      let code2;
      let pos2 = start2;
      const state = {
        // if `true`, this is a valid link title
        ok: false,
        // if `true`, this link can be continued on the next line
        can_continue: false,
        // if `ok`, it's the position of the first character after the closing marker
        pos: 0,
        // if `ok`, it's the unescaped title
        str: "",
        // expected closing marker character code
        marker: 0
      };
      if (prev_state) {
        state.str = prev_state.str;
        state.marker = prev_state.marker;
      } else {
        if (pos2 >= max2) {
          return state;
        }
        let marker = str2.charCodeAt(pos2);
        if (marker !== 34 && marker !== 39 && marker !== 40) {
          return state;
        }
        start2++;
        pos2++;
        if (marker === 40) {
          marker = 41;
        }
        state.marker = marker;
      }
      while (pos2 < max2) {
        code2 = str2.charCodeAt(pos2);
        if (code2 === state.marker) {
          state.pos = pos2 + 1;
          state.str += unescapeAll(str2.slice(start2, pos2));
          state.ok = true;
          return state;
        } else if (code2 === 40 && state.marker === 41) {
          return state;
        } else if (code2 === 92 && pos2 + 1 < max2) {
          pos2++;
        }
        pos2++;
      }
      state.can_continue = true;
      state.str += unescapeAll(str2.slice(start2, pos2));
      return state;
    }
    const helpers = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
      __proto__: null,
      parseLinkDestination,
      parseLinkLabel,
      parseLinkTitle
    }, Symbol.toStringTag, { value: "Module" }));
    const default_rules = {};
    default_rules.code_inline = function(tokens, idx, options, env, slf) {
      const token2 = tokens[idx];
      return "<code" + slf.renderAttrs(token2) + ">" + escapeHtml(token2.content) + "</code>";
    };
    default_rules.code_block = function(tokens, idx, options, env, slf) {
      const token2 = tokens[idx];
      return "<pre" + slf.renderAttrs(token2) + "><code>" + escapeHtml(tokens[idx].content) + "</code></pre>\n";
    };
    default_rules.fence = function(tokens, idx, options, env, slf) {
      const token2 = tokens[idx];
      const info = token2.info ? unescapeAll(token2.info).trim() : "";
      let langName = "";
      let langAttrs = "";
      if (info) {
        const arr2 = info.split(/(\s+)/g);
        langName = arr2[0];
        langAttrs = arr2.slice(2).join("");
      }
      let highlighted;
      if (options.highlight) {
        highlighted = options.highlight(token2.content, langName, langAttrs) || escapeHtml(token2.content);
      } else {
        highlighted = escapeHtml(token2.content);
      }
      if (highlighted.indexOf("<pre") === 0) {
        return highlighted + "\n";
      }
      if (info) {
        const i2 = token2.attrIndex("class");
        const tmpAttrs = token2.attrs ? token2.attrs.slice() : [];
        if (i2 < 0) {
          tmpAttrs.push(["class", options.langPrefix + langName]);
        } else {
          tmpAttrs[i2] = tmpAttrs[i2].slice();
          tmpAttrs[i2][1] += " " + options.langPrefix + langName;
        }
        const tmpToken = {
          attrs: tmpAttrs
        };
        return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>
`;
      }
      return `<pre><code${slf.renderAttrs(token2)}>${highlighted}</code></pre>
`;
    };
    default_rules.image = function(tokens, idx, options, env, slf) {
      const token2 = tokens[idx];
      token2.attrs[token2.attrIndex("alt")][1] = slf.renderInlineAsText(token2.children, options, env);
      return slf.renderToken(tokens, idx, options);
    };
    default_rules.hardbreak = function(tokens, idx, options) {
      return options.xhtmlOut ? "<br />\n" : "<br>\n";
    };
    default_rules.softbreak = function(tokens, idx, options) {
      return options.breaks ? options.xhtmlOut ? "<br />\n" : "<br>\n" : "\n";
    };
    default_rules.text = function(tokens, idx) {
      return escapeHtml(tokens[idx].content);
    };
    default_rules.html_block = function(tokens, idx) {
      return tokens[idx].content;
    };
    default_rules.html_inline = function(tokens, idx) {
      return tokens[idx].content;
    };
    function Renderer() {
      this.rules = assign$1({}, default_rules);
    }
    Renderer.prototype.renderAttrs = function renderAttrs(token2) {
      let i2, l2, result;
      if (!token2.attrs) {
        return "";
      }
      result = "";
      for (i2 = 0, l2 = token2.attrs.length; i2 < l2; i2++) {
        result += " " + escapeHtml(token2.attrs[i2][0]) + '="' + escapeHtml(token2.attrs[i2][1]) + '"';
      }
      return result;
    };
    Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
      const token2 = tokens[idx];
      let result = "";
      if (token2.hidden) {
        return "";
      }
      if (token2.block && token2.nesting !== -1 && idx && tokens[idx - 1].hidden) {
        result += "\n";
      }
      result += (token2.nesting === -1 ? "</" : "<") + token2.tag;
      result += this.renderAttrs(token2);
      if (token2.nesting === 0 && options.xhtmlOut) {
        result += " /";
      }
      let needLf = false;
      if (token2.block) {
        needLf = true;
        if (token2.nesting === 1) {
          if (idx + 1 < tokens.length) {
            const nextToken2 = tokens[idx + 1];
            if (nextToken2.type === "inline" || nextToken2.hidden) {
              needLf = false;
            } else if (nextToken2.nesting === -1 && nextToken2.tag === token2.tag) {
              needLf = false;
            }
          }
        }
      }
      result += needLf ? ">\n" : ">";
      return result;
    };
    Renderer.prototype.renderInline = function(tokens, options, env) {
      let result = "";
      const rules = this.rules;
      for (let i2 = 0, len = tokens.length; i2 < len; i2++) {
        const type = tokens[i2].type;
        if (typeof rules[type] !== "undefined") {
          result += rules[type](tokens, i2, options, env, this);
        } else {
          result += this.renderToken(tokens, i2, options);
        }
      }
      return result;
    };
    Renderer.prototype.renderInlineAsText = function(tokens, options, env) {
      let result = "";
      for (let i2 = 0, len = tokens.length; i2 < len; i2++) {
        switch (tokens[i2].type) {
          case "text":
            result += tokens[i2].content;
            break;
          case "image":
            result += this.renderInlineAsText(tokens[i2].children, options, env);
            break;
          case "html_inline":
          case "html_block":
            result += tokens[i2].content;
            break;
          case "softbreak":
          case "hardbreak":
            result += "\n";
            break;
        }
      }
      return result;
    };
    Renderer.prototype.render = function(tokens, options, env) {
      let result = "";
      const rules = this.rules;
      for (let i2 = 0, len = tokens.length; i2 < len; i2++) {
        const type = tokens[i2].type;
        if (type === "inline") {
          result += this.renderInline(tokens[i2].children, options, env);
        } else if (typeof rules[type] !== "undefined") {
          result += rules[type](tokens, i2, options, env, this);
        } else {
          result += this.renderToken(tokens, i2, options, env);
        }
      }
      return result;
    };
    function Ruler() {
      this.__rules__ = [];
      this.__cache__ = null;
    }
    Ruler.prototype.__find__ = function(name2) {
      for (let i2 = 0; i2 < this.__rules__.length; i2++) {
        if (this.__rules__[i2].name === name2) {
          return i2;
        }
      }
      return -1;
    };
    Ruler.prototype.__compile__ = function() {
      const self2 = this;
      const chains = [""];
      self2.__rules__.forEach(function(rule) {
        if (!rule.enabled) {
          return;
        }
        rule.alt.forEach(function(altName) {
          if (chains.indexOf(altName) < 0) {
            chains.push(altName);
          }
        });
      });
      self2.__cache__ = {};
      chains.forEach(function(chain) {
        self2.__cache__[chain] = [];
        self2.__rules__.forEach(function(rule) {
          if (!rule.enabled) {
            return;
          }
          if (chain && rule.alt.indexOf(chain) < 0) {
            return;
          }
          self2.__cache__[chain].push(rule.fn);
        });
      });
    };
    Ruler.prototype.at = function(name2, fn2, options) {
      const index = this.__find__(name2);
      const opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + name2);
      }
      this.__rules__[index].fn = fn2;
      this.__rules__[index].alt = opt.alt || [];
      this.__cache__ = null;
    };
    Ruler.prototype.before = function(beforeName, ruleName, fn2, options) {
      const index = this.__find__(beforeName);
      const opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + beforeName);
      }
      this.__rules__.splice(index, 0, {
        name: ruleName,
        enabled: true,
        fn: fn2,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.after = function(afterName, ruleName, fn2, options) {
      const index = this.__find__(afterName);
      const opt = options || {};
      if (index === -1) {
        throw new Error("Parser rule not found: " + afterName);
      }
      this.__rules__.splice(index + 1, 0, {
        name: ruleName,
        enabled: true,
        fn: fn2,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.push = function(ruleName, fn2, options) {
      const opt = options || {};
      this.__rules__.push({
        name: ruleName,
        enabled: true,
        fn: fn2,
        alt: opt.alt || []
      });
      this.__cache__ = null;
    };
    Ruler.prototype.enable = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      const result = [];
      list2.forEach(function(name2) {
        const idx = this.__find__(name2);
        if (idx < 0) {
          if (ignoreInvalid) {
            return;
          }
          throw new Error("Rules manager: invalid rule name " + name2);
        }
        this.__rules__[idx].enabled = true;
        result.push(name2);
      }, this);
      this.__cache__ = null;
      return result;
    };
    Ruler.prototype.enableOnly = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      this.__rules__.forEach(function(rule) {
        rule.enabled = false;
      });
      this.enable(list2, ignoreInvalid);
    };
    Ruler.prototype.disable = function(list2, ignoreInvalid) {
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      const result = [];
      list2.forEach(function(name2) {
        const idx = this.__find__(name2);
        if (idx < 0) {
          if (ignoreInvalid) {
            return;
          }
          throw new Error("Rules manager: invalid rule name " + name2);
        }
        this.__rules__[idx].enabled = false;
        result.push(name2);
      }, this);
      this.__cache__ = null;
      return result;
    };
    Ruler.prototype.getRules = function(chainName) {
      if (this.__cache__ === null) {
        this.__compile__();
      }
      return this.__cache__[chainName] || [];
    };
    function Token(type, tag, nesting) {
      this.type = type;
      this.tag = tag;
      this.attrs = null;
      this.map = null;
      this.nesting = nesting;
      this.level = 0;
      this.children = null;
      this.content = "";
      this.markup = "";
      this.info = "";
      this.meta = null;
      this.block = false;
      this.hidden = false;
    }
    Token.prototype.attrIndex = function attrIndex(name2) {
      if (!this.attrs) {
        return -1;
      }
      const attrs = this.attrs;
      for (let i2 = 0, len = attrs.length; i2 < len; i2++) {
        if (attrs[i2][0] === name2) {
          return i2;
        }
      }
      return -1;
    };
    Token.prototype.attrPush = function attrPush(attrData) {
      if (this.attrs) {
        this.attrs.push(attrData);
      } else {
        this.attrs = [attrData];
      }
    };
    Token.prototype.attrSet = function attrSet(name2, value) {
      const idx = this.attrIndex(name2);
      const attrData = [name2, value];
      if (idx < 0) {
        this.attrPush(attrData);
      } else {
        this.attrs[idx] = attrData;
      }
    };
    Token.prototype.attrGet = function attrGet(name2) {
      const idx = this.attrIndex(name2);
      let value = null;
      if (idx >= 0) {
        value = this.attrs[idx][1];
      }
      return value;
    };
    Token.prototype.attrJoin = function attrJoin(name2, value) {
      const idx = this.attrIndex(name2);
      if (idx < 0) {
        this.attrPush([name2, value]);
      } else {
        this.attrs[idx][1] = this.attrs[idx][1] + " " + value;
      }
    };
    function StateCore(src, md, env) {
      this.src = src;
      this.env = env;
      this.tokens = [];
      this.inlineMode = false;
      this.md = md;
    }
    StateCore.prototype.Token = Token;
    const NEWLINES_RE = /\r\n?|\n/g;
    const NULL_RE = /\0/g;
    function normalize(state) {
      let str2;
      str2 = state.src.replace(NEWLINES_RE, "\n");
      str2 = str2.replace(NULL_RE, "�");
      state.src = str2;
    }
    function block(state) {
      let token2;
      if (state.inlineMode) {
        token2 = new state.Token("inline", "", 0);
        token2.content = state.src;
        token2.map = [0, 1];
        token2.children = [];
        state.tokens.push(token2);
      } else {
        state.md.block.parse(state.src, state.md, state.env, state.tokens);
      }
    }
    function inline(state) {
      const tokens = state.tokens;
      for (let i2 = 0, l2 = tokens.length; i2 < l2; i2++) {
        const tok = tokens[i2];
        if (tok.type === "inline") {
          state.md.inline.parse(tok.content, state.md, state.env, tok.children);
        }
      }
    }
    function isLinkOpen$1(str2) {
      return /^<a[>\s]/i.test(str2);
    }
    function isLinkClose$1(str2) {
      return /^<\/a\s*>/i.test(str2);
    }
    function linkify$1(state) {
      const blockTokens = state.tokens;
      if (!state.md.options.linkify) {
        return;
      }
      for (let j2 = 0, l2 = blockTokens.length; j2 < l2; j2++) {
        if (blockTokens[j2].type !== "inline" || !state.md.linkify.pretest(blockTokens[j2].content)) {
          continue;
        }
        let tokens = blockTokens[j2].children;
        let htmlLinkLevel = 0;
        for (let i2 = tokens.length - 1; i2 >= 0; i2--) {
          const currentToken = tokens[i2];
          if (currentToken.type === "link_close") {
            i2--;
            while (tokens[i2].level !== currentToken.level && tokens[i2].type !== "link_open") {
              i2--;
            }
            continue;
          }
          if (currentToken.type === "html_inline") {
            if (isLinkOpen$1(currentToken.content) && htmlLinkLevel > 0) {
              htmlLinkLevel--;
            }
            if (isLinkClose$1(currentToken.content)) {
              htmlLinkLevel++;
            }
          }
          if (htmlLinkLevel > 0) {
            continue;
          }
          if (currentToken.type === "text" && state.md.linkify.test(currentToken.content)) {
            const text2 = currentToken.content;
            let links = state.md.linkify.match(text2);
            const nodes = [];
            let level = currentToken.level;
            let lastPos = 0;
            if (links.length > 0 && links[0].index === 0 && i2 > 0 && tokens[i2 - 1].type === "text_special") {
              links = links.slice(1);
            }
            for (let ln2 = 0; ln2 < links.length; ln2++) {
              const url = links[ln2].url;
              const fullUrl = state.md.normalizeLink(url);
              if (!state.md.validateLink(fullUrl)) {
                continue;
              }
              let urlText = links[ln2].text;
              if (!links[ln2].schema) {
                urlText = state.md.normalizeLinkText("http://" + urlText).replace(/^http:\/\//, "");
              } else if (links[ln2].schema === "mailto:" && !/^mailto:/i.test(urlText)) {
                urlText = state.md.normalizeLinkText("mailto:" + urlText).replace(/^mailto:/, "");
              } else {
                urlText = state.md.normalizeLinkText(urlText);
              }
              const pos2 = links[ln2].index;
              if (pos2 > lastPos) {
                const token2 = new state.Token("text", "", 0);
                token2.content = text2.slice(lastPos, pos2);
                token2.level = level;
                nodes.push(token2);
              }
              const token_o = new state.Token("link_open", "a", 1);
              token_o.attrs = [["href", fullUrl]];
              token_o.level = level++;
              token_o.markup = "linkify";
              token_o.info = "auto";
              nodes.push(token_o);
              const token_t = new state.Token("text", "", 0);
              token_t.content = urlText;
              token_t.level = level;
              nodes.push(token_t);
              const token_c = new state.Token("link_close", "a", -1);
              token_c.level = --level;
              token_c.markup = "linkify";
              token_c.info = "auto";
              nodes.push(token_c);
              lastPos = links[ln2].lastIndex;
            }
            if (lastPos < text2.length) {
              const token2 = new state.Token("text", "", 0);
              token2.content = text2.slice(lastPos);
              token2.level = level;
              nodes.push(token2);
            }
            blockTokens[j2].children = tokens = arrayReplaceAt(tokens, i2, nodes);
          }
        }
      }
    }
    const RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
    const SCOPED_ABBR_TEST_RE = /\((c|tm|r)\)/i;
    const SCOPED_ABBR_RE = /\((c|tm|r)\)/ig;
    const SCOPED_ABBR = {
      c: "©",
      r: "®",
      tm: "™"
    };
    function replaceFn(match, name2) {
      return SCOPED_ABBR[name2.toLowerCase()];
    }
    function replace_scoped(inlineTokens) {
      let inside_autolink = 0;
      for (let i2 = inlineTokens.length - 1; i2 >= 0; i2--) {
        const token2 = inlineTokens[i2];
        if (token2.type === "text" && !inside_autolink) {
          token2.content = token2.content.replace(SCOPED_ABBR_RE, replaceFn);
        }
        if (token2.type === "link_open" && token2.info === "auto") {
          inside_autolink--;
        }
        if (token2.type === "link_close" && token2.info === "auto") {
          inside_autolink++;
        }
      }
    }
    function replace_rare(inlineTokens) {
      let inside_autolink = 0;
      for (let i2 = inlineTokens.length - 1; i2 >= 0; i2--) {
        const token2 = inlineTokens[i2];
        if (token2.type === "text" && !inside_autolink) {
          if (RARE_RE.test(token2.content)) {
            token2.content = token2.content.replace(/\+-/g, "±").replace(/\.{2,}/g, "…").replace(/([?!])…/g, "$1..").replace(/([?!]){4,}/g, "$1$1$1").replace(/,{2,}/g, ",").replace(/(^|[^-])---(?=[^-]|$)/mg, "$1—").replace(/(^|\s)--(?=\s|$)/mg, "$1–").replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, "$1–");
          }
        }
        if (token2.type === "link_open" && token2.info === "auto") {
          inside_autolink--;
        }
        if (token2.type === "link_close" && token2.info === "auto") {
          inside_autolink++;
        }
      }
    }
    function replace$1(state) {
      let blkIdx;
      if (!state.md.options.typographer) {
        return;
      }
      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline") {
          continue;
        }
        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
          replace_scoped(state.tokens[blkIdx].children);
        }
        if (RARE_RE.test(state.tokens[blkIdx].content)) {
          replace_rare(state.tokens[blkIdx].children);
        }
      }
    }
    const QUOTE_TEST_RE = /['"]/;
    const QUOTE_RE = /['"]/g;
    const APOSTROPHE = "’";
    function replaceAt(str2, index, ch3) {
      return str2.slice(0, index) + ch3 + str2.slice(index + 1);
    }
    function process_inlines(tokens, state) {
      let j2;
      const stack2 = [];
      for (let i2 = 0; i2 < tokens.length; i2++) {
        const token2 = tokens[i2];
        const thisLevel = tokens[i2].level;
        for (j2 = stack2.length - 1; j2 >= 0; j2--) {
          if (stack2[j2].level <= thisLevel) {
            break;
          }
        }
        stack2.length = j2 + 1;
        if (token2.type !== "text") {
          continue;
        }
        let text2 = token2.content;
        let pos2 = 0;
        let max2 = text2.length;
        OUTER:
          while (pos2 < max2) {
            QUOTE_RE.lastIndex = pos2;
            const t2 = QUOTE_RE.exec(text2);
            if (!t2) {
              break;
            }
            let canOpen = true;
            let canClose = true;
            pos2 = t2.index + 1;
            const isSingle = t2[0] === "'";
            let lastChar = 32;
            if (t2.index - 1 >= 0) {
              lastChar = text2.charCodeAt(t2.index - 1);
            } else {
              for (j2 = i2 - 1; j2 >= 0; j2--) {
                if (tokens[j2].type === "softbreak" || tokens[j2].type === "hardbreak") break;
                if (!tokens[j2].content) continue;
                lastChar = tokens[j2].content.charCodeAt(tokens[j2].content.length - 1);
                break;
              }
            }
            let nextChar = 32;
            if (pos2 < max2) {
              nextChar = text2.charCodeAt(pos2);
            } else {
              for (j2 = i2 + 1; j2 < tokens.length; j2++) {
                if (tokens[j2].type === "softbreak" || tokens[j2].type === "hardbreak") break;
                if (!tokens[j2].content) continue;
                nextChar = tokens[j2].content.charCodeAt(0);
                break;
              }
            }
            const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
            const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
            const isLastWhiteSpace = isWhiteSpace(lastChar);
            const isNextWhiteSpace = isWhiteSpace(nextChar);
            if (isNextWhiteSpace) {
              canOpen = false;
            } else if (isNextPunctChar) {
              if (!(isLastWhiteSpace || isLastPunctChar)) {
                canOpen = false;
              }
            }
            if (isLastWhiteSpace) {
              canClose = false;
            } else if (isLastPunctChar) {
              if (!(isNextWhiteSpace || isNextPunctChar)) {
                canClose = false;
              }
            }
            if (nextChar === 34 && t2[0] === '"') {
              if (lastChar >= 48 && lastChar <= 57) {
                canClose = canOpen = false;
              }
            }
            if (canOpen && canClose) {
              canOpen = isLastPunctChar;
              canClose = isNextPunctChar;
            }
            if (!canOpen && !canClose) {
              if (isSingle) {
                token2.content = replaceAt(token2.content, t2.index, APOSTROPHE);
              }
              continue;
            }
            if (canClose) {
              for (j2 = stack2.length - 1; j2 >= 0; j2--) {
                let item = stack2[j2];
                if (stack2[j2].level < thisLevel) {
                  break;
                }
                if (item.single === isSingle && stack2[j2].level === thisLevel) {
                  item = stack2[j2];
                  let openQuote;
                  let closeQuote;
                  if (isSingle) {
                    openQuote = state.md.options.quotes[2];
                    closeQuote = state.md.options.quotes[3];
                  } else {
                    openQuote = state.md.options.quotes[0];
                    closeQuote = state.md.options.quotes[1];
                  }
                  token2.content = replaceAt(token2.content, t2.index, closeQuote);
                  tokens[item.token].content = replaceAt(
                    tokens[item.token].content,
                    item.pos,
                    openQuote
                  );
                  pos2 += closeQuote.length - 1;
                  if (item.token === i2) {
                    pos2 += openQuote.length - 1;
                  }
                  text2 = token2.content;
                  max2 = text2.length;
                  stack2.length = j2;
                  continue OUTER;
                }
              }
            }
            if (canOpen) {
              stack2.push({
                token: i2,
                pos: t2.index,
                single: isSingle,
                level: thisLevel
              });
            } else if (canClose && isSingle) {
              token2.content = replaceAt(token2.content, t2.index, APOSTROPHE);
            }
          }
      }
    }
    function smartquotes(state) {
      if (!state.md.options.typographer) {
        return;
      }
      for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
        if (state.tokens[blkIdx].type !== "inline" || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
          continue;
        }
        process_inlines(state.tokens[blkIdx].children, state);
      }
    }
    function text_join(state) {
      let curr, last;
      const blockTokens = state.tokens;
      const l2 = blockTokens.length;
      for (let j2 = 0; j2 < l2; j2++) {
        if (blockTokens[j2].type !== "inline") continue;
        const tokens = blockTokens[j2].children;
        const max2 = tokens.length;
        for (curr = 0; curr < max2; curr++) {
          if (tokens[curr].type === "text_special") {
            tokens[curr].type = "text";
          }
        }
        for (curr = last = 0; curr < max2; curr++) {
          if (tokens[curr].type === "text" && curr + 1 < max2 && tokens[curr + 1].type === "text") {
            tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
          } else {
            if (curr !== last) {
              tokens[last] = tokens[curr];
            }
            last++;
          }
        }
        if (curr !== last) {
          tokens.length = last;
        }
      }
    }
    const _rules$2 = [
      ["normalize", normalize],
      ["block", block],
      ["inline", inline],
      ["linkify", linkify$1],
      ["replacements", replace$1],
      ["smartquotes", smartquotes],
      // `text_join` finds `text_special` tokens (for escape sequences)
      // and joins them with the rest of the text
      ["text_join", text_join]
    ];
    function Core$1() {
      this.ruler = new Ruler();
      for (let i2 = 0; i2 < _rules$2.length; i2++) {
        this.ruler.push(_rules$2[i2][0], _rules$2[i2][1]);
      }
    }
    Core$1.prototype.process = function(state) {
      const rules = this.ruler.getRules("");
      for (let i2 = 0, l2 = rules.length; i2 < l2; i2++) {
        rules[i2](state);
      }
    };
    Core$1.prototype.State = StateCore;
    function StateBlock(src, md, env, tokens) {
      this.src = src;
      this.md = md;
      this.env = env;
      this.tokens = tokens;
      this.bMarks = [];
      this.eMarks = [];
      this.tShift = [];
      this.sCount = [];
      this.bsCount = [];
      this.blkIndent = 0;
      this.line = 0;
      this.lineMax = 0;
      this.tight = false;
      this.ddIndent = -1;
      this.listIndent = -1;
      this.parentType = "root";
      this.level = 0;
      const s2 = this.src;
      for (let start2 = 0, pos2 = 0, indent = 0, offset2 = 0, len = s2.length, indent_found = false; pos2 < len; pos2++) {
        const ch3 = s2.charCodeAt(pos2);
        if (!indent_found) {
          if (isSpace(ch3)) {
            indent++;
            if (ch3 === 9) {
              offset2 += 4 - offset2 % 4;
            } else {
              offset2++;
            }
            continue;
          } else {
            indent_found = true;
          }
        }
        if (ch3 === 10 || pos2 === len - 1) {
          if (ch3 !== 10) {
            pos2++;
          }
          this.bMarks.push(start2);
          this.eMarks.push(pos2);
          this.tShift.push(indent);
          this.sCount.push(offset2);
          this.bsCount.push(0);
          indent_found = false;
          indent = 0;
          offset2 = 0;
          start2 = pos2 + 1;
        }
      }
      this.bMarks.push(s2.length);
      this.eMarks.push(s2.length);
      this.tShift.push(0);
      this.sCount.push(0);
      this.bsCount.push(0);
      this.lineMax = this.bMarks.length - 1;
    }
    StateBlock.prototype.push = function(type, tag, nesting) {
      const token2 = new Token(type, tag, nesting);
      token2.block = true;
      if (nesting < 0) this.level--;
      token2.level = this.level;
      if (nesting > 0) this.level++;
      this.tokens.push(token2);
      return token2;
    };
    StateBlock.prototype.isEmpty = function isEmpty(line2) {
      return this.bMarks[line2] + this.tShift[line2] >= this.eMarks[line2];
    };
    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
      for (let max2 = this.lineMax; from < max2; from++) {
        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
          break;
        }
      }
      return from;
    };
    StateBlock.prototype.skipSpaces = function skipSpaces(pos2) {
      for (let max2 = this.src.length; pos2 < max2; pos2++) {
        const ch3 = this.src.charCodeAt(pos2);
        if (!isSpace(ch3)) {
          break;
        }
      }
      return pos2;
    };
    StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos2, min2) {
      if (pos2 <= min2) {
        return pos2;
      }
      while (pos2 > min2) {
        if (!isSpace(this.src.charCodeAt(--pos2))) {
          return pos2 + 1;
        }
      }
      return pos2;
    };
    StateBlock.prototype.skipChars = function skipChars(pos2, code2) {
      for (let max2 = this.src.length; pos2 < max2; pos2++) {
        if (this.src.charCodeAt(pos2) !== code2) {
          break;
        }
      }
      return pos2;
    };
    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos2, code2, min2) {
      if (pos2 <= min2) {
        return pos2;
      }
      while (pos2 > min2) {
        if (code2 !== this.src.charCodeAt(--pos2)) {
          return pos2 + 1;
        }
      }
      return pos2;
    };
    StateBlock.prototype.getLines = function getLines(begin, end2, indent, keepLastLF) {
      if (begin >= end2) {
        return "";
      }
      const queue = new Array(end2 - begin);
      for (let i2 = 0, line2 = begin; line2 < end2; line2++, i2++) {
        let lineIndent = 0;
        const lineStart = this.bMarks[line2];
        let first = lineStart;
        let last;
        if (line2 + 1 < end2 || keepLastLF) {
          last = this.eMarks[line2] + 1;
        } else {
          last = this.eMarks[line2];
        }
        while (first < last && lineIndent < indent) {
          const ch3 = this.src.charCodeAt(first);
          if (isSpace(ch3)) {
            if (ch3 === 9) {
              lineIndent += 4 - (lineIndent + this.bsCount[line2]) % 4;
            } else {
              lineIndent++;
            }
          } else if (first - lineStart < this.tShift[line2]) {
            lineIndent++;
          } else {
            break;
          }
          first++;
        }
        if (lineIndent > indent) {
          queue[i2] = new Array(lineIndent - indent + 1).join(" ") + this.src.slice(first, last);
        } else {
          queue[i2] = this.src.slice(first, last);
        }
      }
      return queue.join("");
    };
    StateBlock.prototype.Token = Token;
    const MAX_AUTOCOMPLETED_CELLS = 65536;
    function getLine(state, line2) {
      const pos2 = state.bMarks[line2] + state.tShift[line2];
      const max2 = state.eMarks[line2];
      return state.src.slice(pos2, max2);
    }
    function escapedSplit(str2) {
      const result = [];
      const max2 = str2.length;
      let pos2 = 0;
      let ch3 = str2.charCodeAt(pos2);
      let isEscaped = false;
      let lastPos = 0;
      let current = "";
      while (pos2 < max2) {
        if (ch3 === 124) {
          if (!isEscaped) {
            result.push(current + str2.substring(lastPos, pos2));
            current = "";
            lastPos = pos2 + 1;
          } else {
            current += str2.substring(lastPos, pos2 - 1);
            lastPos = pos2;
          }
        }
        isEscaped = ch3 === 92;
        pos2++;
        ch3 = str2.charCodeAt(pos2);
      }
      result.push(current + str2.substring(lastPos));
      return result;
    }
    function table(state, startLine, endLine, silent) {
      if (startLine + 2 > endLine) {
        return false;
      }
      let nextLine = startLine + 1;
      if (state.sCount[nextLine] < state.blkIndent) {
        return false;
      }
      if (state.sCount[nextLine] - state.blkIndent >= 4) {
        return false;
      }
      let pos2 = state.bMarks[nextLine] + state.tShift[nextLine];
      if (pos2 >= state.eMarks[nextLine]) {
        return false;
      }
      const firstCh = state.src.charCodeAt(pos2++);
      if (firstCh !== 124 && firstCh !== 45 && firstCh !== 58) {
        return false;
      }
      if (pos2 >= state.eMarks[nextLine]) {
        return false;
      }
      const secondCh = state.src.charCodeAt(pos2++);
      if (secondCh !== 124 && secondCh !== 45 && secondCh !== 58 && !isSpace(secondCh)) {
        return false;
      }
      if (firstCh === 45 && isSpace(secondCh)) {
        return false;
      }
      while (pos2 < state.eMarks[nextLine]) {
        const ch3 = state.src.charCodeAt(pos2);
        if (ch3 !== 124 && ch3 !== 45 && ch3 !== 58 && !isSpace(ch3)) {
          return false;
        }
        pos2++;
      }
      let lineText = getLine(state, startLine + 1);
      let columns = lineText.split("|");
      const aligns = [];
      for (let i2 = 0; i2 < columns.length; i2++) {
        const t2 = columns[i2].trim();
        if (!t2) {
          if (i2 === 0 || i2 === columns.length - 1) {
            continue;
          } else {
            return false;
          }
        }
        if (!/^:?-+:?$/.test(t2)) {
          return false;
        }
        if (t2.charCodeAt(t2.length - 1) === 58) {
          aligns.push(t2.charCodeAt(0) === 58 ? "center" : "right");
        } else if (t2.charCodeAt(0) === 58) {
          aligns.push("left");
        } else {
          aligns.push("");
        }
      }
      lineText = getLine(state, startLine).trim();
      if (lineText.indexOf("|") === -1) {
        return false;
      }
      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      columns = escapedSplit(lineText);
      if (columns.length && columns[0] === "") columns.shift();
      if (columns.length && columns[columns.length - 1] === "") columns.pop();
      const columnCount = columns.length;
      if (columnCount === 0 || columnCount !== aligns.length) {
        return false;
      }
      if (silent) {
        return true;
      }
      const oldParentType = state.parentType;
      state.parentType = "table";
      const terminatorRules = state.md.block.ruler.getRules("blockquote");
      const token_to = state.push("table_open", "table", 1);
      const tableLines = [startLine, 0];
      token_to.map = tableLines;
      const token_tho = state.push("thead_open", "thead", 1);
      token_tho.map = [startLine, startLine + 1];
      const token_htro = state.push("tr_open", "tr", 1);
      token_htro.map = [startLine, startLine + 1];
      for (let i2 = 0; i2 < columns.length; i2++) {
        const token_ho = state.push("th_open", "th", 1);
        if (aligns[i2]) {
          token_ho.attrs = [["style", "text-align:" + aligns[i2]]];
        }
        const token_il = state.push("inline", "", 0);
        token_il.content = columns[i2].trim();
        token_il.children = [];
        state.push("th_close", "th", -1);
      }
      state.push("tr_close", "tr", -1);
      state.push("thead_close", "thead", -1);
      let tbodyLines;
      let autocompletedCells = 0;
      for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        let terminate = false;
        for (let i2 = 0, l2 = terminatorRules.length; i2 < l2; i2++) {
          if (terminatorRules[i2](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
        lineText = getLine(state, nextLine).trim();
        if (!lineText) {
          break;
        }
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          break;
        }
        columns = escapedSplit(lineText);
        if (columns.length && columns[0] === "") columns.shift();
        if (columns.length && columns[columns.length - 1] === "") columns.pop();
        autocompletedCells += columnCount - columns.length;
        if (autocompletedCells > MAX_AUTOCOMPLETED_CELLS) {
          break;
        }
        if (nextLine === startLine + 2) {
          const token_tbo = state.push("tbody_open", "tbody", 1);
          token_tbo.map = tbodyLines = [startLine + 2, 0];
        }
        const token_tro = state.push("tr_open", "tr", 1);
        token_tro.map = [nextLine, nextLine + 1];
        for (let i2 = 0; i2 < columnCount; i2++) {
          const token_tdo = state.push("td_open", "td", 1);
          if (aligns[i2]) {
            token_tdo.attrs = [["style", "text-align:" + aligns[i2]]];
          }
          const token_il = state.push("inline", "", 0);
          token_il.content = columns[i2] ? columns[i2].trim() : "";
          token_il.children = [];
          state.push("td_close", "td", -1);
        }
        state.push("tr_close", "tr", -1);
      }
      if (tbodyLines) {
        state.push("tbody_close", "tbody", -1);
        tbodyLines[1] = nextLine;
      }
      state.push("table_close", "table", -1);
      tableLines[1] = nextLine;
      state.parentType = oldParentType;
      state.line = nextLine;
      return true;
    }
    function code$1(state, startLine, endLine) {
      if (state.sCount[startLine] - state.blkIndent < 4) {
        return false;
      }
      let nextLine = startLine + 1;
      let last = nextLine;
      while (nextLine < endLine) {
        if (state.isEmpty(nextLine)) {
          nextLine++;
          continue;
        }
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          nextLine++;
          last = nextLine;
          continue;
        }
        break;
      }
      state.line = last;
      const token2 = state.push("code_block", "code", 0);
      token2.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + "\n";
      token2.map = [startLine, state.line];
      return true;
    }
    function fence(state, startLine, endLine, silent) {
      let pos2 = state.bMarks[startLine] + state.tShift[startLine];
      let max2 = state.eMarks[startLine];
      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (pos2 + 3 > max2) {
        return false;
      }
      const marker = state.src.charCodeAt(pos2);
      if (marker !== 126 && marker !== 96) {
        return false;
      }
      let mem = pos2;
      pos2 = state.skipChars(pos2, marker);
      let len = pos2 - mem;
      if (len < 3) {
        return false;
      }
      const markup = state.src.slice(mem, pos2);
      const params = state.src.slice(pos2, max2);
      if (marker === 96) {
        if (params.indexOf(String.fromCharCode(marker)) >= 0) {
          return false;
        }
      }
      if (silent) {
        return true;
      }
      let nextLine = startLine;
      let haveEndMarker = false;
      for (; ; ) {
        nextLine++;
        if (nextLine >= endLine) {
          break;
        }
        pos2 = mem = state.bMarks[nextLine] + state.tShift[nextLine];
        max2 = state.eMarks[nextLine];
        if (pos2 < max2 && state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        if (state.src.charCodeAt(pos2) !== marker) {
          continue;
        }
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          continue;
        }
        pos2 = state.skipChars(pos2, marker);
        if (pos2 - mem < len) {
          continue;
        }
        pos2 = state.skipSpaces(pos2);
        if (pos2 < max2) {
          continue;
        }
        haveEndMarker = true;
        break;
      }
      len = state.sCount[startLine];
      state.line = nextLine + (haveEndMarker ? 1 : 0);
      const token2 = state.push("fence", "code", 0);
      token2.info = params;
      token2.content = state.getLines(startLine + 1, nextLine, len, true);
      token2.markup = markup;
      token2.map = [startLine, state.line];
      return true;
    }
    function blockquote(state, startLine, endLine, silent) {
      let pos2 = state.bMarks[startLine] + state.tShift[startLine];
      let max2 = state.eMarks[startLine];
      const oldLineMax = state.lineMax;
      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (state.src.charCodeAt(pos2) !== 62) {
        return false;
      }
      if (silent) {
        return true;
      }
      const oldBMarks = [];
      const oldBSCount = [];
      const oldSCount = [];
      const oldTShift = [];
      const terminatorRules = state.md.block.ruler.getRules("blockquote");
      const oldParentType = state.parentType;
      state.parentType = "blockquote";
      let lastLineEmpty = false;
      let nextLine;
      for (nextLine = startLine; nextLine < endLine; nextLine++) {
        const isOutdented = state.sCount[nextLine] < state.blkIndent;
        pos2 = state.bMarks[nextLine] + state.tShift[nextLine];
        max2 = state.eMarks[nextLine];
        if (pos2 >= max2) {
          break;
        }
        if (state.src.charCodeAt(pos2++) === 62 && !isOutdented) {
          let initial = state.sCount[nextLine] + 1;
          let spaceAfterMarker;
          let adjustTab;
          if (state.src.charCodeAt(pos2) === 32) {
            pos2++;
            initial++;
            adjustTab = false;
            spaceAfterMarker = true;
          } else if (state.src.charCodeAt(pos2) === 9) {
            spaceAfterMarker = true;
            if ((state.bsCount[nextLine] + initial) % 4 === 3) {
              pos2++;
              initial++;
              adjustTab = false;
            } else {
              adjustTab = true;
            }
          } else {
            spaceAfterMarker = false;
          }
          let offset2 = initial;
          oldBMarks.push(state.bMarks[nextLine]);
          state.bMarks[nextLine] = pos2;
          while (pos2 < max2) {
            const ch3 = state.src.charCodeAt(pos2);
            if (isSpace(ch3)) {
              if (ch3 === 9) {
                offset2 += 4 - (offset2 + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
              } else {
                offset2++;
              }
            } else {
              break;
            }
            pos2++;
          }
          lastLineEmpty = pos2 >= max2;
          oldBSCount.push(state.bsCount[nextLine]);
          state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] = offset2 - initial;
          oldTShift.push(state.tShift[nextLine]);
          state.tShift[nextLine] = pos2 - state.bMarks[nextLine];
          continue;
        }
        if (lastLineEmpty) {
          break;
        }
        let terminate = false;
        for (let i2 = 0, l2 = terminatorRules.length; i2 < l2; i2++) {
          if (terminatorRules[i2](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          state.lineMax = nextLine;
          if (state.blkIndent !== 0) {
            oldBMarks.push(state.bMarks[nextLine]);
            oldBSCount.push(state.bsCount[nextLine]);
            oldTShift.push(state.tShift[nextLine]);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] -= state.blkIndent;
          }
          break;
        }
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] = -1;
      }
      const oldIndent = state.blkIndent;
      state.blkIndent = 0;
      const token_o = state.push("blockquote_open", "blockquote", 1);
      token_o.markup = ">";
      const lines = [startLine, 0];
      token_o.map = lines;
      state.md.block.tokenize(state, startLine, nextLine);
      const token_c = state.push("blockquote_close", "blockquote", -1);
      token_c.markup = ">";
      state.lineMax = oldLineMax;
      state.parentType = oldParentType;
      lines[1] = state.line;
      for (let i2 = 0; i2 < oldTShift.length; i2++) {
        state.bMarks[i2 + startLine] = oldBMarks[i2];
        state.tShift[i2 + startLine] = oldTShift[i2];
        state.sCount[i2 + startLine] = oldSCount[i2];
        state.bsCount[i2 + startLine] = oldBSCount[i2];
      }
      state.blkIndent = oldIndent;
      return true;
    }
    function hr(state, startLine, endLine, silent) {
      const max2 = state.eMarks[startLine];
      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      let pos2 = state.bMarks[startLine] + state.tShift[startLine];
      const marker = state.src.charCodeAt(pos2++);
      if (marker !== 42 && marker !== 45 && marker !== 95) {
        return false;
      }
      let cnt = 1;
      while (pos2 < max2) {
        const ch3 = state.src.charCodeAt(pos2++);
        if (ch3 !== marker && !isSpace(ch3)) {
          return false;
        }
        if (ch3 === marker) {
          cnt++;
        }
      }
      if (cnt < 3) {
        return false;
      }
      if (silent) {
        return true;
      }
      state.line = startLine + 1;
      const token2 = state.push("hr", "hr", 0);
      token2.map = [startLine, state.line];
      token2.markup = Array(cnt + 1).join(String.fromCharCode(marker));
      return true;
    }
    function skipBulletListMarker(state, startLine) {
      const max2 = state.eMarks[startLine];
      let pos2 = state.bMarks[startLine] + state.tShift[startLine];
      const marker = state.src.charCodeAt(pos2++);
      if (marker !== 42 && marker !== 45 && marker !== 43) {
        return -1;
      }
      if (pos2 < max2) {
        const ch3 = state.src.charCodeAt(pos2);
        if (!isSpace(ch3)) {
          return -1;
        }
      }
      return pos2;
    }
    function skipOrderedListMarker(state, startLine) {
      const start2 = state.bMarks[startLine] + state.tShift[startLine];
      const max2 = state.eMarks[startLine];
      let pos2 = start2;
      if (pos2 + 1 >= max2) {
        return -1;
      }
      let ch3 = state.src.charCodeAt(pos2++);
      if (ch3 < 48 || ch3 > 57) {
        return -1;
      }
      for (; ; ) {
        if (pos2 >= max2) {
          return -1;
        }
        ch3 = state.src.charCodeAt(pos2++);
        if (ch3 >= 48 && ch3 <= 57) {
          if (pos2 - start2 >= 10) {
            return -1;
          }
          continue;
        }
        if (ch3 === 41 || ch3 === 46) {
          break;
        }
        return -1;
      }
      if (pos2 < max2) {
        ch3 = state.src.charCodeAt(pos2);
        if (!isSpace(ch3)) {
          return -1;
        }
      }
      return pos2;
    }
    function markTightParagraphs(state, idx) {
      const level = state.level + 2;
      for (let i2 = idx + 2, l2 = state.tokens.length - 2; i2 < l2; i2++) {
        if (state.tokens[i2].level === level && state.tokens[i2].type === "paragraph_open") {
          state.tokens[i2 + 2].hidden = true;
          state.tokens[i2].hidden = true;
          i2 += 2;
        }
      }
    }
    function list(state, startLine, endLine, silent) {
      let max2, pos2, start2, token2;
      let nextLine = startLine;
      let tight = true;
      if (state.sCount[nextLine] - state.blkIndent >= 4) {
        return false;
      }
      if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) {
        return false;
      }
      let isTerminatingParagraph = false;
      if (silent && state.parentType === "paragraph") {
        if (state.sCount[nextLine] >= state.blkIndent) {
          isTerminatingParagraph = true;
        }
      }
      let isOrdered;
      let markerValue;
      let posAfterMarker;
      if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {
        isOrdered = true;
        start2 = state.bMarks[nextLine] + state.tShift[nextLine];
        markerValue = Number(state.src.slice(start2, posAfterMarker - 1));
        if (isTerminatingParagraph && markerValue !== 1) return false;
      } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {
        isOrdered = false;
      } else {
        return false;
      }
      if (isTerminatingParagraph) {
        if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;
      }
      if (silent) {
        return true;
      }
      const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
      const listTokIdx = state.tokens.length;
      if (isOrdered) {
        token2 = state.push("ordered_list_open", "ol", 1);
        if (markerValue !== 1) {
          token2.attrs = [["start", markerValue]];
        }
      } else {
        token2 = state.push("bullet_list_open", "ul", 1);
      }
      const listLines = [nextLine, 0];
      token2.map = listLines;
      token2.markup = String.fromCharCode(markerCharCode);
      let prevEmptyEnd = false;
      const terminatorRules = state.md.block.ruler.getRules("list");
      const oldParentType = state.parentType;
      state.parentType = "list";
      while (nextLine < endLine) {
        pos2 = posAfterMarker;
        max2 = state.eMarks[nextLine];
        const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);
        let offset2 = initial;
        while (pos2 < max2) {
          const ch3 = state.src.charCodeAt(pos2);
          if (ch3 === 9) {
            offset2 += 4 - (offset2 + state.bsCount[nextLine]) % 4;
          } else if (ch3 === 32) {
            offset2++;
          } else {
            break;
          }
          pos2++;
        }
        const contentStart = pos2;
        let indentAfterMarker;
        if (contentStart >= max2) {
          indentAfterMarker = 1;
        } else {
          indentAfterMarker = offset2 - initial;
        }
        if (indentAfterMarker > 4) {
          indentAfterMarker = 1;
        }
        const indent = initial + indentAfterMarker;
        token2 = state.push("list_item_open", "li", 1);
        token2.markup = String.fromCharCode(markerCharCode);
        const itemLines = [nextLine, 0];
        token2.map = itemLines;
        if (isOrdered) {
          token2.info = state.src.slice(start2, posAfterMarker - 1);
        }
        const oldTight = state.tight;
        const oldTShift = state.tShift[nextLine];
        const oldSCount = state.sCount[nextLine];
        const oldListIndent = state.listIndent;
        state.listIndent = state.blkIndent;
        state.blkIndent = indent;
        state.tight = true;
        state.tShift[nextLine] = contentStart - state.bMarks[nextLine];
        state.sCount[nextLine] = offset2;
        if (contentStart >= max2 && state.isEmpty(nextLine + 1)) {
          state.line = Math.min(state.line + 2, endLine);
        } else {
          state.md.block.tokenize(state, nextLine, endLine, true);
        }
        if (!state.tight || prevEmptyEnd) {
          tight = false;
        }
        prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);
        state.blkIndent = state.listIndent;
        state.listIndent = oldListIndent;
        state.tShift[nextLine] = oldTShift;
        state.sCount[nextLine] = oldSCount;
        state.tight = oldTight;
        token2 = state.push("list_item_close", "li", -1);
        token2.markup = String.fromCharCode(markerCharCode);
        nextLine = state.line;
        itemLines[1] = nextLine;
        if (nextLine >= endLine) {
          break;
        }
        if (state.sCount[nextLine] < state.blkIndent) {
          break;
        }
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          break;
        }
        let terminate = false;
        for (let i2 = 0, l2 = terminatorRules.length; i2 < l2; i2++) {
          if (terminatorRules[i2](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
        if (isOrdered) {
          posAfterMarker = skipOrderedListMarker(state, nextLine);
          if (posAfterMarker < 0) {
            break;
          }
          start2 = state.bMarks[nextLine] + state.tShift[nextLine];
        } else {
          posAfterMarker = skipBulletListMarker(state, nextLine);
          if (posAfterMarker < 0) {
            break;
          }
        }
        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
          break;
        }
      }
      if (isOrdered) {
        token2 = state.push("ordered_list_close", "ol", -1);
      } else {
        token2 = state.push("bullet_list_close", "ul", -1);
      }
      token2.markup = String.fromCharCode(markerCharCode);
      listLines[1] = nextLine;
      state.line = nextLine;
      state.parentType = oldParentType;
      if (tight) {
        markTightParagraphs(state, listTokIdx);
      }
      return true;
    }
    function reference(state, startLine, _endLine, silent) {
      let pos2 = state.bMarks[startLine] + state.tShift[startLine];
      let max2 = state.eMarks[startLine];
      let nextLine = startLine + 1;
      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (state.src.charCodeAt(pos2) !== 91) {
        return false;
      }
      function getNextLine(nextLine2) {
        const endLine = state.lineMax;
        if (nextLine2 >= endLine || state.isEmpty(nextLine2)) {
          return null;
        }
        let isContinuation = false;
        if (state.sCount[nextLine2] - state.blkIndent > 3) {
          isContinuation = true;
        }
        if (state.sCount[nextLine2] < 0) {
          isContinuation = true;
        }
        if (!isContinuation) {
          const terminatorRules = state.md.block.ruler.getRules("reference");
          const oldParentType = state.parentType;
          state.parentType = "reference";
          let terminate = false;
          for (let i2 = 0, l2 = terminatorRules.length; i2 < l2; i2++) {
            if (terminatorRules[i2](state, nextLine2, endLine, true)) {
              terminate = true;
              break;
            }
          }
          state.parentType = oldParentType;
          if (terminate) {
            return null;
          }
        }
        const pos3 = state.bMarks[nextLine2] + state.tShift[nextLine2];
        const max3 = state.eMarks[nextLine2];
        return state.src.slice(pos3, max3 + 1);
      }
      let str2 = state.src.slice(pos2, max2 + 1);
      max2 = str2.length;
      let labelEnd = -1;
      for (pos2 = 1; pos2 < max2; pos2++) {
        const ch3 = str2.charCodeAt(pos2);
        if (ch3 === 91) {
          return false;
        } else if (ch3 === 93) {
          labelEnd = pos2;
          break;
        } else if (ch3 === 10) {
          const lineContent = getNextLine(nextLine);
          if (lineContent !== null) {
            str2 += lineContent;
            max2 = str2.length;
            nextLine++;
          }
        } else if (ch3 === 92) {
          pos2++;
          if (pos2 < max2 && str2.charCodeAt(pos2) === 10) {
            const lineContent = getNextLine(nextLine);
            if (lineContent !== null) {
              str2 += lineContent;
              max2 = str2.length;
              nextLine++;
            }
          }
        }
      }
      if (labelEnd < 0 || str2.charCodeAt(labelEnd + 1) !== 58) {
        return false;
      }
      for (pos2 = labelEnd + 2; pos2 < max2; pos2++) {
        const ch3 = str2.charCodeAt(pos2);
        if (ch3 === 10) {
          const lineContent = getNextLine(nextLine);
          if (lineContent !== null) {
            str2 += lineContent;
            max2 = str2.length;
            nextLine++;
          }
        } else if (isSpace(ch3)) ;
        else {
          break;
        }
      }
      const destRes = state.md.helpers.parseLinkDestination(str2, pos2, max2);
      if (!destRes.ok) {
        return false;
      }
      const href = state.md.normalizeLink(destRes.str);
      if (!state.md.validateLink(href)) {
        return false;
      }
      pos2 = destRes.pos;
      const destEndPos = pos2;
      const destEndLineNo = nextLine;
      const start2 = pos2;
      for (; pos2 < max2; pos2++) {
        const ch3 = str2.charCodeAt(pos2);
        if (ch3 === 10) {
          const lineContent = getNextLine(nextLine);
          if (lineContent !== null) {
            str2 += lineContent;
            max2 = str2.length;
            nextLine++;
          }
        } else if (isSpace(ch3)) ;
        else {
          break;
        }
      }
      let titleRes = state.md.helpers.parseLinkTitle(str2, pos2, max2);
      while (titleRes.can_continue) {
        const lineContent = getNextLine(nextLine);
        if (lineContent === null) break;
        str2 += lineContent;
        pos2 = max2;
        max2 = str2.length;
        nextLine++;
        titleRes = state.md.helpers.parseLinkTitle(str2, pos2, max2, titleRes);
      }
      let title;
      if (pos2 < max2 && start2 !== pos2 && titleRes.ok) {
        title = titleRes.str;
        pos2 = titleRes.pos;
      } else {
        title = "";
        pos2 = destEndPos;
        nextLine = destEndLineNo;
      }
      while (pos2 < max2) {
        const ch3 = str2.charCodeAt(pos2);
        if (!isSpace(ch3)) {
          break;
        }
        pos2++;
      }
      if (pos2 < max2 && str2.charCodeAt(pos2) !== 10) {
        if (title) {
          title = "";
          pos2 = destEndPos;
          nextLine = destEndLineNo;
          while (pos2 < max2) {
            const ch3 = str2.charCodeAt(pos2);
            if (!isSpace(ch3)) {
              break;
            }
            pos2++;
          }
        }
      }
      if (pos2 < max2 && str2.charCodeAt(pos2) !== 10) {
        return false;
      }
      const label = normalizeReference(str2.slice(1, labelEnd));
      if (!label) {
        return false;
      }
      if (silent) {
        return true;
      }
      if (typeof state.env.references === "undefined") {
        state.env.references = {};
      }
      if (typeof state.env.references[label] === "undefined") {
        state.env.references[label] = { title, href };
      }
      state.line = nextLine;
      return true;
    }
    const block_names = [
      "address",
      "article",
      "aside",
      "base",
      "basefont",
      "blockquote",
      "body",
      "caption",
      "center",
      "col",
      "colgroup",
      "dd",
      "details",
      "dialog",
      "dir",
      "div",
      "dl",
      "dt",
      "fieldset",
      "figcaption",
      "figure",
      "footer",
      "form",
      "frame",
      "frameset",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hr",
      "html",
      "iframe",
      "legend",
      "li",
      "link",
      "main",
      "menu",
      "menuitem",
      "nav",
      "noframes",
      "ol",
      "optgroup",
      "option",
      "p",
      "param",
      "search",
      "section",
      "summary",
      "table",
      "tbody",
      "td",
      "tfoot",
      "th",
      "thead",
      "title",
      "tr",
      "track",
      "ul"
    ];
    const attr_name = "[a-zA-Z_:][a-zA-Z0-9:._-]*";
    const unquoted = "[^\"'=<>`\\x00-\\x20]+";
    const single_quoted = "'[^']*'";
    const double_quoted = '"[^"]*"';
    const attr_value = "(?:" + unquoted + "|" + single_quoted + "|" + double_quoted + ")";
    const attribute = "(?:\\s+" + attr_name + "(?:\\s*=\\s*" + attr_value + ")?)";
    const open_tag = "<[A-Za-z][A-Za-z0-9\\-]*" + attribute + "*\\s*\\/?>";
    const close_tag = "<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>";
    const comment$1 = "<!---?>|<!--(?:[^-]|-[^-]|--[^>])*-->";
    const processing = "<[?][\\s\\S]*?[?]>";
    const declaration = "<![A-Za-z][^>]*>";
    const cdata = "<!\\[CDATA\\[[\\s\\S]*?\\]\\]>";
    const HTML_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + "|" + comment$1 + "|" + processing + "|" + declaration + "|" + cdata + ")");
    const HTML_OPEN_CLOSE_TAG_RE = new RegExp("^(?:" + open_tag + "|" + close_tag + ")");
    const HTML_SEQUENCES = [
      [/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true],
      [/^<!--/, /-->/, true],
      [/^<\?/, /\?>/, true],
      [/^<![A-Z]/, />/, true],
      [/^<!\[CDATA\[/, /\]\]>/, true],
      [new RegExp("^</?(" + block_names.join("|") + ")(?=(\\s|/?>|$))", "i"), /^$/, true],
      [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + "\\s*$"), /^$/, false]
    ];
    function html_block(state, startLine, endLine, silent) {
      let pos2 = state.bMarks[startLine] + state.tShift[startLine];
      let max2 = state.eMarks[startLine];
      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      if (!state.md.options.html) {
        return false;
      }
      if (state.src.charCodeAt(pos2) !== 60) {
        return false;
      }
      let lineText = state.src.slice(pos2, max2);
      let i2 = 0;
      for (; i2 < HTML_SEQUENCES.length; i2++) {
        if (HTML_SEQUENCES[i2][0].test(lineText)) {
          break;
        }
      }
      if (i2 === HTML_SEQUENCES.length) {
        return false;
      }
      if (silent) {
        return HTML_SEQUENCES[i2][2];
      }
      let nextLine = startLine + 1;
      if (!HTML_SEQUENCES[i2][1].test(lineText)) {
        for (; nextLine < endLine; nextLine++) {
          if (state.sCount[nextLine] < state.blkIndent) {
            break;
          }
          pos2 = state.bMarks[nextLine] + state.tShift[nextLine];
          max2 = state.eMarks[nextLine];
          lineText = state.src.slice(pos2, max2);
          if (HTML_SEQUENCES[i2][1].test(lineText)) {
            if (lineText.length !== 0) {
              nextLine++;
            }
            break;
          }
        }
      }
      state.line = nextLine;
      const token2 = state.push("html_block", "", 0);
      token2.map = [startLine, nextLine];
      token2.content = state.getLines(startLine, nextLine, state.blkIndent, true);
      return true;
    }
    function heading$1(state, startLine, endLine, silent) {
      let pos2 = state.bMarks[startLine] + state.tShift[startLine];
      let max2 = state.eMarks[startLine];
      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      let ch3 = state.src.charCodeAt(pos2);
      if (ch3 !== 35 || pos2 >= max2) {
        return false;
      }
      let level = 1;
      ch3 = state.src.charCodeAt(++pos2);
      while (ch3 === 35 && pos2 < max2 && level <= 6) {
        level++;
        ch3 = state.src.charCodeAt(++pos2);
      }
      if (level > 6 || pos2 < max2 && !isSpace(ch3)) {
        return false;
      }
      if (silent) {
        return true;
      }
      max2 = state.skipSpacesBack(max2, pos2);
      const tmp = state.skipCharsBack(max2, 35, pos2);
      if (tmp > pos2 && isSpace(state.src.charCodeAt(tmp - 1))) {
        max2 = tmp;
      }
      state.line = startLine + 1;
      const token_o = state.push("heading_open", "h" + String(level), 1);
      token_o.markup = "########".slice(0, level);
      token_o.map = [startLine, state.line];
      const token_i = state.push("inline", "", 0);
      token_i.content = state.src.slice(pos2, max2).trim();
      token_i.map = [startLine, state.line];
      token_i.children = [];
      const token_c = state.push("heading_close", "h" + String(level), -1);
      token_c.markup = "########".slice(0, level);
      return true;
    }
    function lheading(state, startLine, endLine) {
      const terminatorRules = state.md.block.ruler.getRules("paragraph");
      if (state.sCount[startLine] - state.blkIndent >= 4) {
        return false;
      }
      const oldParentType = state.parentType;
      state.parentType = "paragraph";
      let level = 0;
      let marker;
      let nextLine = startLine + 1;
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        if (state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        }
        if (state.sCount[nextLine] >= state.blkIndent) {
          let pos2 = state.bMarks[nextLine] + state.tShift[nextLine];
          const max2 = state.eMarks[nextLine];
          if (pos2 < max2) {
            marker = state.src.charCodeAt(pos2);
            if (marker === 45 || marker === 61) {
              pos2 = state.skipChars(pos2, marker);
              pos2 = state.skipSpaces(pos2);
              if (pos2 >= max2) {
                level = marker === 61 ? 1 : 2;
                break;
              }
            }
          }
        }
        if (state.sCount[nextLine] < 0) {
          continue;
        }
        let terminate = false;
        for (let i2 = 0, l2 = terminatorRules.length; i2 < l2; i2++) {
          if (terminatorRules[i2](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
      }
      if (!level) {
        return false;
      }
      const content2 = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine + 1;
      const token_o = state.push("heading_open", "h" + String(level), 1);
      token_o.markup = String.fromCharCode(marker);
      token_o.map = [startLine, state.line];
      const token_i = state.push("inline", "", 0);
      token_i.content = content2;
      token_i.map = [startLine, state.line - 1];
      token_i.children = [];
      const token_c = state.push("heading_close", "h" + String(level), -1);
      token_c.markup = String.fromCharCode(marker);
      state.parentType = oldParentType;
      return true;
    }
    function paragraph(state, startLine, endLine) {
      const terminatorRules = state.md.block.ruler.getRules("paragraph");
      const oldParentType = state.parentType;
      let nextLine = startLine + 1;
      state.parentType = "paragraph";
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        if (state.sCount[nextLine] - state.blkIndent > 3) {
          continue;
        }
        if (state.sCount[nextLine] < 0) {
          continue;
        }
        let terminate = false;
        for (let i2 = 0, l2 = terminatorRules.length; i2 < l2; i2++) {
          if (terminatorRules[i2](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) {
          break;
        }
      }
      const content2 = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      state.line = nextLine;
      const token_o = state.push("paragraph_open", "p", 1);
      token_o.map = [startLine, state.line];
      const token_i = state.push("inline", "", 0);
      token_i.content = content2;
      token_i.map = [startLine, state.line];
      token_i.children = [];
      state.push("paragraph_close", "p", -1);
      state.parentType = oldParentType;
      return true;
    }
    const _rules$1 = [
      // First 2 params - rule name & source. Secondary array - list of rules,
      // which can be terminated by this one.
      ["table", table, ["paragraph", "reference"]],
      ["code", code$1],
      ["fence", fence, ["paragraph", "reference", "blockquote", "list"]],
      ["blockquote", blockquote, ["paragraph", "reference", "blockquote", "list"]],
      ["hr", hr, ["paragraph", "reference", "blockquote", "list"]],
      ["list", list, ["paragraph", "reference", "blockquote"]],
      ["reference", reference],
      ["html_block", html_block, ["paragraph", "reference", "blockquote"]],
      ["heading", heading$1, ["paragraph", "reference", "blockquote"]],
      ["lheading", lheading],
      ["paragraph", paragraph]
    ];
    function ParserBlock() {
      this.ruler = new Ruler();
      for (let i2 = 0; i2 < _rules$1.length; i2++) {
        this.ruler.push(_rules$1[i2][0], _rules$1[i2][1], { alt: (_rules$1[i2][2] || []).slice() });
      }
    }
    ParserBlock.prototype.tokenize = function(state, startLine, endLine) {
      const rules = this.ruler.getRules("");
      const len = rules.length;
      const maxNesting = state.md.options.maxNesting;
      let line2 = startLine;
      let hasEmptyLines = false;
      while (line2 < endLine) {
        state.line = line2 = state.skipEmptyLines(line2);
        if (line2 >= endLine) {
          break;
        }
        if (state.sCount[line2] < state.blkIndent) {
          break;
        }
        if (state.level >= maxNesting) {
          state.line = endLine;
          break;
        }
        const prevLine = state.line;
        let ok = false;
        for (let i2 = 0; i2 < len; i2++) {
          ok = rules[i2](state, line2, endLine, false);
          if (ok) {
            if (prevLine >= state.line) {
              throw new Error("block rule didn't increment state.line");
            }
            break;
          }
        }
        if (!ok) throw new Error("none of the block rules matched");
        state.tight = !hasEmptyLines;
        if (state.isEmpty(state.line - 1)) {
          hasEmptyLines = true;
        }
        line2 = state.line;
        if (line2 < endLine && state.isEmpty(line2)) {
          hasEmptyLines = true;
          line2++;
          state.line = line2;
        }
      }
    };
    ParserBlock.prototype.parse = function(src, md, env, outTokens) {
      if (!src) {
        return;
      }
      const state = new this.State(src, md, env, outTokens);
      this.tokenize(state, state.line, state.lineMax);
    };
    ParserBlock.prototype.State = StateBlock;
    function StateInline(src, md, env, outTokens) {
      this.src = src;
      this.env = env;
      this.md = md;
      this.tokens = outTokens;
      this.tokens_meta = Array(outTokens.length);
      this.pos = 0;
      this.posMax = this.src.length;
      this.level = 0;
      this.pending = "";
      this.pendingLevel = 0;
      this.cache = {};
      this.delimiters = [];
      this._prev_delimiters = [];
      this.backticks = {};
      this.backticksScanned = false;
      this.linkLevel = 0;
    }
    StateInline.prototype.pushPending = function() {
      const token2 = new Token("text", "", 0);
      token2.content = this.pending;
      token2.level = this.pendingLevel;
      this.tokens.push(token2);
      this.pending = "";
      return token2;
    };
    StateInline.prototype.push = function(type, tag, nesting) {
      if (this.pending) {
        this.pushPending();
      }
      const token2 = new Token(type, tag, nesting);
      let token_meta = null;
      if (nesting < 0) {
        this.level--;
        this.delimiters = this._prev_delimiters.pop();
      }
      token2.level = this.level;
      if (nesting > 0) {
        this.level++;
        this._prev_delimiters.push(this.delimiters);
        this.delimiters = [];
        token_meta = { delimiters: this.delimiters };
      }
      this.pendingLevel = this.level;
      this.tokens.push(token2);
      this.tokens_meta.push(token_meta);
      return token2;
    };
    StateInline.prototype.scanDelims = function(start2, canSplitWord) {
      const max2 = this.posMax;
      const marker = this.src.charCodeAt(start2);
      const lastChar = start2 > 0 ? this.src.charCodeAt(start2 - 1) : 32;
      let pos2 = start2;
      while (pos2 < max2 && this.src.charCodeAt(pos2) === marker) {
        pos2++;
      }
      const count = pos2 - start2;
      const nextChar = pos2 < max2 ? this.src.charCodeAt(pos2) : 32;
      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
      const isLastWhiteSpace = isWhiteSpace(lastChar);
      const isNextWhiteSpace = isWhiteSpace(nextChar);
      const left_flanking = !isNextWhiteSpace && (!isNextPunctChar || isLastWhiteSpace || isLastPunctChar);
      const right_flanking = !isLastWhiteSpace && (!isLastPunctChar || isNextWhiteSpace || isNextPunctChar);
      const can_open = left_flanking && (canSplitWord || !right_flanking || isLastPunctChar);
      const can_close = right_flanking && (canSplitWord || !left_flanking || isNextPunctChar);
      return { can_open, can_close, length: count };
    };
    StateInline.prototype.Token = Token;
    function isTerminatorChar(ch3) {
      switch (ch3) {
        case 10:
        case 33:
        case 35:
        case 36:
        case 37:
        case 38:
        case 42:
        case 43:
        case 45:
        case 58:
        case 60:
        case 61:
        case 62:
        case 64:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 123:
        case 125:
        case 126:
          return true;
        default:
          return false;
      }
    }
    function text(state, silent) {
      let pos2 = state.pos;
      while (pos2 < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos2))) {
        pos2++;
      }
      if (pos2 === state.pos) {
        return false;
      }
      if (!silent) {
        state.pending += state.src.slice(state.pos, pos2);
      }
      state.pos = pos2;
      return true;
    }
    const SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;
    function linkify(state, silent) {
      if (!state.md.options.linkify) return false;
      if (state.linkLevel > 0) return false;
      const pos2 = state.pos;
      const max2 = state.posMax;
      if (pos2 + 3 > max2) return false;
      if (state.src.charCodeAt(pos2) !== 58) return false;
      if (state.src.charCodeAt(pos2 + 1) !== 47) return false;
      if (state.src.charCodeAt(pos2 + 2) !== 47) return false;
      const match = state.pending.match(SCHEME_RE);
      if (!match) return false;
      const proto = match[1];
      const link2 = state.md.linkify.matchAtStart(state.src.slice(pos2 - proto.length));
      if (!link2) return false;
      let url = link2.url;
      if (url.length <= proto.length) return false;
      url = url.replace(/\*+$/, "");
      const fullUrl = state.md.normalizeLink(url);
      if (!state.md.validateLink(fullUrl)) return false;
      if (!silent) {
        state.pending = state.pending.slice(0, -proto.length);
        const token_o = state.push("link_open", "a", 1);
        token_o.attrs = [["href", fullUrl]];
        token_o.markup = "linkify";
        token_o.info = "auto";
        const token_t = state.push("text", "", 0);
        token_t.content = state.md.normalizeLinkText(url);
        const token_c = state.push("link_close", "a", -1);
        token_c.markup = "linkify";
        token_c.info = "auto";
      }
      state.pos += url.length - proto.length;
      return true;
    }
    function newline(state, silent) {
      let pos2 = state.pos;
      if (state.src.charCodeAt(pos2) !== 10) {
        return false;
      }
      const pmax = state.pending.length - 1;
      const max2 = state.posMax;
      if (!silent) {
        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 32) {
          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 32) {
            let ws = pmax - 1;
            while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 32) ws--;
            state.pending = state.pending.slice(0, ws);
            state.push("hardbreak", "br", 0);
          } else {
            state.pending = state.pending.slice(0, -1);
            state.push("softbreak", "br", 0);
          }
        } else {
          state.push("softbreak", "br", 0);
        }
      }
      pos2++;
      while (pos2 < max2 && isSpace(state.src.charCodeAt(pos2))) {
        pos2++;
      }
      state.pos = pos2;
      return true;
    }
    const ESCAPED = [];
    for (let i2 = 0; i2 < 256; i2++) {
      ESCAPED.push(0);
    }
    "\\!\"#$%&'()*+,./:;<=>?@[]^_`{|}~-".split("").forEach(function(ch3) {
      ESCAPED[ch3.charCodeAt(0)] = 1;
    });
    function escape$2(state, silent) {
      let pos2 = state.pos;
      const max2 = state.posMax;
      if (state.src.charCodeAt(pos2) !== 92) return false;
      pos2++;
      if (pos2 >= max2) return false;
      let ch1 = state.src.charCodeAt(pos2);
      if (ch1 === 10) {
        if (!silent) {
          state.push("hardbreak", "br", 0);
        }
        pos2++;
        while (pos2 < max2) {
          ch1 = state.src.charCodeAt(pos2);
          if (!isSpace(ch1)) break;
          pos2++;
        }
        state.pos = pos2;
        return true;
      }
      let escapedStr = state.src[pos2];
      if (ch1 >= 55296 && ch1 <= 56319 && pos2 + 1 < max2) {
        const ch22 = state.src.charCodeAt(pos2 + 1);
        if (ch22 >= 56320 && ch22 <= 57343) {
          escapedStr += state.src[pos2 + 1];
          pos2++;
        }
      }
      const origStr = "\\" + escapedStr;
      if (!silent) {
        const token2 = state.push("text_special", "", 0);
        if (ch1 < 256 && ESCAPED[ch1] !== 0) {
          token2.content = escapedStr;
        } else {
          token2.content = origStr;
        }
        token2.markup = origStr;
        token2.info = "escape";
      }
      state.pos = pos2 + 1;
      return true;
    }
    function backtick(state, silent) {
      let pos2 = state.pos;
      const ch3 = state.src.charCodeAt(pos2);
      if (ch3 !== 96) {
        return false;
      }
      const start2 = pos2;
      pos2++;
      const max2 = state.posMax;
      while (pos2 < max2 && state.src.charCodeAt(pos2) === 96) {
        pos2++;
      }
      const marker = state.src.slice(start2, pos2);
      const openerLength = marker.length;
      if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start2) {
        if (!silent) state.pending += marker;
        state.pos += openerLength;
        return true;
      }
      let matchEnd = pos2;
      let matchStart;
      while ((matchStart = state.src.indexOf("`", matchEnd)) !== -1) {
        matchEnd = matchStart + 1;
        while (matchEnd < max2 && state.src.charCodeAt(matchEnd) === 96) {
          matchEnd++;
        }
        const closerLength = matchEnd - matchStart;
        if (closerLength === openerLength) {
          if (!silent) {
            const token2 = state.push("code_inline", "code", 0);
            token2.markup = marker;
            token2.content = state.src.slice(pos2, matchStart).replace(/\n/g, " ").replace(/^ (.+) $/, "$1");
          }
          state.pos = matchEnd;
          return true;
        }
        state.backticks[closerLength] = matchStart;
      }
      state.backticksScanned = true;
      if (!silent) state.pending += marker;
      state.pos += openerLength;
      return true;
    }
    function strikethrough_tokenize(state, silent) {
      const start2 = state.pos;
      const marker = state.src.charCodeAt(start2);
      if (silent) {
        return false;
      }
      if (marker !== 126) {
        return false;
      }
      const scanned = state.scanDelims(state.pos, true);
      let len = scanned.length;
      const ch3 = String.fromCharCode(marker);
      if (len < 2) {
        return false;
      }
      let token2;
      if (len % 2) {
        token2 = state.push("text", "", 0);
        token2.content = ch3;
        len--;
      }
      for (let i2 = 0; i2 < len; i2 += 2) {
        token2 = state.push("text", "", 0);
        token2.content = ch3 + ch3;
        state.delimiters.push({
          marker,
          length: 0,
          // disable "rule of 3" length checks meant for emphasis
          token: state.tokens.length - 1,
          end: -1,
          open: scanned.can_open,
          close: scanned.can_close
        });
      }
      state.pos += scanned.length;
      return true;
    }
    function postProcess$1(state, delimiters) {
      let token2;
      const loneMarkers = [];
      const max2 = delimiters.length;
      for (let i2 = 0; i2 < max2; i2++) {
        const startDelim = delimiters[i2];
        if (startDelim.marker !== 126) {
          continue;
        }
        if (startDelim.end === -1) {
          continue;
        }
        const endDelim = delimiters[startDelim.end];
        token2 = state.tokens[startDelim.token];
        token2.type = "s_open";
        token2.tag = "s";
        token2.nesting = 1;
        token2.markup = "~~";
        token2.content = "";
        token2 = state.tokens[endDelim.token];
        token2.type = "s_close";
        token2.tag = "s";
        token2.nesting = -1;
        token2.markup = "~~";
        token2.content = "";
        if (state.tokens[endDelim.token - 1].type === "text" && state.tokens[endDelim.token - 1].content === "~") {
          loneMarkers.push(endDelim.token - 1);
        }
      }
      while (loneMarkers.length) {
        const i2 = loneMarkers.pop();
        let j2 = i2 + 1;
        while (j2 < state.tokens.length && state.tokens[j2].type === "s_close") {
          j2++;
        }
        j2--;
        if (i2 !== j2) {
          token2 = state.tokens[j2];
          state.tokens[j2] = state.tokens[i2];
          state.tokens[i2] = token2;
        }
      }
    }
    function strikethrough_postProcess(state) {
      const tokens_meta = state.tokens_meta;
      const max2 = state.tokens_meta.length;
      postProcess$1(state, state.delimiters);
      for (let curr = 0; curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess$1(state, tokens_meta[curr].delimiters);
        }
      }
    }
    const r_strikethrough = {
      tokenize: strikethrough_tokenize,
      postProcess: strikethrough_postProcess
    };
    function emphasis_tokenize(state, silent) {
      const start2 = state.pos;
      const marker = state.src.charCodeAt(start2);
      if (silent) {
        return false;
      }
      if (marker !== 95 && marker !== 42) {
        return false;
      }
      const scanned = state.scanDelims(state.pos, marker === 42);
      for (let i2 = 0; i2 < scanned.length; i2++) {
        const token2 = state.push("text", "", 0);
        token2.content = String.fromCharCode(marker);
        state.delimiters.push({
          // Char code of the starting marker (number).
          //
          marker,
          // Total length of these series of delimiters.
          //
          length: scanned.length,
          // A position of the token this delimiter corresponds to.
          //
          token: state.tokens.length - 1,
          // If this delimiter is matched as a valid opener, `end` will be
          // equal to its position, otherwise it's `-1`.
          //
          end: -1,
          // Boolean flags that determine if this delimiter could open or close
          // an emphasis.
          //
          open: scanned.can_open,
          close: scanned.can_close
        });
      }
      state.pos += scanned.length;
      return true;
    }
    function postProcess(state, delimiters) {
      const max2 = delimiters.length;
      for (let i2 = max2 - 1; i2 >= 0; i2--) {
        const startDelim = delimiters[i2];
        if (startDelim.marker !== 95 && startDelim.marker !== 42) {
          continue;
        }
        if (startDelim.end === -1) {
          continue;
        }
        const endDelim = delimiters[startDelim.end];
        const isStrong = i2 > 0 && delimiters[i2 - 1].end === startDelim.end + 1 && // check that first two markers match and adjacent
        delimiters[i2 - 1].marker === startDelim.marker && delimiters[i2 - 1].token === startDelim.token - 1 && // check that last two markers are adjacent (we can safely assume they match)
        delimiters[startDelim.end + 1].token === endDelim.token + 1;
        const ch3 = String.fromCharCode(startDelim.marker);
        const token_o = state.tokens[startDelim.token];
        token_o.type = isStrong ? "strong_open" : "em_open";
        token_o.tag = isStrong ? "strong" : "em";
        token_o.nesting = 1;
        token_o.markup = isStrong ? ch3 + ch3 : ch3;
        token_o.content = "";
        const token_c = state.tokens[endDelim.token];
        token_c.type = isStrong ? "strong_close" : "em_close";
        token_c.tag = isStrong ? "strong" : "em";
        token_c.nesting = -1;
        token_c.markup = isStrong ? ch3 + ch3 : ch3;
        token_c.content = "";
        if (isStrong) {
          state.tokens[delimiters[i2 - 1].token].content = "";
          state.tokens[delimiters[startDelim.end + 1].token].content = "";
          i2--;
        }
      }
    }
    function emphasis_post_process(state) {
      const tokens_meta = state.tokens_meta;
      const max2 = state.tokens_meta.length;
      postProcess(state, state.delimiters);
      for (let curr = 0; curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    }
    const r_emphasis = {
      tokenize: emphasis_tokenize,
      postProcess: emphasis_post_process
    };
    function link(state, silent) {
      let code2, label, res, ref;
      let href = "";
      let title = "";
      let start2 = state.pos;
      let parseReference = true;
      if (state.src.charCodeAt(state.pos) !== 91) {
        return false;
      }
      const oldPos = state.pos;
      const max2 = state.posMax;
      const labelStart = state.pos + 1;
      const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
      if (labelEnd < 0) {
        return false;
      }
      let pos2 = labelEnd + 1;
      if (pos2 < max2 && state.src.charCodeAt(pos2) === 40) {
        parseReference = false;
        pos2++;
        for (; pos2 < max2; pos2++) {
          code2 = state.src.charCodeAt(pos2);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        if (pos2 >= max2) {
          return false;
        }
        start2 = pos2;
        res = state.md.helpers.parseLinkDestination(state.src, pos2, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos2 = res.pos;
          } else {
            href = "";
          }
          start2 = pos2;
          for (; pos2 < max2; pos2++) {
            code2 = state.src.charCodeAt(pos2);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
          res = state.md.helpers.parseLinkTitle(state.src, pos2, state.posMax);
          if (pos2 < max2 && start2 !== pos2 && res.ok) {
            title = res.str;
            pos2 = res.pos;
            for (; pos2 < max2; pos2++) {
              code2 = state.src.charCodeAt(pos2);
              if (!isSpace(code2) && code2 !== 10) {
                break;
              }
            }
          }
        }
        if (pos2 >= max2 || state.src.charCodeAt(pos2) !== 41) {
          parseReference = true;
        }
        pos2++;
      }
      if (parseReference) {
        if (typeof state.env.references === "undefined") {
          return false;
        }
        if (pos2 < max2 && state.src.charCodeAt(pos2) === 91) {
          start2 = pos2 + 1;
          pos2 = state.md.helpers.parseLinkLabel(state, pos2);
          if (pos2 >= 0) {
            label = state.src.slice(start2, pos2++);
          } else {
            pos2 = labelEnd + 1;
          }
        } else {
          pos2 = labelEnd + 1;
        }
        if (!label) {
          label = state.src.slice(labelStart, labelEnd);
        }
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
      if (!silent) {
        state.pos = labelStart;
        state.posMax = labelEnd;
        const token_o = state.push("link_open", "a", 1);
        const attrs = [["href", href]];
        token_o.attrs = attrs;
        if (title) {
          attrs.push(["title", title]);
        }
        state.linkLevel++;
        state.md.inline.tokenize(state);
        state.linkLevel--;
        state.push("link_close", "a", -1);
      }
      state.pos = pos2;
      state.posMax = max2;
      return true;
    }
    function image(state, silent) {
      let code2, content2, label, pos2, ref, res, title, start2;
      let href = "";
      const oldPos = state.pos;
      const max2 = state.posMax;
      if (state.src.charCodeAt(state.pos) !== 33) {
        return false;
      }
      if (state.src.charCodeAt(state.pos + 1) !== 91) {
        return false;
      }
      const labelStart = state.pos + 2;
      const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
      if (labelEnd < 0) {
        return false;
      }
      pos2 = labelEnd + 1;
      if (pos2 < max2 && state.src.charCodeAt(pos2) === 40) {
        pos2++;
        for (; pos2 < max2; pos2++) {
          code2 = state.src.charCodeAt(pos2);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        if (pos2 >= max2) {
          return false;
        }
        start2 = pos2;
        res = state.md.helpers.parseLinkDestination(state.src, pos2, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos2 = res.pos;
          } else {
            href = "";
          }
        }
        start2 = pos2;
        for (; pos2 < max2; pos2++) {
          code2 = state.src.charCodeAt(pos2);
          if (!isSpace(code2) && code2 !== 10) {
            break;
          }
        }
        res = state.md.helpers.parseLinkTitle(state.src, pos2, state.posMax);
        if (pos2 < max2 && start2 !== pos2 && res.ok) {
          title = res.str;
          pos2 = res.pos;
          for (; pos2 < max2; pos2++) {
            code2 = state.src.charCodeAt(pos2);
            if (!isSpace(code2) && code2 !== 10) {
              break;
            }
          }
        } else {
          title = "";
        }
        if (pos2 >= max2 || state.src.charCodeAt(pos2) !== 41) {
          state.pos = oldPos;
          return false;
        }
        pos2++;
      } else {
        if (typeof state.env.references === "undefined") {
          return false;
        }
        if (pos2 < max2 && state.src.charCodeAt(pos2) === 91) {
          start2 = pos2 + 1;
          pos2 = state.md.helpers.parseLinkLabel(state, pos2);
          if (pos2 >= 0) {
            label = state.src.slice(start2, pos2++);
          } else {
            pos2 = labelEnd + 1;
          }
        } else {
          pos2 = labelEnd + 1;
        }
        if (!label) {
          label = state.src.slice(labelStart, labelEnd);
        }
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
      if (!silent) {
        content2 = state.src.slice(labelStart, labelEnd);
        const tokens = [];
        state.md.inline.parse(
          content2,
          state.md,
          state.env,
          tokens
        );
        const token2 = state.push("image", "img", 0);
        const attrs = [["src", href], ["alt", ""]];
        token2.attrs = attrs;
        token2.children = tokens;
        token2.content = content2;
        if (title) {
          attrs.push(["title", title]);
        }
      }
      state.pos = pos2;
      state.posMax = max2;
      return true;
    }
    const EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
    const AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;
    function autolink(state, silent) {
      let pos2 = state.pos;
      if (state.src.charCodeAt(pos2) !== 60) {
        return false;
      }
      const start2 = state.pos;
      const max2 = state.posMax;
      for (; ; ) {
        if (++pos2 >= max2) return false;
        const ch3 = state.src.charCodeAt(pos2);
        if (ch3 === 60) return false;
        if (ch3 === 62) break;
      }
      const url = state.src.slice(start2 + 1, pos2);
      if (AUTOLINK_RE.test(url)) {
        const fullUrl = state.md.normalizeLink(url);
        if (!state.md.validateLink(fullUrl)) {
          return false;
        }
        if (!silent) {
          const token_o = state.push("link_open", "a", 1);
          token_o.attrs = [["href", fullUrl]];
          token_o.markup = "autolink";
          token_o.info = "auto";
          const token_t = state.push("text", "", 0);
          token_t.content = state.md.normalizeLinkText(url);
          const token_c = state.push("link_close", "a", -1);
          token_c.markup = "autolink";
          token_c.info = "auto";
        }
        state.pos += url.length + 2;
        return true;
      }
      if (EMAIL_RE.test(url)) {
        const fullUrl = state.md.normalizeLink("mailto:" + url);
        if (!state.md.validateLink(fullUrl)) {
          return false;
        }
        if (!silent) {
          const token_o = state.push("link_open", "a", 1);
          token_o.attrs = [["href", fullUrl]];
          token_o.markup = "autolink";
          token_o.info = "auto";
          const token_t = state.push("text", "", 0);
          token_t.content = state.md.normalizeLinkText(url);
          const token_c = state.push("link_close", "a", -1);
          token_c.markup = "autolink";
          token_c.info = "auto";
        }
        state.pos += url.length + 2;
        return true;
      }
      return false;
    }
    function isLinkOpen(str2) {
      return /^<a[>\s]/i.test(str2);
    }
    function isLinkClose(str2) {
      return /^<\/a\s*>/i.test(str2);
    }
    function isLetter(ch3) {
      const lc = ch3 | 32;
      return lc >= 97 && lc <= 122;
    }
    function html_inline(state, silent) {
      if (!state.md.options.html) {
        return false;
      }
      const max2 = state.posMax;
      const pos2 = state.pos;
      if (state.src.charCodeAt(pos2) !== 60 || pos2 + 2 >= max2) {
        return false;
      }
      const ch3 = state.src.charCodeAt(pos2 + 1);
      if (ch3 !== 33 && ch3 !== 63 && ch3 !== 47 && !isLetter(ch3)) {
        return false;
      }
      const match = state.src.slice(pos2).match(HTML_TAG_RE);
      if (!match) {
        return false;
      }
      if (!silent) {
        const token2 = state.push("html_inline", "", 0);
        token2.content = match[0];
        if (isLinkOpen(token2.content)) state.linkLevel++;
        if (isLinkClose(token2.content)) state.linkLevel--;
      }
      state.pos += match[0].length;
      return true;
    }
    const DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
    const NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
    function entity(state, silent) {
      const pos2 = state.pos;
      const max2 = state.posMax;
      if (state.src.charCodeAt(pos2) !== 38) return false;
      if (pos2 + 1 >= max2) return false;
      const ch3 = state.src.charCodeAt(pos2 + 1);
      if (ch3 === 35) {
        const match = state.src.slice(pos2).match(DIGITAL_RE);
        if (match) {
          if (!silent) {
            const code2 = match[1][0].toLowerCase() === "x" ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
            const token2 = state.push("text_special", "", 0);
            token2.content = isValidEntityCode(code2) ? fromCodePoint$1(code2) : fromCodePoint$1(65533);
            token2.markup = match[0];
            token2.info = "entity";
          }
          state.pos += match[0].length;
          return true;
        }
      } else {
        const match = state.src.slice(pos2).match(NAMED_RE);
        if (match) {
          const decoded = decodeHTML(match[0]);
          if (decoded !== match[0]) {
            if (!silent) {
              const token2 = state.push("text_special", "", 0);
              token2.content = decoded;
              token2.markup = match[0];
              token2.info = "entity";
            }
            state.pos += match[0].length;
            return true;
          }
        }
      }
      return false;
    }
    function processDelimiters(delimiters) {
      const openersBottom = {};
      const max2 = delimiters.length;
      if (!max2) return;
      let headerIdx = 0;
      let lastTokenIdx = -2;
      const jumps = [];
      for (let closerIdx = 0; closerIdx < max2; closerIdx++) {
        const closer = delimiters[closerIdx];
        jumps.push(0);
        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
          headerIdx = closerIdx;
        }
        lastTokenIdx = closer.token;
        closer.length = closer.length || 0;
        if (!closer.close) continue;
        if (!openersBottom.hasOwnProperty(closer.marker)) {
          openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
        }
        const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
        let openerIdx = headerIdx - jumps[headerIdx] - 1;
        let newMinOpenerIdx = openerIdx;
        for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
          const opener = delimiters[openerIdx];
          if (opener.marker !== closer.marker) continue;
          if (opener.open && opener.end < 0) {
            let isOddMatch = false;
            if (opener.close || closer.open) {
              if ((opener.length + closer.length) % 3 === 0) {
                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                  isOddMatch = true;
                }
              }
            }
            if (!isOddMatch) {
              const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
              jumps[closerIdx] = closerIdx - openerIdx + lastJump;
              jumps[openerIdx] = lastJump;
              closer.open = false;
              opener.end = closerIdx;
              opener.close = false;
              newMinOpenerIdx = -1;
              lastTokenIdx = -2;
              break;
            }
          }
        }
        if (newMinOpenerIdx !== -1) {
          openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
        }
      }
    }
    function link_pairs(state) {
      const tokens_meta = state.tokens_meta;
      const max2 = state.tokens_meta.length;
      processDelimiters(state.delimiters);
      for (let curr = 0; curr < max2; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          processDelimiters(tokens_meta[curr].delimiters);
        }
      }
    }
    function fragments_join(state) {
      let curr, last;
      let level = 0;
      const tokens = state.tokens;
      const max2 = state.tokens.length;
      for (curr = last = 0; curr < max2; curr++) {
        if (tokens[curr].nesting < 0) level--;
        tokens[curr].level = level;
        if (tokens[curr].nesting > 0) level++;
        if (tokens[curr].type === "text" && curr + 1 < max2 && tokens[curr + 1].type === "text") {
          tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
        } else {
          if (curr !== last) {
            tokens[last] = tokens[curr];
          }
          last++;
        }
      }
      if (curr !== last) {
        tokens.length = last;
      }
    }
    const _rules = [
      ["text", text],
      ["linkify", linkify],
      ["newline", newline],
      ["escape", escape$2],
      ["backticks", backtick],
      ["strikethrough", r_strikethrough.tokenize],
      ["emphasis", r_emphasis.tokenize],
      ["link", link],
      ["image", image],
      ["autolink", autolink],
      ["html_inline", html_inline],
      ["entity", entity]
    ];
    const _rules2 = [
      ["balance_pairs", link_pairs],
      ["strikethrough", r_strikethrough.postProcess],
      ["emphasis", r_emphasis.postProcess],
      // rules for pairs separate '**' into its own text tokens, which may be left unused,
      // rule below merges unused segments back with the rest of the text
      ["fragments_join", fragments_join]
    ];
    function ParserInline() {
      this.ruler = new Ruler();
      for (let i2 = 0; i2 < _rules.length; i2++) {
        this.ruler.push(_rules[i2][0], _rules[i2][1]);
      }
      this.ruler2 = new Ruler();
      for (let i2 = 0; i2 < _rules2.length; i2++) {
        this.ruler2.push(_rules2[i2][0], _rules2[i2][1]);
      }
    }
    ParserInline.prototype.skipToken = function(state) {
      const pos2 = state.pos;
      const rules = this.ruler.getRules("");
      const len = rules.length;
      const maxNesting = state.md.options.maxNesting;
      const cache = state.cache;
      if (typeof cache[pos2] !== "undefined") {
        state.pos = cache[pos2];
        return;
      }
      let ok = false;
      if (state.level < maxNesting) {
        for (let i2 = 0; i2 < len; i2++) {
          state.level++;
          ok = rules[i2](state, true);
          state.level--;
          if (ok) {
            if (pos2 >= state.pos) {
              throw new Error("inline rule didn't increment state.pos");
            }
            break;
          }
        }
      } else {
        state.pos = state.posMax;
      }
      if (!ok) {
        state.pos++;
      }
      cache[pos2] = state.pos;
    };
    ParserInline.prototype.tokenize = function(state) {
      const rules = this.ruler.getRules("");
      const len = rules.length;
      const end2 = state.posMax;
      const maxNesting = state.md.options.maxNesting;
      while (state.pos < end2) {
        const prevPos = state.pos;
        let ok = false;
        if (state.level < maxNesting) {
          for (let i2 = 0; i2 < len; i2++) {
            ok = rules[i2](state, false);
            if (ok) {
              if (prevPos >= state.pos) {
                throw new Error("inline rule didn't increment state.pos");
              }
              break;
            }
          }
        }
        if (ok) {
          if (state.pos >= end2) {
            break;
          }
          continue;
        }
        state.pending += state.src[state.pos++];
      }
      if (state.pending) {
        state.pushPending();
      }
    };
    ParserInline.prototype.parse = function(str2, md, env, outTokens) {
      const state = new this.State(str2, md, env, outTokens);
      this.tokenize(state);
      const rules = this.ruler2.getRules("");
      const len = rules.length;
      for (let i2 = 0; i2 < len; i2++) {
        rules[i2](state);
      }
    };
    ParserInline.prototype.State = StateInline;
    function reFactory(opts) {
      const re = {};
      opts = opts || {};
      re.src_Any = Any.source;
      re.src_Cc = Cc.source;
      re.src_Z = Z.source;
      re.src_P = P$1.source;
      re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join("|");
      re.src_ZCc = [re.src_Z, re.src_Cc].join("|");
      const text_separators = "[><｜]";
      re.src_pseudo_letter = "(?:(?!" + text_separators + "|" + re.src_ZPCc + ")" + re.src_Any + ")";
      re.src_ip4 = "(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)";
      re.src_auth = "(?:(?:(?!" + re.src_ZCc + "|[@/\\[\\]()]).)+@)?";
      re.src_port = "(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?";
      re.src_host_terminator = "(?=$|" + text_separators + "|" + re.src_ZPCc + ")(?!" + (opts["---"] ? "-(?!--)|" : "-|") + "_|:\\d|\\.-|\\.(?!$|" + re.src_ZPCc + "))";
      re.src_path = "(?:[/?#](?:(?!" + re.src_ZCc + "|" + text_separators + `|[()[\\]{}.,"'?!\\-;]).|\\[(?:(?!` + re.src_ZCc + "|\\]).)*\\]|\\((?:(?!" + re.src_ZCc + "|[)]).)*\\)|\\{(?:(?!" + re.src_ZCc + '|[}]).)*\\}|\\"(?:(?!' + re.src_ZCc + `|["]).)+\\"|\\'(?:(?!` + re.src_ZCc + "|[']).)+\\'|\\'(?=" + re.src_pseudo_letter + "|[-])|\\.{2,}[a-zA-Z0-9%/&]|\\.(?!" + re.src_ZCc + "|[.]|$)|" + (opts["---"] ? "\\-(?!--(?:[^-]|$))(?:-*)|" : "\\-+|") + // allow `,,,` in paths
      ",(?!" + re.src_ZCc + "|$)|;(?!" + re.src_ZCc + "|$)|\\!+(?!" + re.src_ZCc + "|[!]|$)|\\?(?!" + re.src_ZCc + "|[?]|$))+|\\/)?";
      re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
      re.src_xn = "xn--[a-z0-9\\-]{1,59}";
      re.src_domain_root = // Allow letters & digits (http://test1)
      "(?:" + re.src_xn + "|" + re.src_pseudo_letter + "{1,63})";
      re.src_domain = "(?:" + re.src_xn + "|(?:" + re.src_pseudo_letter + ")|(?:" + re.src_pseudo_letter + "(?:-|" + re.src_pseudo_letter + "){0,61}" + re.src_pseudo_letter + "))";
      re.src_host = "(?:(?:(?:(?:" + re.src_domain + ")\\.)*" + re.src_domain + "))";
      re.tpl_host_fuzzy = "(?:" + re.src_ip4 + "|(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%)))";
      re.tpl_host_no_ip_fuzzy = "(?:(?:(?:" + re.src_domain + ")\\.)+(?:%TLDS%))";
      re.src_host_strict = re.src_host + re.src_host_terminator;
      re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
      re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
      re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
      re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;
      re.tpl_host_fuzzy_test = "localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:" + re.src_ZPCc + "|>|$))";
      re.tpl_email_fuzzy = "(^|" + text_separators + '|"|\\(|' + re.src_ZCc + ")(" + re.src_email_name + "@" + re.tpl_host_fuzzy_strict + ")";
      re.tpl_link_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + re.src_ZPCc + "))((?![$+<=>^`|｜])" + re.tpl_host_port_fuzzy_strict + re.src_path + ")";
      re.tpl_link_no_ip_fuzzy = // Fuzzy link can't be prepended with .:/\- and non punctuation.
      // but can start with > (markdown blockquote)
      "(^|(?![.:/\\-_@])(?:[$+<=>^`|｜]|" + re.src_ZPCc + "))((?![$+<=>^`|｜])" + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ")";
      return re;
    }
    function assign(obj) {
      const sources = Array.prototype.slice.call(arguments, 1);
      sources.forEach(function(source2) {
        if (!source2) {
          return;
        }
        Object.keys(source2).forEach(function(key2) {
          obj[key2] = source2[key2];
        });
      });
      return obj;
    }
    function _class(obj) {
      return Object.prototype.toString.call(obj);
    }
    function isString(obj) {
      return _class(obj) === "[object String]";
    }
    function isObject(obj) {
      return _class(obj) === "[object Object]";
    }
    function isRegExp(obj) {
      return _class(obj) === "[object RegExp]";
    }
    function isFunction(obj) {
      return _class(obj) === "[object Function]";
    }
    function escapeRE(str2) {
      return str2.replace(/[.?*+^$[\]\\(){}|-]/g, "\\$&");
    }
    const defaultOptions = {
      fuzzyLink: true,
      fuzzyEmail: true,
      fuzzyIP: false
    };
    function isOptionsObj(obj) {
      return Object.keys(obj || {}).reduce(function(acc, k2) {
        return acc || defaultOptions.hasOwnProperty(k2);
      }, false);
    }
    const defaultSchemas = {
      "http:": {
        validate: function(text2, pos2, self2) {
          const tail = text2.slice(pos2);
          if (!self2.re.http) {
            self2.re.http = new RegExp(
              "^\\/\\/" + self2.re.src_auth + self2.re.src_host_port_strict + self2.re.src_path,
              "i"
            );
          }
          if (self2.re.http.test(tail)) {
            return tail.match(self2.re.http)[0].length;
          }
          return 0;
        }
      },
      "https:": "http:",
      "ftp:": "http:",
      "//": {
        validate: function(text2, pos2, self2) {
          const tail = text2.slice(pos2);
          if (!self2.re.no_http) {
            self2.re.no_http = new RegExp(
              "^" + self2.re.src_auth + // Don't allow single-level domains, because of false positives like '//test'
              // with code comments
              "(?:localhost|(?:(?:" + self2.re.src_domain + ")\\.)+" + self2.re.src_domain_root + ")" + self2.re.src_port + self2.re.src_host_terminator + self2.re.src_path,
              "i"
            );
          }
          if (self2.re.no_http.test(tail)) {
            if (pos2 >= 3 && text2[pos2 - 3] === ":") {
              return 0;
            }
            if (pos2 >= 3 && text2[pos2 - 3] === "/") {
              return 0;
            }
            return tail.match(self2.re.no_http)[0].length;
          }
          return 0;
        }
      },
      "mailto:": {
        validate: function(text2, pos2, self2) {
          const tail = text2.slice(pos2);
          if (!self2.re.mailto) {
            self2.re.mailto = new RegExp(
              "^" + self2.re.src_email_name + "@" + self2.re.src_host_strict,
              "i"
            );
          }
          if (self2.re.mailto.test(tail)) {
            return tail.match(self2.re.mailto)[0].length;
          }
          return 0;
        }
      }
    };
    const tlds_2ch_src_re = "a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]";
    const tlds_default = "biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф".split("|");
    function resetScanCache(self2) {
      self2.__index__ = -1;
      self2.__text_cache__ = "";
    }
    function createValidator(re) {
      return function(text2, pos2) {
        const tail = text2.slice(pos2);
        if (re.test(tail)) {
          return tail.match(re)[0].length;
        }
        return 0;
      };
    }
    function createNormalizer() {
      return function(match, self2) {
        self2.normalize(match);
      };
    }
    function compile(self2) {
      const re = self2.re = reFactory(self2.__opts__);
      const tlds = self2.__tlds__.slice();
      self2.onCompile();
      if (!self2.__tlds_replaced__) {
        tlds.push(tlds_2ch_src_re);
      }
      tlds.push(re.src_xn);
      re.src_tlds = tlds.join("|");
      function untpl(tpl) {
        return tpl.replace("%TLDS%", re.src_tlds);
      }
      re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), "i");
      re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), "i");
      re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), "i");
      re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), "i");
      const aliases = [];
      self2.__compiled__ = {};
      function schemaError(name2, val) {
        throw new Error('(LinkifyIt) Invalid schema "' + name2 + '": ' + val);
      }
      Object.keys(self2.__schemas__).forEach(function(name2) {
        const val = self2.__schemas__[name2];
        if (val === null) {
          return;
        }
        const compiled = { validate: null, link: null };
        self2.__compiled__[name2] = compiled;
        if (isObject(val)) {
          if (isRegExp(val.validate)) {
            compiled.validate = createValidator(val.validate);
          } else if (isFunction(val.validate)) {
            compiled.validate = val.validate;
          } else {
            schemaError(name2, val);
          }
          if (isFunction(val.normalize)) {
            compiled.normalize = val.normalize;
          } else if (!val.normalize) {
            compiled.normalize = createNormalizer();
          } else {
            schemaError(name2, val);
          }
          return;
        }
        if (isString(val)) {
          aliases.push(name2);
          return;
        }
        schemaError(name2, val);
      });
      aliases.forEach(function(alias) {
        if (!self2.__compiled__[self2.__schemas__[alias]]) {
          return;
        }
        self2.__compiled__[alias].validate = self2.__compiled__[self2.__schemas__[alias]].validate;
        self2.__compiled__[alias].normalize = self2.__compiled__[self2.__schemas__[alias]].normalize;
      });
      self2.__compiled__[""] = { validate: null, normalize: createNormalizer() };
      const slist = Object.keys(self2.__compiled__).filter(function(name2) {
        return name2.length > 0 && self2.__compiled__[name2];
      }).map(escapeRE).join("|");
      self2.re.schema_test = RegExp("(^|(?!_)(?:[><｜]|" + re.src_ZPCc + "))(" + slist + ")", "i");
      self2.re.schema_search = RegExp("(^|(?!_)(?:[><｜]|" + re.src_ZPCc + "))(" + slist + ")", "ig");
      self2.re.schema_at_start = RegExp("^" + self2.re.schema_search.source, "i");
      self2.re.pretest = RegExp(
        "(" + self2.re.schema_test.source + ")|(" + self2.re.host_fuzzy_test.source + ")|@",
        "i"
      );
      resetScanCache(self2);
    }
    function Match$1(self2, shift2) {
      const start2 = self2.__index__;
      const end2 = self2.__last_index__;
      const text2 = self2.__text_cache__.slice(start2, end2);
      this.schema = self2.__schema__.toLowerCase();
      this.index = start2 + shift2;
      this.lastIndex = end2 + shift2;
      this.raw = text2;
      this.text = text2;
      this.url = text2;
    }
    function createMatch(self2, shift2) {
      const match = new Match$1(self2, shift2);
      self2.__compiled__[match.schema].normalize(match, self2);
      return match;
    }
    function LinkifyIt(schemas, options) {
      if (!(this instanceof LinkifyIt)) {
        return new LinkifyIt(schemas, options);
      }
      if (!options) {
        if (isOptionsObj(schemas)) {
          options = schemas;
          schemas = {};
        }
      }
      this.__opts__ = assign({}, defaultOptions, options);
      this.__index__ = -1;
      this.__last_index__ = -1;
      this.__schema__ = "";
      this.__text_cache__ = "";
      this.__schemas__ = assign({}, defaultSchemas, schemas);
      this.__compiled__ = {};
      this.__tlds__ = tlds_default;
      this.__tlds_replaced__ = false;
      this.re = {};
      compile(this);
    }
    LinkifyIt.prototype.add = function add2(schema, definition) {
      this.__schemas__[schema] = definition;
      compile(this);
      return this;
    };
    LinkifyIt.prototype.set = function set(options) {
      this.__opts__ = assign(this.__opts__, options);
      return this;
    };
    LinkifyIt.prototype.test = function test(text2) {
      this.__text_cache__ = text2;
      this.__index__ = -1;
      if (!text2.length) {
        return false;
      }
      let m2, ml, me, len, shift2, next, re, tld_pos, at_pos;
      if (this.re.schema_test.test(text2)) {
        re = this.re.schema_search;
        re.lastIndex = 0;
        while ((m2 = re.exec(text2)) !== null) {
          len = this.testSchemaAt(text2, m2[2], re.lastIndex);
          if (len) {
            this.__schema__ = m2[2];
            this.__index__ = m2.index + m2[1].length;
            this.__last_index__ = m2.index + m2[0].length + len;
            break;
          }
        }
      }
      if (this.__opts__.fuzzyLink && this.__compiled__["http:"]) {
        tld_pos = text2.search(this.re.host_fuzzy_test);
        if (tld_pos >= 0) {
          if (this.__index__ < 0 || tld_pos < this.__index__) {
            if ((ml = text2.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
              shift2 = ml.index + ml[1].length;
              if (this.__index__ < 0 || shift2 < this.__index__) {
                this.__schema__ = "";
                this.__index__ = shift2;
                this.__last_index__ = ml.index + ml[0].length;
              }
            }
          }
        }
      }
      if (this.__opts__.fuzzyEmail && this.__compiled__["mailto:"]) {
        at_pos = text2.indexOf("@");
        if (at_pos >= 0) {
          if ((me = text2.match(this.re.email_fuzzy)) !== null) {
            shift2 = me.index + me[1].length;
            next = me.index + me[0].length;
            if (this.__index__ < 0 || shift2 < this.__index__ || shift2 === this.__index__ && next > this.__last_index__) {
              this.__schema__ = "mailto:";
              this.__index__ = shift2;
              this.__last_index__ = next;
            }
          }
        }
      }
      return this.__index__ >= 0;
    };
    LinkifyIt.prototype.pretest = function pretest(text2) {
      return this.re.pretest.test(text2);
    };
    LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text2, schema, pos2) {
      if (!this.__compiled__[schema.toLowerCase()]) {
        return 0;
      }
      return this.__compiled__[schema.toLowerCase()].validate(text2, pos2, this);
    };
    LinkifyIt.prototype.match = function match(text2) {
      const result = [];
      let shift2 = 0;
      if (this.__index__ >= 0 && this.__text_cache__ === text2) {
        result.push(createMatch(this, shift2));
        shift2 = this.__last_index__;
      }
      let tail = shift2 ? text2.slice(shift2) : text2;
      while (this.test(tail)) {
        result.push(createMatch(this, shift2));
        tail = tail.slice(this.__last_index__);
        shift2 += this.__last_index__;
      }
      if (result.length) {
        return result;
      }
      return null;
    };
    LinkifyIt.prototype.matchAtStart = function matchAtStart(text2) {
      this.__text_cache__ = text2;
      this.__index__ = -1;
      if (!text2.length) return null;
      const m2 = this.re.schema_at_start.exec(text2);
      if (!m2) return null;
      const len = this.testSchemaAt(text2, m2[2], m2[0].length);
      if (!len) return null;
      this.__schema__ = m2[2];
      this.__index__ = m2.index + m2[1].length;
      this.__last_index__ = m2.index + m2[0].length + len;
      return createMatch(this, 0);
    };
    LinkifyIt.prototype.tlds = function tlds(list2, keepOld) {
      list2 = Array.isArray(list2) ? list2 : [list2];
      if (!keepOld) {
        this.__tlds__ = list2.slice();
        this.__tlds_replaced__ = true;
        compile(this);
        return this;
      }
      this.__tlds__ = this.__tlds__.concat(list2).sort().filter(function(el, idx, arr2) {
        return el !== arr2[idx - 1];
      }).reverse();
      compile(this);
      return this;
    };
    LinkifyIt.prototype.normalize = function normalize2(match) {
      if (!match.schema) {
        match.url = "http://" + match.url;
      }
      if (match.schema === "mailto:" && !/^mailto:/i.test(match.url)) {
        match.url = "mailto:" + match.url;
      }
    };
    LinkifyIt.prototype.onCompile = function onCompile() {
    };
    const maxInt = 2147483647;
    const base$1 = 36;
    const tMin = 1;
    const tMax = 26;
    const skew = 38;
    const damp = 700;
    const initialBias = 72;
    const initialN = 128;
    const delimiter = "-";
    const regexPunycode = /^xn--/;
    const regexNonASCII = /[^\0-\x7F]/;
    const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    const errors = {
      "overflow": "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    const baseMinusTMin = base$1 - tMin;
    const floor = Math.floor;
    const stringFromCharCode = String.fromCharCode;
    function error(type) {
      throw new RangeError(errors[type]);
    }
    function map(array, callback) {
      const result = [];
      let length = array.length;
      while (length--) {
        result[length] = callback(array[length]);
      }
      return result;
    }
    function mapDomain(domain, callback) {
      const parts = domain.split("@");
      let result = "";
      if (parts.length > 1) {
        result = parts[0] + "@";
        domain = parts[1];
      }
      domain = domain.replace(regexSeparators, ".");
      const labels = domain.split(".");
      const encoded = map(labels, callback).join(".");
      return result + encoded;
    }
    function ucs2decode(string2) {
      const output = [];
      let counter = 0;
      const length = string2.length;
      while (counter < length) {
        const value = string2.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          const extra = string2.charCodeAt(counter++);
          if ((extra & 64512) == 56320) {
            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
    const ucs2encode = (codePoints) => String.fromCodePoint(...codePoints);
    const basicToDigit = function(codePoint) {
      if (codePoint >= 48 && codePoint < 58) {
        return 26 + (codePoint - 48);
      }
      if (codePoint >= 65 && codePoint < 91) {
        return codePoint - 65;
      }
      if (codePoint >= 97 && codePoint < 123) {
        return codePoint - 97;
      }
      return base$1;
    };
    const digitToBasic = function(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    const adapt = function(delta, numPoints, firstTime) {
      let k2 = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (; delta > baseMinusTMin * tMax >> 1; k2 += base$1) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k2 + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    const decode = function(input) {
      const output = [];
      const inputLength = input.length;
      let i2 = 0;
      let n2 = initialN;
      let bias = initialBias;
      let basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (let j2 = 0; j2 < basic; ++j2) {
        if (input.charCodeAt(j2) >= 128) {
          error("not-basic");
        }
        output.push(input.charCodeAt(j2));
      }
      for (let index = basic > 0 ? basic + 1 : 0; index < inputLength; ) {
        const oldi = i2;
        for (let w2 = 1, k2 = base$1; ; k2 += base$1) {
          if (index >= inputLength) {
            error("invalid-input");
          }
          const digit = basicToDigit(input.charCodeAt(index++));
          if (digit >= base$1) {
            error("invalid-input");
          }
          if (digit > floor((maxInt - i2) / w2)) {
            error("overflow");
          }
          i2 += digit * w2;
          const t2 = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
          if (digit < t2) {
            break;
          }
          const baseMinusT = base$1 - t2;
          if (w2 > floor(maxInt / baseMinusT)) {
            error("overflow");
          }
          w2 *= baseMinusT;
        }
        const out = output.length + 1;
        bias = adapt(i2 - oldi, out, oldi == 0);
        if (floor(i2 / out) > maxInt - n2) {
          error("overflow");
        }
        n2 += floor(i2 / out);
        i2 %= out;
        output.splice(i2++, 0, n2);
      }
      return String.fromCodePoint(...output);
    };
    const encode = function(input) {
      const output = [];
      input = ucs2decode(input);
      const inputLength = input.length;
      let n2 = initialN;
      let delta = 0;
      let bias = initialBias;
      for (const currentValue of input) {
        if (currentValue < 128) {
          output.push(stringFromCharCode(currentValue));
        }
      }
      const basicLength = output.length;
      let handledCPCount = basicLength;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        let m2 = maxInt;
        for (const currentValue of input) {
          if (currentValue >= n2 && currentValue < m2) {
            m2 = currentValue;
          }
        }
        const handledCPCountPlusOne = handledCPCount + 1;
        if (m2 - n2 > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error("overflow");
        }
        delta += (m2 - n2) * handledCPCountPlusOne;
        n2 = m2;
        for (const currentValue of input) {
          if (currentValue < n2 && ++delta > maxInt) {
            error("overflow");
          }
          if (currentValue === n2) {
            let q2 = delta;
            for (let k2 = base$1; ; k2 += base$1) {
              const t2 = k2 <= bias ? tMin : k2 >= bias + tMax ? tMax : k2 - bias;
              if (q2 < t2) {
                break;
              }
              const qMinusT = q2 - t2;
              const baseMinusT = base$1 - t2;
              output.push(
                stringFromCharCode(digitToBasic(t2 + qMinusT % baseMinusT, 0))
              );
              q2 = floor(qMinusT / baseMinusT);
            }
            output.push(stringFromCharCode(digitToBasic(q2, 0)));
            bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
            delta = 0;
            ++handledCPCount;
          }
        }
        ++delta;
        ++n2;
      }
      return output.join("");
    };
    const toUnicode = function(input) {
      return mapDomain(input, function(string2) {
        return regexPunycode.test(string2) ? decode(string2.slice(4).toLowerCase()) : string2;
      });
    };
    const toASCII = function(input) {
      return mapDomain(input, function(string2) {
        return regexNonASCII.test(string2) ? "xn--" + encode(string2) : string2;
      });
    };
    const punycode = {
      /**
       * A string representing the current Punycode.js version number.
       * @memberOf punycode
       * @type String
       */
      "version": "2.3.1",
      /**
       * An object of methods to convert from JavaScript's internal character
       * representation (UCS-2) to Unicode code points, and back.
       * @see <https://mathiasbynens.be/notes/javascript-encoding>
       * @memberOf punycode
       * @type Object
       */
      "ucs2": {
        "decode": ucs2decode,
        "encode": ucs2encode
      },
      "decode": decode,
      "encode": encode,
      "toASCII": toASCII,
      "toUnicode": toUnicode
    };
    const cfg_default = {
      options: {
        // Enable HTML tags in source
        html: false,
        // Use '/' to close single tags (<br />)
        xhtmlOut: false,
        // Convert '\n' in paragraphs into <br>
        breaks: false,
        // CSS language prefix for fenced blocks
        langPrefix: "language-",
        // autoconvert URL-like texts to links
        linkify: false,
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "“”‘’",
        /* “”‘’ */
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        // Internal protection, recursion limit
        maxNesting: 100
      },
      components: {
        core: {},
        block: {},
        inline: {}
      }
    };
    const cfg_zero = {
      options: {
        // Enable HTML tags in source
        html: false,
        // Use '/' to close single tags (<br />)
        xhtmlOut: false,
        // Convert '\n' in paragraphs into <br>
        breaks: false,
        // CSS language prefix for fenced blocks
        langPrefix: "language-",
        // autoconvert URL-like texts to links
        linkify: false,
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "“”‘’",
        /* “”‘’ */
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        // Internal protection, recursion limit
        maxNesting: 20
      },
      components: {
        core: {
          rules: [
            "normalize",
            "block",
            "inline",
            "text_join"
          ]
        },
        block: {
          rules: [
            "paragraph"
          ]
        },
        inline: {
          rules: [
            "text"
          ],
          rules2: [
            "balance_pairs",
            "fragments_join"
          ]
        }
      }
    };
    const cfg_commonmark = {
      options: {
        // Enable HTML tags in source
        html: true,
        // Use '/' to close single tags (<br />)
        xhtmlOut: true,
        // Convert '\n' in paragraphs into <br>
        breaks: false,
        // CSS language prefix for fenced blocks
        langPrefix: "language-",
        // autoconvert URL-like texts to links
        linkify: false,
        // Enable some language-neutral replacements + quotes beautification
        typographer: false,
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: "“”‘’",
        /* “”‘’ */
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
        // Internal protection, recursion limit
        maxNesting: 20
      },
      components: {
        core: {
          rules: [
            "normalize",
            "block",
            "inline",
            "text_join"
          ]
        },
        block: {
          rules: [
            "blockquote",
            "code",
            "fence",
            "heading",
            "hr",
            "html_block",
            "lheading",
            "list",
            "reference",
            "paragraph"
          ]
        },
        inline: {
          rules: [
            "autolink",
            "backticks",
            "emphasis",
            "entity",
            "escape",
            "html_inline",
            "image",
            "link",
            "newline",
            "text"
          ],
          rules2: [
            "balance_pairs",
            "emphasis",
            "fragments_join"
          ]
        }
      }
    };
    const config = {
      default: cfg_default,
      zero: cfg_zero,
      commonmark: cfg_commonmark
    };
    const BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
    const GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
    function validateLink(url) {
      const str2 = url.trim().toLowerCase();
      return BAD_PROTO_RE.test(str2) ? GOOD_DATA_RE.test(str2) : true;
    }
    const RECODE_HOSTNAME_FOR = ["http:", "https:", "mailto:"];
    function normalizeLink(url) {
      const parsed = urlParse(url, true);
      if (parsed.hostname) {
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toASCII(parsed.hostname);
          } catch (er) {
          }
        }
      }
      return encode$1(format$1(parsed));
    }
    function normalizeLinkText(url) {
      const parsed = urlParse(url, true);
      if (parsed.hostname) {
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toUnicode(parsed.hostname);
          } catch (er) {
          }
        }
      }
      return decode$1(format$1(parsed), decode$1.defaultChars + "%");
    }
    function MarkdownIt(presetName, options) {
      if (!(this instanceof MarkdownIt)) {
        return new MarkdownIt(presetName, options);
      }
      if (!options) {
        if (!isString$1(presetName)) {
          options = presetName || {};
          presetName = "default";
        }
      }
      this.inline = new ParserInline();
      this.block = new ParserBlock();
      this.core = new Core$1();
      this.renderer = new Renderer();
      this.linkify = new LinkifyIt();
      this.validateLink = validateLink;
      this.normalizeLink = normalizeLink;
      this.normalizeLinkText = normalizeLinkText;
      this.utils = utils;
      this.helpers = assign$1({}, helpers);
      this.options = {};
      this.configure(presetName);
      if (options) {
        this.set(options);
      }
    }
    MarkdownIt.prototype.set = function(options) {
      assign$1(this.options, options);
      return this;
    };
    MarkdownIt.prototype.configure = function(presets) {
      const self2 = this;
      if (isString$1(presets)) {
        const presetName = presets;
        presets = config[presetName];
        if (!presets) {
          throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
        }
      }
      if (!presets) {
        throw new Error("Wrong `markdown-it` preset, can't be empty");
      }
      if (presets.options) {
        self2.set(presets.options);
      }
      if (presets.components) {
        Object.keys(presets.components).forEach(function(name2) {
          if (presets.components[name2].rules) {
            self2[name2].ruler.enableOnly(presets.components[name2].rules);
          }
          if (presets.components[name2].rules2) {
            self2[name2].ruler2.enableOnly(presets.components[name2].rules2);
          }
        });
      }
      return this;
    };
    MarkdownIt.prototype.enable = function(list2, ignoreInvalid) {
      let result = [];
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      ["core", "block", "inline"].forEach(function(chain) {
        result = result.concat(this[chain].ruler.enable(list2, true));
      }, this);
      result = result.concat(this.inline.ruler2.enable(list2, true));
      const missed = list2.filter(function(name2) {
        return result.indexOf(name2) < 0;
      });
      if (missed.length && !ignoreInvalid) {
        throw new Error("MarkdownIt. Failed to enable unknown rule(s): " + missed);
      }
      return this;
    };
    MarkdownIt.prototype.disable = function(list2, ignoreInvalid) {
      let result = [];
      if (!Array.isArray(list2)) {
        list2 = [list2];
      }
      ["core", "block", "inline"].forEach(function(chain) {
        result = result.concat(this[chain].ruler.disable(list2, true));
      }, this);
      result = result.concat(this.inline.ruler2.disable(list2, true));
      const missed = list2.filter(function(name2) {
        return result.indexOf(name2) < 0;
      });
      if (missed.length && !ignoreInvalid) {
        throw new Error("MarkdownIt. Failed to disable unknown rule(s): " + missed);
      }
      return this;
    };
    MarkdownIt.prototype.use = function(plugin) {
      const args = [this].concat(Array.prototype.slice.call(arguments, 1));
      plugin.apply(plugin, args);
      return this;
    };
    MarkdownIt.prototype.parse = function(src, env) {
      if (typeof src !== "string") {
        throw new Error("Input data should be a String");
      }
      const state = new this.core.State(src, this, env);
      this.core.process(state);
      return state.tokens;
    };
    MarkdownIt.prototype.render = function(src, env) {
      env = env || {};
      return this.renderer.render(this.parse(src, env), this.options, env);
    };
    MarkdownIt.prototype.parseInline = function(src, env) {
      const state = new this.core.State(src, this, env);
      state.inlineMode = true;
      this.core.process(state);
      return state.tokens;
    };
    MarkdownIt.prototype.renderInline = function(src, env) {
      env = env || {};
      return this.renderer.render(this.parseInline(src, env), this.options, env);
    };
    const MarkdownDiv = (props) => {
      const { markdown, style: style2, contentRef } = props;
      const escaped = markdown ? escape$1(markdown) : "";
      const preRendered = preRenderText(escaped);
      const protectedText = protectMarkdown(preRendered);
      let renderedHtml = protectedText;
      try {
        const md = MarkdownIt({
          breaks: true,
          html: true
        });
        renderedHtml = md.render(protectedText);
      } catch (ex) {
        console.log("Unable to markdown render content");
        console.error(ex);
      }
      const unescaped = unprotectMarkdown(renderedHtml);
      const withCode = unescapeCodeHtmlEntities(unescaped);
      const markup = { __html: withCode };
      return m$1`<div
    ref=${contentRef}
    dangerouslySetInnerHTML=${markup}
    style=${style2}
    class="${props.class ? `${props.class} ` : ""}markdown-content"
  />`;
    };
    const kLetterListPattern = /^([a-zA-Z][).]\s.*?)$/gm;
    const kCommonmarkReferenceLinkPattern = /\[([^\]]*)\]: (?!http)(.*)/g;
    const preRenderText = (txt) => {
      txt = txt.replace(/^[\u200B\u200C\u200D\u200E\u200F\uFEFF]/, "");
      return txt.replaceAll(
        kLetterListPattern,
        "<p style='margin-bottom: 0.2em;'>$1</p>"
      );
    };
    const protectMarkdown = (txt) => {
      return txt.replaceAll(
        kCommonmarkReferenceLinkPattern,
        "(open:767A125E)$1(close:767A125E) $2 "
      );
    };
    const unprotectMarkdown = (txt) => {
      txt = txt.replaceAll("(open:767A125E)", "[");
      txt = txt.replaceAll("(close:767A125E)", "]");
      return txt;
    };
    const escape$1 = (content2) => {
      return content2.replace(/[<>&'"]/g, function(c2) {
        switch (c2) {
          case "<":
            return "&lt;";
          case ">":
            return "&gt;";
          case "&":
            return "&amp;";
          case "'":
            return "&apos;";
          case '"':
            return "&quot;";
        }
      });
    };
    function unescapeCodeHtmlEntities(str2) {
      const htmlEntities = {
        "&lt;": "<",
        "&gt;": ">",
        "&amp;": "&",
        "&#x5C;": "\\",
        "&quot;": '"'
      };
      return str2.replace(
        /(<code[^>]*>)([\s\S]*?)(<\/code>)/gi,
        function(match, starttag, content2, endtag) {
          return starttag + content2.replace(
            /&(?:amp|lt|gt|quot|#39|#x2F|#x5C|#96);/g,
            function(entity2) {
              return htmlEntities[entity2] || entity2;
            }
          ) + endtag;
        }
      );
    }
    var murmurhash$1 = { exports: {} };
    (function(module2) {
      (function() {
        const createBuffer = (val) => new TextEncoder().encode(val);
        function MurmurHashV2(str2, seed) {
          if (typeof str2 === "string") str2 = createBuffer(str2);
          let l2 = str2.length, h2 = seed ^ l2, i2 = 0, k2;
          while (l2 >= 4) {
            k2 = str2[i2] & 255 | (str2[++i2] & 255) << 8 | (str2[++i2] & 255) << 16 | (str2[++i2] & 255) << 24;
            k2 = (k2 & 65535) * 1540483477 + (((k2 >>> 16) * 1540483477 & 65535) << 16);
            k2 ^= k2 >>> 24;
            k2 = (k2 & 65535) * 1540483477 + (((k2 >>> 16) * 1540483477 & 65535) << 16);
            h2 = (h2 & 65535) * 1540483477 + (((h2 >>> 16) * 1540483477 & 65535) << 16) ^ k2;
            l2 -= 4;
            ++i2;
          }
          switch (l2) {
            case 3:
              h2 ^= (str2[i2 + 2] & 255) << 16;
            case 2:
              h2 ^= (str2[i2 + 1] & 255) << 8;
            case 1:
              h2 ^= str2[i2] & 255;
              h2 = (h2 & 65535) * 1540483477 + (((h2 >>> 16) * 1540483477 & 65535) << 16);
          }
          h2 ^= h2 >>> 13;
          h2 = (h2 & 65535) * 1540483477 + (((h2 >>> 16) * 1540483477 & 65535) << 16);
          h2 ^= h2 >>> 15;
          return h2 >>> 0;
        }
        function MurmurHashV3(key2, seed) {
          if (typeof key2 === "string") key2 = createBuffer(key2);
          let remainder, bytes, h1, h1b, c1, c2, k1, i2;
          remainder = key2.length & 3;
          bytes = key2.length - remainder;
          h1 = seed;
          c1 = 3432918353;
          c2 = 461845907;
          i2 = 0;
          while (i2 < bytes) {
            k1 = key2[i2] & 255 | (key2[++i2] & 255) << 8 | (key2[++i2] & 255) << 16 | (key2[++i2] & 255) << 24;
            ++i2;
            k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
            k1 = k1 << 15 | k1 >>> 17;
            k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
            h1 ^= k1;
            h1 = h1 << 13 | h1 >>> 19;
            h1b = (h1 & 65535) * 5 + (((h1 >>> 16) * 5 & 65535) << 16) & 4294967295;
            h1 = (h1b & 65535) + 27492 + (((h1b >>> 16) + 58964 & 65535) << 16);
          }
          k1 = 0;
          switch (remainder) {
            case 3:
              k1 ^= (key2[i2 + 2] & 255) << 16;
            case 2:
              k1 ^= (key2[i2 + 1] & 255) << 8;
            case 1:
              k1 ^= key2[i2] & 255;
              k1 = (k1 & 65535) * c1 + (((k1 >>> 16) * c1 & 65535) << 16) & 4294967295;
              k1 = k1 << 15 | k1 >>> 17;
              k1 = (k1 & 65535) * c2 + (((k1 >>> 16) * c2 & 65535) << 16) & 4294967295;
              h1 ^= k1;
          }
          h1 ^= key2.length;
          h1 ^= h1 >>> 16;
          h1 = (h1 & 65535) * 2246822507 + (((h1 >>> 16) * 2246822507 & 65535) << 16) & 4294967295;
          h1 ^= h1 >>> 13;
          h1 = (h1 & 65535) * 3266489909 + (((h1 >>> 16) * 3266489909 & 65535) << 16) & 4294967295;
          h1 ^= h1 >>> 16;
          return h1 >>> 0;
        }
        const murmur = MurmurHashV3;
        murmur.v2 = MurmurHashV2;
        murmur.v3 = MurmurHashV3;
        {
          module2.exports = murmur;
        }
      })();
    })(murmurhash$1);
    var murmurhashExports = murmurhash$1.exports;
    const murmurhash = /* @__PURE__ */ getDefaultExportFromCjs(murmurhashExports);
    Prism.languages.python = {
      "comment": {
        pattern: /(^|[^\\])#.*/,
        lookbehind: true,
        greedy: true
      },
      "string-interpolation": {
        pattern: /(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,
        greedy: true,
        inside: {
          "interpolation": {
            // "{" <expression> <optional "!s", "!r", or "!a"> <optional ":" format specifier> "}"
            pattern: /((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,
            lookbehind: true,
            inside: {
              "format-spec": {
                pattern: /(:)[^:(){}]+(?=\}$)/,
                lookbehind: true
              },
              "conversion-option": {
                pattern: /![sra](?=[:}]$)/,
                alias: "punctuation"
              },
              rest: null
            }
          },
          "string": /[\s\S]+/
        }
      },
      "triple-quoted-string": {
        pattern: /(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,
        greedy: true,
        alias: "string"
      },
      "string": {
        pattern: /(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,
        greedy: true
      },
      "function": {
        pattern: /((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,
        lookbehind: true
      },
      "class-name": {
        pattern: /(\bclass\s+)\w+/i,
        lookbehind: true
      },
      "decorator": {
        pattern: /(^[\t ]*)@\w+(?:\.\w+)*/m,
        lookbehind: true,
        alias: ["annotation", "punctuation"],
        inside: {
          "punctuation": /\./
        }
      },
      "keyword": /\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,
      "builtin": /\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,
      "boolean": /\b(?:False|None|True)\b/,
      "number": /\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,
      "operator": /[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,
      "punctuation": /[{}[\];(),.:]/
    };
    Prism.languages.python["string-interpolation"].inside["interpolation"].inside.rest = Prism.languages.python;
    Prism.languages.py = Prism.languages.python;
    (function(Prism2) {
      var envVars = "\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b";
      var commandAfterHeredoc = {
        pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
        lookbehind: true,
        alias: "punctuation",
        // this looks reasonably well in all themes
        inside: null
        // see below
      };
      var insideString = {
        "bash": commandAfterHeredoc,
        "environment": {
          pattern: RegExp("\\$" + envVars),
          alias: "constant"
        },
        "variable": [
          // [0]: Arithmetic Environment
          {
            pattern: /\$?\(\([\s\S]+?\)\)/,
            greedy: true,
            inside: {
              // If there is a $ sign at the beginning highlight $(( and )) as variable
              "variable": [
                {
                  pattern: /(^\$\(\([\s\S]+)\)\)/,
                  lookbehind: true
                },
                /^\$\(\(/
              ],
              "number": /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
              // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
              "operator": /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
              // If there is no $ sign at the beginning highlight (( and )) as punctuation
              "punctuation": /\(\(?|\)\)?|,|;/
            }
          },
          // [1]: Command Substitution
          {
            pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
            greedy: true,
            inside: {
              "variable": /^\$\(|^`|\)$|`$/
            }
          },
          // [2]: Brace expansion
          {
            pattern: /\$\{[^}]+\}/,
            greedy: true,
            inside: {
              "operator": /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
              "punctuation": /[\[\]]/,
              "environment": {
                pattern: RegExp("(\\{)" + envVars),
                lookbehind: true,
                alias: "constant"
              }
            }
          },
          /\$(?:\w+|[#?*!@$])/
        ],
        // Escape sequences from echo and printf's manuals, and escaped quotes.
        "entity": /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
      };
      Prism2.languages.bash = {
        "shebang": {
          pattern: /^#!\s*\/.*/,
          alias: "important"
        },
        "comment": {
          pattern: /(^|[^"{\\$])#.*/,
          lookbehind: true
        },
        "function-name": [
          // a) function foo {
          // b) foo() {
          // c) function foo() {
          // but not “foo {”
          {
            // a) and c)
            pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
            lookbehind: true,
            alias: "function"
          },
          {
            // b)
            pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
            alias: "function"
          }
        ],
        // Highlight variable names as variables in for and select beginnings.
        "for-or-select": {
          pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
          alias: "variable",
          lookbehind: true
        },
        // Highlight variable names as variables in the left-hand part
        // of assignments (“=” and “+=”).
        "assign-left": {
          pattern: /(^|[\s;|&]|[<>]\()\w+(?:\.\w+)*(?=\+?=)/,
          inside: {
            "environment": {
              pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + envVars),
              lookbehind: true,
              alias: "constant"
            }
          },
          alias: "variable",
          lookbehind: true
        },
        // Highlight parameter names as variables
        "parameter": {
          pattern: /(^|\s)-{1,2}(?:\w+:[+-]?)?\w+(?:\.\w+)*(?=[=\s]|$)/,
          alias: "variable",
          lookbehind: true
        },
        "string": [
          // Support for Here-documents https://en.wikipedia.org/wiki/Here_document
          {
            pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
            lookbehind: true,
            greedy: true,
            inside: insideString
          },
          // Here-document with quotes around the tag
          // → No expansion (so no “inside”).
          {
            pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
            lookbehind: true,
            greedy: true,
            inside: {
              "bash": commandAfterHeredoc
            }
          },
          // “Normal” string
          {
            // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
            pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
            lookbehind: true,
            greedy: true,
            inside: insideString
          },
          {
            // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
            pattern: /(^|[^$\\])'[^']*'/,
            lookbehind: true,
            greedy: true
          },
          {
            // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
            pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
            greedy: true,
            inside: {
              "entity": insideString.entity
            }
          }
        ],
        "environment": {
          pattern: RegExp("\\$?" + envVars),
          alias: "constant"
        },
        "variable": insideString.variable,
        "function": {
          pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cargo|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|java|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|sysctl|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        "keyword": {
          pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
        "builtin": {
          pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
          lookbehind: true,
          // Alias added to make those easier to distinguish from strings.
          alias: "class-name"
        },
        "boolean": {
          pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        "file-descriptor": {
          pattern: /\B&\d\b/,
          alias: "important"
        },
        "operator": {
          // Lots of redirections here, but not just that.
          pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
          inside: {
            "file-descriptor": {
              pattern: /^\d/,
              alias: "important"
            }
          }
        },
        "punctuation": /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
        "number": {
          pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
          lookbehind: true
        }
      };
      commandAfterHeredoc.inside = Prism2.languages.bash;
      var toBeCopied = [
        "comment",
        "function-name",
        "for-or-select",
        "assign-left",
        "parameter",
        "string",
        "environment",
        "function",
        "keyword",
        "builtin",
        "boolean",
        "file-descriptor",
        "operator",
        "punctuation",
        "number"
      ];
      var inside2 = insideString.variable[1].inside;
      for (var i2 = 0; i2 < toBeCopied.length; i2++) {
        inside2[toBeCopied[i2]] = Prism2.languages.bash[toBeCopied[i2]];
      }
      Prism2.languages.sh = Prism2.languages.bash;
      Prism2.languages.shell = Prism2.languages.bash;
    })(Prism);
    Prism.languages.json = {
      "property": {
        pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
        lookbehind: true,
        greedy: true
      },
      "string": {
        pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
        lookbehind: true,
        greedy: true
      },
      "comment": {
        pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
        greedy: true
      },
      "number": /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
      "punctuation": /[{}[\],]/,
      "operator": /:/,
      "boolean": /\b(?:false|true)\b/,
      "null": {
        pattern: /\bnull\b/,
        alias: "keyword"
      }
    };
    Prism.languages.webmanifest = Prism.languages.json;
    const ExpandablePanel = ({
      collapse,
      border,
      lines = 15,
      style: style2,
      children: children2
    }) => {
      const [collapsed, setCollapsed] = h(collapse);
      const [showToggle, setShowToggle] = h(false);
      const contentsRef = A$1(
        /** @type {HTMLElement|null} */
        null
      );
      const observerRef = A$1(
        /** @type {IntersectionObserver|null} */
        null
      );
      y(() => {
        setCollapsed(collapse);
      }, [children2, collapse]);
      const refreshCollapse = q$1(() => {
        if (collapse && contentsRef.current) {
          const isScrollable = contentsRef.current.offsetHeight < contentsRef.current.scrollHeight;
          setShowToggle(isScrollable);
        }
      }, [collapse, setShowToggle, contentsRef]);
      y(() => {
        refreshCollapse();
      }, [children2]);
      y(() => {
        observerRef.current = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              refreshCollapse();
            }
          });
        });
        if (contentsRef.current) {
          observerRef.current.observe(contentsRef.current);
        }
        return () => {
          if (observerRef.current && contentsRef.current) {
            observerRef.current.unobserve(contentsRef.current);
          }
        };
      }, [contentsRef, observerRef]);
      let contentsStyle = { fontSize: FontSize.base };
      if (collapse && collapsed) {
        contentsStyle = {
          ...contentsStyle,
          maxHeight: `${lines}em`,
          overflow: "hidden"
        };
      }
      if (border) {
        contentsStyle.border = "solid var(--bs-light-border-subtle) 1px";
      }
      return m$1`<div
      class="expandable-panel"
      ref=${contentsRef}
      style=${{ ...contentsStyle, ...style2 }}
    >
      ${children2}
    </div>
    ${showToggle ? m$1`<${MoreToggle}
          collapsed=${collapsed}
          setCollapsed=${setCollapsed}
          border=${!border}
          style=${style2}
        />` : ""}`;
    };
    const MoreToggle = ({ collapsed, border, setCollapsed, style: style2 }) => {
      const text2 = collapsed ? "more" : "less";
      const icon = collapsed ? ApplicationIcons["expand-down"] : ApplicationIcons.collapse.up;
      const topStyle = {
        display: "flex",
        marginBottom: "0.5em",
        ...style2
      };
      if (border) {
        topStyle.borderTop = "solid var(--bs-light-border-subtle) 1px";
        topStyle.marginTop = "0.5em";
      } else {
        topStyle.marginTop = "0";
      }
      return m$1`
    <div style=${topStyle}>
      <div
        style=${{
        display: "inline-block",
        border: "solid var(--bs-light-border-subtle) 1px",
        borderTop: "none",
        marginLeft: "auto",
        marginRight: "1em"
      }}
      >
        <button
          class="btn"
          style=${{
        fontSize: FontSize.smaller,
        border: "none",
        padding: "0.1rem .5rem"
      }}
          onclick=${() => {
        setCollapsed(!collapsed);
      }}
        >
          <i class="${icon}" /> ${text2}
        </button>
      </div>
    </div>
  `;
    };
    const resolveToolInput = (fn2, toolArgs) => {
      const toolName = fn2;
      const [inputKey, inputType] = extractInputMetadata(toolName);
      const { input, args } = extractInput(inputKey, toolArgs);
      const functionCall = args.length > 0 ? `${toolName}(${args.join(",")})` : toolName;
      return {
        functionCall,
        input,
        inputType
      };
    };
    const ToolCallView = ({
      functionCall,
      input,
      inputType,
      view,
      output,
      mode
    }) => {
      function isContentImage(value) {
        if (value && typeof value === "object") {
          if (value.type === "image") {
            return true;
          } else if (value.type === "tool") {
            if (Array.isArray(value.content) && value.content.some(isContentImage)) {
              return true;
            }
          }
        }
        return false;
      }
      const collapse = Array.isArray(output) ? output.every((item) => !isContentImage(item)) : !isContentImage(output);
      return m$1`<div>
    ${mode !== "compact" && (!view || view.title) ? m$1`<${ToolTitle} title=${(view == null ? void 0 : view.title) || functionCall} />` : ""}
    <div>
      <div>
        <${ToolInput}
          type=${inputType}
          contents=${input}
          view=${view}
          style=${{ marginBottom: "1em" }}
        />
        ${output ? m$1`
              <${ExpandablePanel} collapse=${collapse} border=${true} lines=${15}>
              <${MessageContent} contents=${normalizeContent$1(output)} />
              </${ExpandablePanel}>` : ""}
      </div>
    </div>
  </div>`;
    };
    const ToolTitle = ({ title }) => {
      return m$1` <i
      class="bi bi-tools"
      style=${{
        marginRight: "0.2rem",
        opacity: "0.4"
      }}
    ></i>
    <code style=${{ fontSize: FontSize.small }}>${title}</code>`;
    };
    const normalizeContent$1 = (output) => {
      if (Array.isArray(output)) {
        return output;
      } else {
        return [
          {
            type: "tool",
            content: [
              {
                type: "text",
                text: String(output)
              }
            ]
          }
        ];
      }
    };
    const ToolInput = ({ type, contents, view, style: style2 }) => {
      if (!contents && !(view == null ? void 0 : view.content)) {
        return "";
      }
      if (view) {
        const toolInputRef = A$1(
          /** @type {import("preact").Component & { base: Element }} */
          null
        );
        y(() => {
          if (toolInputRef.current) {
            for (const child of toolInputRef.current.base.children) {
              if (child.tagName === "PRE") {
                const childChild = child.firstElementChild;
                if (childChild && childChild.tagName === "CODE") {
                  const hasLanguageClass = Array.from(childChild.classList).some(
                    (className2) => className2.startsWith("language-")
                  );
                  if (hasLanguageClass) {
                    child.classList.add("tool-output");
                    Prism$1.highlightElement(childChild);
                  }
                }
              }
            }
          }
        }, [contents, view, style2]);
        return m$1`<${MarkdownDiv}
      markdown=${view.content}
      ref=${toolInputRef}
      style=${style2}
    />`;
      } else {
        const toolInputRef = A$1(
          /** @type {HTMLElement|null} */
          null
        );
        y(() => {
          const tokens = Prism$1.languages[type];
          if (toolInputRef.current && tokens) {
            Prism$1.highlightElement(toolInputRef.current);
          }
        }, [contents, type, view]);
        contents = typeof contents === "object" || Array.isArray(contents) ? JSON.stringify(contents) : contents;
        const key2 = murmurhash.v3(contents);
        return m$1`<pre
      class="tool-output"
      style=${{
          padding: "0.5em",
          marginTop: "0.25em",
          marginBottom: "1rem",
          ...style2
        }}
    >
        <code ref=${toolInputRef} 
          key=${key2}
          class="sourceCode${type ? ` language-${type}` : ""}" style=${{
          overflowWrap: "anywhere",
          whiteSpace: "pre-wrap"
        }}>
          ${contents}
          </code>
      </pre>`;
      }
    };
    const ToolOutput = ({ output, style: style2 }) => {
      if (!output) {
        return "";
      }
      const outputs = [];
      if (Array.isArray(output)) {
        output.forEach((out) => {
          if (out.type === "text") {
            outputs.push(
              m$1`<${ToolTextOutput} text=${out.text} style=${style2} />`
            );
          } else {
            if (out.image.startsWith("data:")) {
              outputs.push(
                m$1`<img
              src="${out.image}"
              style=${{
                  maxWidth: "800px",
                  border: "solid var(--bs-border-color) 1px",
                  ...style2
                }}
            />`
              );
            } else {
              outputs.push(
                m$1`<${ToolTextOutput}
              text=${String(out.image)}
              style=${style2}
            />`
              );
            }
          }
        });
      } else {
        outputs.push(
          m$1`<${ToolTextOutput} text=${String(output)} style=${style2} />`
        );
      }
      return m$1`<div style=${{ display: "grid" }}>${outputs}</div>`;
    };
    const ToolTextOutput = ({ text: text2, style: style2 }) => {
      return m$1`<pre
    style=${{
        marginLeft: "2px",
        padding: "0.5em 0.5em 0.5em 0.5em",
        whiteSpace: "pre-wrap",
        marginBottom: "0",
        ...style2
      }}
  >
    <code class="sourceCode" style=${{ wordWrap: "anywhere" }}>
      ${text2.trim()}
      </code>
  </pre>`;
    };
    const extractInputMetadata = (toolName) => {
      if (toolName === "bash") {
        return ["cmd", "bash"];
      } else if (toolName === "python") {
        return ["code", "python"];
      } else if (toolName === "web_search") {
        return ["query", "text"];
      } else {
        return [void 0, void 0];
      }
    };
    const extractInput = (inputKey, args) => {
      const formatArg = (key2, value) => {
        const quotedValue = typeof value === "string" ? `"${value}"` : value;
        return `${key2}: ${quotedValue}`;
      };
      if (args) {
        if (Object.keys(args).length === 1) {
          const inputRaw = args[Object.keys(args)[0]];
          let input;
          if (Array.isArray(inputRaw) || typeof inputRaw === "object") {
            input = JSON.stringify(inputRaw, void 0, 2);
          } else {
            input = String(inputRaw);
          }
          return {
            input,
            args: []
          };
        } else if (args[inputKey]) {
          const input = args[inputKey];
          const filteredArgs = Object.keys(args).filter((key2) => {
            return key2 !== inputKey;
          }).map((key2) => {
            return formatArg(key2, args[key2]);
          });
          return {
            input,
            args: filteredArgs
          };
        } else {
          const formattedArgs = Object.keys(args).map((key2) => {
            return formatArg(key2, args[key2]);
          });
          return {
            input: void 0,
            args: formattedArgs
          };
        }
      }
      return {
        input: void 0,
        args: []
      };
    };
    const MessageContent = ({ contents }) => {
      if (Array.isArray(contents)) {
        return contents.map((content2, index) => {
          if (typeof content2 === "string") {
            return messageRenderers["text"].render({
              text: content2,
              index: index === contents.length - 1
            });
          } else {
            if (content2) {
              const renderer = messageRenderers[content2.type];
              if (renderer) {
                return renderer.render(content2, index === contents.length - 1);
              } else {
                console.error(`Unknown message content type '${content2.type}'`);
              }
            }
          }
        });
      } else {
        return messageRenderers["text"].render({ text: contents });
      }
    };
    const messageRenderers = {
      text: {
        render: (content2, isLast) => {
          return m$1`<${MarkdownDiv}
        markdown=${content2.text}
        class=${isLast ? "no-last-para-padding" : ""}
      />`;
        }
      },
      image: {
        render: (content2) => {
          if (content2.image.startsWith("data:")) {
            return m$1`<img
          src="${content2.image}"
          style=${{
              maxWidth: "800px",
              border: "solid var(--bs-border-color) 1px"
            }}
        />`;
          } else {
            return m$1`<code>${content2.image}</code>`;
          }
        }
      },
      audio: {
        render: (content2) => {
          return m$1` <audio controls>
        <source
          src=${content2.audio}
          type=${mimeTypeForFormat(content2.format)}
        />
      </audio>`;
        }
      },
      video: {
        render: (content2) => {
          return m$1` <video width="500" height="375" controls>
        <source
          src=${content2.video}
          type=${mimeTypeForFormat(content2.format)}
        />
      </video>`;
        }
      },
      tool: {
        render: (content2) => {
          return m$1`<${ToolOutput} output=${content2.content} />`;
        }
      }
    };
    const mimeTypeForFormat = (format2) => {
      switch (format2) {
        case "mov":
          return "video/quicktime";
        case "wav":
          return "audio/wav";
        case "mp3":
          return "audio/mpeg";
        case "mp4":
          return "video/mp4";
        case "mpeg":
          return "video/mpeg";
      }
    };
    function g(n2, t2) {
      for (var e2 in n2) if ("__source" !== e2 && !(e2 in t2)) return true;
      for (var r2 in t2) if ("__source" !== r2 && n2[r2] !== t2[r2]) return true;
      return false;
    }
    function I(n2, t2) {
      this.props = n2, this.context = t2;
    }
    (I.prototype = new x$1()).isPureReactComponent = true, I.prototype.shouldComponentUpdate = function(n2, t2) {
      return g(this.props, n2) || g(this.state, t2);
    };
    var M = l$1.__b;
    l$1.__b = function(n2) {
      n2.type && n2.type.__f && n2.ref && (n2.props.ref = n2.ref, n2.ref = null), M && M(n2);
    };
    var T = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
    function A(n2) {
      function t2(t3) {
        if (!("ref" in t3)) return n2(t3, null);
        var e2 = t3.ref;
        delete t3.ref;
        var r2 = n2(t3, e2);
        return t3.ref = e2, r2;
      }
      return t2.$$typeof = T, t2.render = t2, t2.prototype.isReactComponent = t2.__f = true, t2.displayName = "ForwardRef(" + (n2.displayName || n2.name) + ")", t2;
    }
    var O = l$1.__e;
    l$1.__e = function(n2, t2, e2, r2) {
      if (n2.then) {
        for (var u2, o2 = t2; o2 = o2.__; ) if ((u2 = o2.__c) && u2.__c) return null == t2.__e && (t2.__e = e2.__e, t2.__k = e2.__k), u2.__c(n2, t2);
      }
      O(n2, t2, e2, r2);
    };
    var F = l$1.unmount;
    function U(n2, t2, e2) {
      return n2 && (n2.__c && n2.__c.__H && (n2.__c.__H.__.forEach(function(n3) {
        "function" == typeof n3.__c && n3.__c();
      }), n2.__c.__H = null), null != (n2 = function(n3, t3) {
        for (var e3 in t3) n3[e3] = t3[e3];
        return n3;
      }({}, n2)).__c && (n2.__c.__P === e2 && (n2.__c.__P = t2), n2.__c = null), n2.__k = n2.__k && n2.__k.map(function(n3) {
        return U(n3, t2, e2);
      })), n2;
    }
    function V(n2, t2, e2) {
      return n2 && e2 && (n2.__v = null, n2.__k = n2.__k && n2.__k.map(function(n3) {
        return V(n3, t2, e2);
      }), n2.__c && n2.__c.__P === t2 && (n2.__e && e2.appendChild(n2.__e), n2.__c.__e = true, n2.__c.__P = e2)), n2;
    }
    function W() {
      this.__u = 0, this.o = null, this.__b = null;
    }
    function P(n2) {
      var t2 = n2.__.__c;
      return t2 && t2.__a && t2.__a(n2);
    }
    function z() {
      this.i = null, this.l = null;
    }
    l$1.unmount = function(n2) {
      var t2 = n2.__c;
      t2 && t2.__R && t2.__R(), t2 && 32 & n2.__u && (n2.type = null), F && F(n2);
    }, (W.prototype = new x$1()).__c = function(n2, t2) {
      var e2 = t2.__c, r2 = this;
      null == r2.o && (r2.o = []), r2.o.push(e2);
      var u2 = P(r2.__v), o2 = false, i2 = function() {
        o2 || (o2 = true, e2.__R = null, u2 ? u2(c2) : c2());
      };
      e2.__R = i2;
      var c2 = function() {
        if (!--r2.__u) {
          if (r2.state.__a) {
            var n3 = r2.state.__a;
            r2.__v.__k[0] = V(n3, n3.__c.__P, n3.__c.__O);
          }
          var t3;
          for (r2.setState({ __a: r2.__b = null }); t3 = r2.o.pop(); ) t3.forceUpdate();
        }
      };
      r2.__u++ || 32 & t2.__u || r2.setState({ __a: r2.__b = r2.__v.__k[0] }), n2.then(i2, i2);
    }, W.prototype.componentWillUnmount = function() {
      this.o = [];
    }, W.prototype.render = function(n2, e2) {
      if (this.__b) {
        if (this.__v.__k) {
          var r2 = document.createElement("div"), o2 = this.__v.__k[0].__c;
          this.__v.__k[0] = U(this.__b, r2, o2.__O = o2.__P);
        }
        this.__b = null;
      }
      var i2 = e2.__a && g$1(k$1, null, n2.fallback);
      return i2 && (i2.__u &= -33), [g$1(k$1, null, e2.__a ? null : n2.children), i2];
    };
    var B = function(n2, t2, e2) {
      if (++e2[1] === e2[0] && n2.l.delete(t2), n2.props.revealOrder && ("t" !== n2.props.revealOrder[0] || !n2.l.size)) for (e2 = n2.i; e2; ) {
        for (; e2.length > 3; ) e2.pop()();
        if (e2[1] < e2[0]) break;
        n2.i = e2 = e2[2];
      }
    };
    (z.prototype = new x$1()).__a = function(n2) {
      var t2 = this, e2 = P(t2.__v), r2 = t2.l.get(n2);
      return r2[0]++, function(u2) {
        var o2 = function() {
          t2.props.revealOrder ? (r2.push(u2), B(t2, n2, r2)) : u2();
        };
        e2 ? e2(o2) : o2();
      };
    }, z.prototype.render = function(n2) {
      this.i = null, this.l = /* @__PURE__ */ new Map();
      var t2 = L(n2.children);
      n2.revealOrder && "b" === n2.revealOrder[0] && t2.reverse();
      for (var e2 = t2.length; e2--; ) this.l.set(t2[e2], this.i = [1, 0, this.i]);
      return n2.children;
    }, z.prototype.componentDidUpdate = z.prototype.componentDidMount = function() {
      var n2 = this;
      this.l.forEach(function(t2, e2) {
        B(n2, e2, t2);
      });
    };
    var $ = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103, q = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/, G = /^on(Ani|Tra|Tou|BeforeInp|Compo)/, J = /[A-Z0-9]/g, K = "undefined" != typeof document, Q = function(n2) {
      return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/ : /fil|che|ra/).test(n2);
    };
    x$1.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function(t2) {
      Object.defineProperty(x$1.prototype, t2, { configurable: true, get: function() {
        return this["UNSAFE_" + t2];
      }, set: function(n2) {
        Object.defineProperty(this, t2, { configurable: true, writable: true, value: n2 });
      } });
    });
    var tn = l$1.event;
    function en() {
    }
    function rn() {
      return this.cancelBubble;
    }
    function un() {
      return this.defaultPrevented;
    }
    l$1.event = function(n2) {
      return tn && (n2 = tn(n2)), n2.persist = en, n2.isPropagationStopped = rn, n2.isDefaultPrevented = un, n2.nativeEvent = n2;
    };
    var cn = { enumerable: false, configurable: true, get: function() {
      return this.class;
    } }, fn = l$1.vnode;
    l$1.vnode = function(n2) {
      "string" == typeof n2.type && function(n3) {
        var t2 = n3.props, e2 = n3.type, u2 = {}, o2 = -1 === e2.indexOf("-");
        for (var i2 in t2) {
          var c2 = t2[i2];
          if (!("value" === i2 && "defaultValue" in t2 && null == c2 || K && "children" === i2 && "noscript" === e2 || "class" === i2 || "className" === i2)) {
            var f2 = i2.toLowerCase();
            "defaultValue" === i2 && "value" in t2 && null == t2.value ? i2 = "value" : "download" === i2 && true === c2 ? c2 = "" : "translate" === f2 && "no" === c2 ? c2 = false : "o" === f2[0] && "n" === f2[1] ? "ondoubleclick" === f2 ? i2 = "ondblclick" : "onchange" !== f2 || "input" !== e2 && "textarea" !== e2 || Q(t2.type) ? "onfocus" === f2 ? i2 = "onfocusin" : "onblur" === f2 ? i2 = "onfocusout" : G.test(i2) && (i2 = f2) : f2 = i2 = "oninput" : o2 && q.test(i2) ? i2 = i2.replace(J, "-$&").toLowerCase() : null === c2 && (c2 = void 0), "oninput" === f2 && u2[i2 = f2] && (i2 = "oninputCapture"), u2[i2] = c2;
          }
        }
        "select" == e2 && u2.multiple && Array.isArray(u2.value) && (u2.value = L(t2.children).forEach(function(n4) {
          n4.props.selected = -1 != u2.value.indexOf(n4.props.value);
        })), "select" == e2 && null != u2.defaultValue && (u2.value = L(t2.children).forEach(function(n4) {
          n4.props.selected = u2.multiple ? -1 != u2.defaultValue.indexOf(n4.props.value) : u2.defaultValue == n4.props.value;
        })), t2.class && !t2.className ? (u2.class = t2.class, Object.defineProperty(u2, "className", cn)) : (t2.className && !t2.class || t2.class && t2.className) && (u2.class = u2.className = t2.className), n3.props = u2;
      }(n2), n2.$$typeof = $, fn && fn(n2);
    };
    var ln = l$1.__r;
    l$1.__r = function(n2) {
      ln && ln(n2), n2.__c;
    };
    var an = l$1.diffed;
    l$1.diffed = function(n2) {
      an && an(n2);
      var t2 = n2.props, e2 = n2.__e;
      null != e2 && "textarea" === n2.type && "value" in t2 && t2.value !== e2.value && (e2.value = null == t2.value ? "" : t2.value);
    };
    const VirtualList = A(
      ({
        data,
        renderRow,
        overscanCount = 15,
        estimatedRowHeight = 50,
        sync = false,
        scrollRef,
        ...props
      }, ref) => {
        const [height, setHeight] = h(0);
        const [offset2, setOffset] = h(0);
        const [listMetrics, setListMetrics] = h({
          rowHeights: /* @__PURE__ */ new Map(),
          totalHeight: data.length * estimatedRowHeight
        });
        const baseRef = A$1(null);
        const containerRef = A$1(null);
        const rowRefs = A$1(/* @__PURE__ */ new Map());
        const getRowHeight = (index) => {
          return listMetrics.rowHeights.get(index) || estimatedRowHeight;
        };
        const rowPositions = T$1(() => {
          let currentPosition = 0;
          const positions = /* @__PURE__ */ new Map();
          for (let i2 = 0; i2 < data.length; i2++) {
            positions.set(i2, currentPosition);
            currentPosition += getRowHeight(i2);
          }
          return positions;
        }, [listMetrics.rowHeights, data.length]);
        F$1(
          ref,
          () => ({
            focus: () => {
              baseRef.current;
            },
            scrollToIndex: (index, direction) => {
              const scrollElement = (scrollRef == null ? void 0 : scrollRef.current) || baseRef.current;
              if (!scrollElement || index < 0 || index >= data.length) return;
              const currentScrollTop = scrollElement.scrollTop;
              const viewportHeight = scrollElement.offsetHeight;
              const rowTop = rowPositions.get(index) || 0;
              const rowHeight = getRowHeight(index);
              const rowBottom = rowTop + rowHeight;
              const isVisible2 = rowTop >= currentScrollTop && rowBottom <= currentScrollTop + viewportHeight;
              if (isVisible2) {
                return;
              }
              let newScrollTop;
              if (direction === "up") {
                newScrollTop = rowTop;
              } else {
                newScrollTop = rowBottom - viewportHeight;
              }
              newScrollTop = Math.max(
                0,
                Math.min(newScrollTop, listMetrics.totalHeight - viewportHeight)
              );
              scrollElement.scrollTop = newScrollTop;
            }
          }),
          [rowPositions, data.length]
        );
        const measureRows = () => {
          let updates = [];
          rowRefs.current.forEach((element, index) => {
            if (element) {
              const measuredHeight = element.offsetHeight;
              if (measuredHeight && measuredHeight !== listMetrics.rowHeights.get(index)) {
                updates.push([index, measuredHeight]);
              }
            }
          });
          if (updates.length === 0) return;
          const newHeights = new Map(listMetrics.rowHeights);
          updates.forEach(([index, height2]) => {
            newHeights.set(index, height2);
          });
          let newTotalHeight = 0;
          for (let i2 = 0; i2 < data.length; i2++) {
            newTotalHeight += newHeights.get(i2) || estimatedRowHeight;
          }
          setListMetrics({
            rowHeights: newHeights,
            totalHeight: newTotalHeight
          });
        };
        const resize = () => {
          const scrollElement = (scrollRef == null ? void 0 : scrollRef.current) || baseRef.current;
          if (scrollElement && height !== scrollElement.offsetHeight) {
            setHeight(scrollElement.offsetHeight);
          }
        };
        const handleScroll = throttle$1(() => {
          const scrollElement = (scrollRef == null ? void 0 : scrollRef.current) || baseRef.current;
          if (scrollElement) {
            setOffset(scrollElement.scrollTop);
          }
          if (sync) {
            setOffset((prev) => prev);
          }
        }, 100);
        y(() => {
          resize();
          const scrollElement = (scrollRef == null ? void 0 : scrollRef.current) || baseRef.current;
          if (scrollElement) {
            scrollElement.addEventListener("scroll", handleScroll);
            window.addEventListener("resize", resize);
            return () => {
              scrollElement.removeEventListener("scroll", handleScroll);
              window.removeEventListener("resize", resize);
            };
          }
        }, [scrollRef == null ? void 0 : scrollRef.current]);
        y(() => {
          measureRows();
        });
        const findRowAtOffset = (targetOffset) => {
          if (targetOffset <= 0) return 0;
          if (targetOffset >= listMetrics.totalHeight) return data.length - 1;
          let low = 0;
          let high = data.length - 1;
          let lastValid = 0;
          while (low <= high) {
            const mid = Math.floor((low + high) / 2);
            const rowStart = rowPositions.get(mid) || 0;
            if (rowStart <= targetOffset) {
              lastValid = mid;
              low = mid + 1;
            } else {
              high = mid - 1;
            }
          }
          return lastValid;
        };
        const firstVisibleIdx = findRowAtOffset(offset2);
        const lastVisibleIdx = findRowAtOffset(offset2 + height);
        const start2 = Math.max(0, firstVisibleIdx - overscanCount);
        const end2 = Math.min(data.length, lastVisibleIdx + overscanCount);
        const renderedRows = T$1(() => {
          const selection = data.slice(start2, end2);
          return selection.map((item, index) => {
            const actualIndex = start2 + index;
            return m$1`
          <div
            key=${`list-item-${actualIndex}`}
            ref=${(el) => {
              if (el) {
                rowRefs.current.set(actualIndex, el);
              } else {
                rowRefs.current.delete(actualIndex);
              }
            }}
          >
            ${renderRow(item, actualIndex)}
          </div>
        `;
          });
        }, [data, start2, end2, renderRow]);
        const style_inner = {
          position: "relative",
          overflow: (scrollRef == null ? void 0 : scrollRef.current) ? "visible" : "hidden",
          width: "100%",
          minHeight: "100%"
        };
        const style_content = {
          position: "absolute",
          top: 0,
          left: 0,
          height: "100%",
          width: "100%",
          overflow: "visible"
        };
        const top2 = rowPositions.get(start2) || 0;
        const scrollProps = scrollRef ? {} : { onscroll: handleScroll };
        return m$1`
      <div ref=${baseRef} ...${props} ...${scrollProps}>
        <div
          style=${{ ...style_inner, height: `${listMetrics.totalHeight}px` }}
        >
          <div
            style=${{ ...style_content, top: `${top2}px` }}
            ref=${containerRef}
          >
            ${renderedRows}
          </div>
        </div>
      </div>
    `;
      }
    );
    const ChatViewVirtualList = ({
      id,
      messages,
      toolCallStyle,
      style: style2,
      indented,
      numbered = true,
      scrollRef
    }) => {
      const collapsedMessages = resolveMessages(messages);
      const renderRow = (item, index) => {
        const number2 = collapsedMessages.length > 1 && numbered ? index + 1 : void 0;
        return m$1`<${ChatMessageRow}
      id=${id}
      number=${number2}
      resolvedMessage=${item}
      indented=${indented}
      toolCallStyle=${toolCallStyle}
    />`;
      };
      const result = m$1`<${VirtualList}
    data=${collapsedMessages}
    tabIndex="0"
    renderRow=${renderRow}
    scrollRef=${scrollRef}
    style=${{ width: "100%", marginTop: "1em", ...style2 }}
  />`;
      return result;
    };
    const ChatView = ({
      id,
      messages,
      toolCallStyle,
      style: style2,
      indented,
      numbered = true
    }) => {
      const collapsedMessages = resolveMessages(messages);
      const result = m$1` <div style=${style2}>
    ${collapsedMessages.map((msg, index) => {
        const number2 = collapsedMessages.length > 1 && numbered ? index + 1 : void 0;
        return m$1`<${ChatMessageRow}
        id=${id}
        number=${number2}
        resolvedMessage=${msg}
        indented=${indented}
        toolCallStyle=${toolCallStyle}
      />`;
      })}
  </div>`;
      return result;
    };
    const ChatMessageRow = ({
      id,
      number: number2,
      resolvedMessage,
      toolCallStyle,
      indented
    }) => {
      if (number2) {
        return m$1` <div
      style=${{
          display: "grid",
          gridTemplateColumns: "max-content auto",
          columnGap: "0.4em"
        }}
    >
      <div
        style=${{
          fontSize: FontSize.smaller,
          ...TextStyle.secondary,
          marginTop: "0.1em"
        }}
      >
        ${number2}
      </div>
      <${ChatMessage}
        id=${`${id}-chat-messages`}
        message=${resolvedMessage.message}
        toolMessages=${resolvedMessage.toolMessages}
        indented=${indented}
        toolCallStyle=${toolCallStyle}
      />
    </div>`;
      } else {
        return m$1`<${ChatMessage}
      id=${`${id}-chat-messages`}
      message=${resolvedMessage.message}
      toolMessages=${resolvedMessage.toolMessages}
      indented=${indented}
      toolCallStyle=${toolCallStyle}
    />`;
      }
    };
    const resolveMessages = (messages) => {
      const resolvedMessages = [];
      for (const message of messages) {
        if (message.role === "tool") {
          if (resolvedMessages.length > 0) {
            const msg = resolvedMessages[resolvedMessages.length - 1];
            msg.toolMessages.push(message);
          }
        } else {
          resolvedMessages.push({ message, toolMessages: [] });
        }
      }
      const systemMessages = [];
      const collapsedMessages = resolvedMessages.map((resolved) => {
        if (resolved.message.role === "system") {
          systemMessages.push(resolved.message);
        }
        return resolved;
      }).filter((resolved) => {
        return resolved.message.role !== "system";
      });
      const systemContent = [];
      for (const systemMessage2 of systemMessages) {
        const contents = Array.isArray(systemMessage2.content) ? systemMessage2.content : [systemMessage2.content];
        systemContent.push(...contents.map(normalizeContent));
      }
      const systemMessage = {
        role: "system",
        content: systemContent,
        source: "input"
      };
      if (systemMessage && systemMessage.content.length > 0) {
        collapsedMessages.unshift({ message: systemMessage });
      }
      return collapsedMessages;
    };
    const normalizeContent = (content2) => {
      if (typeof content2 === "string") {
        return {
          type: "text",
          text: content2
        };
      } else {
        return content2;
      }
    };
    const ChatMessage = ({
      id,
      message,
      toolMessages,
      indented,
      toolCallStyle
    }) => {
      const collapse = message.role === "system";
      return m$1`
    <div
      class="${message.role}"
      style=${{
        fontSize: FontSize.base,
        fontWeight: "300",
        paddingBottom: ".5em",
        marginLeft: "0",
        marginRight: "0",
        opacity: message.role === "system" ? "0.7" : "1",
        whiteSpace: "normal"
      }}
    >
      <div style=${{
        display: "grid",
        gridTemplateColumns: "max-content auto",
        columnGap: "0.3em",
        fontWeight: "500",
        marginBottom: "0.5em",
        ...TextStyle.label
      }}>
        <i class="${iconForMsg(message)}"></i>
        ${message.role}
      </div>
      <div style=${{ marginLeft: indented ? "1.1rem" : "0", paddingBottom: indented ? "0.8rem" : "0" }}>
      <${ExpandablePanel} collapse=${collapse}>
        <${MessageContents}
          key=${`${id}-contents`}
          message=${message}
          toolMessages=${toolMessages}
          toolCallStyle=${toolCallStyle}
        />
      </${ExpandablePanel}>
      </div>
    </div>
  `;
    };
    const MessageContents = ({ message, toolMessages, toolCallStyle }) => {
      if (message.role === "assistant" && message.tool_calls && message.tool_calls.length) {
        const result = [];
        if (message.content) {
          result.push(
            m$1`<div style=${{ marginBottom: "1em" }}>
          <${MessageContent} contents=${message.content} />
        </div>`
          );
        }
        const toolCalls = message.tool_calls.map((tool_call, idx) => {
          const { input, functionCall, inputType } = resolveToolInput(
            tool_call.function,
            tool_call.arguments
          );
          let toolMessage;
          if (tool_call.id) {
            toolMessage = toolMessages.find((msg) => {
              return msg.tool_call_id === tool_call.id;
            });
          } else {
            toolMessage = toolMessages[idx];
          }
          const resolvedToolOutput = resolveToolMessage(toolMessage);
          if (toolCallStyle === "compact") {
            return m$1`<code>tool: ${functionCall}</code>`;
          } else {
            return m$1`<${ToolCallView}
          functionCall=${functionCall}
          input=${input}
          inputType=${inputType}
          output=${resolvedToolOutput}
        />`;
          }
        });
        if (toolCalls) {
          result.push(...toolCalls);
        }
        return result;
      } else {
        return m$1`<${MessageContent} contents=${message.content} />`;
      }
    };
    const iconForMsg = (msg) => {
      if (msg.role === "user") {
        return ApplicationIcons.role.user;
      } else if (msg.role === "system") {
        return ApplicationIcons.role.system;
      } else if (msg.role === "tool") {
        return ApplicationIcons.role.tool;
      } else if (msg.role === "assistant") {
        return ApplicationIcons.role.assistant;
      } else {
        return ApplicationIcons.role.unknown;
      }
    };
    const resolveToolMessage = (toolMessage) => {
      if (!toolMessage) {
        return void 0;
      }
      const content2 = toolMessage.error !== null && toolMessage.error ? toolMessage.error.message : toolMessage.content;
      if (typeof content2 === "string") {
        return [
          {
            type: "tool",
            content: content2
          }
        ];
      } else {
        return content2.map((con) => {
          if (typeof content2 === "string") {
            return {
              type: "tool",
              content: content2
            };
          } else if (con.type === "text") {
            return {
              content: content2,
              type: "tool"
            };
          } else if (con.type === "image") {
            return {
              content: content2,
              type: "tool"
            };
          }
        });
      }
    };
    const NavPills = ({ children: children2 }) => {
      const [activeItem, setActiveItem] = h(children2[0].props["title"]);
      const NavPill = ({ title, activeItem: activeItem2, setActiveItem: setActiveItem2 }) => {
        const active = activeItem2 === title;
        return m$1` <li class="nav-item">
      <button
        type="button"
        role="tab"
        aria-selected=${active}
        style=${{
          minWidth: "4rem",
          ...TextStyle.label,
          fontSize: FontSize.small,
          padding: "0.1rem  0.6rem",
          borderRadius: "var(--bs-border-radius)"
        }}
        class="nav-link ${active ? "active " : ""}"
        onclick=${() => {
          setActiveItem2(title);
        }}
      >
        ${title}
      </button>
    </li>`;
      };
      const navPills = children2.map((nav2, idx) => {
        var _a2;
        const title = typeof nav2 === "object" ? ((_a2 = nav2["props"]) == null ? void 0 : _a2.title) || `Tab ${idx}` : `Tab ${idx}`;
        return m$1`<${NavPill}
      title=${title}
      activeItem=${activeItem}
      setActiveItem=${setActiveItem}
    />`;
      });
      const navBodies = children2.map((child) => {
        var _a2;
        return m$1` <div
      style=${{
          display: ((_a2 = child["props"]) == null ? void 0 : _a2.title) === activeItem ? "block" : "none"
        }}
    >
      ${child}
    </div>`;
      });
      return m$1`<ul
      class="nav nav-pills card-header-pills"
      style=${{ marginRight: "0" }}
      role="tablist"
      aria-orientation="horizontal"
    >
      ${navPills}
    </ul>
    ${navBodies}`;
    };
    const ChatMessageRenderer = {
      bucket: Buckets.first,
      canRender: (entry) => {
        var _a2, _b2;
        const val = entry.value;
        return Array.isArray(val) && val.length > 0 && ((_a2 = val[0]) == null ? void 0 : _a2.role) !== void 0 && ((_b2 = val[0]) == null ? void 0 : _b2.content) !== void 0;
      },
      render: (id, entry) => {
        return {
          rendered: m$1`
        <${NavPills}>
        <${ChatSummary} title="Last Turn" id=${id} messages=${entry.value} />
        <${ChatView} title="All" id=${id} messages=${entry.value} />
        </${NavPills}>
        `
        };
      }
    };
    const ChatSummary = ({ id, messages }) => {
      const summaryMessages = [];
      for (const message of messages.slice().reverse()) {
        summaryMessages.unshift(message);
        if (message.role === "user") {
          break;
        }
      }
      return m$1`<${ChatView} id=${id} messages=${summaryMessages} />`;
    };
    const RenderedContent = ({ id, entry }) => {
      if (entry.value === null) {
        return "[null]";
      }
      const renderer = Object.keys(contentRenderers).map((key2) => {
        return contentRenderers[key2];
      }).sort((a2, b) => {
        return a2.bucket - b.bucket;
      }).find((renderer2) => {
        return renderer2.canRender(entry);
      });
      let value = entry.value;
      if (renderer) {
        const { rendered } = renderer.render(id, entry);
        if (rendered !== void 0) {
          value = rendered;
        }
      }
      return m$1`${value}`;
    };
    const contentRenderers = {
      AnsiString: {
        bucket: Buckets.first,
        canRender: (entry) => {
          return typeof entry.value === "string" && entry.value.indexOf("\x1B") > -1;
        },
        render: (id, entry) => {
          return {
            rendered: m$1`<${ANSIDisplay} output=${entry.value} />`
          };
        }
      },
      Model: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          return typeof entry.value === "object" && entry.value._model;
        },
        render: (_id, entry) => {
          return {
            rendered: m$1`<i class="${ApplicationIcons.model}"></i> ${entry.value._model}`
          };
        }
      },
      Boolean: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          return typeof entry.value === "boolean";
        },
        render: (id, entry) => {
          entry.value = entry.value.toString();
          return contentRenderers.String.render(id, entry);
        }
      },
      Number: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          return typeof entry.value === "number";
        },
        render: (id, entry) => {
          entry.value = formatNumber(entry.value);
          return contentRenderers.String.render(id, entry);
        }
      },
      String: {
        bucket: Buckets.final,
        canRender: (entry) => {
          return typeof entry.value === "string";
        },
        render: (_id, entry, defaultRendering) => {
          const rendered = defaultRendering ? defaultRendering(entry.value.trim()) : entry.value.trim();
          return {
            rendered
          };
        }
      },
      Array: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          const isArray = Array.isArray(entry.value);
          if (isArray) {
            const types2 = new Set(
              entry.value.map((entry2) => {
                return typeof entry2;
              })
            );
            return types2.size === 1;
          } else {
            return false;
          }
        },
        render: (id, entry) => {
          const arrayMap = {};
          entry.value.forEach((entry2, index) => {
            arrayMap[`[${index}]`] = entry2;
          });
          const arrayRendered = m$1`<${MetaDataView}
        id=${id}
        style=${{ fontSize: FontSize.small }}
        entries="${arrayMap}"
        tableOptions="borderless,sm"
        compact
      />`;
          return { rendered: arrayRendered };
        }
      },
      ChatMessage: ChatMessageRenderer,
      web_search: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          return typeof entry.value === "object" && entry.name === "web_search";
        },
        render: (_id, entry) => {
          const results = [];
          results.push(
            m$1`<div style=${{ marginBottom: "0.5rem", fontWeight: "500" }}>
          <i class=${ApplicationIcons.search}></i> ${entry.value.query}
        </div>`
          );
          entry.value.results.forEach((result) => {
            results.push(
              m$1`<div>
            <a href="${result.url}">${result.url}</a>
          </div>`
            );
            results.push(
              m$1`<div
            style=${{ fontSize: FontSize.smaller, marginBottom: "0.5rem" }}
          >
            ${result.summary}
          </div>`
            );
          });
          return {
            rendered: results
          };
        }
      },
      web_browser: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          var _a2;
          return typeof entry.value === "string" && ((_a2 = entry.name) == null ? void 0 : _a2.startsWith("web_browser"));
        },
        render: (_id, entry) => {
          return {
            rendered: m$1`<pre style=${{ whiteSpace: "pre-wrap" }}>
${entry.value}</pre
        >`
          };
        }
      },
      Html: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          return typeof entry.value === "object" && entry.value._html;
        },
        render: (id, entry) => {
          return {
            rendered: entry.value._html
          };
        }
      },
      Image: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          return typeof entry.value === "string" && entry.value.startsWith("data:image/");
        },
        render: (id, entry) => {
          return {
            rendered: m$1`<img src=${entry.value} />`
          };
        }
      },
      Object: {
        bucket: Buckets.intermediate,
        canRender: (entry) => {
          return typeof entry.value === "object";
        },
        render: (id, entry) => {
          const summary = [];
          const keys = Object.keys(entry.value);
          if (keys.length > 4) {
            summary.push(...keys.slice(0, 2));
            summary.push("...");
            summary.push(...keys.slice(keys.length - 2));
          } else {
            summary.push(...keys);
          }
          return {
            rendered: m$1`<${MetaDataView}
          id=${id}
          style=${{ fontSize: FontSize.smaller }}
          entries="${entry.value}"
          tableOptions="borderless,sm"
          compact
        />`
          };
        }
      }
    };
    const MetaDataView = ({
      id,
      baseClass,
      classes,
      style: style2,
      entries,
      tableOptions,
      compact
    }) => {
      const baseId = baseClass || "metadataview";
      const cellStyle = compact ? { padding: "0em" } : { padding: "0.3em 0.3em 0.3em 0em" };
      const cellKeyStyle = compact ? {
        fontWeight: "400",
        paddingRight: "0.2em",
        whiteSpace: "nowrap"
      } : {
        fontWeight: "400",
        paddingRight: "1em",
        whiteSpace: "nowrap"
      };
      const cellValueStyle = {
        fontWeight: "300",
        whiteSpace: "pre-wrap",
        wordWrap: "anywhere",
        fontSize: FontSize.small
      };
      const cellKeyTextStyle = {
        fontSize: FontSize.small
      };
      tableOptions = tableOptions || "sm";
      const tblClz = (tableOptions || "").split(",").map((option) => {
        return `table-${option}`;
      });
      let coercedEntries;
      if (entries) {
        if (Array.isArray(entries)) {
          coercedEntries = entries;
        } else {
          coercedEntries = Object.entries(entries || {}).map(([key2, value]) => {
            return { name: key2, value };
          });
        }
      }
      const entryEls = (coercedEntries || []).map((entry, index) => {
        const id2 = `${baseId}-value-${index}`;
        return m$1`<tr class="${baseId}-row">
      <td
        class="${baseId}-key"
        style=${{ ...cellStyle, ...cellKeyStyle, ...cellKeyTextStyle }}
      >
        ${entry.name}
      </td>
      <td class="${baseId}-value" style=${{ ...cellStyle, ...cellValueStyle }}>
        <${RenderedContent} id=${id2} entry=${entry} />
      </td>
    </tr>`;
      });
      return m$1`<table
    ...${{ id }}
    class="${classes || ""} table ${tblClz.join(" ")}"
    style=${{
        paddingLeft: "0",
        marginLeft: "0",
        marginBottom: "0.2rem",
        ...style2
      }}
  >
    <thead>
      <tr>
        <th colspan="2" style="${{ padding: 0 }}"></th>
      </tr>
    </thead>
    <tbody>
      ${entryEls}
    </tbody>
  </table>`;
    };
    const kPlanCardBodyId = "task-plan-card-body";
    const PlanCard = ({ evalSpec, evalPlan, scores }) => {
      return m$1`
    <${Card}>
      <${CardHeader} icon=${ApplicationIcons.config} label="Config"/>
      <${CardBody} id="${kPlanCardBodyId}" style=${{
        paddingTop: "0",
        paddingBottom: "0"
      }}>
      
        <${PlanDetailView}
          evaluation=${evalSpec}
          plan=${evalPlan}
          scores=${scores}
        />
      </${CardBody}>
    </${Card}>
  `;
    };
    const planItemStyle = {
      fontSize: FontSize.base,
      marginBottom: "0em"
    };
    const planSepStyle = {
      marginLeft: ".3em",
      marginRight: ".3em",
      marginTop: "em",
      marginBottom: "-0.1em"
    };
    const ScorerDetailView = ({ name: name2, scores, params }) => {
      if (scores.length > 1) {
        params["scores"] = scores;
      }
      return m$1`<${DetailStep}
    icon=${ApplicationIcons.scorer}
    name=${name2}
    params=${params}
    style=${planItemStyle}
  />`;
    };
    const DatasetDetailView = ({ dataset, style: style2 }) => {
      const filtered = Object.fromEntries(
        Object.entries(dataset).filter(([key2]) => key2 !== "sample_ids")
      );
      if (!dataset || Object.keys(filtered).length === 0) {
        return m$1`<span style=${{ ...planItemStyle, ...style2 }}
      >No dataset information available</span
    >`;
      }
      return m$1`<${MetaDataView}
    entries="${filtered}"
    tableOptions="borderless,sm"
    style=${{ ...planItemStyle, ...style2 }}
  />`;
    };
    const SolversDetailView = ({ steps }) => {
      const separator = m$1` <div style=${{ ...planItemStyle, ...planSepStyle }}>
    <i class="${ApplicationIcons.arrows.right}"></i>
  </div>`;
      const details = steps == null ? void 0 : steps.map((step, index) => {
        return m$1`
      <${DetailStep} name=${step.solver} style=${planItemStyle} />
      ${index < steps.length - 1 ? separator : ""}
    `;
      });
      return m$1`<div
    style=${{
        display: "flex",
        flexDirection: "columns"
      }}
  >
    ${details}
  </div>`;
    };
    const DetailStep = ({ icon, name: name2, params, style: style2 }) => {
      const iconHtml = icon ? m$1`<i class="${icon}" style=${{ marginRight: ".3em" }}></i>` : "";
      return m$1`
    <div style=${style2}>
      ${iconHtml} ${name2}
      <div
        style=${{
        marginLeft: "1.3rem",
        marginTop: "0.2rem",
        marginBottom: "0.3rem"
      }}
      >
        ${m$1`<${MetaDataView}
          entries="${params}"
          style=${{ fontSize: FontSize.small }}
        />`}
      </div>
    </div>
  `;
    };
    const PlanDetailView = ({ evaluation, plan, scores }) => {
      if (!evaluation) {
        return "";
      }
      const config2 = (evaluation == null ? void 0 : evaluation.config) || {};
      const steps = plan == null ? void 0 : plan.steps;
      const metadata = evaluation == null ? void 0 : evaluation.metadata;
      const revision = evaluation == null ? void 0 : evaluation.revision;
      const packages = evaluation == null ? void 0 : evaluation.packages;
      const model_args = evaluation == null ? void 0 : evaluation.model_args;
      const task_args = evaluation == null ? void 0 : evaluation.task_args;
      const generate_config = plan == null ? void 0 : plan.config;
      const taskInformation = {
        ["Task ID"]: evaluation == null ? void 0 : evaluation.task_id,
        ["Run ID"]: evaluation == null ? void 0 : evaluation.run_id
      };
      if (revision) {
        taskInformation[`${revision.type ? `${toTitleCase(revision.type)} ` : ""}Revision`] = {
          _html: m$1`<a href="${ghCommitUrl(revision.origin, revision.commit)}"
        >${revision.commit}</a
      >`
        };
      }
      if (packages) {
        taskInformation["Inspect"] = {
          _html: m$1`${Object.keys(packages).map((key2) => {
            return `${key2} ${packages[key2]}`;
          }).join("<br/>\n")}`
        };
      }
      if (evaluation.tags) {
        taskInformation["Tags"] = evaluation.tags.join(", ");
      }
      if (evaluation == null ? void 0 : evaluation.model) {
        config2["model"] = evaluation.model;
      }
      if (evaluation == null ? void 0 : evaluation.model_base_url) {
        config2["model_base_url"] = evaluation.model_base_url;
      }
      if (evaluation == null ? void 0 : evaluation.sandbox) {
        config2["sandbox"] = evaluation.sandbox[0];
        if (evaluation.sandbox[1]) {
          config2["sandbox_config"] = evaluation.sandbox[1];
        }
      }
      const floatingColumnStyle = {
        flex: "0 1 1",
        width: "unset",
        textAlign: "left",
        paddingLeft: "0.6rem",
        paddingRight: "0.6rem"
      };
      const wideColumnStyle = {
        flex: "1 1 1",
        width: "unset",
        paddingLeft: "0.6rem",
        paddingRight: "0.6rem"
      };
      const oneColumnStyle = {
        flex: "0 0 100%"
      };
      const twoColumnStyle = {
        flex: "0 0 50%"
      };
      const planMetadataStyle = {
        fontSize: FontSize.base
      };
      const taskColumns = [];
      taskColumns.push({
        title: "Dataset",
        style: floatingColumnStyle,
        contents: m$1`<${DatasetDetailView} dataset=${evaluation.dataset} />`
      });
      taskColumns.push({
        title: "Plan",
        style: wideColumnStyle,
        contents: m$1` <${SolversDetailView} steps=${steps} /> `
      });
      if (scores) {
        const scorers = scores.reduce((accum, score2) => {
          if (!accum[score2.scorer]) {
            accum[score2.scorer] = {
              scores: [score2.name],
              params: score2.params
            };
          } else {
            accum[score2.scorer].scores.push(score2.name);
          }
          return accum;
        }, {});
        if (Object.keys(scorers).length > 0) {
          const label = Object.keys(scorers).length === 1 ? "Scorer" : "Scorers";
          const scorerPanels = Object.keys(scorers).map((key2) => {
            return m$1`<${ScorerDetailView}
          name=${key2}
          scores=${scorers[key2].scores}
          params=${scorers[key2].params}
        />`;
          });
          taskColumns.push({
            title: label,
            style: floatingColumnStyle,
            contents: scorerPanels
          });
        }
      }
      const metadataColumns = [];
      const cols = colCount(
        metadataColumns,
        task_args,
        model_args,
        config2,
        metadata
      );
      const configColumnStyle = cols === 1 ? oneColumnStyle : twoColumnStyle;
      metadataColumns.push({
        title: "Task Information",
        style: configColumnStyle,
        contents: m$1`
      <${MetaDataView}
        style=${planMetadataStyle}
        classes="task-title-deets-grid"
        entries="${taskInformation}"
        tableOptions="borderless,sm"
      />
    `
      });
      if (task_args && Object.keys(task_args).length > 0) {
        metadataColumns.push({
          title: "Task Args",
          style: configColumnStyle,
          contents: m$1`
        <${MetaDataView}
          style=${planMetadataStyle}
          classes="task-plan-task-args-grid"
          entries="${task_args}"
          tableOptions="sm"
        />
      `
        });
      }
      if (model_args && Object.keys(model_args).length > 0) {
        metadataColumns.push({
          title: "Model Args",
          style: configColumnStyle,
          contents: m$1`
        <${MetaDataView}
          style=${planMetadataStyle}
          classes="task-plan-model-args-grid"
          entries="${model_args}"
          tableOptions="sm"
        />
      `
        });
      }
      if (config2 && Object.keys(config2).length > 0) {
        metadataColumns.push({
          title: "Configuration",
          style: configColumnStyle,
          contents: m$1`
        <${MetaDataView}
          style=${planMetadataStyle}
          classes="task-plan-configuration"
          entries="${config2}"
          tableOptions="sm"
        />
      `
        });
      }
      if (generate_config && Object.keys(generate_config).length > 0) {
        metadataColumns.push({
          title: "Generate Config",
          style: configColumnStyle,
          contents: m$1`
        <${MetaDataView}
          style=${planMetadataStyle}
          classes="task-plan-generate-configuration"
          entries="${generate_config}"
          tableOptions="sm"
        />
      `
        });
      }
      if (metadata && Object.keys(metadata).length > 0) {
        metadataColumns.push({
          title: "Metadata",
          style: configColumnStyle,
          contents: m$1`
        <${MetaDataView}
          style=${planMetadataStyle}
          classes="task-plan-metadata"
          entries="${metadata}"
          tableOptions="sm"
        />
      `
        });
      }
      return m$1`
    <div style=${{ paddingTop: "0", paddingBottom: "1em", marginLeft: "0" }}>
      <div
        style=${{
        display: "grid",
        gridTemplateColumns: `repeat(${taskColumns.length}, auto)`,
        justifyContent: "space-between",
        flexWrap: "wrap",
        paddingBottom: "0.7rem",
        borderBottom: "solid 1px var(--bs-border-color)"
      }}
      >
        ${taskColumns.map((col) => {
        return m$1`<${PlanColumn} title="${col.title}" style=${col.style}>
        ${col.contents}
      </${PlanColumn}>
      `;
      })}
      </div>

      <div
        class="row"
        style=${{ justifyContent: "flex-start", flexWrap: "wrap" }}
      >
        ${metadataColumns.map((col) => {
        return m$1`<${PlanColumn} title="${col.title}" style=${col.style}>
            ${col.contents}
          </${PlanColumn}>
          `;
      })}
      </div>
    </div>
  `;
    };
    const colCount = (...other) => {
      let count = 0;
      for (const o2 in other) {
        if (o2 && Object.keys(o2).length > 0) {
          count++;
        }
      }
      return count;
    };
    const PlanColumn = ({ title, classes, style: style2, children: children2 }) => {
      return m$1`
    <div class="${classes || ""}" ...${{ style: style2 }}>
      <div
        class="card-subheading"
        style=${{
        fontSize: FontSize.small,
        ...TextStyle.label,
        ...TextStyle.secondary,
        marginTop: "1em"
      }}
      >
        ${title}
      </div>
      ${children2}
    </div>
  `;
    };
    const MessageBand = ({ message, hidden, setHidden, type }) => {
      const bgColor = type === "info" ? "var(--bs-light)" : "var(--bs-" + type + "-bg-subtle)";
      const color = type === "info" ? void 0 : "var(--bs-" + type + "-text-emphasis)";
      return m$1`
    <div
      style=${{
        gridTemplateColumns: "max-content auto max-content",
        alignItems: "center",
        columnGap: "0.5em",
        fontSize: FontSize.small,
        color,
        background: bgColor,
        borderBottom: "solid 1px var(--bs-light-border-subtle)",
        padding: "0.3em 1em",
        display: hidden ? "none" : "grid"
      }}
    >
      <i class=${ApplicationIcons.logging[type]} />
      ${message}
      <button
        title="Close"
        style=${{
        fontSize: FontSize["title-secondary"],
        margin: "0",
        padding: "0",
        color,
        height: FontSize["title-secondary"],
        lineHeight: FontSize["title-secondary"]
      }}
        class="btn"
        onclick=${() => {
        setHidden(true);
      }}
      >
        <i class=${ApplicationIcons.close}></i>
      </button>
    </div>
  `;
    };
    const LargeModal = ({
      id,
      title,
      detail,
      detailTools,
      footer,
      onkeyup,
      visible,
      onHide,
      showProgress,
      children: children2,
      initialScrollPositionRef,
      setInitialScrollPosition,
      warning,
      warningHidden,
      setWarningHidden,
      scrollRef
    }) => {
      const modalFooter = footer ? m$1`<div class="modal-footer">${footer}</div>` : "";
      scrollRef = scrollRef || A$1(
        /** @type {HTMLElement|null} */
        null
      );
      y(() => {
        if (scrollRef.current) {
          setTimeout(() => {
            if (scrollRef.current.scrollTop !== (initialScrollPositionRef == null ? void 0 : initialScrollPositionRef.current)) {
              scrollRef.current.scrollTop = initialScrollPositionRef == null ? void 0 : initialScrollPositionRef.current;
            }
          }, 0);
        }
      }, []);
      const onScroll = q$1(
        (e2) => {
          setInitialScrollPosition(e2.srcElement.scrollTop);
        },
        [setInitialScrollPosition]
      );
      const headerEls = [];
      headerEls.push(
        m$1`<div
      class="modal-title"
      style=${{ fontSize: FontSize.smaller, flex: "1 1 auto" }}
    >
      ${title || ""}
    </div>`
      );
      if (detail) {
        headerEls.push(
          m$1`<div
        style=${{
            marginLeft: "auto",
            marginRight: "auto",
            display: "flex",
            flex: "1 1 auto",
            justifyContent: "center"
          }}
      >
        ${detailTools.left ? detailTools.left.map((tool) => {
            return m$1`<${TitleTool} ...${tool} />`;
          }) : ""}
        <div
          style=${{
            fontSize: FontSize.smaller,
            display: "flex",
            alignItems: "center"
          }}
        >
          <div>${detail}</div>
        </div>
        ${detailTools.right ? detailTools.right.map((tool) => {
            return m$1`<${TitleTool} ...${tool} />`;
          }) : ""}
      </div>`
        );
      }
      headerEls.push(m$1`<button
      type="button"
      class="btn btn-close-large-dialog"
      onclick=${() => {
        onHide();
      }}
      aria-label="Close"
      style=${{
        borderWidth: "0px",
        fontSize: FontSize.larger,
        fontWeight: "300",
        padding: "0em 0.5em",
        flex: 1,
        textAlign: "right"
      }}
    >
      <${HtmlEntity}>&times;</${HtmlEntity}>
    </button>`);
      return m$1`<div
    id=${id}
    class="modal"
    tabindex="0"
    role="dialog"
    onkeyup=${onkeyup}
    style=${{
        borderRadius: "var(--bs-border-radius)",
        display: visible ? "block" : "none"
      }}
    tabindex=${visible ? 0 : void 0}
  >
    <div
      class="modal-dialog modal-dialog-scrollable"
      style=${{
        maxWidth: "100%",
        marginLeft: "var(--bs-modal-margin)",
        marginRight: "var(--bs-modal-margin)"
      }}
      role="document"
    >
      <div class="modal-content" style=${{ height: "100%" }}>
        <div
          class="modal-header"
          style=${{ padding: "0 0 0 1em", display: "flex" }}
        >
          ${headerEls}
        </div>
        <${ProgressBar}
          animating=${showProgress}
          containerStyle=${{
        marginBottom: "-2px",
        backgroundColor: "var(--bs-body-bg)"
      }}
        />

        ${warning ? m$1`<${MessageBand}
              message=${warning}
              hidden=${warningHidden}
              setHidden=${setWarningHidden}
              type="warning"
            />` : ""}
        <div class="modal-body" ref=${scrollRef} onscroll=${onScroll}>
          ${children2}
        </div>
        ${modalFooter}
      </div>
    </div>
  </div>`;
    };
    const HtmlEntity = ({ children: children2 }) => m$1`<span dangerouslySetInnerHTML=${{ __html: children2 }} />`;
    const TitleTool = ({ label, icon, enabled, onclick }) => {
      return m$1`<button
    type="button"
    class="btn btn-outline"
    aria-label=${label}
    onclick=${onclick}
    disabled=${!enabled}
    style=${{
        paddingTop: 0,
        paddingBottom: 0,
        border: "none",
        fontSize: FontSize.small
      }}
  >
    <i class="${icon}" />
  </button>`;
    };
    function escapeSelector(id) {
      return id.replace(/([ #.;,?!+*~'":^$[\]()=>|/\\])/g, "\\$1");
    }
    const isVscode = () => {
      const bodyEl = document.querySelector("body");
      return !!bodyEl.getAttributeNames().find((attr) => {
        return attr.includes("data-vscode-");
      });
    };
    const SampleScores = ({ sample, sampleDescriptor, scorer }) => {
      const scores = scorer ? sampleDescriptor.evalDescriptor.scorerDescriptor(sample, { scorer, name: scorer }).scores() : sampleDescriptor.selectedScorerDescriptor(sample).scores();
      if (scores.length === 1) {
        return scores[0].rendered();
      } else {
        const rows = scores.map((score2) => {
          return m$1` <div style=${{ opacity: "0.7" }}>${score2.name}</div>
        <div>${score2.rendered()}</div>`;
        });
        return m$1`<div
      style=${{
          display: "grid",
          gridTemplateColumns: "max-content max-content",
          columnGap: "1em"
        }}
    >
      ${rows}
    </div>`;
      }
    };
    const MetaDataGrid = ({ id, entries, classes, style: style2, plain }) => {
      const baseId = "metadata-grid";
      const cellKeyStyle = {
        fontWeight: "400",
        whiteSpace: "nowrap",
        ...TextStyle.label,
        ...TextStyle.secondary
      };
      const cellValueStyle = {
        whiteSpace: "pre-wrap",
        wordWrap: "anywhere",
        fontSize: FontSize.small
      };
      const cellKeyTextStyle = {
        fontSize: FontSize.small
      };
      const entryRecords = (entries2) => {
        if (!entries2) {
          return [];
        }
        if (!Array.isArray(entries2)) {
          return Object.entries(entries2 || {}).map(([key2, value]) => {
            return { name: key2, value };
          });
        } else {
          return entries2;
        }
      };
      const entryEls = entryRecords(entries).map((entry, index) => {
        const id2 = `${baseId}-value-${index}`;
        return m$1`
      <div
        style=${{
          gridColumn: "1 / -1",
          borderBottom: `${!plain ? "solid 1px var(--bs-light-border-subtle" : ""}`
        }}
      ></div>
      <div
        class="${baseId}-key"
        style=${{ ...cellKeyStyle, ...cellKeyTextStyle }}
      >
        ${entry.name}
      </div>
      <div class="${baseId}-value" style=${{ ...cellValueStyle }}>
        <${RenderedContent} id=${id2} entry=${entry} />
      </div>
    `;
      });
      return m$1`<div
    ...${{ id }}
    class="${classes || ""}"
    style=${{
        display: "grid",
        gridTemplateColumns: "max-content auto",
        columnGap: "1em",
        ...style2
      }}
  >
    ${entryEls}
  </div>`;
    };
    const labelStyle = {
      paddingRight: "2em",
      paddingLeft: "0",
      paddingBottom: "0",
      ...TextStyle.label,
      ...TextStyle.secondary
    };
    const SampleScoreView = ({
      sample,
      sampleDescriptor,
      style: style2,
      scorer
    }) => {
      if (!sampleDescriptor) {
        return m$1``;
      }
      const scoreInput = inputString(sample.input);
      if (sample.choices && sample.choices.length > 0) {
        scoreInput.push("");
        scoreInput.push(
          ...sample.choices.map((choice, index) => {
            return `${String.fromCharCode(65 + index)}) ${choice}`;
          })
        );
      }
      const scorerDescriptor = sampleDescriptor.evalDescriptor.scorerDescriptor(
        sample,
        { scorer, name: scorer }
      );
      const explanation = scorerDescriptor.explanation() || "(No Explanation)";
      const answer = scorerDescriptor.answer();
      const metadata = scorerDescriptor.metadata();
      return m$1`
  <div
    class="container-fluid"
    style=${{
        marginTop: "0.5em",
        paddingLeft: "0",
        fontSize: FontSize.base,
        ...style2
      }}
  >
    <${Card}>
    <${CardHeader} label="Score"/>
    <${CardBody}>
      <div>
        <div style=${{ ...labelStyle }}>Input</div>
        <div>
          <${MarkdownDiv}
            markdown=${scoreInput.join("\n")}
            style=${{ wordBreak: "break-all" }}
          />
        </div>
      </div>

      <table
        class="table"
        style=${{ width: "100%", marginBottom: "1em" }}
      >
        <thead style=${{ borderBottomColor: "#00000000" }}>
          <tr>
            <th style=${{ ...labelStyle, fontWeight: "400" }}>Target</th>
            <th
              style=${{ ...labelStyle, paddingBottom: "0", fontWeight: "400" }}
            >
              Answer
            </th>
            <th
              style=${{
        ...labelStyle,
        paddingLeft: "2em",
        paddingBottom: "0",
        fontWeight: "400"
      }}
            >
              Score
            </th>
          </tr>
        </thead>
        <tbody style=${{ borderBottomColor: "#00000000" }}>
          <tr>
            <td
              style=${{
        paddingRight: "2em",
        paddingLeft: "0",
        paddingTop: "0"
      }}
            >
              <${MarkdownDiv}
                markdown=${arrayToString(
        arrayToString((sample == null ? void 0 : sample.target) || "none")
      )}
                style=${{ paddingLeft: "0" }}
                class="no-last-para-padding"
              />
            </td>
            <td style=${{ paddingTop: "0", paddingLeft: "0" }}>
              <${MarkdownDiv}
                class="no-last-para-padding"
                markdown=${answer}
                style=${{ paddingLeft: "0" }}
              />
            </td>
            <td style=${{ paddingLeft: "2em", paddingTop: "0" }}>
              <${SampleScores}
                sample=${sample}
                sampleDescriptor=${sampleDescriptor}
                scorer=${scorer}
              />
            </td>
          </tr>
        </tbody>
      </table>
    </${CardBody}>
    </${Card}>

    ${explanation && explanation !== answer ? m$1` 
    <${Card}>
      <${CardHeader} label="Explanation"/>
      <${CardBody}>
        <${MarkdownDiv}
            markdown=${arrayToString(explanation)}
            style=${{ paddingLeft: "0" }}
            class="no-last-para-padding"
          />

      </${CardBody}>
    </${Card}>` : ""}

    ${metadata && Object.keys(metadata).length > 0 ? m$1`
    <${Card}>
      <${CardHeader} label="Metadata"/>
      <${CardBody}>
        <${MetaDataGrid}
          id="task-sample-score-metadata"
          classes="tab-pane"
          entries="${metadata}"
          style=${{ marginTop: "0" }}
        />
      </${CardBody}>
    </${Card}>` : ""}
    </div>
  `;
    };
    const EventPanel = ({
      id,
      classes,
      title,
      subTitle,
      text: text2,
      icon,
      titleColor,
      collapse,
      collapsed,
      onCollapsed,
      style: style2,
      titleStyle,
      children: children2,
      onSelectedNav,
      selectedNav
    }) => {
      const hasCollapse = collapse !== void 0;
      const isCollapsed = collapsed === void 0 ? collapse : collapsed;
      const pillId = (index) => {
        return `${id}-nav-pill-${index}`;
      };
      const filteredArrChildren = (Array.isArray(children2) ? children2 : [children2]).filter((child) => !!child);
      const defaultPillId = pillId(0);
      const gridColumns2 = [];
      if (hasCollapse) {
        gridColumns2.push("minmax(0, max-content)");
      }
      if (icon) {
        gridColumns2.push("max-content");
      }
      gridColumns2.push("minmax(0, max-content)");
      if (subTitle) {
        gridColumns2.push("minmax(0, max-content)");
      }
      gridColumns2.push("auto");
      gridColumns2.push("minmax(0, max-content)");
      gridColumns2.push("minmax(0, max-content)");
      const titleEl = title || icon || filteredArrChildren.length > 1 ? m$1`<div
          title=${subTitle}
          style=${{
        display: "grid",
        gridTemplateColumns: gridColumns2.join(" "),
        columnGap: "0.3em",
        fontSize: FontSize.small,
        cursor: hasCollapse ? "pointer" : void 0
      }}
        >
          ${hasCollapse ? m$1`<i
                onclick=${() => {
        onCollapsed(!isCollapsed);
      }}
                class=${isCollapsed ? ApplicationIcons.chevron.right : ApplicationIcons.chevron.down}
              />` : ""}
          ${icon ? m$1`<i
                class=${icon || ApplicationIcons.metadata}
                style=${{
        ...TextStyle.secondary,
        color: titleColor ? titleColor : "",
        ...titleStyle
      }}
                onclick=${() => {
        onCollapsed(!isCollapsed);
      }}
              />` : ""}
          <div
            style=${{
        ...TextStyle.label,
        ...TextStyle.secondary,
        color: titleColor ? titleColor : "",
        ...titleStyle
      }}
            onclick=${() => {
        onCollapsed(!isCollapsed);
      }}
          >
            ${title}
          </div>
          <div
            onclick=${() => {
        onCollapsed(!isCollapsed);
      }}
          ></div>
          <div
            style=${{
        justifySelf: "end",
        ...TextStyle.secondary,
        marginRight: "0.2em"
      }}
            onclick=${() => {
        onCollapsed(!isCollapsed);
      }}
          >
            ${collapsed ? text2 : ""}
          </div>
          <div
            style=${{
        justifySelf: "end",
        display: "flex",
        flexDirection: "columns"
      }}
          >
            ${(!hasCollapse || !isCollapsed) && filteredArrChildren && filteredArrChildren.length > 1 ? m$1` <${EventNavs}
                  navs=${filteredArrChildren.map((child, index) => {
        var _a2;
        const defaultTitle = `Tab ${index}`;
        const title2 = child && typeof child === "object" ? ((_a2 = child["props"]) == null ? void 0 : _a2.name) || defaultTitle : defaultTitle;
        return {
          id: `eventpanel-${id}-${index}`,
          title: title2,
          target: pillId(index)
        };
      })}
                  selectedNav=${selectedNav || defaultPillId}
                  setSelectedNav=${onSelectedNav}
                />` : ""}
          </div>
        </div>` : "";
      const card = m$1` <div
    id=${id}
    style=${{
        padding: "0.625rem",
        border: "solid 1px var(--bs-light-border-subtle)",
        borderRadius: "var(--bs-border-radius)",
        ...style2
      }}
    class=${classes || void 0}
  >
    ${titleEl}
    <div
      class="tab-content"
      style=${{
        padding: "0",
        display: !hasCollapse || !isCollapsed ? "inherit" : "none"
      }}
    >
      ${filteredArrChildren == null ? void 0 : filteredArrChildren.map((child, index) => {
        const id2 = pillId(index);
        const isSelected = selectedNav ? id2 === selectedNav : id2 === defaultPillId;
        return m$1`<div
          id=${id2}
          class="tab-pane show ${isSelected ? "active" : ""}"
        >
          ${child}
        </div>`;
      })}
    </div>
  </div>`;
      return card;
    };
    const EventNavs = ({ navs, selectedNav, setSelectedNav }) => {
      return m$1`<ul
    class="nav nav-pills card-header-pills"
    style=${{ marginRight: "0" }}
    role="tablist"
    aria-orientation="horizontal"
  >
    ${navs.map((nav2, index) => {
        return m$1`<${EventNav}
        active=${index === 0}
        id=${nav2.id}
        target=${nav2.target}
        title=${nav2.title}
        selectedNav=${selectedNav}
        setSelectedNav=${setSelectedNav}
      />`;
      })}
  </ul>`;
    };
    const EventNav = ({ target, title, selectedNav, setSelectedNav }) => {
      const active = target === selectedNav;
      return m$1`<li class="nav-item">
    <button
      type="button"
      role="tab"
      aria-controls=${target}
      aria-selected=${active}
      style=${{
        minWidth: "4rem",
        ...TextStyle.label,
        fontSize: FontSize.small,
        padding: "0.1rem  0.6rem",
        borderRadius: "var(--bs-border-radius)"
      }}
      class="nav-link ${active ? "active " : ""}"
      onclick=${() => {
        setSelectedNav(target);
      }}
    >
      ${title}
    </button>
  </li>`;
    };
    const EventSection = ({ title, style: style2, children: children2 }) => {
      return m$1`<div
    style=${{
        margin: "1em 0 0 0",
        ...style2
      }}
  >
    <div
      style=${{
        fontSize: FontSize.smaller,
        ...TextStyle.label,
        fontWeight: 600,
        paddingBottom: "0.3em"
      }}
    >
      ${title}
    </div>
    ${children2}
  </div>`;
    };
    const isNumeric = (n2) => {
      return !isNaN(parseFloat(n2)) && isFinite(n2);
    };
    const toArray = (val) => {
      if (Array.isArray(val)) {
        return val;
      } else {
        return [val];
      }
    };
    const SampleInitEventView = ({
      id,
      event,
      style: style2,
      eventState,
      setEventState
    }) => {
      const stateObj = event.state;
      const sections = [];
      if (event.sample.files && Object.keys(event.sample.files).length > 0) {
        sections.push(m$1`<${EventSection} title="Files">
      ${Object.keys(event.sample.files).map((file) => {
          return m$1`<pre style=${{ marginBottom: "0" }}>${file}</pre>`;
        })}
      </${EventSection}>
  `);
      }
      if (event.sample.setup) {
        sections.push(m$1`<${EventSection} title="Setup">
      <pre style=${{ background: "var(--bs-light)", borderRadius: "var(--bs-border-radius)" }}><code class="sourceCode" >${event.sample.setup}</code></pre>
      </${EventSection}>
  `);
      }
      return m$1`
  <${EventPanel} 
    id=${id} 
    style=${style2} 
    title="Sample" 
    icon=${ApplicationIcons.sample} 
    subTitle=${formatDateTime(new Date(event.timestamp))}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}
  >
    <div name="Sample" style=${{ margin: "1em 0em" }}>
      <${ChatView} messages=${stateObj["messages"]}/>
      <div>
        ${event.sample.choices ? event.sample.choices.map((choice, index) => {
        return m$1`<div>
                  ${String.fromCharCode(65 + index)}) ${choice}
                </div>`;
      }) : ""}
        ${sections.length > 0 ? m$1`
                <div
                  style=${{
        display: "flex",
        flexWrap: "wrap",
        gap: "1em",
        overflowWrap: "break-word"
      }}
                >
                  ${sections}
                </div>
              ` : ""}
        <${EventSection} title="Target">
          ${toArray(event.sample.target).map((target) => {
        return m$1`<div>${target}</div>`;
      })}
        </${EventSection}>
      </div>
    </div>
    ${event.sample.metadata && Object.keys(event.sample.metadata).length > 0 ? m$1`<${MetaDataGrid} name="Metadata" style=${{ margin: "0.5em 0" }} entries=${event.sample.metadata} />` : ""}

  </${EventPanel}>`;
    };
    const sharedConfig = {};
    function setHydrateContext(context) {
      sharedConfig.context = context;
    }
    const equalFn = (a2, b) => a2 === b;
    const $PROXY = Symbol("solid-proxy");
    const $TRACK = Symbol("solid-track");
    const signalOptions = {
      equals: equalFn
    };
    let runEffects = runQueue;
    const STALE = 1;
    const PENDING = 2;
    const UNOWNED = {
      owned: null,
      cleanups: null,
      context: null,
      owner: null
    };
    var Owner = null;
    let Transition = null;
    let Listener = null;
    let Updates = null;
    let Effects = null;
    let ExecCount = 0;
    function createRoot(fn2, detachedOwner) {
      const listener = Listener, owner = Owner, unowned = fn2.length === 0, root2 = unowned ? UNOWNED : {
        owned: null,
        cleanups: null,
        context: null,
        owner: detachedOwner === void 0 ? owner : detachedOwner
      }, updateFn = unowned ? fn2 : () => fn2(() => untrack(() => cleanNode(root2)));
      Owner = root2;
      Listener = null;
      try {
        return runUpdates(updateFn, true);
      } finally {
        Listener = listener;
        Owner = owner;
      }
    }
    function createSignal(value, options) {
      options = options ? Object.assign({}, signalOptions, options) : signalOptions;
      const s2 = {
        value,
        observers: null,
        observerSlots: null,
        comparator: options.equals || void 0
      };
      const setter = (value2) => {
        if (typeof value2 === "function") {
          value2 = value2(s2.value);
        }
        return writeSignal(s2, value2);
      };
      return [readSignal.bind(s2), setter];
    }
    function createRenderEffect(fn2, value, options) {
      const c2 = createComputation(fn2, value, false, STALE);
      updateComputation(c2);
    }
    function createEffect(fn2, value, options) {
      runEffects = runUserEffects;
      const c2 = createComputation(fn2, value, false, STALE);
      c2.user = true;
      Effects ? Effects.push(c2) : updateComputation(c2);
    }
    function createMemo(fn2, value, options) {
      options = options ? Object.assign({}, signalOptions, options) : signalOptions;
      const c2 = createComputation(fn2, value, true, 0);
      c2.observers = null;
      c2.observerSlots = null;
      c2.comparator = options.equals || void 0;
      updateComputation(c2);
      return readSignal.bind(c2);
    }
    function batch(fn2) {
      return runUpdates(fn2, false);
    }
    function untrack(fn2) {
      if (Listener === null) return fn2();
      const listener = Listener;
      Listener = null;
      try {
        return fn2();
      } finally {
        Listener = listener;
      }
    }
    function onMount(fn2) {
      createEffect(() => untrack(fn2));
    }
    function onCleanup(fn2) {
      if (Owner === null) ;
      else if (Owner.cleanups === null) Owner.cleanups = [fn2];
      else Owner.cleanups.push(fn2);
      return fn2;
    }
    function getListener() {
      return Listener;
    }
    function children(fn2) {
      const children2 = createMemo(fn2);
      const memo = createMemo(() => resolveChildren(children2()));
      memo.toArray = () => {
        const c2 = memo();
        return Array.isArray(c2) ? c2 : c2 != null ? [c2] : [];
      };
      return memo;
    }
    function readSignal() {
      const runningTransition = Transition;
      if (this.sources && (this.state || runningTransition)) {
        if (this.state === STALE || runningTransition) updateComputation(this);
        else {
          const updates = Updates;
          Updates = null;
          runUpdates(() => lookUpstream(this), false);
          Updates = updates;
        }
      }
      if (Listener) {
        const sSlot = this.observers ? this.observers.length : 0;
        if (!Listener.sources) {
          Listener.sources = [this];
          Listener.sourceSlots = [sSlot];
        } else {
          Listener.sources.push(this);
          Listener.sourceSlots.push(sSlot);
        }
        if (!this.observers) {
          this.observers = [Listener];
          this.observerSlots = [Listener.sources.length - 1];
        } else {
          this.observers.push(Listener);
          this.observerSlots.push(Listener.sources.length - 1);
        }
      }
      return this.value;
    }
    function writeSignal(node, value, isComp) {
      let current = node.value;
      if (!node.comparator || !node.comparator(current, value)) {
        node.value = value;
        if (node.observers && node.observers.length) {
          runUpdates(() => {
            for (let i2 = 0; i2 < node.observers.length; i2 += 1) {
              const o2 = node.observers[i2];
              const TransitionRunning = Transition && Transition.running;
              if (TransitionRunning && Transition.disposed.has(o2)) ;
              if (TransitionRunning && !o2.tState || !TransitionRunning && !o2.state) {
                if (o2.pure) Updates.push(o2);
                else Effects.push(o2);
                if (o2.observers) markDownstream(o2);
              }
              if (TransitionRunning) ;
              else o2.state = STALE;
            }
            if (Updates.length > 1e6) {
              Updates = [];
              if (false) ;
              throw new Error();
            }
          }, false);
        }
      }
      return value;
    }
    function updateComputation(node) {
      if (!node.fn) return;
      cleanNode(node);
      const owner = Owner, listener = Listener, time = ExecCount;
      Listener = Owner = node;
      runComputation(node, node.value, time);
      Listener = listener;
      Owner = owner;
    }
    function runComputation(node, value, time) {
      let nextValue;
      try {
        nextValue = node.fn(value);
      } catch (err2) {
        if (node.pure) {
          {
            node.state = STALE;
            node.owned && node.owned.forEach(cleanNode);
            node.owned = null;
          }
        }
        handleError(err2);
      }
      if (!node.updatedAt || node.updatedAt <= time) {
        if (node.updatedAt != null && "observers" in node) {
          writeSignal(node, nextValue);
        } else node.value = nextValue;
        node.updatedAt = time;
      }
    }
    function createComputation(fn2, init, pure, state = STALE, options) {
      const c2 = {
        fn: fn2,
        state,
        updatedAt: null,
        owned: null,
        sources: null,
        sourceSlots: null,
        cleanups: null,
        value: init,
        owner: Owner,
        context: null,
        pure
      };
      if (Owner === null) ;
      else if (Owner !== UNOWNED) {
        {
          if (!Owner.owned) Owner.owned = [c2];
          else Owner.owned.push(c2);
        }
      }
      return c2;
    }
    function runTop(node) {
      const runningTransition = Transition;
      if (node.state === 0 || runningTransition) return;
      if (node.state === PENDING || runningTransition) return lookUpstream(node);
      if (node.suspense && untrack(node.suspense.inFallback)) return node.suspense.effects.push(node);
      const ancestors = [node];
      while ((node = node.owner) && (!node.updatedAt || node.updatedAt < ExecCount)) {
        if (node.state || runningTransition) ancestors.push(node);
      }
      for (let i2 = ancestors.length - 1; i2 >= 0; i2--) {
        node = ancestors[i2];
        if (node.state === STALE || runningTransition) {
          updateComputation(node);
        } else if (node.state === PENDING || runningTransition) {
          const updates = Updates;
          Updates = null;
          runUpdates(() => lookUpstream(node, ancestors[0]), false);
          Updates = updates;
        }
      }
    }
    function runUpdates(fn2, init) {
      if (Updates) return fn2();
      let wait = false;
      if (!init) Updates = [];
      if (Effects) wait = true;
      else Effects = [];
      ExecCount++;
      try {
        const res = fn2();
        completeUpdates(wait);
        return res;
      } catch (err2) {
        if (!wait) Effects = null;
        Updates = null;
        handleError(err2);
      }
    }
    function completeUpdates(wait) {
      if (Updates) {
        runQueue(Updates);
        Updates = null;
      }
      if (wait) return;
      const e2 = Effects;
      Effects = null;
      if (e2.length) runUpdates(() => runEffects(e2), false);
    }
    function runQueue(queue) {
      for (let i2 = 0; i2 < queue.length; i2++) runTop(queue[i2]);
    }
    function runUserEffects(queue) {
      let i2, userLength = 0;
      for (i2 = 0; i2 < queue.length; i2++) {
        const e2 = queue[i2];
        if (!e2.user) runTop(e2);
        else queue[userLength++] = e2;
      }
      if (sharedConfig.context) setHydrateContext();
      for (i2 = 0; i2 < userLength; i2++) runTop(queue[i2]);
    }
    function lookUpstream(node, ignore) {
      const runningTransition = Transition;
      node.state = 0;
      for (let i2 = 0; i2 < node.sources.length; i2 += 1) {
        const source2 = node.sources[i2];
        if (source2.sources) {
          if (source2.state === STALE || runningTransition) {
            if (source2 !== ignore) runTop(source2);
          } else if (source2.state === PENDING || runningTransition) lookUpstream(source2, ignore);
        }
      }
    }
    function markDownstream(node) {
      const runningTransition = Transition;
      for (let i2 = 0; i2 < node.observers.length; i2 += 1) {
        const o2 = node.observers[i2];
        if (!o2.state || runningTransition) {
          o2.state = PENDING;
          if (o2.pure) Updates.push(o2);
          else Effects.push(o2);
          o2.observers && markDownstream(o2);
        }
      }
    }
    function cleanNode(node) {
      let i2;
      if (node.sources) {
        while (node.sources.length) {
          const source2 = node.sources.pop(), index = node.sourceSlots.pop(), obs = source2.observers;
          if (obs && obs.length) {
            const n2 = obs.pop(), s2 = source2.observerSlots.pop();
            if (index < obs.length) {
              n2.sourceSlots[s2] = index;
              obs[index] = n2;
              source2.observerSlots[index] = s2;
            }
          }
        }
      }
      if (node.owned) {
        for (i2 = 0; i2 < node.owned.length; i2++) cleanNode(node.owned[i2]);
        node.owned = null;
      }
      if (node.cleanups) {
        for (i2 = 0; i2 < node.cleanups.length; i2++) node.cleanups[i2]();
        node.cleanups = null;
      }
      node.state = 0;
      node.context = null;
    }
    function castError(err2) {
      if (err2 instanceof Error || typeof err2 === "string") return err2;
      return new Error("Unknown error");
    }
    function handleError(err2) {
      err2 = castError(err2);
      throw err2;
    }
    function resolveChildren(children2) {
      if (typeof children2 === "function" && !children2.length) return resolveChildren(children2());
      if (Array.isArray(children2)) {
        const results = [];
        for (let i2 = 0; i2 < children2.length; i2++) {
          const result = resolveChildren(children2[i2]);
          Array.isArray(result) ? results.push.apply(results, result) : results.push(result);
        }
        return results;
      }
      return children2;
    }
    const FALLBACK = Symbol("fallback");
    function dispose(d2) {
      for (let i2 = 0; i2 < d2.length; i2++) d2[i2]();
    }
    function mapArray(list2, mapFn, options = {}) {
      let items = [], mapped = [], disposers = [], len = 0, indexes = mapFn.length > 1 ? [] : null;
      onCleanup(() => dispose(disposers));
      return () => {
        let newItems = list2() || [], i2, j2;
        newItems[$TRACK];
        return untrack(() => {
          let newLen = newItems.length, newIndices, newIndicesNext, temp, tempdisposers, tempIndexes, start2, end2, newEnd, item;
          if (newLen === 0) {
            if (len !== 0) {
              dispose(disposers);
              disposers = [];
              items = [];
              mapped = [];
              len = 0;
              indexes && (indexes = []);
            }
            if (options.fallback) {
              items = [FALLBACK];
              mapped[0] = createRoot((disposer) => {
                disposers[0] = disposer;
                return options.fallback();
              });
              len = 1;
            }
          } else if (len === 0) {
            mapped = new Array(newLen);
            for (j2 = 0; j2 < newLen; j2++) {
              items[j2] = newItems[j2];
              mapped[j2] = createRoot(mapper);
            }
            len = newLen;
          } else {
            temp = new Array(newLen);
            tempdisposers = new Array(newLen);
            indexes && (tempIndexes = new Array(newLen));
            for (start2 = 0, end2 = Math.min(len, newLen); start2 < end2 && items[start2] === newItems[start2]; start2++) ;
            for (end2 = len - 1, newEnd = newLen - 1; end2 >= start2 && newEnd >= start2 && items[end2] === newItems[newEnd]; end2--, newEnd--) {
              temp[newEnd] = mapped[end2];
              tempdisposers[newEnd] = disposers[end2];
              indexes && (tempIndexes[newEnd] = indexes[end2]);
            }
            newIndices = /* @__PURE__ */ new Map();
            newIndicesNext = new Array(newEnd + 1);
            for (j2 = newEnd; j2 >= start2; j2--) {
              item = newItems[j2];
              i2 = newIndices.get(item);
              newIndicesNext[j2] = i2 === void 0 ? -1 : i2;
              newIndices.set(item, j2);
            }
            for (i2 = start2; i2 <= end2; i2++) {
              item = items[i2];
              j2 = newIndices.get(item);
              if (j2 !== void 0 && j2 !== -1) {
                temp[j2] = mapped[i2];
                tempdisposers[j2] = disposers[i2];
                indexes && (tempIndexes[j2] = indexes[i2]);
                j2 = newIndicesNext[j2];
                newIndices.set(item, j2);
              } else disposers[i2]();
            }
            for (j2 = start2; j2 < newLen; j2++) {
              if (j2 in temp) {
                mapped[j2] = temp[j2];
                disposers[j2] = tempdisposers[j2];
                if (indexes) {
                  indexes[j2] = tempIndexes[j2];
                  indexes[j2](j2);
                }
              } else mapped[j2] = createRoot(mapper);
            }
            mapped = mapped.slice(0, len = newLen);
            items = newItems.slice(0);
          }
          return mapped;
        });
        function mapper(disposer) {
          disposers[j2] = disposer;
          if (indexes) {
            const [s2, set] = createSignal(j2);
            indexes[j2] = set;
            return mapFn(newItems[j2], s2);
          }
          return mapFn(newItems[j2]);
        }
      };
    }
    function indexArray(list2, mapFn, options = {}) {
      let items = [], mapped = [], disposers = [], signals = [], len = 0, i2;
      onCleanup(() => dispose(disposers));
      return () => {
        const newItems = list2() || [];
        newItems[$TRACK];
        return untrack(() => {
          if (newItems.length === 0) {
            if (len !== 0) {
              dispose(disposers);
              disposers = [];
              items = [];
              mapped = [];
              len = 0;
              signals = [];
            }
            if (options.fallback) {
              items = [FALLBACK];
              mapped[0] = createRoot((disposer) => {
                disposers[0] = disposer;
                return options.fallback();
              });
              len = 1;
            }
            return mapped;
          }
          if (items[0] === FALLBACK) {
            disposers[0]();
            disposers = [];
            items = [];
            mapped = [];
            len = 0;
          }
          for (i2 = 0; i2 < newItems.length; i2++) {
            if (i2 < items.length && items[i2] !== newItems[i2]) {
              signals[i2](() => newItems[i2]);
            } else if (i2 >= items.length) {
              mapped[i2] = createRoot(mapper);
            }
          }
          for (; i2 < items.length; i2++) {
            disposers[i2]();
          }
          len = signals.length = disposers.length = newItems.length;
          items = newItems.slice(0);
          return mapped = mapped.slice(0, len);
        });
        function mapper(disposer) {
          disposers[i2] = disposer;
          const [s2, set] = createSignal(newItems[i2]);
          signals[i2] = set;
          return mapFn(s2, i2);
        }
      };
    }
    function createComponent(Comp, props) {
      return untrack(() => Comp(props || {}));
    }
    function trueFn() {
      return true;
    }
    const propTraps = {
      get(_2, property, receiver) {
        if (property === $PROXY) return receiver;
        return _2.get(property);
      },
      has(_2, property) {
        if (property === $PROXY) return true;
        return _2.has(property);
      },
      set: trueFn,
      deleteProperty: trueFn,
      getOwnPropertyDescriptor(_2, property) {
        return {
          configurable: true,
          enumerable: true,
          get() {
            return _2.get(property);
          },
          set: trueFn,
          deleteProperty: trueFn
        };
      },
      ownKeys(_2) {
        return _2.keys();
      }
    };
    function resolveSource(s2) {
      return !(s2 = typeof s2 === "function" ? s2() : s2) ? {} : s2;
    }
    function mergeProps(...sources) {
      let proxy = false;
      for (let i2 = 0; i2 < sources.length; i2++) {
        const s2 = sources[i2];
        proxy = proxy || !!s2 && $PROXY in s2;
        sources[i2] = typeof s2 === "function" ? (proxy = true, createMemo(s2)) : s2;
      }
      if (proxy) {
        return new Proxy({
          get(property) {
            for (let i2 = sources.length - 1; i2 >= 0; i2--) {
              const v2 = resolveSource(sources[i2])[property];
              if (v2 !== void 0) return v2;
            }
          },
          has(property) {
            for (let i2 = sources.length - 1; i2 >= 0; i2--) {
              if (property in resolveSource(sources[i2])) return true;
            }
            return false;
          },
          keys() {
            const keys = [];
            for (let i2 = 0; i2 < sources.length; i2++) keys.push(...Object.keys(resolveSource(sources[i2])));
            return [...new Set(keys)];
          }
        }, propTraps);
      }
      const target = {};
      for (let i2 = sources.length - 1; i2 >= 0; i2--) {
        if (sources[i2]) {
          const descriptors = Object.getOwnPropertyDescriptors(sources[i2]);
          for (const key2 in descriptors) {
            if (key2 in target) continue;
            Object.defineProperty(target, key2, {
              enumerable: true,
              get() {
                for (let i3 = sources.length - 1; i3 >= 0; i3--) {
                  const v2 = (sources[i3] || {})[key2];
                  if (v2 !== void 0) return v2;
                }
              }
            });
          }
        }
      }
      return target;
    }
    function For(props) {
      const fallback = "fallback" in props && {
        fallback: () => props.fallback
      };
      return createMemo(mapArray(() => props.each, props.children, fallback || void 0));
    }
    function Index(props) {
      const fallback = "fallback" in props && {
        fallback: () => props.fallback
      };
      return createMemo(indexArray(() => props.each, props.children, fallback || void 0));
    }
    function Show(props) {
      let strictEqual = false;
      const keyed = props.keyed;
      const condition = createMemo(() => props.when, void 0, {
        equals: (a2, b) => strictEqual ? a2 === b : !a2 === !b
      });
      return createMemo(() => {
        const c2 = condition();
        if (c2) {
          const child = props.children;
          const fn2 = typeof child === "function" && child.length > 0;
          strictEqual = keyed || fn2;
          return fn2 ? untrack(() => child(c2)) : child;
        }
        return props.fallback;
      }, void 0, void 0);
    }
    function Switch(props) {
      let strictEqual = false;
      let keyed = false;
      const equals = (a2, b) => a2[0] === b[0] && (strictEqual ? a2[1] === b[1] : !a2[1] === !b[1]) && a2[2] === b[2];
      const conditions = children(() => props.children), evalConditions = createMemo(() => {
        let conds = conditions();
        if (!Array.isArray(conds)) conds = [conds];
        for (let i2 = 0; i2 < conds.length; i2++) {
          const c2 = conds[i2].when;
          if (c2) {
            keyed = !!conds[i2].keyed;
            return [i2, c2, conds[i2]];
          }
        }
        return [-1];
      }, void 0, {
        equals
      });
      return createMemo(() => {
        const [index, when, cond] = evalConditions();
        if (index < 0) return props.fallback;
        const c2 = cond.children;
        const fn2 = typeof c2 === "function" && c2.length > 0;
        strictEqual = keyed || fn2;
        return fn2 ? untrack(() => c2(when)) : c2;
      }, void 0, void 0);
    }
    function Match(props) {
      return props;
    }
    function reconcileArrays(parentNode, a2, b) {
      let bLength = b.length, aEnd = a2.length, bEnd = bLength, aStart = 0, bStart = 0, after = a2[aEnd - 1].nextSibling, map2 = null;
      while (aStart < aEnd || bStart < bEnd) {
        if (a2[aStart] === b[bStart]) {
          aStart++;
          bStart++;
          continue;
        }
        while (a2[aEnd - 1] === b[bEnd - 1]) {
          aEnd--;
          bEnd--;
        }
        if (aEnd === aStart) {
          const node = bEnd < bLength ? bStart ? b[bStart - 1].nextSibling : b[bEnd - bStart] : after;
          while (bStart < bEnd) parentNode.insertBefore(b[bStart++], node);
        } else if (bEnd === bStart) {
          while (aStart < aEnd) {
            if (!map2 || !map2.has(a2[aStart])) a2[aStart].remove();
            aStart++;
          }
        } else if (a2[aStart] === b[bEnd - 1] && b[bStart] === a2[aEnd - 1]) {
          const node = a2[--aEnd].nextSibling;
          parentNode.insertBefore(b[bStart++], a2[aStart++].nextSibling);
          parentNode.insertBefore(b[--bEnd], node);
          a2[aEnd] = b[bEnd];
        } else {
          if (!map2) {
            map2 = /* @__PURE__ */ new Map();
            let i2 = bStart;
            while (i2 < bEnd) map2.set(b[i2], i2++);
          }
          const index = map2.get(a2[aStart]);
          if (index != null) {
            if (bStart < index && index < bEnd) {
              let i2 = aStart, sequence = 1, t2;
              while (++i2 < aEnd && i2 < bEnd) {
                if ((t2 = map2.get(a2[i2])) == null || t2 !== index + sequence) break;
                sequence++;
              }
              if (sequence > index - bStart) {
                const node = a2[aStart];
                while (bStart < index) parentNode.insertBefore(b[bStart++], node);
              } else parentNode.replaceChild(b[bStart++], a2[aStart++]);
            } else aStart++;
          } else a2[aStart++].remove();
        }
      }
    }
    const $$EVENTS = "_$DX_DELEGATE";
    function render(code2, element, init, options = {}) {
      let disposer;
      createRoot((dispose2) => {
        disposer = dispose2;
        element === document ? code2() : insert$1(element, code2(), element.firstChild ? null : void 0, init);
      }, options.owner);
      return () => {
        disposer();
        element.textContent = "";
      };
    }
    function template(html, check, isSVG) {
      const t2 = document.createElement("template");
      t2.innerHTML = html;
      let node = t2.content.firstChild;
      return node;
    }
    function delegateEvents(eventNames, document2 = window.document) {
      const e2 = document2[$$EVENTS] || (document2[$$EVENTS] = /* @__PURE__ */ new Set());
      for (let i2 = 0, l2 = eventNames.length; i2 < l2; i2++) {
        const name2 = eventNames[i2];
        if (!e2.has(name2)) {
          e2.add(name2);
          document2.addEventListener(name2, eventHandler);
        }
      }
    }
    function setAttribute(node, name2, value) {
      node.removeAttribute(name2);
    }
    function className(node, value) {
      if (value == null) node.removeAttribute("class");
      else node.className = value;
    }
    function addEventListener(node, name2, handler, delegate) {
      {
        if (Array.isArray(handler)) {
          node[`$$${name2}`] = handler[0];
          node[`$$${name2}Data`] = handler[1];
        } else node[`$$${name2}`] = handler;
      }
    }
    function style(node, value, prev) {
      if (!value) return prev ? setAttribute(node, "style") : value;
      const nodeStyle = node.style;
      if (typeof value === "string") return nodeStyle.cssText = value;
      typeof prev === "string" && (nodeStyle.cssText = prev = void 0);
      prev || (prev = {});
      value || (value = {});
      let v2, s2;
      for (s2 in prev) {
        value[s2] == null && nodeStyle.removeProperty(s2);
        delete prev[s2];
      }
      for (s2 in value) {
        v2 = value[s2];
        if (v2 !== prev[s2]) {
          nodeStyle.setProperty(s2, v2);
          prev[s2] = v2;
        }
      }
      return prev;
    }
    function use(fn2, element, arg) {
      return untrack(() => fn2(element, arg));
    }
    function insert$1(parent, accessor, marker, initial) {
      if (marker !== void 0 && !initial) initial = [];
      if (typeof accessor !== "function") return insertExpression(parent, accessor, initial, marker);
      createRenderEffect((current) => insertExpression(parent, accessor(), current, marker), initial);
    }
    function eventHandler(e2) {
      const key2 = `$$${e2.type}`;
      let node = e2.composedPath && e2.composedPath()[0] || e2.target;
      if (e2.target !== node) {
        Object.defineProperty(e2, "target", {
          configurable: true,
          value: node
        });
      }
      Object.defineProperty(e2, "currentTarget", {
        configurable: true,
        get() {
          return node || document;
        }
      });
      if (sharedConfig.registry && !sharedConfig.done) {
        sharedConfig.done = true;
        document.querySelectorAll("[id^=pl-]").forEach((elem) => {
          while (elem && elem.nodeType !== 8 && elem.nodeValue !== "pl-" + e2) {
            let x2 = elem.nextSibling;
            elem.remove();
            elem = x2;
          }
          elem && elem.remove();
        });
      }
      while (node) {
        const handler = node[key2];
        if (handler && !node.disabled) {
          const data = node[`${key2}Data`];
          data !== void 0 ? handler.call(node, data, e2) : handler.call(node, e2);
          if (e2.cancelBubble) return;
        }
        node = node._$host || node.parentNode || node.host;
      }
    }
    function insertExpression(parent, value, current, marker, unwrapArray) {
      if (sharedConfig.context && !current) current = [...parent.childNodes];
      while (typeof current === "function") current = current();
      if (value === current) return current;
      const t2 = typeof value, multi = marker !== void 0;
      parent = multi && current[0] && current[0].parentNode || parent;
      if (t2 === "string" || t2 === "number") {
        if (sharedConfig.context) return current;
        if (t2 === "number") value = value.toString();
        if (multi) {
          let node = current[0];
          if (node && node.nodeType === 3) {
            node.data = value;
          } else node = document.createTextNode(value);
          current = cleanChildren(parent, current, marker, node);
        } else {
          if (current !== "" && typeof current === "string") {
            current = parent.firstChild.data = value;
          } else current = parent.textContent = value;
        }
      } else if (value == null || t2 === "boolean") {
        if (sharedConfig.context) return current;
        current = cleanChildren(parent, current, marker);
      } else if (t2 === "function") {
        createRenderEffect(() => {
          let v2 = value();
          while (typeof v2 === "function") v2 = v2();
          current = insertExpression(parent, v2, current, marker);
        });
        return () => current;
      } else if (Array.isArray(value)) {
        const array = [];
        const currentArray = current && Array.isArray(current);
        if (normalizeIncomingArray(array, value, current, unwrapArray)) {
          createRenderEffect(() => current = insertExpression(parent, array, current, marker, true));
          return () => current;
        }
        if (sharedConfig.context) {
          if (!array.length) return current;
          for (let i2 = 0; i2 < array.length; i2++) {
            if (array[i2].parentNode) return current = array;
          }
        }
        if (array.length === 0) {
          current = cleanChildren(parent, current, marker);
          if (multi) return current;
        } else if (currentArray) {
          if (current.length === 0) {
            appendNodes(parent, array, marker);
          } else reconcileArrays(parent, current, array);
        } else {
          current && cleanChildren(parent);
          appendNodes(parent, array);
        }
        current = array;
      } else if (value instanceof Node) {
        if (sharedConfig.context && value.parentNode) return current = multi ? [value] : value;
        if (Array.isArray(current)) {
          if (multi) return current = cleanChildren(parent, current, marker, value);
          cleanChildren(parent, current, null, value);
        } else if (current == null || current === "" || !parent.firstChild) {
          parent.appendChild(value);
        } else parent.replaceChild(value, parent.firstChild);
        current = value;
      } else ;
      return current;
    }
    function normalizeIncomingArray(normalized, array, current, unwrap2) {
      let dynamic = false;
      for (let i2 = 0, len = array.length; i2 < len; i2++) {
        let item = array[i2], prev = current && current[i2];
        if (item instanceof Node) {
          normalized.push(item);
        } else if (item == null || item === true || item === false) ;
        else if (Array.isArray(item)) {
          dynamic = normalizeIncomingArray(normalized, item, prev) || dynamic;
        } else if (typeof item === "function") {
          if (unwrap2) {
            while (typeof item === "function") item = item();
            dynamic = normalizeIncomingArray(normalized, Array.isArray(item) ? item : [item], Array.isArray(prev) ? prev : [prev]) || dynamic;
          } else {
            normalized.push(item);
            dynamic = true;
          }
        } else {
          const value = String(item);
          if (prev && prev.nodeType === 3 && prev.data === value) {
            normalized.push(prev);
          } else normalized.push(document.createTextNode(value));
        }
      }
      return dynamic;
    }
    function appendNodes(parent, array, marker = null) {
      for (let i2 = 0, len = array.length; i2 < len; i2++) parent.insertBefore(array[i2], marker);
    }
    function cleanChildren(parent, current, marker, replacement) {
      if (marker === void 0) return parent.textContent = "";
      const node = replacement || document.createTextNode("");
      if (current.length) {
        let inserted = false;
        for (let i2 = current.length - 1; i2 >= 0; i2--) {
          const el = current[i2];
          if (node !== el) {
            const isParent2 = el.parentNode === parent;
            if (!inserted && !i2) isParent2 ? parent.replaceChild(node, el) : parent.insertBefore(node, marker);
            else isParent2 && el.remove();
          } else inserted = true;
        }
      } else parent.insertBefore(node, marker);
      return [node];
    }
    let wasm;
    const heap = new Array(128).fill(void 0);
    heap.push(void 0, null, true, false);
    function getObject(idx) {
      return heap[idx];
    }
    let heap_next = heap.length;
    function dropObject(idx) {
      if (idx < 132) return;
      heap[idx] = heap_next;
      heap_next = idx;
    }
    function takeObject(idx) {
      const ret = getObject(idx);
      dropObject(idx);
      return ret;
    }
    const cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", {
      ignoreBOM: true,
      fatal: true
    }) : {
      decode: () => {
        throw Error("TextDecoder not available");
      }
    };
    if (typeof TextDecoder !== "undefined") {
      cachedTextDecoder.decode();
    }
    let cachedUint8Memory0 = null;
    function getUint8Memory0() {
      if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
      }
      return cachedUint8Memory0;
    }
    function getStringFromWasm0(ptr, len) {
      ptr = ptr >>> 0;
      return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
    }
    function addHeapObject(obj) {
      if (heap_next === heap.length) heap.push(heap.length + 1);
      const idx = heap_next;
      heap_next = heap[idx];
      heap[idx] = obj;
      return idx;
    }
    function debugString(val) {
      const type = typeof val;
      if (type == "number" || type == "boolean" || val == null) {
        return `${val}`;
      }
      if (type == "string") {
        return `"${val}"`;
      }
      if (type == "symbol") {
        const description = val.description;
        if (description == null) {
          return "Symbol";
        } else {
          return `Symbol(${description})`;
        }
      }
      if (type == "function") {
        const name2 = val.name;
        if (typeof name2 == "string" && name2.length > 0) {
          return `Function(${name2})`;
        } else {
          return "Function";
        }
      }
      if (Array.isArray(val)) {
        const length = val.length;
        let debug = "[";
        if (length > 0) {
          debug += debugString(val[0]);
        }
        for (let i2 = 1; i2 < length; i2++) {
          debug += ", " + debugString(val[i2]);
        }
        debug += "]";
        return debug;
      }
      const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
      let className2;
      if (builtInMatches.length > 1) {
        className2 = builtInMatches[1];
      } else {
        return toString.call(val);
      }
      if (className2 == "Object") {
        try {
          return "Object(" + JSON.stringify(val) + ")";
        } catch (_2) {
          return "Object";
        }
      }
      if (val instanceof Error) {
        return `${val.name}: ${val.message}
${val.stack}`;
      }
      return className2;
    }
    let WASM_VECTOR_LEN = 0;
    const cachedTextEncoder = typeof TextEncoder !== "undefined" ? new TextEncoder("utf-8") : {
      encode: () => {
        throw Error("TextEncoder not available");
      }
    };
    const encodeString = typeof cachedTextEncoder.encodeInto === "function" ? function(arg, view) {
      return cachedTextEncoder.encodeInto(arg, view);
    } : function(arg, view) {
      const buf = cachedTextEncoder.encode(arg);
      view.set(buf);
      return {
        read: arg.length,
        written: buf.length
      };
    };
    function passStringToWasm0(arg, malloc, realloc) {
      if (realloc === void 0) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr2 = malloc(buf.length, 1) >>> 0;
        getUint8Memory0().subarray(ptr2, ptr2 + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr2;
      }
      let len = arg.length;
      let ptr = malloc(len, 1) >>> 0;
      const mem = getUint8Memory0();
      let offset2 = 0;
      for (; offset2 < len; offset2++) {
        const code2 = arg.charCodeAt(offset2);
        if (code2 > 127) break;
        mem[ptr + offset2] = code2;
      }
      if (offset2 !== len) {
        if (offset2 !== 0) {
          arg = arg.slice(offset2);
        }
        ptr = realloc(ptr, len, len = offset2 + arg.length * 3, 1) >>> 0;
        const view = getUint8Memory0().subarray(ptr + offset2, ptr + len);
        const ret = encodeString(arg, view);
        offset2 += ret.written;
        ptr = realloc(ptr, len, offset2, 1) >>> 0;
      }
      WASM_VECTOR_LEN = offset2;
      return ptr;
    }
    let cachedInt32Memory0 = null;
    function getInt32Memory0() {
      if (cachedInt32Memory0 === null || cachedInt32Memory0.byteLength === 0) {
        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);
      }
      return cachedInt32Memory0;
    }
    function create$1(cols, rows, resizable, scrollback_limit) {
      const ret = wasm.create(cols, rows, resizable, scrollback_limit);
      return VtWrapper.__wrap(ret);
    }
    let cachedUint32Memory0 = null;
    function getUint32Memory0() {
      if (cachedUint32Memory0 === null || cachedUint32Memory0.byteLength === 0) {
        cachedUint32Memory0 = new Uint32Array(wasm.memory.buffer);
      }
      return cachedUint32Memory0;
    }
    function getArrayU32FromWasm0(ptr, len) {
      ptr = ptr >>> 0;
      return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);
    }
    const VtWrapperFinalization = typeof FinalizationRegistry === "undefined" ? {
      register: () => {
      },
      unregister: () => {
      }
    } : new FinalizationRegistry((ptr) => wasm.__wbg_vtwrapper_free(ptr >>> 0));
    class VtWrapper {
      static __wrap(ptr) {
        ptr = ptr >>> 0;
        const obj = Object.create(VtWrapper.prototype);
        obj.__wbg_ptr = ptr;
        VtWrapperFinalization.register(obj, obj.__wbg_ptr, obj);
        return obj;
      }
      __destroy_into_raw() {
        const ptr = this.__wbg_ptr;
        this.__wbg_ptr = 0;
        VtWrapperFinalization.unregister(this);
        return ptr;
      }
      free() {
        const ptr = this.__destroy_into_raw();
        wasm.__wbg_vtwrapper_free(ptr);
      }
      /**
      * @param {string} s
      * @returns {any}
      */
      feed(s2) {
        const ptr0 = passStringToWasm0(s2, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len0 = WASM_VECTOR_LEN;
        const ret = wasm.vtwrapper_feed(this.__wbg_ptr, ptr0, len0);
        return takeObject(ret);
      }
      /**
      * @returns {string}
      */
      inspect() {
        let deferred1_0;
        let deferred1_1;
        try {
          const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
          wasm.vtwrapper_inspect(retptr, this.__wbg_ptr);
          var r0 = getInt32Memory0()[retptr / 4 + 0];
          var r1 = getInt32Memory0()[retptr / 4 + 1];
          deferred1_0 = r0;
          deferred1_1 = r1;
          return getStringFromWasm0(r0, r1);
        } finally {
          wasm.__wbindgen_add_to_stack_pointer(16);
          wasm.__wbindgen_free(deferred1_0, deferred1_1, 1);
        }
      }
      /**
      * @returns {Uint32Array}
      */
      get_size() {
        try {
          const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
          wasm.vtwrapper_get_size(retptr, this.__wbg_ptr);
          var r0 = getInt32Memory0()[retptr / 4 + 0];
          var r1 = getInt32Memory0()[retptr / 4 + 1];
          var v1 = getArrayU32FromWasm0(r0, r1).slice();
          wasm.__wbindgen_free(r0, r1 * 4, 4);
          return v1;
        } finally {
          wasm.__wbindgen_add_to_stack_pointer(16);
        }
      }
      /**
      * @param {number} l
      * @returns {any}
      */
      get_line(l2) {
        const ret = wasm.vtwrapper_get_line(this.__wbg_ptr, l2);
        return takeObject(ret);
      }
      /**
      * @returns {any}
      */
      get_cursor() {
        const ret = wasm.vtwrapper_get_cursor(this.__wbg_ptr);
        return takeObject(ret);
      }
    }
    async function __wbg_load(module2, imports) {
      if (typeof Response === "function" && module2 instanceof Response) {
        if (typeof WebAssembly.instantiateStreaming === "function") {
          try {
            return await WebAssembly.instantiateStreaming(module2, imports);
          } catch (e2) {
            if (module2.headers.get("Content-Type") != "application/wasm") {
              console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e2);
            } else {
              throw e2;
            }
          }
        }
        const bytes = await module2.arrayBuffer();
        return await WebAssembly.instantiate(bytes, imports);
      } else {
        const instance = await WebAssembly.instantiate(module2, imports);
        if (instance instanceof WebAssembly.Instance) {
          return {
            instance,
            module: module2
          };
        } else {
          return instance;
        }
      }
    }
    function __wbg_get_imports() {
      const imports = {};
      imports.wbg = {};
      imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
        takeObject(arg0);
      };
      imports.wbg.__wbindgen_error_new = function(arg0, arg1) {
        const ret = new Error(getStringFromWasm0(arg0, arg1));
        return addHeapObject(ret);
      };
      imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
        const ret = getObject(arg0);
        return addHeapObject(ret);
      };
      imports.wbg.__wbindgen_number_new = function(arg0) {
        const ret = arg0;
        return addHeapObject(ret);
      };
      imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {
        const ret = BigInt.asUintN(64, arg0);
        return addHeapObject(ret);
      };
      imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
        const ret = getStringFromWasm0(arg0, arg1);
        return addHeapObject(ret);
      };
      imports.wbg.__wbg_set_f975102236d3c502 = function(arg0, arg1, arg2) {
        getObject(arg0)[takeObject(arg1)] = takeObject(arg2);
      };
      imports.wbg.__wbg_new_b525de17f44a8943 = function() {
        const ret = new Array();
        return addHeapObject(ret);
      };
      imports.wbg.__wbg_new_f841cc6f2098f4b5 = function() {
        const ret = /* @__PURE__ */ new Map();
        return addHeapObject(ret);
      };
      imports.wbg.__wbg_new_f9876326328f45ed = function() {
        const ret = new Object();
        return addHeapObject(ret);
      };
      imports.wbg.__wbindgen_is_string = function(arg0) {
        const ret = typeof getObject(arg0) === "string";
        return ret;
      };
      imports.wbg.__wbg_set_17224bc548dd1d7b = function(arg0, arg1, arg2) {
        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);
      };
      imports.wbg.__wbg_set_388c4c6422704173 = function(arg0, arg1, arg2) {
        const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));
        return addHeapObject(ret);
      };
      imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {
        const ret = debugString(getObject(arg1));
        const ptr1 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        const len1 = WASM_VECTOR_LEN;
        getInt32Memory0()[arg0 / 4 + 1] = len1;
        getInt32Memory0()[arg0 / 4 + 0] = ptr1;
      };
      imports.wbg.__wbindgen_throw = function(arg0, arg1) {
        throw new Error(getStringFromWasm0(arg0, arg1));
      };
      return imports;
    }
    function __wbg_finalize_init(instance, module2) {
      wasm = instance.exports;
      __wbg_init.__wbindgen_wasm_module = module2;
      cachedInt32Memory0 = null;
      cachedUint32Memory0 = null;
      cachedUint8Memory0 = null;
      return wasm;
    }
    function initSync(module2) {
      if (wasm !== void 0) return wasm;
      const imports = __wbg_get_imports();
      if (!(module2 instanceof WebAssembly.Module)) {
        module2 = new WebAssembly.Module(module2);
      }
      const instance = new WebAssembly.Instance(module2, imports);
      return __wbg_finalize_init(instance, module2);
    }
    async function __wbg_init(input) {
      if (wasm !== void 0) return wasm;
      const imports = __wbg_get_imports();
      if (typeof input === "string" || typeof Request === "function" && input instanceof Request || typeof URL === "function" && input instanceof URL) {
        input = fetch(input);
      }
      const {
        instance,
        module: module2
      } = await __wbg_load(await input, imports);
      return __wbg_finalize_init(instance, module2);
    }
    var exports = /* @__PURE__ */ Object.freeze({
      __proto__: null,
      VtWrapper,
      create: create$1,
      default: __wbg_init,
      initSync
    });
    const base64codes = [62, 0, 0, 0, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 0, 0, 0, 0, 0, 0, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51];
    function getBase64Code(charCode) {
      return base64codes[charCode - 43];
    }
    function base64_decode(str2) {
      let missingOctets = str2.endsWith("==") ? 2 : str2.endsWith("=") ? 1 : 0;
      let n2 = str2.length;
      let result = new Uint8Array(3 * (n2 / 4));
      let buffer2;
      for (let i2 = 0, j2 = 0; i2 < n2; i2 += 4, j2 += 3) {
        buffer2 = getBase64Code(str2.charCodeAt(i2)) << 18 | getBase64Code(str2.charCodeAt(i2 + 1)) << 12 | getBase64Code(str2.charCodeAt(i2 + 2)) << 6 | getBase64Code(str2.charCodeAt(i2 + 3));
        result[j2] = buffer2 >> 16;
        result[j2 + 1] = buffer2 >> 8 & 255;
        result[j2 + 2] = buffer2 & 255;
      }
      return result.subarray(0, result.length - missingOctets);
    }
    const wasm_code = base64_decode("");
    var loadVt = async () => {
      await __wbg_init(wasm_code);
      return exports;
    };
    function parseNpt(time) {
      if (typeof time === "number") {
        return time;
      } else if (typeof time === "string") {
        return time.split(":").reverse().map(parseFloat).reduce((sum, n2, i2) => sum + n2 * Math.pow(60, i2));
      } else {
        return void 0;
      }
    }
    function debounce(f2, delay) {
      let timeout;
      return function() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        clearTimeout(timeout);
        timeout = setTimeout(() => f2.apply(this, args), delay);
      };
    }
    function throttle(f2, interval) {
      let enableCall = true;
      return function() {
        if (!enableCall) return;
        enableCall = false;
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }
        f2.apply(this, args);
        setTimeout(() => enableCall = true, interval);
      };
    }
    class Clock {
      constructor() {
        let speed = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
        this.speed = speed;
        this.startTime = performance.now();
      }
      getTime() {
        return this.speed * (performance.now() - this.startTime) / 1e3;
      }
      setTime(time) {
        this.startTime = performance.now() - time / this.speed * 1e3;
      }
    }
    class NullClock {
      constructor() {
      }
      getTime(_speed) {
      }
      setTime(_time) {
      }
    }
    const vt = loadVt();
    class State {
      constructor(core) {
        this.core = core;
        this.driver = core.driver;
      }
      onEnter(data) {
      }
      init() {
      }
      play() {
      }
      pause() {
      }
      togglePlay() {
      }
      seek(where) {
        return false;
      }
      step() {
      }
      stop() {
        this.driver.stop();
      }
    }
    class UninitializedState extends State {
      async init() {
        try {
          await this.core.initializeDriver();
          return this.core.setState("idle");
        } catch (e2) {
          this.core.setState("errored");
          throw e2;
        }
      }
      async play() {
        this.core.dispatchEvent("play");
        const idleState = await this.init();
        await idleState.doPlay();
      }
      async togglePlay() {
        await this.play();
      }
      async seek(where) {
        const idleState = await this.init();
        return await idleState.seek(where);
      }
      async step() {
        const idleState = await this.init();
        await idleState.step();
      }
      stop() {
      }
    }
    class Idle extends State {
      onEnter(_ref) {
        let {
          reason,
          message
        } = _ref;
        this.core.dispatchEvent("idle", {
          message
        });
        if (reason === "paused") {
          this.core.dispatchEvent("pause");
        }
      }
      async play() {
        this.core.dispatchEvent("play");
        await this.doPlay();
      }
      async doPlay() {
        const stop = await this.driver.play();
        if (stop === true) {
          this.core.setState("playing");
        } else if (typeof stop === "function") {
          this.core.setState("playing");
          this.driver.stop = stop;
        }
      }
      async togglePlay() {
        await this.play();
      }
      seek(where) {
        return this.driver.seek(where);
      }
      step() {
        this.driver.step();
      }
    }
    class PlayingState extends State {
      onEnter() {
        this.core.dispatchEvent("playing");
      }
      pause() {
        if (this.driver.pause() === true) {
          this.core.setState("idle", {
            reason: "paused"
          });
        }
      }
      togglePlay() {
        this.pause();
      }
      seek(where) {
        return this.driver.seek(where);
      }
    }
    class LoadingState extends State {
      onEnter() {
        this.core.dispatchEvent("loading");
      }
    }
    class OfflineState extends State {
      onEnter(_ref2) {
        let {
          message
        } = _ref2;
        this.core.dispatchEvent("offline", {
          message
        });
      }
    }
    class EndedState extends State {
      onEnter(_ref3) {
        let {
          message
        } = _ref3;
        this.core.dispatchEvent("ended", {
          message
        });
      }
      async play() {
        this.core.dispatchEvent("play");
        if (await this.driver.restart()) {
          this.core.setState("playing");
        }
      }
      async togglePlay() {
        await this.play();
      }
      seek(where) {
        if (this.driver.seek(where) === true) {
          this.core.setState("idle");
          return true;
        }
        return false;
      }
    }
    class ErroredState extends State {
      onEnter() {
        this.core.dispatchEvent("errored");
      }
    }
    class Core {
      // public
      constructor(driverFn, opts) {
        this.logger = opts.logger;
        this.state = new UninitializedState(this);
        this.stateName = "uninitialized";
        this.driver = null;
        this.driverFn = driverFn;
        this.changedLines = /* @__PURE__ */ new Set();
        this.cursor = void 0;
        this.duration = void 0;
        this.cols = opts.cols;
        this.rows = opts.rows;
        this.speed = opts.speed ?? 1;
        this.loop = opts.loop;
        this.idleTimeLimit = opts.idleTimeLimit;
        this.preload = opts.preload;
        this.startAt = parseNpt(opts.startAt);
        this.poster = this.parsePoster(opts.poster);
        this.markers = this.normalizeMarkers(opts.markers);
        this.pauseOnMarkers = opts.pauseOnMarkers;
        this.commandQueue = Promise.resolve();
        this.eventHandlers = /* @__PURE__ */ new Map([["ended", []], ["errored", []], ["idle", []], ["init", []], ["input", []], ["loading", []], ["marker", []], ["offline", []], ["pause", []], ["play", []], ["playing", []], ["reset", []], ["resize", []], ["seeked", []], ["terminalUpdate", []]]);
      }
      addEventListener(eventName, handler) {
        this.eventHandlers.get(eventName).push(handler);
      }
      dispatchEvent(eventName) {
        let data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        for (const h2 of this.eventHandlers.get(eventName)) {
          h2(data);
        }
      }
      async init() {
        this.wasm = await vt;
        const feed = this.feed.bind(this);
        const onInput = (data) => {
          this.dispatchEvent("input", {
            data
          });
        };
        const onMarker = (_ref4) => {
          let {
            index,
            time,
            label
          } = _ref4;
          this.dispatchEvent("marker", {
            index,
            time,
            label
          });
        };
        const now = this.now.bind(this);
        const setTimeout2 = (f2, t2) => window.setTimeout(f2, t2 / this.speed);
        const setInterval2 = (f2, t2) => window.setInterval(f2, t2 / this.speed);
        const reset = this.resetVt.bind(this);
        const setState = this.setState.bind(this);
        const posterTime = this.poster.type === "npt" ? this.poster.value : void 0;
        this.driver = this.driverFn({
          feed,
          onInput,
          onMarker,
          reset,
          now,
          setTimeout: setTimeout2,
          setInterval: setInterval2,
          setState,
          logger: this.logger
        }, {
          cols: this.cols,
          rows: this.rows,
          idleTimeLimit: this.idleTimeLimit,
          startAt: this.startAt,
          loop: this.loop,
          posterTime,
          markers: this.markers,
          pauseOnMarkers: this.pauseOnMarkers
        });
        if (typeof this.driver === "function") {
          this.driver = {
            play: this.driver
          };
        }
        if (this.preload || posterTime !== void 0) {
          this.withState((state) => state.init());
        }
        const poster = this.poster.type === "text" ? this.renderPoster(this.poster.value) : void 0;
        const config2 = {
          isPausable: !!this.driver.pause,
          isSeekable: !!this.driver.seek,
          poster
        };
        if (this.driver.init === void 0) {
          this.driver.init = () => {
            return {};
          };
        }
        if (this.driver.pause === void 0) {
          this.driver.pause = () => {
          };
        }
        if (this.driver.seek === void 0) {
          this.driver.seek = (where) => false;
        }
        if (this.driver.step === void 0) {
          this.driver.step = () => {
          };
        }
        if (this.driver.stop === void 0) {
          this.driver.stop = () => {
          };
        }
        if (this.driver.restart === void 0) {
          this.driver.restart = () => {
          };
        }
        if (this.driver.getCurrentTime === void 0) {
          const play = this.driver.play;
          let clock2 = new NullClock();
          this.driver.play = () => {
            clock2 = new Clock(this.speed);
            return play();
          };
          this.driver.getCurrentTime = () => clock2.getTime();
        }
        return config2;
      }
      play() {
        return this.withState((state) => state.play());
      }
      pause() {
        return this.withState((state) => state.pause());
      }
      togglePlay() {
        return this.withState((state) => state.togglePlay());
      }
      seek(where) {
        return this.withState(async (state) => {
          if (await state.seek(where)) {
            this.dispatchEvent("seeked");
          }
        });
      }
      step() {
        return this.withState((state) => state.step());
      }
      stop() {
        return this.withState((state) => state.stop());
      }
      withState(f2) {
        return this.enqueueCommand(() => f2(this.state));
      }
      enqueueCommand(f2) {
        this.commandQueue = this.commandQueue.then(f2);
        return this.commandQueue;
      }
      getChangedLines() {
        if (this.changedLines.size > 0) {
          const lines = /* @__PURE__ */ new Map();
          const rows = this.vt.rows;
          for (const i2 of this.changedLines) {
            if (i2 < rows) {
              lines.set(i2, {
                id: i2,
                segments: this.vt.get_line(i2)
              });
            }
          }
          this.changedLines.clear();
          return lines;
        }
      }
      getCursor() {
        if (this.cursor === void 0 && this.vt) {
          this.cursor = this.vt.get_cursor() ?? false;
        }
        return this.cursor;
      }
      getCurrentTime() {
        return this.driver.getCurrentTime();
      }
      getRemainingTime() {
        if (typeof this.duration === "number") {
          return this.duration - Math.min(this.getCurrentTime(), this.duration);
        }
      }
      getProgress() {
        if (typeof this.duration === "number") {
          return Math.min(this.getCurrentTime(), this.duration) / this.duration;
        }
      }
      getDuration() {
        return this.duration;
      }
      // private
      setState(newState) {
        let data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        if (this.stateName === newState) return this.state;
        this.stateName = newState;
        if (newState === "playing") {
          this.state = new PlayingState(this);
        } else if (newState === "idle") {
          this.state = new Idle(this);
        } else if (newState === "loading") {
          this.state = new LoadingState(this);
        } else if (newState === "ended") {
          this.state = new EndedState(this);
        } else if (newState === "offline") {
          this.state = new OfflineState(this);
        } else if (newState === "errored") {
          this.state = new ErroredState(this);
        } else {
          throw `invalid state: ${newState}`;
        }
        this.state.onEnter(data);
        return this.state;
      }
      feed(data) {
        this.doFeed(data);
        this.dispatchEvent("terminalUpdate");
      }
      doFeed(data) {
        const [affectedLines, resized] = this.vt.feed(data);
        affectedLines.forEach((i2) => this.changedLines.add(i2));
        this.cursor = void 0;
        if (resized) {
          const [cols, rows] = this.vt.get_size();
          this.vt.cols = cols;
          this.vt.rows = rows;
          this.logger.debug(`core: vt resize (${cols}x${rows})`);
          this.dispatchEvent("resize", {
            cols,
            rows
          });
        }
      }
      now() {
        return performance.now() * this.speed;
      }
      async initializeDriver() {
        const meta2 = await this.driver.init();
        this.cols = this.cols ?? meta2.cols ?? 80;
        this.rows = this.rows ?? meta2.rows ?? 24;
        this.duration = this.duration ?? meta2.duration;
        this.markers = this.normalizeMarkers(meta2.markers) ?? this.markers ?? [];
        if (this.cols === 0) {
          this.cols = 80;
        }
        if (this.rows === 0) {
          this.rows = 24;
        }
        this.initializeVt(this.cols, this.rows);
        const poster = meta2.poster !== void 0 ? this.renderPoster(meta2.poster) : void 0;
        this.dispatchEvent("init", {
          cols: this.cols,
          rows: this.rows,
          duration: this.duration,
          markers: this.markers,
          theme: meta2.theme,
          poster
        });
      }
      resetVt(cols, rows) {
        let init = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : void 0;
        let theme2 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : void 0;
        this.cols = cols;
        this.rows = rows;
        this.cursor = void 0;
        this.initializeVt(cols, rows);
        if (init !== void 0 && init !== "") {
          this.doFeed(init);
        }
        this.dispatchEvent("reset", {
          cols,
          rows,
          theme: theme2
        });
      }
      initializeVt(cols, rows) {
        this.logger.debug(`core: vt init (${cols}x${rows})`);
        this.vt = this.wasm.create(cols, rows, true, 100);
        this.vt.cols = cols;
        this.vt.rows = rows;
        this.changedLines.clear();
        for (let i2 = 0; i2 < rows; i2++) {
          this.changedLines.add(i2);
        }
      }
      parsePoster(poster) {
        if (typeof poster !== "string") return {};
        if (poster.substring(0, 16) == "data:text/plain,") {
          return {
            type: "text",
            value: [poster.substring(16)]
          };
        } else if (poster.substring(0, 4) == "npt:") {
          return {
            type: "npt",
            value: parseNpt(poster.substring(4))
          };
        }
        return {};
      }
      renderPoster(poster) {
        const cols = this.cols ?? 80;
        const rows = this.rows ?? 24;
        this.logger.debug(`core: poster init (${cols}x${rows})`);
        const vt2 = this.wasm.create(cols, rows, false, 0);
        poster.forEach((text2) => vt2.feed(text2));
        const cursor = vt2.get_cursor() ?? false;
        const lines = [];
        for (let i2 = 0; i2 < rows; i2++) {
          lines.push({
            id: i2,
            segments: vt2.get_line(i2)
          });
        }
        return {
          cursor,
          lines
        };
      }
      normalizeMarkers(markers) {
        if (Array.isArray(markers)) {
          return markers.map((m2) => typeof m2 === "number" ? [m2, ""] : m2);
        }
      }
    }
    const $RAW = Symbol("store-raw"), $NODE = Symbol("store-node"), $NAME = Symbol("store-name");
    function wrap$1(value, name2) {
      let p2 = value[$PROXY];
      if (!p2) {
        Object.defineProperty(value, $PROXY, {
          value: p2 = new Proxy(value, proxyTraps$1)
        });
        if (!Array.isArray(value)) {
          const keys = Object.keys(value), desc = Object.getOwnPropertyDescriptors(value);
          for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
            const prop = keys[i2];
            if (desc[prop].get) {
              Object.defineProperty(value, prop, {
                enumerable: desc[prop].enumerable,
                get: desc[prop].get.bind(p2)
              });
            }
          }
        }
      }
      return p2;
    }
    function isWrappable(obj) {
      let proto;
      return obj != null && typeof obj === "object" && (obj[$PROXY] || !(proto = Object.getPrototypeOf(obj)) || proto === Object.prototype || Array.isArray(obj));
    }
    function unwrap$1(item, set = /* @__PURE__ */ new Set()) {
      let result, unwrapped, v2, prop;
      if (result = item != null && item[$RAW]) return result;
      if (!isWrappable(item) || set.has(item)) return item;
      if (Array.isArray(item)) {
        if (Object.isFrozen(item)) item = item.slice(0);
        else set.add(item);
        for (let i2 = 0, l2 = item.length; i2 < l2; i2++) {
          v2 = item[i2];
          if ((unwrapped = unwrap$1(v2, set)) !== v2) item[i2] = unwrapped;
        }
      } else {
        if (Object.isFrozen(item)) item = Object.assign({}, item);
        else set.add(item);
        const keys = Object.keys(item), desc = Object.getOwnPropertyDescriptors(item);
        for (let i2 = 0, l2 = keys.length; i2 < l2; i2++) {
          prop = keys[i2];
          if (desc[prop].get) continue;
          v2 = item[prop];
          if ((unwrapped = unwrap$1(v2, set)) !== v2) item[prop] = unwrapped;
        }
      }
      return item;
    }
    function getDataNodes(target) {
      let nodes = target[$NODE];
      if (!nodes) Object.defineProperty(target, $NODE, {
        value: nodes = {}
      });
      return nodes;
    }
    function getDataNode(nodes, property, value) {
      return nodes[property] || (nodes[property] = createDataNode(value));
    }
    function proxyDescriptor$1(target, property) {
      const desc = Reflect.getOwnPropertyDescriptor(target, property);
      if (!desc || desc.get || !desc.configurable || property === $PROXY || property === $NODE || property === $NAME) return desc;
      delete desc.value;
      delete desc.writable;
      desc.get = () => target[$PROXY][property];
      return desc;
    }
    function trackSelf(target) {
      if (getListener()) {
        const nodes = getDataNodes(target);
        (nodes._ || (nodes._ = createDataNode()))();
      }
    }
    function ownKeys(target) {
      trackSelf(target);
      return Reflect.ownKeys(target);
    }
    function createDataNode(value) {
      const [s2, set] = createSignal(value, {
        equals: false,
        internal: true
      });
      s2.$ = set;
      return s2;
    }
    const proxyTraps$1 = {
      get(target, property, receiver) {
        if (property === $RAW) return target;
        if (property === $PROXY) return receiver;
        if (property === $TRACK) {
          trackSelf(target);
          return receiver;
        }
        const nodes = getDataNodes(target);
        const tracked = nodes.hasOwnProperty(property);
        let value = tracked ? nodes[property]() : target[property];
        if (property === $NODE || property === "__proto__") return value;
        if (!tracked) {
          const desc = Object.getOwnPropertyDescriptor(target, property);
          if (getListener() && (typeof value !== "function" || target.hasOwnProperty(property)) && !(desc && desc.get)) value = getDataNode(nodes, property, value)();
        }
        return isWrappable(value) ? wrap$1(value) : value;
      },
      has(target, property) {
        if (property === $RAW || property === $PROXY || property === $TRACK || property === $NODE || property === "__proto__") return true;
        this.get(target, property, target);
        return property in target;
      },
      set() {
        return true;
      },
      deleteProperty() {
        return true;
      },
      ownKeys,
      getOwnPropertyDescriptor: proxyDescriptor$1
    };
    function setProperty(state, property, value, deleting = false) {
      if (!deleting && state[property] === value) return;
      const prev = state[property], len = state.length;
      if (value === void 0) delete state[property];
      else state[property] = value;
      let nodes = getDataNodes(state), node;
      if (node = getDataNode(nodes, property, prev)) node.$(() => value);
      if (Array.isArray(state) && state.length !== len) (node = getDataNode(nodes, "length", len)) && node.$(state.length);
      (node = nodes._) && node.$();
    }
    function mergeStoreNode(state, value) {
      const keys = Object.keys(value);
      for (let i2 = 0; i2 < keys.length; i2 += 1) {
        const key2 = keys[i2];
        setProperty(state, key2, value[key2]);
      }
    }
    function updateArray(current, next) {
      if (typeof next === "function") next = next(current);
      next = unwrap$1(next);
      if (Array.isArray(next)) {
        if (current === next) return;
        let i2 = 0, len = next.length;
        for (; i2 < len; i2++) {
          const value = next[i2];
          if (current[i2] !== value) setProperty(current, i2, value);
        }
        setProperty(current, "length", len);
      } else mergeStoreNode(current, next);
    }
    function updatePath(current, path, traversed = []) {
      let part, prev = current;
      if (path.length > 1) {
        part = path.shift();
        const partType = typeof part, isArray = Array.isArray(current);
        if (Array.isArray(part)) {
          for (let i2 = 0; i2 < part.length; i2++) {
            updatePath(current, [part[i2]].concat(path), traversed);
          }
          return;
        } else if (isArray && partType === "function") {
          for (let i2 = 0; i2 < current.length; i2++) {
            if (part(current[i2], i2)) updatePath(current, [i2].concat(path), traversed);
          }
          return;
        } else if (isArray && partType === "object") {
          const {
            from = 0,
            to = current.length - 1,
            by = 1
          } = part;
          for (let i2 = from; i2 <= to; i2 += by) {
            updatePath(current, [i2].concat(path), traversed);
          }
          return;
        } else if (path.length > 1) {
          updatePath(current[part], path, [part].concat(traversed));
          return;
        }
        prev = current[part];
        traversed = [part].concat(traversed);
      }
      let value = path[0];
      if (typeof value === "function") {
        value = value(prev, traversed);
        if (value === prev) return;
      }
      if (part === void 0 && value == void 0) return;
      value = unwrap$1(value);
      if (part === void 0 || isWrappable(prev) && isWrappable(value) && !Array.isArray(value)) {
        mergeStoreNode(prev, value);
      } else setProperty(current, part, value);
    }
    function createStore(...[store, options]) {
      const unwrappedStore = unwrap$1(store || {});
      const isArray = Array.isArray(unwrappedStore);
      const wrappedStore = wrap$1(unwrappedStore);
      function setStore(...args) {
        batch(() => {
          isArray && args.length === 1 ? updateArray(unwrappedStore, args[0]) : updatePath(unwrappedStore, args);
        });
      }
      return [wrappedStore, setStore];
    }
    const $ROOT = Symbol("store-root");
    function applyState(target, parent, property, merge, key2) {
      const previous = parent[property];
      if (target === previous) return;
      if (!isWrappable(target) || !isWrappable(previous) || key2 && target[key2] !== previous[key2]) {
        if (target !== previous) {
          if (property === $ROOT) return target;
          setProperty(parent, property, target);
        }
        return;
      }
      if (Array.isArray(target)) {
        if (target.length && previous.length && (!merge || key2 && target[0] && target[0][key2] != null)) {
          let i2, j2, start2, end2, newEnd, item, newIndicesNext, keyVal;
          for (start2 = 0, end2 = Math.min(previous.length, target.length); start2 < end2 && (previous[start2] === target[start2] || key2 && previous[start2] && target[start2] && previous[start2][key2] === target[start2][key2]); start2++) {
            applyState(target[start2], previous, start2, merge, key2);
          }
          const temp = new Array(target.length), newIndices = /* @__PURE__ */ new Map();
          for (end2 = previous.length - 1, newEnd = target.length - 1; end2 >= start2 && newEnd >= start2 && (previous[end2] === target[newEnd] || key2 && previous[start2] && target[start2] && previous[end2][key2] === target[newEnd][key2]); end2--, newEnd--) {
            temp[newEnd] = previous[end2];
          }
          if (start2 > newEnd || start2 > end2) {
            for (j2 = start2; j2 <= newEnd; j2++) setProperty(previous, j2, target[j2]);
            for (; j2 < target.length; j2++) {
              setProperty(previous, j2, temp[j2]);
              applyState(target[j2], previous, j2, merge, key2);
            }
            if (previous.length > target.length) setProperty(previous, "length", target.length);
            return;
          }
          newIndicesNext = new Array(newEnd + 1);
          for (j2 = newEnd; j2 >= start2; j2--) {
            item = target[j2];
            keyVal = key2 && item ? item[key2] : item;
            i2 = newIndices.get(keyVal);
            newIndicesNext[j2] = i2 === void 0 ? -1 : i2;
            newIndices.set(keyVal, j2);
          }
          for (i2 = start2; i2 <= end2; i2++) {
            item = previous[i2];
            keyVal = key2 && item ? item[key2] : item;
            j2 = newIndices.get(keyVal);
            if (j2 !== void 0 && j2 !== -1) {
              temp[j2] = previous[i2];
              j2 = newIndicesNext[j2];
              newIndices.set(keyVal, j2);
            }
          }
          for (j2 = start2; j2 < target.length; j2++) {
            if (j2 in temp) {
              setProperty(previous, j2, temp[j2]);
              applyState(target[j2], previous, j2, merge, key2);
            } else setProperty(previous, j2, target[j2]);
          }
        } else {
          for (let i2 = 0, len = target.length; i2 < len; i2++) {
            applyState(target[i2], previous, i2, merge, key2);
          }
        }
        if (previous.length > target.length) setProperty(previous, "length", target.length);
        return;
      }
      const targetKeys = Object.keys(target);
      for (let i2 = 0, len = targetKeys.length; i2 < len; i2++) {
        applyState(target[targetKeys[i2]], previous, targetKeys[i2], merge, key2);
      }
      const previousKeys = Object.keys(previous);
      for (let i2 = 0, len = previousKeys.length; i2 < len; i2++) {
        if (target[previousKeys[i2]] === void 0) setProperty(previous, previousKeys[i2], void 0);
      }
    }
    function reconcile(value, options = {}) {
      const {
        merge,
        key: key2 = "id"
      } = options, v2 = unwrap$1(value);
      return (state) => {
        if (!isWrappable(state) || !isWrappable(v2)) return v2;
        const res = applyState(v2, {
          [$ROOT]: state
        }, $ROOT, merge, key2);
        return res === void 0 ? state : res;
      };
    }
    const _tmpl$$9 = /* @__PURE__ */ template(`<span></span>`);
    var Segment = (props) => {
      const codePoint = createMemo(() => {
        if (props.text.length == 1) {
          const cp = props.text.codePointAt(0);
          if (cp >= 9600 && cp <= 9631 || cp == 57520 || cp == 57522) {
            return cp;
          }
        }
      });
      const text2 = createMemo(() => codePoint() ? " " : props.text);
      const style$1 = createMemo(() => buildStyle(props.pen, props.offset, text2().length, props.charWidth));
      const className$1 = createMemo(() => buildClassName(props.pen, codePoint(), props.extraClass));
      return (() => {
        const _el$ = _tmpl$$9.cloneNode(true);
        insert$1(_el$, text2);
        createRenderEffect((_p$) => {
          const _v$ = className$1(), _v$2 = style$1();
          _v$ !== _p$._v$ && className(_el$, _p$._v$ = _v$);
          _p$._v$2 = style(_el$, _v$2, _p$._v$2);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0
        });
        return _el$;
      })();
    };
    function buildClassName(attrs, codePoint, extraClass) {
      const fgClass = colorClass(attrs.get("fg"), attrs.get("bold"), "fg-");
      const bgClass = colorClass(attrs.get("bg"), attrs.get("blink"), "bg-");
      let cls = extraClass ?? "";
      if (codePoint !== void 0) {
        cls += ` cp-${codePoint.toString(16)}`;
      }
      if (fgClass) {
        cls += " " + fgClass;
      }
      if (bgClass) {
        cls += " " + bgClass;
      }
      if (attrs.has("bold")) {
        cls += " ap-bright";
      }
      if (attrs.has("faint")) {
        cls += " ap-faint";
      }
      if (attrs.has("italic")) {
        cls += " ap-italic";
      }
      if (attrs.has("underline")) {
        cls += " ap-underline";
      }
      if (attrs.has("blink")) {
        cls += " ap-blink";
      }
      if (attrs.get("inverse")) {
        cls += " ap-inverse";
      }
      return cls;
    }
    function colorClass(color, intense, prefix) {
      if (typeof color === "number") {
        if (intense && color < 8) {
          color += 8;
        }
        return `${prefix}${color}`;
      }
    }
    function buildStyle(attrs, offset2, textLen, charWidth) {
      const fg = attrs.get("fg");
      const bg = attrs.get("bg");
      let style2 = {
        "--offset": offset2,
        width: `${textLen * charWidth + 0.01}ch`
      };
      if (typeof fg === "string") {
        style2["--fg"] = fg;
      }
      if (typeof bg === "string") {
        style2["--bg"] = bg;
      }
      return style2;
    }
    const _tmpl$$8 = /* @__PURE__ */ template(`<span class="ap-line" role="paragraph"></span>`);
    var Line$1 = (props) => {
      const segments = () => {
        if (typeof props.cursor === "number") {
          const segs = [];
          let len = 0;
          let i2 = 0;
          while (i2 < props.segments.length && len + props.segments[i2].text.length - 1 < props.cursor) {
            const seg = props.segments[i2];
            segs.push(seg);
            len += seg.text.length;
            i2++;
          }
          if (i2 < props.segments.length) {
            const seg = props.segments[i2];
            const pos2 = props.cursor - len;
            if (pos2 > 0) {
              segs.push({
                ...seg,
                text: seg.text.substring(0, pos2)
              });
            }
            segs.push({
              ...seg,
              text: seg.text[pos2],
              offset: seg.offset + pos2,
              extraClass: "ap-cursor"
            });
            if (pos2 < seg.text.length - 1) {
              segs.push({
                ...seg,
                text: seg.text.substring(pos2 + 1),
                offset: seg.offset + pos2 + 1
              });
            }
            i2++;
            while (i2 < props.segments.length) {
              const seg2 = props.segments[i2];
              segs.push(seg2);
              i2++;
            }
          }
          return segs;
        } else {
          return props.segments;
        }
      };
      return (() => {
        const _el$ = _tmpl$$8.cloneNode(true);
        insert$1(_el$, createComponent(Index, {
          get each() {
            return segments();
          },
          children: (s2) => createComponent(Segment, mergeProps(s2))
        }));
        return _el$;
      })();
    };
    const _tmpl$$7 = /* @__PURE__ */ template(`<pre class="ap-terminal" aria-live="polite" tabindex="0"></pre>`);
    var Terminal = (props) => {
      const lineHeight = () => props.lineHeight ?? 1.3333333333;
      const style$1 = createMemo(() => {
        return {
          width: `${props.cols}ch`,
          height: `${lineHeight() * props.rows}em`,
          "font-size": `${(props.scale || 1) * 100}%`,
          "font-family": props.fontFamily,
          "--term-line-height": `${lineHeight()}em`,
          "--term-cols": props.cols
        };
      });
      const cursorCol = createMemo(() => {
        var _a2;
        return (_a2 = props.cursor) == null ? void 0 : _a2[0];
      });
      const cursorRow = createMemo(() => {
        var _a2;
        return (_a2 = props.cursor) == null ? void 0 : _a2[1];
      });
      return (() => {
        const _el$ = _tmpl$$7.cloneNode(true);
        const _ref$ = props.ref;
        typeof _ref$ === "function" ? use(_ref$, _el$) : props.ref = _el$;
        insert$1(_el$, createComponent(For, {
          get each() {
            return props.lines;
          },
          children: (line2, i2) => createComponent(Line$1, {
            get segments() {
              return line2.segments;
            },
            get cursor() {
              return createMemo(() => i2() === cursorRow())() ? cursorCol() : null;
            }
          })
        }));
        createRenderEffect((_p$) => {
          const _v$ = !!(props.blink || props.cursorHold), _v$2 = !!props.blink, _v$3 = style$1();
          _v$ !== _p$._v$ && _el$.classList.toggle("ap-cursor-on", _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && _el$.classList.toggle("ap-blink", _p$._v$2 = _v$2);
          _p$._v$3 = style(_el$, _v$3, _p$._v$3);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0,
          _v$3: void 0
        });
        return _el$;
      })();
    };
    const _tmpl$$6 = /* @__PURE__ */ template(`<svg version="1.1" viewBox="0 0 12 12" class="ap-icon" aria-label="Pause" role="button"><path d="M1,0 L4,0 L4,12 L1,12 Z"></path><path d="M8,0 L11,0 L11,12 L8,12 Z"></path></svg>`), _tmpl$2 = /* @__PURE__ */ template(`<svg version="1.1" viewBox="0 0 12 12" class="ap-icon" aria-label="Play" role="button"><path d="M1,0 L11,6 L1,12 Z"></path></svg>`), _tmpl$3 = /* @__PURE__ */ template(`<span class="ap-playback-button" tabindex="0"></span>`), _tmpl$4 = /* @__PURE__ */ template(`<span class="ap-progressbar"><span class="ap-bar"><span class="ap-gutter ap-gutter-empty"></span><span class="ap-gutter ap-gutter-full"></span></span></span>`), _tmpl$5 = /* @__PURE__ */ template(`<div class="ap-control-bar"><span class="ap-timer" aria-readonly="true" role="textbox" tabindex="0"><span class="ap-time-elapsed"></span><span class="ap-time-remaining"></span></span><span class="ap-fullscreen-button ap-tooltip-container" aria-label="Toggle fullscreen mode" role="button" tabindex="0"><svg version="1.1" viewBox="0 0 12 12" class="ap-icon ap-icon-fullscreen-on"><path d="M12,0 L7,0 L9,2 L7,4 L8,5 L10,3 L12,5 Z"></path><path d="M0,12 L0,7 L2,9 L4,7 L5,8 L3,10 L5,12 Z"></path></svg><svg version="1.1" viewBox="0 0 12 12" class="ap-icon ap-icon-fullscreen-off"><path d="M7,5 L7,0 L9,2 L11,0 L12,1 L10,3 L12,5 Z"></path><path d="M5,7 L0,7 L2,9 L0,11 L1,12 L3,10 L5,12 Z"></path></svg><span class="ap-tooltip">Fullscreen (f)</span></span></div>`), _tmpl$6 = /* @__PURE__ */ template(`<span class="ap-marker-container ap-tooltip-container"><span class="ap-marker"></span><span class="ap-tooltip"></span></span>`);
    function formatTime(seconds) {
      let s2 = Math.floor(seconds);
      const d2 = Math.floor(s2 / 86400);
      s2 %= 86400;
      const h2 = Math.floor(s2 / 3600);
      s2 %= 3600;
      const m2 = Math.floor(s2 / 60);
      s2 %= 60;
      if (d2 > 0) {
        return `${zeroPad(d2)}:${zeroPad(h2)}:${zeroPad(m2)}:${zeroPad(s2)}`;
      } else if (h2 > 0) {
        return `${zeroPad(h2)}:${zeroPad(m2)}:${zeroPad(s2)}`;
      } else {
        return `${zeroPad(m2)}:${zeroPad(s2)}`;
      }
    }
    function zeroPad(n2) {
      return n2 < 10 ? `0${n2}` : n2.toString();
    }
    var ControlBar = (props) => {
      const e2 = (f2) => {
        return (e3) => {
          e3.preventDefault();
          f2(e3);
        };
      };
      const currentTime = () => typeof props.currentTime === "number" ? formatTime(props.currentTime) : "--:--";
      const remainingTime = () => typeof props.remainingTime === "number" ? "-" + formatTime(props.remainingTime) : currentTime();
      const markers = createMemo(() => typeof props.duration === "number" ? props.markers.filter((m2) => m2[0] < props.duration) : []);
      const markerPosition = (m2) => `${m2[0] / props.duration * 100}%`;
      const markerText = (m2) => {
        if (m2[1] === "") {
          return formatTime(m2[0]);
        } else {
          return `${formatTime(m2[0])} - ${m2[1]}`;
        }
      };
      const isPastMarker = (m2) => typeof props.currentTime === "number" ? m2[0] <= props.currentTime : false;
      const gutterBarStyle = () => {
        return {
          transform: `scaleX(${props.progress || 0}`
        };
      };
      const calcPosition = (e3) => {
        const barWidth = e3.currentTarget.offsetWidth;
        const rect = e3.currentTarget.getBoundingClientRect();
        const mouseX = e3.clientX - rect.left;
        const pos2 = Math.max(0, mouseX / barWidth);
        return `${pos2 * 100}%`;
      };
      const [mouseDown, setMouseDown] = createSignal(false);
      const throttledSeek = throttle(props.onSeekClick, 50);
      const onMouseDown = (e3) => {
        if (e3._marker) return;
        if (e3.altKey || e3.shiftKey || e3.metaKey || e3.ctrlKey || e3.button !== 0) return;
        setMouseDown(true);
        props.onSeekClick(calcPosition(e3));
      };
      const seekToMarker = (index) => {
        return e2(() => {
          props.onSeekClick({
            marker: index
          });
        });
      };
      const onMove = (e3) => {
        if (e3.altKey || e3.shiftKey || e3.metaKey || e3.ctrlKey) return;
        if (mouseDown()) {
          throttledSeek(calcPosition(e3));
        }
      };
      const onDocumentMouseUp = () => {
        setMouseDown(false);
      };
      document.addEventListener("mouseup", onDocumentMouseUp);
      onCleanup(() => {
        document.removeEventListener("mouseup", onDocumentMouseUp);
      });
      return (() => {
        const _el$ = _tmpl$5.cloneNode(true), _el$5 = _el$.firstChild, _el$6 = _el$5.firstChild, _el$7 = _el$6.nextSibling, _el$12 = _el$5.nextSibling;
        const _ref$ = props.ref;
        typeof _ref$ === "function" ? use(_ref$, _el$) : props.ref = _el$;
        insert$1(_el$, createComponent(Show, {
          get when() {
            return props.isPausable;
          },
          get children() {
            const _el$2 = _tmpl$3.cloneNode(true);
            addEventListener(_el$2, "click", e2(props.onPlayClick));
            insert$1(_el$2, createComponent(Switch, {
              get children() {
                return [createComponent(Match, {
                  get when() {
                    return props.isPlaying;
                  },
                  get children() {
                    return _tmpl$$6.cloneNode(true);
                  }
                }), createComponent(Match, {
                  get when() {
                    return !props.isPlaying;
                  },
                  get children() {
                    return _tmpl$2.cloneNode(true);
                  }
                })];
              }
            }));
            return _el$2;
          }
        }), _el$5);
        insert$1(_el$6, currentTime);
        insert$1(_el$7, remainingTime);
        insert$1(_el$, createComponent(Show, {
          get when() {
            return typeof props.progress === "number" || props.isSeekable;
          },
          get children() {
            const _el$8 = _tmpl$4.cloneNode(true), _el$9 = _el$8.firstChild, _el$10 = _el$9.firstChild, _el$11 = _el$10.nextSibling;
            _el$9.$$mousemove = onMove;
            _el$9.$$mousedown = onMouseDown;
            insert$1(_el$9, createComponent(For, {
              get each() {
                return markers();
              },
              children: (m2, i2) => (() => {
                const _el$13 = _tmpl$6.cloneNode(true), _el$14 = _el$13.firstChild, _el$15 = _el$14.nextSibling;
                _el$13.$$mousedown = (e3) => {
                  e3._marker = true;
                };
                addEventListener(_el$13, "click", seekToMarker(i2()));
                insert$1(_el$15, () => markerText(m2));
                createRenderEffect((_p$) => {
                  const _v$ = markerPosition(m2), _v$2 = !!isPastMarker(m2);
                  _v$ !== _p$._v$ && _el$13.style.setProperty("left", _p$._v$ = _v$);
                  _v$2 !== _p$._v$2 && _el$14.classList.toggle("ap-marker-past", _p$._v$2 = _v$2);
                  return _p$;
                }, {
                  _v$: void 0,
                  _v$2: void 0
                });
                return _el$13;
              })()
            }), null);
            createRenderEffect((_$p) => style(_el$11, gutterBarStyle(), _$p));
            return _el$8;
          }
        }), _el$12);
        addEventListener(_el$12, "click", e2(props.onFullscreenClick));
        createRenderEffect(() => _el$.classList.toggle("ap-seekable", !!props.isSeekable));
        return _el$;
      })();
    };
    delegateEvents(["click", "mousedown", "mousemove"]);
    const _tmpl$$5 = /* @__PURE__ */ template(`<div class="ap-overlay ap-overlay-error"><span>💥</span></div>`);
    var ErrorOverlay = (props) => {
      return _tmpl$$5.cloneNode(true);
    };
    const _tmpl$$4 = /* @__PURE__ */ template(`<div class="ap-overlay ap-overlay-loading"><span class="ap-loader"></span></div>`);
    var LoaderOverlay = (props) => {
      return _tmpl$$4.cloneNode(true);
    };
    const _tmpl$$3 = /* @__PURE__ */ template(`<div class="ap-overlay ap-overlay-info"><span></span></div>`);
    var InfoOverlay = (props) => {
      const style$1 = () => {
        return {
          "font-family": props.fontFamily
        };
      };
      return (() => {
        const _el$ = _tmpl$$3.cloneNode(true), _el$2 = _el$.firstChild;
        insert$1(_el$2, () => props.message);
        createRenderEffect((_$p) => style(_el$2, style$1(), _$p));
        return _el$;
      })();
    };
    const _tmpl$$2 = /* @__PURE__ */ template(`<div class="ap-overlay ap-overlay-start"><div class="ap-play-button"><div><span><svg version="1.1" viewBox="0 0 1000.0 1000.0" class="ap-icon"><defs><mask id="small-triangle-mask"><rect width="100%" height="100%" fill="white"></rect><polygon points="700.0 500.0, 400.00000000000006 326.7949192431122, 399.9999999999999 673.2050807568877" fill="black"></polygon></mask></defs><polygon points="1000.0 500.0, 250.0000000000001 66.98729810778059, 249.99999999999977 933.0127018922192" mask="url(#small-triangle-mask)" fill="white" class="ap-play-btn-fill"></polygon><polyline points="673.2050807568878 400.0, 326.7949192431123 600.0" stroke="white" stroke-width="90" class="ap-play-btn-stroke"></polyline></svg></span></div></div></div>`);
    var StartOverlay = (props) => {
      const e2 = (f2) => {
        return (e3) => {
          e3.preventDefault();
          f2(e3);
        };
      };
      return (() => {
        const _el$ = _tmpl$$2.cloneNode(true);
        addEventListener(_el$, "click", e2(props.onClick));
        return _el$;
      })();
    };
    delegateEvents(["click"]);
    const _tmpl$$1 = /* @__PURE__ */ template(`<div class="ap-overlay ap-overlay-help"><div><div><p>Keyboard shortcuts</p><ul><li><kbd>space</kbd> - pause / resume</li><li><kbd>f</kbd> - toggle fullscreen mode</li><li><kbd>←</kbd> / <kbd>→</kbd> - rewind / fast-forward by 5 seconds</li><li><kbd>Shift</kbd> + <kbd>←</kbd> / <kbd>→</kbd> - rewind / fast-forward by 10%</li><li><kbd>[</kbd> / <kbd>]</kbd> - jump to the previous / next marker</li><li><kbd>0</kbd>, <kbd>1</kbd>, <kbd>2</kbd> ... <kbd>9</kbd> - jump to 0%, 10%, 20% ... 90%</li><li><kbd>.</kbd> - step through a recording, one frame at a time (when paused)</li><li><kbd>?</kbd> - toggle this help popup</li></ul></div></div></div>`);
    var HelpOverlay = (props) => {
      const style$1 = () => {
        return {
          "font-family": props.fontFamily
        };
      };
      const e2 = (f2) => {
        return (e3) => {
          e3.preventDefault();
          f2(e3);
        };
      };
      return (() => {
        const _el$ = _tmpl$$1.cloneNode(true), _el$2 = _el$.firstChild;
        addEventListener(_el$, "click", e2(props.onClose));
        _el$2.$$click = (e3) => {
          e3.stopPropagation();
        };
        createRenderEffect((_$p) => style(_el$, style$1(), _$p));
        return _el$;
      })();
    };
    delegateEvents(["click"]);
    const _tmpl$ = /* @__PURE__ */ template(`<div class="ap-wrapper" tabindex="-1"><div></div></div>`);
    const CONTROL_BAR_HEIGHT = 32;
    var Player = (props) => {
      const logger = props.logger;
      const core = props.core;
      const autoPlay = props.autoPlay;
      const [state, setState] = createStore({
        lines: [],
        cursor: void 0,
        charW: props.charW,
        charH: props.charH,
        bordersW: props.bordersW,
        bordersH: props.bordersH,
        containerW: 0,
        containerH: 0,
        isPausable: true,
        isSeekable: true,
        isFullscreen: false,
        currentTime: null,
        remainingTime: null,
        progress: null,
        blink: true,
        cursorHold: false
      });
      const [isPlaying, setIsPlaying] = createSignal(false);
      const [overlay, setOverlay] = createSignal(!autoPlay ? "start" : null);
      const [infoMessage, setInfoMessage] = createSignal(null);
      const [terminalSize, setTerminalSize] = createSignal({
        cols: props.cols,
        rows: props.rows
      }, {
        equals: (newVal, oldVal) => newVal.cols === oldVal.cols && newVal.rows === oldVal.rows
      });
      const [duration, setDuration] = createSignal(void 0);
      const [markers, setMarkers] = createStore([]);
      const [userActive, setUserActive] = createSignal(false);
      const [isHelpVisible, setIsHelpVisible] = createSignal(false);
      const [originalTheme, setOriginalTheme] = createSignal(void 0);
      const terminalCols = createMemo(() => terminalSize().cols || 80);
      const terminalRows = createMemo(() => terminalSize().rows || 24);
      const controlBarHeight = () => props.controls === false ? 0 : CONTROL_BAR_HEIGHT;
      const controlsVisible = () => props.controls === true || props.controls === "auto" && userActive();
      let frameRequestId;
      let userActivityTimeoutId;
      let timeUpdateIntervalId;
      let blinkIntervalId;
      let wrapperRef;
      let playerRef;
      let terminalRef;
      let controlBarRef;
      let resizeObserver;
      function onPlaying() {
        updateTerminal();
        startBlinking();
        startTimeUpdates();
      }
      function onStopped() {
        stopBlinking();
        stopTimeUpdates();
        updateTime();
      }
      function resize(size_) {
        batch(() => {
          if (size_.rows < terminalSize().rows) {
            setState("lines", state.lines.slice(0, size_.rows));
          }
          setTerminalSize(size_);
        });
      }
      function setPoster(poster) {
        if (poster !== void 0 && !autoPlay) {
          setState({
            lines: poster.lines,
            cursor: poster.cursor
          });
        }
      }
      core.addEventListener("init", (_ref) => {
        let {
          cols,
          rows,
          duration: duration2,
          theme: theme3,
          poster,
          markers: markers2
        } = _ref;
        batch(() => {
          resize({
            cols,
            rows
          });
          setDuration(duration2);
          setOriginalTheme(theme3);
          setMarkers(markers2);
          setPoster(poster);
        });
      });
      core.addEventListener("play", () => {
        setOverlay(null);
      });
      core.addEventListener("playing", () => {
        batch(() => {
          setIsPlaying(true);
          setOverlay(null);
          onPlaying();
        });
      });
      core.addEventListener("idle", () => {
        batch(() => {
          setIsPlaying(false);
          onStopped();
        });
      });
      core.addEventListener("loading", () => {
        batch(() => {
          setIsPlaying(false);
          onStopped();
          setOverlay("loader");
        });
      });
      core.addEventListener("offline", (_ref2) => {
        let {
          message
        } = _ref2;
        batch(() => {
          setIsPlaying(false);
          onStopped();
          if (message !== void 0) {
            setInfoMessage(message);
            setOverlay("info");
          }
        });
      });
      core.addEventListener("ended", (_ref3) => {
        let {
          message
        } = _ref3;
        batch(() => {
          setIsPlaying(false);
          onStopped();
          if (message !== void 0) {
            setInfoMessage(message);
            setOverlay("info");
          }
        });
      });
      core.addEventListener("errored", () => {
        setOverlay("error");
      });
      core.addEventListener("resize", resize);
      core.addEventListener("reset", (_ref4) => {
        let {
          cols,
          rows,
          theme: theme3
        } = _ref4;
        batch(() => {
          resize({
            cols,
            rows
          });
          setOriginalTheme(theme3);
          updateTerminal();
        });
      });
      core.addEventListener("seeked", () => {
        updateTime();
      });
      core.addEventListener("terminalUpdate", () => {
        if (frameRequestId === void 0) {
          frameRequestId = requestAnimationFrame(updateTerminal);
        }
      });
      const setupResizeObserver = () => {
        resizeObserver = new ResizeObserver(debounce((_entries) => {
          setState({
            containerW: wrapperRef.offsetWidth,
            containerH: wrapperRef.offsetHeight
          });
          wrapperRef.dispatchEvent(new CustomEvent("resize", {
            detail: {
              el: playerRef
            }
          }));
        }, 10));
        resizeObserver.observe(wrapperRef);
      };
      onMount(async () => {
        logger.info("player mounted");
        logger.debug("font measurements", {
          charW: state.charW,
          charH: state.charH
        });
        setupResizeObserver();
        const {
          isPausable,
          isSeekable,
          poster
        } = await core.init();
        batch(() => {
          setState({
            isPausable,
            isSeekable,
            containerW: wrapperRef.offsetWidth,
            containerH: wrapperRef.offsetHeight
          });
          setPoster(poster);
        });
        if (autoPlay) {
          core.play();
        }
      });
      onCleanup(() => {
        core.stop();
        stopBlinking();
        stopTimeUpdates();
        resizeObserver.disconnect();
      });
      const updateTerminal = () => {
        const changedLines = core.getChangedLines();
        batch(() => {
          if (changedLines) {
            changedLines.forEach((line2, i2) => {
              setState("lines", i2, reconcile(line2));
            });
          }
          setState("cursor", reconcile(core.getCursor()));
          setState("cursorHold", true);
        });
        frameRequestId = void 0;
      };
      const terminalElementSize = createMemo(() => {
        const terminalW = state.charW * terminalCols() + state.bordersW;
        const terminalH = state.charH * terminalRows() + state.bordersH;
        let fit = props.fit ?? "width";
        if (fit === "both" || state.isFullscreen) {
          const containerRatio = state.containerW / (state.containerH - controlBarHeight());
          const terminalRatio = terminalW / terminalH;
          if (containerRatio > terminalRatio) {
            fit = "height";
          } else {
            fit = "width";
          }
        }
        if (fit === false || fit === "none") {
          return {};
        } else if (fit === "width") {
          const scale = state.containerW / terminalW;
          return {
            scale,
            width: state.containerW,
            height: terminalH * scale + controlBarHeight()
          };
        } else if (fit === "height") {
          const scale = (state.containerH - controlBarHeight()) / terminalH;
          return {
            scale,
            width: terminalW * scale,
            height: state.containerH
          };
        } else {
          throw `unsupported fit mode: ${fit}`;
        }
      });
      const onFullscreenChange = () => {
        setState("isFullscreen", document.fullscreenElement ?? document.webkitFullscreenElement);
      };
      const toggleFullscreen = () => {
        if (state.isFullscreen) {
          (document.exitFullscreen ?? document.webkitExitFullscreen ?? (() => {
          })).apply(document);
        } else {
          (wrapperRef.requestFullscreen ?? wrapperRef.webkitRequestFullscreen ?? (() => {
          })).apply(wrapperRef);
        }
      };
      const onKeyDown = (e2) => {
        if (e2.altKey || e2.metaKey || e2.ctrlKey) {
          return;
        }
        if (e2.key == " ") {
          core.togglePlay();
        } else if (e2.key == ".") {
          core.step();
          updateTime();
        } else if (e2.key == "f") {
          toggleFullscreen();
        } else if (e2.key == "[") {
          core.seek({
            marker: "prev"
          });
        } else if (e2.key == "]") {
          core.seek({
            marker: "next"
          });
        } else if (e2.key.charCodeAt(0) >= 48 && e2.key.charCodeAt(0) <= 57) {
          const pos2 = (e2.key.charCodeAt(0) - 48) / 10;
          core.seek(`${pos2 * 100}%`);
        } else if (e2.key == "?") {
          if (isHelpVisible()) {
            setIsHelpVisible(false);
          } else {
            core.pause();
            setIsHelpVisible(true);
          }
        } else if (e2.key == "ArrowLeft") {
          if (e2.shiftKey) {
            core.seek("<<<");
          } else {
            core.seek("<<");
          }
        } else if (e2.key == "ArrowRight") {
          if (e2.shiftKey) {
            core.seek(">>>");
          } else {
            core.seek(">>");
          }
        } else if (e2.key == "Escape") {
          setIsHelpVisible(false);
        } else {
          return;
        }
        e2.stopPropagation();
        e2.preventDefault();
      };
      const wrapperOnMouseMove = () => {
        if (state.isFullscreen) {
          onUserActive(true);
        }
      };
      const playerOnMouseLeave = () => {
        if (!state.isFullscreen) {
          onUserActive(false);
        }
      };
      const startTimeUpdates = () => {
        timeUpdateIntervalId = setInterval(updateTime, 100);
      };
      const stopTimeUpdates = () => {
        clearInterval(timeUpdateIntervalId);
      };
      const updateTime = () => {
        const currentTime = core.getCurrentTime();
        const remainingTime = core.getRemainingTime();
        const progress = core.getProgress();
        setState({
          currentTime,
          remainingTime,
          progress
        });
      };
      const startBlinking = () => {
        blinkIntervalId = setInterval(() => {
          setState((state2) => {
            const changes = {
              blink: !state2.blink
            };
            if (changes.blink) {
              changes.cursorHold = false;
            }
            return changes;
          });
        }, 500);
      };
      const stopBlinking = () => {
        clearInterval(blinkIntervalId);
        setState("blink", true);
      };
      const onUserActive = (show) => {
        clearTimeout(userActivityTimeoutId);
        if (show) {
          userActivityTimeoutId = setTimeout(() => onUserActive(false), 2e3);
        }
        setUserActive(show);
      };
      const theme2 = createMemo(() => {
        const name2 = props.theme || "auto/asciinema";
        if (name2.slice(0, 5) === "auto/") {
          return {
            name: name2.slice(5),
            colors: originalTheme()
          };
        } else {
          return {
            name: name2
          };
        }
      });
      const playerStyle = () => {
        const style2 = {};
        if ((props.fit === false || props.fit === "none") && props.terminalFontSize !== void 0) {
          if (props.terminalFontSize === "small") {
            style2["font-size"] = "12px";
          } else if (props.terminalFontSize === "medium") {
            style2["font-size"] = "18px";
          } else if (props.terminalFontSize === "big") {
            style2["font-size"] = "24px";
          } else {
            style2["font-size"] = props.terminalFontSize;
          }
        }
        const size = terminalElementSize();
        if (size.width !== void 0) {
          style2["width"] = `${size.width}px`;
          style2["height"] = `${size.height}px`;
        }
        const themeColors = theme2().colors;
        if (themeColors !== void 0) {
          style2["--term-color-foreground"] = themeColors.foreground;
          style2["--term-color-background"] = themeColors.background;
          themeColors.palette.forEach((color, i2) => {
            style2[`--term-color-${i2}`] = color;
          });
        }
        return style2;
      };
      const playerClass = () => `ap-player asciinema-player-theme-${theme2().name}`;
      const terminalScale = () => {
        var _a2;
        return (_a2 = terminalElementSize()) == null ? void 0 : _a2.scale;
      };
      const el = (() => {
        const _el$ = _tmpl$.cloneNode(true), _el$2 = _el$.firstChild;
        const _ref$ = wrapperRef;
        typeof _ref$ === "function" ? use(_ref$, _el$) : wrapperRef = _el$;
        _el$.addEventListener("webkitfullscreenchange", onFullscreenChange);
        _el$.addEventListener("fullscreenchange", onFullscreenChange);
        _el$.$$mousemove = wrapperOnMouseMove;
        _el$.$$keydown = onKeyDown;
        const _ref$2 = playerRef;
        typeof _ref$2 === "function" ? use(_ref$2, _el$2) : playerRef = _el$2;
        _el$2.$$mousemove = () => onUserActive(true);
        _el$2.addEventListener("mouseleave", playerOnMouseLeave);
        insert$1(_el$2, createComponent(Terminal, {
          get cols() {
            return terminalCols();
          },
          get rows() {
            return terminalRows();
          },
          get scale() {
            return terminalScale();
          },
          get blink() {
            return state.blink;
          },
          get lines() {
            return state.lines;
          },
          get cursor() {
            return state.cursor;
          },
          get cursorHold() {
            return state.cursorHold;
          },
          get fontFamily() {
            return props.terminalFontFamily;
          },
          get lineHeight() {
            return props.terminalLineHeight;
          },
          ref(r$) {
            const _ref$3 = terminalRef;
            typeof _ref$3 === "function" ? _ref$3(r$) : terminalRef = r$;
          }
        }), null);
        insert$1(_el$2, createComponent(Show, {
          get when() {
            return props.controls !== false;
          },
          get children() {
            return createComponent(ControlBar, {
              get duration() {
                return duration();
              },
              get currentTime() {
                return state.currentTime;
              },
              get remainingTime() {
                return state.remainingTime;
              },
              get progress() {
                return state.progress;
              },
              markers,
              get isPlaying() {
                return isPlaying();
              },
              get isPausable() {
                return state.isPausable;
              },
              get isSeekable() {
                return state.isSeekable;
              },
              onPlayClick: () => core.togglePlay(),
              onFullscreenClick: toggleFullscreen,
              onSeekClick: (pos2) => core.seek(pos2),
              ref(r$) {
                const _ref$4 = controlBarRef;
                typeof _ref$4 === "function" ? _ref$4(r$) : controlBarRef = r$;
              }
            });
          }
        }), null);
        insert$1(_el$2, createComponent(Switch, {
          get children() {
            return [createComponent(Match, {
              get when() {
                return overlay() == "start";
              },
              get children() {
                return createComponent(StartOverlay, {
                  onClick: () => core.play()
                });
              }
            }), createComponent(Match, {
              get when() {
                return overlay() == "loader";
              },
              get children() {
                return createComponent(LoaderOverlay, {});
              }
            }), createComponent(Match, {
              get when() {
                return overlay() == "info";
              },
              get children() {
                return createComponent(InfoOverlay, {
                  get message() {
                    return infoMessage();
                  },
                  get fontFamily() {
                    return props.terminalFontFamily;
                  }
                });
              }
            }), createComponent(Match, {
              get when() {
                return overlay() == "error";
              },
              get children() {
                return createComponent(ErrorOverlay, {});
              }
            })];
          }
        }), null);
        insert$1(_el$2, createComponent(Show, {
          get when() {
            return isHelpVisible();
          },
          get children() {
            return createComponent(HelpOverlay, {
              get fontFamily() {
                return props.terminalFontFamily;
              },
              onClose: () => setIsHelpVisible(false)
            });
          }
        }), null);
        createRenderEffect((_p$) => {
          const _v$ = !!controlsVisible(), _v$2 = playerClass(), _v$3 = playerStyle();
          _v$ !== _p$._v$ && _el$.classList.toggle("ap-hud", _p$._v$ = _v$);
          _v$2 !== _p$._v$2 && className(_el$2, _p$._v$2 = _v$2);
          _p$._v$3 = style(_el$2, _v$3, _p$._v$3);
          return _p$;
        }, {
          _v$: void 0,
          _v$2: void 0,
          _v$3: void 0
        });
        return _el$;
      })();
      return el;
    };
    delegateEvents(["keydown", "mousemove"]);
    class DummyLogger {
      log() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    }
    class PrefixedLogger {
      constructor(logger, prefix) {
        this.logger = logger;
        this.prefix = prefix;
      }
      log(message) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        this.logger.log(`${this.prefix}${message}`, ...args);
      }
      debug(message) {
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        this.logger.debug(`${this.prefix}${message}`, ...args);
      }
      info(message) {
        for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          args[_key3 - 1] = arguments[_key3];
        }
        this.logger.info(`${this.prefix}${message}`, ...args);
      }
      warn(message) {
        for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          args[_key4 - 1] = arguments[_key4];
        }
        this.logger.warn(`${this.prefix}${message}`, ...args);
      }
      error(message) {
        for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          args[_key5 - 1] = arguments[_key5];
        }
        this.logger.error(`${this.prefix}${message}`, ...args);
      }
    }
    class Stream {
      constructor(input, xfs) {
        this.input = typeof input.next === "function" ? input : input[Symbol.iterator]();
        this.xfs = xfs ?? [];
      }
      map(f2) {
        return this.transform(Map$1(f2));
      }
      flatMap(f2) {
        return this.transform(FlatMap(f2));
      }
      filter(f2) {
        return this.transform(Filter(f2));
      }
      take(n2) {
        return this.transform(Take(n2));
      }
      drop(n2) {
        return this.transform(Drop(n2));
      }
      transform(f2) {
        return new Stream(this.input, this.xfs.concat([f2]));
      }
      multiplex(other, comparator) {
        return new Stream(new Multiplexer(this[Symbol.iterator](), other[Symbol.iterator](), comparator));
      }
      toArray() {
        return Array.from(this);
      }
      [Symbol.iterator]() {
        let v2 = 0;
        let values = [];
        let flushed = false;
        const xf = compose(this.xfs, (val) => values.push(val));
        return {
          next: () => {
            if (v2 === values.length) {
              values = [];
              v2 = 0;
            }
            while (values.length === 0) {
              const next = this.input.next();
              if (next.done) {
                break;
              } else {
                xf.step(next.value);
              }
            }
            if (values.length === 0 && !flushed) {
              xf.flush();
              flushed = true;
            }
            if (values.length > 0) {
              return {
                done: false,
                value: values[v2++]
              };
            } else {
              return {
                done: true
              };
            }
          }
        };
      }
    }
    function Map$1(f2) {
      return (emit) => {
        return (input) => {
          emit(f2(input));
        };
      };
    }
    function FlatMap(f2) {
      return (emit) => {
        return (input) => {
          f2(input).forEach(emit);
        };
      };
    }
    function Filter(f2) {
      return (emit) => {
        return (input) => {
          if (f2(input)) {
            emit(input);
          }
        };
      };
    }
    function Take(n2) {
      let c2 = 0;
      return (emit) => {
        return (input) => {
          if (c2 < n2) {
            emit(input);
          }
          c2 += 1;
        };
      };
    }
    function Drop(n2) {
      let c2 = 0;
      return (emit) => {
        return (input) => {
          c2 += 1;
          if (c2 > n2) {
            emit(input);
          }
        };
      };
    }
    function compose(xfs, push2) {
      return xfs.reverse().reduce((next, curr) => {
        const xf = toXf(curr(next.step));
        return {
          step: xf.step,
          flush: () => {
            xf.flush();
            next.flush();
          }
        };
      }, toXf(push2));
    }
    function toXf(xf) {
      if (typeof xf === "function") {
        return {
          step: xf,
          flush: () => {
          }
        };
      } else {
        return xf;
      }
    }
    class Multiplexer {
      constructor(left2, right2, comparator) {
        this.left = left2;
        this.right = right2;
        this.comparator = comparator;
      }
      [Symbol.iterator]() {
        let leftItem;
        let rightItem;
        return {
          next: () => {
            if (leftItem === void 0 && this.left !== void 0) {
              const result = this.left.next();
              if (result.done) {
                this.left = void 0;
              } else {
                leftItem = result.value;
              }
            }
            if (rightItem === void 0 && this.right !== void 0) {
              const result = this.right.next();
              if (result.done) {
                this.right = void 0;
              } else {
                rightItem = result.value;
              }
            }
            if (leftItem === void 0 && rightItem === void 0) {
              return {
                done: true
              };
            } else if (leftItem === void 0) {
              const value = rightItem;
              rightItem = void 0;
              return {
                done: false,
                value
              };
            } else if (rightItem === void 0) {
              const value = leftItem;
              leftItem = void 0;
              return {
                done: false,
                value
              };
            } else if (this.comparator(leftItem, rightItem)) {
              const value = leftItem;
              leftItem = void 0;
              return {
                done: false,
                value
              };
            } else {
              const value = rightItem;
              rightItem = void 0;
              return {
                done: false,
                value
              };
            }
          }
        };
      }
    }
    async function parse$2(data) {
      let header;
      let events;
      if (data instanceof Response) {
        const text2 = await data.text();
        const result = parseJsonl(text2);
        if (result !== void 0) {
          header = result.header;
          events = result.events;
        } else {
          header = JSON.parse(text2);
        }
      } else if (typeof data === "object" && typeof data.version === "number") {
        header = data;
      } else if (Array.isArray(data)) {
        header = data[0];
        events = data.slice(1, data.length);
      } else {
        throw "invalid data";
      }
      if (header.version === 1) {
        return parseAsciicastV1(header);
      } else if (header.version === 2) {
        return parseAsciicastV2(header, events);
      } else {
        throw `asciicast v${header.version} format not supported`;
      }
    }
    function parseJsonl(jsonl) {
      const lines = jsonl.split("\n");
      let header;
      try {
        header = JSON.parse(lines[0]);
      } catch (_error) {
        return;
      }
      const events = new Stream(lines).drop(1).filter((l2) => l2[0] === "[").map(JSON.parse).toArray();
      return {
        header,
        events
      };
    }
    function parseAsciicastV1(data) {
      let time = 0;
      const events = new Stream(data.stdout).map((e2) => {
        time += e2[0];
        return [time, "o", e2[1]];
      });
      return {
        cols: data.width,
        rows: data.height,
        events
      };
    }
    function parseAsciicastV2(header, events) {
      return {
        cols: header.width,
        rows: header.height,
        theme: parseTheme(header.theme),
        events,
        idleTimeLimit: header.idle_time_limit
      };
    }
    function parseTheme(theme2) {
      const colorRegex = /^#[0-9A-Fa-f]{6}$/;
      const paletteRegex = /^(#[0-9A-Fa-f]{6}:){7,}#[0-9A-Fa-f]{6}$/;
      const fg = theme2 == null ? void 0 : theme2.fg;
      const bg = theme2 == null ? void 0 : theme2.bg;
      const palette = theme2 == null ? void 0 : theme2.palette;
      if (colorRegex.test(fg) && colorRegex.test(bg) && paletteRegex.test(palette)) {
        return {
          foreground: fg,
          background: bg,
          palette: palette.split(":")
        };
      }
    }
    function unparseAsciicastV2(recording2) {
      const header = JSON.stringify({
        version: 2,
        width: recording2.cols,
        height: recording2.rows
      });
      const events = recording2.events.map(JSON.stringify).join("\n");
      return `${header}
${events}
`;
    }
    function recording(src, _ref, _ref2) {
      let {
        feed,
        onInput,
        onMarker,
        now,
        setTimeout: setTimeout2,
        setState,
        logger
      } = _ref;
      let {
        idleTimeLimit,
        startAt,
        loop,
        posterTime,
        markers: markers_,
        pauseOnMarkers,
        cols: initialCols,
        rows: initialRows
      } = _ref2;
      let cols;
      let rows;
      let events;
      let markers;
      let duration;
      let effectiveStartAt;
      let eventTimeoutId;
      let nextEventIndex = 0;
      let lastEventTime = 0;
      let startTime;
      let pauseElapsedTime;
      let playCount = 0;
      async function init() {
        const {
          parser: parser2,
          minFrameTime,
          inputOffset,
          dumpFilename,
          encoding = "utf-8"
        } = src;
        const recording2 = prepare(await parser2(await doFetch(src), {
          encoding
        }), logger, {
          idleTimeLimit,
          startAt,
          minFrameTime,
          inputOffset,
          markers_
        });
        ({
          cols,
          rows,
          events,
          duration,
          effectiveStartAt
        } = recording2);
        initialCols = initialCols ?? cols;
        initialRows = initialRows ?? rows;
        if (events.length === 0) {
          throw "recording is missing events";
        }
        if (dumpFilename !== void 0) {
          dump(recording2, dumpFilename);
        }
        const poster = posterTime !== void 0 ? getPoster(posterTime) : void 0;
        markers = events.filter((e2) => e2[1] === "m").map((e2) => [e2[0], e2[2].label]);
        return {
          cols,
          rows,
          duration,
          theme: recording2.theme,
          poster,
          markers
        };
      }
      function doFetch(_ref3) {
        let {
          url,
          data,
          fetchOpts = {}
        } = _ref3;
        if (typeof url === "string") {
          return doFetchOne(url, fetchOpts);
        } else if (Array.isArray(url)) {
          return Promise.all(url.map((url2) => doFetchOne(url2, fetchOpts)));
        } else if (data !== void 0) {
          if (typeof data === "function") {
            data = data();
          }
          if (!(data instanceof Promise)) {
            data = Promise.resolve(data);
          }
          return data.then((value) => {
            if (typeof value === "string" || value instanceof ArrayBuffer) {
              return new Response(value);
            } else {
              return value;
            }
          });
        } else {
          throw "failed fetching recording file: url/data missing in src";
        }
      }
      async function doFetchOne(url, fetchOpts) {
        const response = await fetch(url, fetchOpts);
        if (!response.ok) {
          throw `failed fetching recording from ${url}: ${response.status} ${response.statusText}`;
        }
        return response;
      }
      function delay(targetTime) {
        let delay2 = targetTime * 1e3 - (now() - startTime);
        if (delay2 < 0) {
          delay2 = 0;
        }
        return delay2;
      }
      function scheduleNextEvent() {
        const nextEvent = events[nextEventIndex];
        if (nextEvent) {
          eventTimeoutId = setTimeout2(runNextEvent, delay(nextEvent[0]));
        } else {
          onEnd();
        }
      }
      function runNextEvent() {
        let event = events[nextEventIndex];
        let elapsedWallTime;
        do {
          lastEventTime = event[0];
          nextEventIndex++;
          const stop = executeEvent(event);
          if (stop) {
            return;
          }
          event = events[nextEventIndex];
          elapsedWallTime = now() - startTime;
        } while (event && elapsedWallTime > event[0] * 1e3);
        scheduleNextEvent();
      }
      function cancelNextEvent() {
        clearTimeout(eventTimeoutId);
        eventTimeoutId = null;
      }
      function executeEvent(event) {
        const [time, type, data] = event;
        if (type === "o") {
          feed(data);
        } else if (type === "i") {
          onInput(data);
        } else if (type === "m") {
          onMarker(data);
          if (pauseOnMarkers) {
            pause();
            pauseElapsedTime = time * 1e3;
            setState("idle", {
              reason: "paused"
            });
            return true;
          }
        }
        return false;
      }
      function onEnd() {
        cancelNextEvent();
        playCount++;
        if (loop === true || typeof loop === "number" && playCount < loop) {
          nextEventIndex = 0;
          startTime = now();
          feed("\x1Bc");
          resizeTerminalToInitialSize();
          scheduleNextEvent();
        } else {
          pauseElapsedTime = duration * 1e3;
          setState("ended");
        }
      }
      function play() {
        if (eventTimeoutId) throw "already playing";
        if (events[nextEventIndex] === void 0) throw "already ended";
        if (effectiveStartAt !== null) {
          seek(effectiveStartAt);
        }
        resume();
        return true;
      }
      function pause() {
        if (!eventTimeoutId) return true;
        cancelNextEvent();
        pauseElapsedTime = now() - startTime;
        return true;
      }
      function resume() {
        startTime = now() - pauseElapsedTime;
        pauseElapsedTime = null;
        scheduleNextEvent();
      }
      function seek(where) {
        const isPlaying = !!eventTimeoutId;
        pause();
        const currentTime = (pauseElapsedTime ?? 0) / 1e3;
        if (typeof where === "string") {
          if (where === "<<") {
            where = currentTime - 5;
          } else if (where === ">>") {
            where = currentTime + 5;
          } else if (where === "<<<") {
            where = currentTime - 0.1 * duration;
          } else if (where === ">>>") {
            where = currentTime + 0.1 * duration;
          } else if (where[where.length - 1] === "%") {
            where = parseFloat(where.substring(0, where.length - 1)) / 100 * duration;
          }
        } else if (typeof where === "object") {
          if (where.marker === "prev") {
            where = findMarkerTimeBefore(currentTime) ?? 0;
            if (isPlaying && currentTime - where < 1) {
              where = findMarkerTimeBefore(where) ?? 0;
            }
          } else if (where.marker === "next") {
            where = findMarkerTimeAfter(currentTime) ?? duration;
          } else if (typeof where.marker === "number") {
            const marker = markers[where.marker];
            if (marker === void 0) {
              throw `invalid marker index: ${where.marker}`;
            } else {
              where = marker[0];
            }
          }
        }
        const targetTime = Math.min(Math.max(where, 0), duration);
        if (targetTime < lastEventTime) {
          feed("\x1Bc");
          resizeTerminalToInitialSize();
          nextEventIndex = 0;
          lastEventTime = 0;
        }
        let event = events[nextEventIndex];
        while (event && event[0] <= targetTime) {
          if (event[1] === "o") {
            executeEvent(event);
          }
          lastEventTime = event[0];
          event = events[++nextEventIndex];
        }
        pauseElapsedTime = targetTime * 1e3;
        effectiveStartAt = null;
        if (isPlaying) {
          resume();
        }
        return true;
      }
      function findMarkerTimeBefore(time) {
        if (markers.length == 0) return;
        let i2 = 0;
        let marker = markers[i2];
        let lastMarkerTimeBefore;
        while (marker && marker[0] < time) {
          lastMarkerTimeBefore = marker[0];
          marker = markers[++i2];
        }
        return lastMarkerTimeBefore;
      }
      function findMarkerTimeAfter(time) {
        if (markers.length == 0) return;
        let i2 = markers.length - 1;
        let marker = markers[i2];
        let firstMarkerTimeAfter;
        while (marker && marker[0] > time) {
          firstMarkerTimeAfter = marker[0];
          marker = markers[--i2];
        }
        return firstMarkerTimeAfter;
      }
      function step() {
        let nextEvent = events[nextEventIndex++];
        while (nextEvent !== void 0 && nextEvent[1] !== "o") {
          nextEvent = events[nextEventIndex++];
        }
        if (nextEvent === void 0) return;
        feed(nextEvent[2]);
        const targetTime = nextEvent[0];
        lastEventTime = targetTime;
        pauseElapsedTime = targetTime * 1e3;
        effectiveStartAt = null;
      }
      function restart() {
        if (eventTimeoutId) throw "still playing";
        if (events[nextEventIndex] !== void 0) throw "not ended";
        seek(0);
        resume();
        return true;
      }
      function getPoster(time) {
        return events.filter((e2) => e2[0] < time && e2[1] === "o").map((e2) => e2[2]);
      }
      function getCurrentTime() {
        if (eventTimeoutId) {
          return (now() - startTime) / 1e3;
        } else {
          return (pauseElapsedTime ?? 0) / 1e3;
        }
      }
      function resizeTerminalToInitialSize() {
        feed(`\x1B[8;${initialRows};${initialCols};t`);
      }
      return {
        init,
        play,
        pause,
        seek,
        step,
        restart,
        stop: pause,
        getCurrentTime
      };
    }
    function batcher(logger) {
      let minFrameTime = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1 / 60;
      let prevEvent;
      return (emit) => {
        let ic = 0;
        let oc = 0;
        return {
          step: (event) => {
            ic++;
            if (prevEvent === void 0) {
              prevEvent = event;
              return;
            }
            if (event[1] === prevEvent[1] && event[0] - prevEvent[0] < minFrameTime) {
              if (event[1] === "m" && event[2] !== "") {
                prevEvent[2] = event[2];
              } else {
                prevEvent[2] += event[2];
              }
            } else {
              emit(prevEvent);
              prevEvent = event;
              oc++;
            }
          },
          flush: () => {
            if (prevEvent !== void 0) {
              emit(prevEvent);
              oc++;
            }
            logger.debug(`batched ${ic} frames to ${oc} frames`);
          }
        };
      };
    }
    function prepare(recording2, logger, _ref4) {
      let {
        startAt = 0,
        idleTimeLimit,
        minFrameTime,
        inputOffset,
        markers_
      } = _ref4;
      let {
        events
      } = recording2;
      if (events === void 0) {
        events = buildEvents(recording2);
      }
      if (!(events instanceof Stream)) {
        events = new Stream(events);
      }
      idleTimeLimit = idleTimeLimit ?? recording2.idleTimeLimit ?? Infinity;
      const limiterOutput = {
        offset: 0
      };
      events = events.map(convertResizeEvent).transform(batcher(logger, minFrameTime)).map(timeLimiter(idleTimeLimit, startAt, limiterOutput)).map(markerWrapper());
      if (markers_ !== void 0) {
        markers_ = new Stream(markers_).map(normalizeMarker);
        events = events.filter((e2) => e2[1] !== "m").multiplex(markers_, (a2, b) => a2[0] < b[0]).map(markerWrapper());
      }
      events = events.toArray();
      if (inputOffset !== void 0) {
        events = events.map((e2) => e2[1] === "i" ? [e2[0] + inputOffset, e2[1], e2[2]] : e2);
        events.sort((a2, b) => a2[0] - b[0]);
      }
      const duration = events[events.length - 1][0];
      const effectiveStartAt = startAt - limiterOutput.offset;
      return {
        ...recording2,
        events,
        duration,
        effectiveStartAt
      };
    }
    function buildEvents(_ref5) {
      let {
        output = [],
        input = [],
        markers = []
      } = _ref5;
      const o2 = new Stream(output).map((e2) => [e2[0], "o", e2[1]]);
      const i2 = new Stream(input).map((e2) => [e2[0], "i", e2[1]]);
      const m2 = new Stream(markers).map(normalizeMarker);
      return o2.multiplex(i2, (a2, b) => a2[0] < b[0]).multiplex(m2, (a2, b) => a2[0] < b[0]);
    }
    function convertResizeEvent(e2) {
      if (e2[1] === "r") {
        const [cols, rows] = e2[2].split("x");
        return [e2[0], "o", `\x1B[8;${rows};${cols};t`];
      } else {
        return e2;
      }
    }
    function normalizeMarker(m2) {
      return typeof m2 === "number" ? [m2, "m", ""] : [m2[0], "m", m2[1]];
    }
    function timeLimiter(idleTimeLimit, startAt, output) {
      let prevT = 0;
      let shift2 = 0;
      return function(e2) {
        const delay = e2[0] - prevT;
        const delta = delay - idleTimeLimit;
        prevT = e2[0];
        if (delta > 0) {
          shift2 += delta;
          if (e2[0] < startAt) {
            output.offset += delta;
          }
        }
        return [e2[0] - shift2, e2[1], e2[2]];
      };
    }
    function markerWrapper() {
      let i2 = 0;
      return function(e2) {
        if (e2[1] === "m") {
          return [e2[0], e2[1], {
            index: i2++,
            time: e2[0],
            label: e2[2]
          }];
        } else {
          return e2;
        }
      };
    }
    function dump(recording2, filename2) {
      const link2 = document.createElement("a");
      const events = recording2.events.map((e2) => e2[1] === "m" ? [e2[0], e2[1], e2[2].label] : e2);
      const asciicast = unparseAsciicastV2({
        ...recording2,
        events
      });
      link2.href = URL.createObjectURL(new Blob([asciicast], {
        type: "text/plain"
      }));
      link2.download = filename2;
      link2.click();
    }
    function clock(_ref, _ref2, _ref3) {
      let {
        hourColor = 3,
        minuteColor = 4,
        separatorColor = 9
      } = _ref;
      let {
        feed
      } = _ref2;
      let {
        cols = 5,
        rows = 1
      } = _ref3;
      const middleRow = Math.floor(rows / 2);
      const leftPad = Math.floor(cols / 2) - 2;
      const setupCursor = `\x1B[?25l\x1B[1m\x1B[${middleRow}B`;
      let intervalId;
      const getCurrentTime = () => {
        const d2 = /* @__PURE__ */ new Date();
        const h2 = d2.getHours();
        const m2 = d2.getMinutes();
        const seqs = [];
        seqs.push("\r");
        for (let i2 = 0; i2 < leftPad; i2++) {
          seqs.push(" ");
        }
        seqs.push(`\x1B[3${hourColor}m`);
        if (h2 < 10) {
          seqs.push("0");
        }
        seqs.push(`${h2}`);
        seqs.push(`\x1B[3${separatorColor};5m:\x1B[25m`);
        seqs.push(`\x1B[3${minuteColor}m`);
        if (m2 < 10) {
          seqs.push("0");
        }
        seqs.push(`${m2}`);
        return seqs;
      };
      const updateTime = () => {
        getCurrentTime().forEach(feed);
      };
      return {
        init: () => {
          const duration = 24 * 60;
          const poster = [setupCursor].concat(getCurrentTime());
          return {
            cols,
            rows,
            duration,
            poster
          };
        },
        play: () => {
          feed(setupCursor);
          updateTime();
          intervalId = setInterval(updateTime, 1e3);
          return true;
        },
        stop: () => {
          clearInterval(intervalId);
        },
        getCurrentTime: () => {
          const d2 = /* @__PURE__ */ new Date();
          return d2.getHours() * 60 + d2.getMinutes();
        }
      };
    }
    function random(src, _ref) {
      let {
        feed,
        setTimeout: setTimeout2
      } = _ref;
      const base2 = " ".charCodeAt(0);
      const range = "~".charCodeAt(0) - base2;
      let timeoutId;
      const schedule = () => {
        const t2 = Math.pow(5, Math.random() * 4);
        timeoutId = setTimeout2(print, t2);
      };
      const print = () => {
        schedule();
        const char = String.fromCharCode(base2 + Math.floor(Math.random() * range));
        feed(char);
      };
      return () => {
        schedule();
        return () => clearInterval(timeoutId);
      };
    }
    function benchmark(_ref, _ref2) {
      let {
        url,
        iterations = 10
      } = _ref;
      let {
        feed,
        setState,
        now
      } = _ref2;
      let data;
      let byteCount = 0;
      return {
        async init() {
          const recording2 = await parse$2(await fetch(url));
          const {
            cols,
            rows,
            events
          } = recording2;
          data = Array.from(events).filter((_ref3) => {
            let [_time, type, _text] = _ref3;
            return type === "o";
          }).map((_ref4) => {
            let [time, _type, text2] = _ref4;
            return [time, text2];
          });
          const duration = data[data.length - 1][0];
          for (const [_2, text2] of data) {
            byteCount += new Blob([text2]).size;
          }
          return {
            cols,
            rows,
            duration
          };
        },
        play() {
          const startTime = now();
          for (let i2 = 0; i2 < iterations; i2++) {
            for (const [_2, text2] of data) {
              feed(text2);
            }
            feed("\x1Bc");
          }
          const endTime = now();
          const duration = (endTime - startTime) / 1e3;
          const throughput = byteCount * iterations / duration;
          const throughputMbs = byteCount / (1024 * 1024) * iterations / duration;
          console.info("benchmark: result", {
            byteCount,
            iterations,
            duration,
            throughput,
            throughputMbs
          });
          setTimeout(() => {
            setState("stopped", {
              reason: "ended"
            });
          }, 0);
          return true;
        }
      };
    }
    class Queue {
      constructor() {
        this.items = [];
        this.onPush = void 0;
      }
      push(item) {
        this.items.push(item);
        if (this.onPush !== void 0) {
          this.onPush(this.popAll());
          this.onPush = void 0;
        }
      }
      popAll() {
        if (this.items.length > 0) {
          const items = this.items;
          this.items = [];
          return items;
        } else {
          const thiz = this;
          return new Promise((resolve) => {
            thiz.onPush = resolve;
          });
        }
      }
    }
    function getBuffer(bufferTime, feed, setTime, baseStreamTime, minFrameTime, logger) {
      if (bufferTime === 0) {
        logger.debug("using no buffer");
        return nullBuffer(feed);
      } else {
        bufferTime = bufferTime ?? {};
        let getBufferTime;
        if (typeof bufferTime === "number") {
          logger.debug(`using fixed time buffer (${bufferTime} ms)`);
          getBufferTime = (_latency) => bufferTime;
        } else if (typeof bufferTime === "function") {
          logger.debug("using custom dynamic buffer");
          getBufferTime = bufferTime({
            logger
          });
        } else {
          logger.debug("using adaptive buffer", bufferTime);
          getBufferTime = adaptiveBufferTimeProvider({
            logger
          }, bufferTime);
        }
        return buffer$1(getBufferTime, feed, setTime, logger, baseStreamTime ?? 0, minFrameTime);
      }
    }
    function nullBuffer(feed) {
      return {
        pushEvent(event) {
          if (event[1] === "o") {
            feed(event[2]);
          } else if (event[1] === "r") {
            const [cols, rows] = event[2].split("x");
            feed(`\x1B[8;${rows};${cols};t`);
          }
        },
        pushText(text2) {
          feed(text2);
        },
        stop() {
        }
      };
    }
    function buffer$1(getBufferTime, feed, setTime, logger, baseStreamTime) {
      let minFrameTime = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 1 / 60;
      let epoch = performance.now() - baseStreamTime * 1e3;
      let bufferTime = getBufferTime(0);
      const queue = new Queue();
      minFrameTime *= 1e3;
      let prevElapsedStreamTime = -minFrameTime;
      let stop = false;
      function elapsedWallTime() {
        return performance.now() - epoch;
      }
      setTimeout(async () => {
        while (!stop) {
          const events = await queue.popAll();
          if (stop) return;
          for (const event of events) {
            const elapsedStreamTime = event[0] * 1e3 + bufferTime;
            if (elapsedStreamTime - prevElapsedStreamTime < minFrameTime) {
              feed(event[2]);
              continue;
            }
            const delay = elapsedStreamTime - elapsedWallTime();
            if (delay > 0) {
              await sleep(delay);
              if (stop) return;
            }
            setTime(event[0]);
            feed(event[2]);
            prevElapsedStreamTime = elapsedStreamTime;
          }
        }
      }, 0);
      return {
        pushEvent(event) {
          let latency = elapsedWallTime() - event[0] * 1e3;
          if (latency < 0) {
            logger.debug(`correcting epoch by ${latency} ms`);
            epoch += latency;
            latency = 0;
          }
          bufferTime = getBufferTime(latency);
          if (event[1] === "o") {
            queue.push(event);
          } else if (event[1] === "r") {
            const [cols, rows] = event[2].split("x");
            queue.push([event[0], "o", `\x1B[8;${rows};${cols};t`]);
          }
        },
        pushText(text2) {
          queue.push([elapsedWallTime(), "o", text2]);
        },
        stop() {
          stop = true;
          queue.push(void 0);
        }
      };
    }
    function sleep(t2) {
      return new Promise((resolve) => {
        setTimeout(resolve, t2);
      });
    }
    function adaptiveBufferTimeProvider(_ref, _ref2) {
      let {
        logger
      } = _ref;
      let {
        minTime = 25,
        maxLevel = 100,
        interval = 50,
        windowSize = 20,
        smoothingFactor = 0.2,
        minImprovementDuration = 1e3
      } = _ref2;
      let bufferLevel = 0;
      let bufferTime = calcBufferTime(bufferLevel);
      let latencies = [];
      let maxJitter = 0;
      let jitterRange = 0;
      let improvementTs = null;
      function calcBufferTime(level) {
        if (level === 0) {
          return minTime;
        } else {
          return interval * level;
        }
      }
      return (latency) => {
        latencies.push(latency);
        if (latencies.length < windowSize) {
          return bufferTime;
        }
        latencies = latencies.slice(-windowSize);
        const currentMinJitter = min(latencies);
        const currentMaxJitter = max$1(latencies);
        const currentJitterRange = currentMaxJitter - currentMinJitter;
        maxJitter = currentMaxJitter * smoothingFactor + maxJitter * (1 - smoothingFactor);
        jitterRange = currentJitterRange * smoothingFactor + jitterRange * (1 - smoothingFactor);
        const minBufferTime = maxJitter + jitterRange;
        if (latency > bufferTime) {
          logger.debug("buffer underrun", {
            latency,
            maxJitter,
            jitterRange,
            bufferTime
          });
        }
        if (bufferLevel < maxLevel && minBufferTime > bufferTime) {
          bufferTime = calcBufferTime(bufferLevel += 1);
          logger.debug(`jitter increased, raising bufferTime`, {
            latency,
            maxJitter,
            jitterRange,
            bufferTime
          });
        } else if (bufferLevel > 1 && minBufferTime < calcBufferTime(bufferLevel - 2) || bufferLevel == 1 && minBufferTime < calcBufferTime(bufferLevel - 1)) {
          if (improvementTs === null) {
            improvementTs = performance.now();
          } else if (performance.now() - improvementTs > minImprovementDuration) {
            improvementTs = performance.now();
            bufferTime = calcBufferTime(bufferLevel -= 1);
            logger.debug(`jitter decreased, lowering bufferTime`, {
              latency,
              maxJitter,
              jitterRange,
              bufferTime
            });
          }
          return bufferTime;
        }
        improvementTs = null;
        return bufferTime;
      };
    }
    function min(numbers) {
      return numbers.reduce((prev, cur2) => cur2 < prev ? cur2 : prev);
    }
    function max$1(numbers) {
      return numbers.reduce((prev, cur2) => cur2 > prev ? cur2 : prev);
    }
    function exponentialDelay(attempt) {
      return Math.min(500 * Math.pow(2, attempt), 5e3);
    }
    function websocket(_ref, _ref2) {
      let {
        url,
        bufferTime,
        reconnectDelay = exponentialDelay,
        minFrameTime
      } = _ref;
      let {
        feed,
        reset,
        setState,
        logger
      } = _ref2;
      logger = new PrefixedLogger(logger, "websocket: ");
      const utfDecoder = new TextDecoder();
      let socket;
      let buf;
      let clock2 = new NullClock();
      let reconnectAttempt = 0;
      let successfulConnectionTimeout;
      let stop = false;
      let wasOnline = false;
      function initBuffer(baseStreamTime) {
        if (buf !== void 0) buf.stop();
        buf = getBuffer(bufferTime, feed, (t2) => clock2.setTime(t2), baseStreamTime, minFrameTime, logger);
      }
      function detectProtocol(event) {
        if (typeof event.data === "string") {
          logger.info("activating asciicast-compatible handler");
          initBuffer();
          socket.onmessage = handleJsonMessage;
          handleJsonMessage(event);
        } else {
          const arr2 = new Uint8Array(event.data);
          if (arr2[0] == 65 && arr2[1] == 76 && arr2[2] == 105 && arr2[3] == 83) {
            if (arr2[4] == 1) {
              logger.info("activating ALiS v1 handler");
              socket.onmessage = handleStreamMessage;
            } else {
              logger.warn(`unsupported ALiS version (${arr2[4]})`);
              socket.close();
            }
          } else {
            logger.info("activating raw text handler");
            initBuffer();
            const text2 = utfDecoder.decode(arr2);
            const size = sizeFromResizeSeq(text2) ?? sizeFromScriptStartMessage(text2);
            if (size !== void 0) {
              const [cols, rows] = size;
              handleResetMessage(cols, rows, 0, void 0);
            }
            socket.onmessage = handleRawTextMessage;
            handleRawTextMessage(event);
          }
        }
      }
      function sizeFromResizeSeq(text2) {
        const match = text2.match(/\x1b\[8;(\d+);(\d+)t/);
        if (match !== null) {
          return [parseInt(match[2], 10), parseInt(match[1], 10)];
        }
      }
      function sizeFromScriptStartMessage(text2) {
        const match = text2.match(/\[.*COLUMNS="(\d{1,3})" LINES="(\d{1,3})".*\]/);
        if (match !== null) {
          return [parseInt(match[1], 10), parseInt(match[2], 10)];
        }
      }
      function handleJsonMessage(event) {
        const e2 = JSON.parse(event.data);
        if (Array.isArray(e2)) {
          buf.pushEvent(e2);
        } else if (e2.cols !== void 0 || e2.width !== void 0) {
          handleResetMessage(e2.cols ?? e2.width, e2.rows ?? e2.height, e2.time, e2.init ?? void 0);
        } else if (e2.status === "offline") {
          handleOfflineMessage();
        }
      }
      const THEME_LEN = 54;
      function handleStreamMessage(event) {
        const buffer2 = event.data;
        const view = new DataView(buffer2);
        const type = view.getUint8(0);
        let offset2 = 1;
        if (type === 1) {
          const cols = view.getUint16(offset2, true);
          offset2 += 2;
          const rows = view.getUint16(offset2, true);
          offset2 += 2;
          const time = view.getFloat32(offset2, true);
          offset2 += 4;
          const themeFormat = view.getUint8(offset2);
          offset2 += 1;
          let theme2;
          if (themeFormat === 1) {
            theme2 = parseTheme2(new Uint8Array(buffer2, offset2, THEME_LEN));
            offset2 += THEME_LEN;
          }
          const initLen = view.getUint32(offset2, true);
          offset2 += 4;
          let init;
          if (initLen > 0) {
            init = utfDecoder.decode(new Uint8Array(buffer2, offset2, initLen));
            offset2 += initLen;
          }
          handleResetMessage(cols, rows, time, init, theme2);
        } else if (type === 111) {
          const time = view.getFloat32(1, true);
          const len = view.getUint32(5, true);
          const text2 = utfDecoder.decode(new Uint8Array(buffer2, 9, len));
          buf.pushEvent([time, "o", text2]);
        } else if (type === 114) {
          const time = view.getFloat32(1, true);
          const cols = view.getUint16(5, true);
          const rows = view.getUint16(7, true);
          buf.pushEvent([time, "r", `${cols}x${rows}`]);
        } else if (type === 4) {
          handleOfflineMessage();
        } else {
          logger.debug(`unknown frame type: ${type}`);
        }
      }
      function parseTheme2(arr2) {
        const foreground = hexColor(arr2[0], arr2[1], arr2[2]);
        const background = hexColor(arr2[3], arr2[4], arr2[5]);
        const palette = [];
        for (let i2 = 0; i2 < 16; i2++) {
          palette.push(hexColor(arr2[i2 * 3 + 6], arr2[i2 * 3 + 7], arr2[i2 * 3 + 8]));
        }
        return {
          foreground,
          background,
          palette
        };
      }
      function hexColor(r2, g2, b) {
        return `#${byteToHex(r2)}${byteToHex(g2)}${byteToHex(b)}`;
      }
      function byteToHex(value) {
        return value.toString(16).padStart(2, "0");
      }
      function handleRawTextMessage(event) {
        buf.pushText(utfDecoder.decode(event.data));
      }
      function handleResetMessage(cols, rows, time, init, theme2) {
        logger.debug(`stream reset (${cols}x${rows} @${time})`);
        setState("playing");
        initBuffer(time);
        reset(cols, rows, init, theme2);
        clock2 = new Clock();
        wasOnline = true;
        if (typeof time === "number") {
          clock2.setTime(time);
        }
      }
      function handleOfflineMessage() {
        logger.info("stream offline");
        if (wasOnline) {
          setState("offline", {
            message: "Stream ended"
          });
        } else {
          setState("offline", {
            message: "Stream offline"
          });
        }
        clock2 = new NullClock();
      }
      function connect() {
        socket = new WebSocket(url);
        socket.binaryType = "arraybuffer";
        socket.onopen = () => {
          logger.info("opened");
          successfulConnectionTimeout = setTimeout(() => {
            reconnectAttempt = 0;
          }, 1e3);
        };
        socket.onmessage = detectProtocol;
        socket.onclose = (event) => {
          if (stop || event.code === 1e3 || event.code === 1005) {
            logger.info("closed");
            setState("ended", {
              message: "Stream ended"
            });
          } else {
            clearTimeout(successfulConnectionTimeout);
            const delay = reconnectDelay(reconnectAttempt++);
            logger.info(`unclean close, reconnecting in ${delay}...`);
            setState("loading");
            setTimeout(connect, delay);
          }
        };
        wasOnline = false;
      }
      return {
        play: () => {
          connect();
        },
        stop: () => {
          stop = true;
          if (buf !== void 0) buf.stop();
          if (socket !== void 0) socket.close();
        },
        getCurrentTime: () => clock2.getTime()
      };
    }
    function eventsource(_ref, _ref2) {
      let {
        url,
        bufferTime,
        minFrameTime
      } = _ref;
      let {
        feed,
        reset,
        setState,
        logger
      } = _ref2;
      logger = new PrefixedLogger(logger, "eventsource: ");
      let es;
      let buf;
      let clock2 = new NullClock();
      function initBuffer(baseStreamTime) {
        if (buf !== void 0) buf.stop();
        buf = getBuffer(bufferTime, feed, (t2) => clock2.setTime(t2), baseStreamTime, minFrameTime, logger);
      }
      return {
        play: () => {
          es = new EventSource(url);
          es.addEventListener("open", () => {
            logger.info("opened");
            initBuffer();
          });
          es.addEventListener("error", (e2) => {
            logger.info("errored");
            logger.debug({
              e: e2
            });
            setState("loading");
          });
          es.addEventListener("message", (event) => {
            const e2 = JSON.parse(event.data);
            if (Array.isArray(e2)) {
              buf.pushEvent(e2);
            } else if (e2.cols !== void 0 || e2.width !== void 0) {
              const cols = e2.cols ?? e2.width;
              const rows = e2.rows ?? e2.height;
              logger.debug(`vt reset (${cols}x${rows})`);
              setState("playing");
              initBuffer(e2.time);
              reset(cols, rows, e2.init ?? void 0);
              clock2 = new Clock();
              if (typeof e2.time === "number") {
                clock2.setTime(e2.time);
              }
            } else if (e2.state === "offline") {
              logger.info("stream offline");
              setState("offline", {
                message: "Stream offline"
              });
              clock2 = new NullClock();
            }
          });
          es.addEventListener("done", () => {
            logger.info("closed");
            es.close();
            setState("ended", {
              message: "Stream ended"
            });
          });
        },
        stop: () => {
          if (buf !== void 0) buf.stop();
          if (es !== void 0) es.close();
        },
        getCurrentTime: () => clock2.getTime()
      };
    }
    async function parse$1(responses, _ref) {
      let {
        encoding
      } = _ref;
      const textDecoder = new TextDecoder(encoding);
      let cols;
      let rows;
      let timing = (await responses[0].text()).split("\n").filter((line2) => line2.length > 0).map((line2) => line2.split(" "));
      if (timing[0].length < 3) {
        timing = timing.map((entry) => ["O", entry[0], entry[1]]);
      }
      const buffer2 = await responses[1].arrayBuffer();
      const array = new Uint8Array(buffer2);
      const dataOffset = array.findIndex((byte) => byte == 10) + 1;
      const header = textDecoder.decode(array.subarray(0, dataOffset));
      const sizeMatch = header.match(/COLUMNS="(\d+)" LINES="(\d+)"/);
      if (sizeMatch !== null) {
        cols = parseInt(sizeMatch[1], 10);
        rows = parseInt(sizeMatch[2], 10);
      }
      const stdout = {
        array,
        cursor: dataOffset
      };
      let stdin = stdout;
      if (responses[2] !== void 0) {
        const buffer3 = await responses[2].arrayBuffer();
        const array2 = new Uint8Array(buffer3);
        stdin = {
          array: array2,
          cursor: dataOffset
        };
      }
      const events = [];
      let time = 0;
      for (const entry of timing) {
        time += parseFloat(entry[1]);
        if (entry[0] === "O") {
          const count = parseInt(entry[2], 10);
          const bytes = stdout.array.subarray(stdout.cursor, stdout.cursor + count);
          const text2 = textDecoder.decode(bytes);
          events.push([time, "o", text2]);
          stdout.cursor += count;
        } else if (entry[0] === "I") {
          const count = parseInt(entry[2], 10);
          const bytes = stdin.array.subarray(stdin.cursor, stdin.cursor + count);
          const text2 = textDecoder.decode(bytes);
          events.push([time, "i", text2]);
          stdin.cursor += count;
        } else if (entry[0] === "S" && entry[2] === "SIGWINCH") {
          const cols2 = parseInt(entry[4].slice(5), 10);
          const rows2 = parseInt(entry[3].slice(5), 10);
          events.push([time, "r", `${cols2}x${rows2}`]);
        } else if (entry[0] === "H" && entry[2] === "COLUMNS") {
          cols = parseInt(entry[3], 10);
        } else if (entry[0] === "H" && entry[2] === "LINES") {
          rows = parseInt(entry[3], 10);
        }
      }
      cols = cols ?? 80;
      rows = rows ?? 24;
      return {
        cols,
        rows,
        events
      };
    }
    async function parse$3(response, _ref) {
      let {
        encoding
      } = _ref;
      const textDecoder = new TextDecoder(encoding);
      const buffer2 = await response.arrayBuffer();
      const array = new Uint8Array(buffer2);
      const firstFrame = parseFrame(array);
      const baseTime = firstFrame.time;
      const firstFrameText = textDecoder.decode(firstFrame.data);
      const sizeMatch = firstFrameText.match(/\x1b\[8;(\d+);(\d+)t/);
      const events = [];
      let cols = 80;
      let rows = 24;
      if (sizeMatch !== null) {
        cols = parseInt(sizeMatch[2], 10);
        rows = parseInt(sizeMatch[1], 10);
      }
      let cursor = 0;
      let frame = parseFrame(array);
      while (frame !== void 0) {
        const time = frame.time - baseTime;
        const text2 = textDecoder.decode(frame.data);
        events.push([time, "o", text2]);
        cursor += frame.len;
        frame = parseFrame(array.subarray(cursor));
      }
      return {
        cols,
        rows,
        events
      };
    }
    function parseFrame(array) {
      if (array.length < 13) return;
      const time = parseTimestamp(array.subarray(0, 8));
      const len = parseNumber(array.subarray(8, 12));
      const data = array.subarray(12, 12 + len);
      return {
        time,
        data,
        len: len + 12
      };
    }
    function parseNumber(array) {
      return array[0] + array[1] * 256 + array[2] * 256 * 256 + array[3] * 256 * 256 * 256;
    }
    function parseTimestamp(array) {
      const sec = parseNumber(array.subarray(0, 4));
      const usec = parseNumber(array.subarray(4, 8));
      return sec + usec / 1e6;
    }
    const drivers = /* @__PURE__ */ new Map([["benchmark", benchmark], ["clock", clock], ["eventsource", eventsource], ["random", random], ["recording", recording], ["websocket", websocket]]);
    const parsers = /* @__PURE__ */ new Map([["asciicast", parse$2], ["typescript", parse$1], ["ttyrec", parse$3]]);
    function create(src, elem) {
      let opts = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      const logger = opts.logger ?? new DummyLogger();
      const core = new Core(getDriver(src), {
        logger,
        cols: opts.cols,
        rows: opts.rows,
        loop: opts.loop,
        speed: opts.speed,
        preload: opts.preload,
        startAt: opts.startAt,
        poster: opts.poster,
        markers: opts.markers,
        pauseOnMarkers: opts.pauseOnMarkers,
        idleTimeLimit: opts.idleTimeLimit
      });
      const metrics = measureTerminal(opts.terminalFontFamily, opts.terminalLineHeight);
      const props = {
        logger,
        core,
        cols: opts.cols,
        rows: opts.rows,
        fit: opts.fit,
        controls: opts.controls ?? "auto",
        autoPlay: opts.autoPlay ?? opts.autoplay,
        terminalFontSize: opts.terminalFontSize,
        terminalFontFamily: opts.terminalFontFamily,
        terminalLineHeight: opts.terminalLineHeight,
        theme: opts.theme,
        ...metrics
      };
      let el;
      const dispose2 = render(() => {
        el = createComponent(Player, props);
        return el;
      }, elem);
      const player = {
        el,
        dispose: dispose2,
        getCurrentTime: () => core.getCurrentTime(),
        getDuration: () => core.getDuration(),
        play: () => core.play(),
        pause: () => core.pause(),
        seek: (pos2) => core.seek(pos2)
      };
      player.addEventListener = (name2, callback) => {
        return core.addEventListener(name2, callback.bind(player));
      };
      return player;
    }
    function getDriver(src) {
      if (typeof src === "function") return src;
      if (typeof src === "string") {
        if (src.substring(0, 5) == "ws://" || src.substring(0, 6) == "wss://") {
          src = {
            driver: "websocket",
            url: src
          };
        } else if (src.substring(0, 6) == "clock:") {
          src = {
            driver: "clock"
          };
        } else if (src.substring(0, 7) == "random:") {
          src = {
            driver: "random"
          };
        } else if (src.substring(0, 10) == "benchmark:") {
          src = {
            driver: "benchmark",
            url: src.substring(10)
          };
        } else {
          src = {
            driver: "recording",
            url: src
          };
        }
      }
      if (src.driver === void 0) {
        src.driver = "recording";
      }
      if (src.driver == "recording") {
        if (src.parser === void 0) {
          src.parser = "asciicast";
        }
        if (typeof src.parser === "string") {
          if (parsers.has(src.parser)) {
            src.parser = parsers.get(src.parser);
          } else {
            throw `unknown parser: ${src.parser}`;
          }
        }
      }
      if (drivers.has(src.driver)) {
        const driver = drivers.get(src.driver);
        return (callbacks, opts) => driver(src, callbacks, opts);
      } else {
        throw `unsupported driver: ${JSON.stringify(src)}`;
      }
    }
    function measureTerminal(fontFamily, lineHeight) {
      const cols = 80;
      const rows = 24;
      const div = document.createElement("div");
      div.style.height = "0px";
      div.style.overflow = "hidden";
      div.style.fontSize = "15px";
      document.body.appendChild(div);
      let el;
      const dispose2 = render(() => {
        el = createComponent(Terminal, {
          cols,
          rows,
          lineHeight,
          fontFamily,
          lines: []
        });
        return el;
      }, div);
      const metrics = {
        charW: el.clientWidth / cols,
        charH: el.clientHeight / rows,
        bordersW: el.offsetWidth - el.clientWidth,
        bordersH: el.offsetHeight - el.clientHeight
      };
      dispose2();
      document.body.removeChild(div);
      return metrics;
    }
    const AsciiCinemaPlayer = ({
      id,
      rows,
      cols,
      inputUrl,
      outputUrl,
      timingUrl,
      fit,
      speed,
      autoPlay,
      loop,
      theme: theme2,
      idleTimeLimit = 2,
      style: style2
    }) => {
      const playerContainerRef = A$1();
      y(() => {
        const player = create(
          {
            url: [timingUrl, outputUrl, inputUrl],
            parser: "typescript"
          },
          playerContainerRef.current,
          {
            rows,
            cols,
            autoPlay,
            loop,
            theme: theme2,
            speed,
            idleTimeLimit,
            fit
          }
        );
        player.play();
        return () => {
          player.dispose();
        };
      }, []);
      return m$1`
    <div
      id="asciinema-player-${id || "default"}"
      ref=${playerContainerRef}
      style=${{ ...style2 }}
    ></div>
  `;
    };
    const LightboxCarousel = ({ slides }) => {
      const [isOpen, setIsOpen] = h(false);
      const [showOverlay, setShowOverlay] = h(false);
      const [currentIndex, setCurrentIndex] = h(0);
      const openLightbox = (index) => {
        setCurrentIndex(index);
        setShowOverlay(true);
        setTimeout(() => setIsOpen(true), 10);
      };
      const closeLightbox = () => {
        setIsOpen(false);
      };
      y(() => {
        if (!isOpen && showOverlay) {
          const timer = setTimeout(() => {
            setShowOverlay(false);
          }, 300);
          return () => clearTimeout(timer);
        }
      }, [isOpen, showOverlay]);
      const showNext = q$1(() => {
        setCurrentIndex((prev) => {
          return (prev + 1) % slides.length;
        });
      }, [slides]);
      const showPrev = q$1(() => {
        setCurrentIndex((prev) => (prev - 1 + slides.length) % slides.length);
      }, [slides]);
      y(() => {
        if (!isOpen) return;
        const handleKeyUp = (e2) => {
          if (e2.key === "Escape") {
            closeLightbox();
          } else if (e2.key === "ArrowRight") {
            showNext();
          } else if (e2.key === "ArrowLeft") {
            showPrev();
          }
          e2.preventDefault();
          e2.stopPropagation();
        };
        window.addEventListener("keyup", handleKeyUp, true);
        return () => window.removeEventListener("keyup", handleKeyUp);
      }, [isOpen, showNext, showPrev]);
      const buttonStyle = {
        position: "absolute",
        top: "50%",
        transform: "translateY(-50%)",
        background: "none",
        color: "#fff",
        border: "none",
        padding: "0.5em",
        fontSize: "3em",
        cursor: "pointer",
        zIndex: "9999"
      };
      const prevButtonStyle = {
        ...buttonStyle,
        left: "10px"
      };
      const nextButtonStyle = {
        ...buttonStyle,
        right: "10px"
      };
      const overlayStyle = {
        position: "fixed",
        top: 0,
        left: 0,
        width: "100vw",
        height: "100vh",
        background: "rgba(0,0,0,0.8)",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        opacity: isOpen ? "1" : "0",
        visibility: isOpen ? "visible" : "hidden",
        transition: "opacity 0.3s ease, visibility 0.3s ease",
        zIndex: 9998
      };
      const closeButtonWrapperStyle = {
        position: "absolute",
        top: "10px",
        right: "10px"
      };
      const closeButtonStyle = {
        border: "none",
        background: "none",
        color: "#fff",
        fontSize: "3em",
        fontWeight: "500",
        cursor: "pointer",
        paddingLeft: "1em",
        paddingBottom: "1em",
        zIndex: "10000"
      };
      const contentStyle = {
        maxWidth: "90%",
        maxHeight: "90%",
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
        position: "relative",
        // fade in/out
        opacity: isOpen ? "1" : "0",
        visibility: isOpen ? "visible" : "hidden",
        transition: "opacity 0.3s ease, visibility 0.3s ease",
        zIndex: 9999
      };
      return m$1`
    <div className="lightbox-carousel-container">
      <!-- Thumbnails -->
      <div
        className="carousel-thumbs"
        style=${{
        display: "grid",
        gridTemplateColumns: "auto auto auto auto"
      }}
      >
        ${slides.map((slide, index) => {
        return m$1`
            <div
              key=${index}
              className="carousel-thumb"
              onClick=${() => openLightbox(index)}
              style=${{
          background: "black",
          color: "white",
          padding: "4em 0",
          border: "0",
          margin: "5px",
          cursor: "pointer",
          textAlign: "center"
        }}
            >
              <div>${slide.label}</div>
              <div>
                <i
                  class=${ApplicationIcons.play}
                  style=${{ fontSize: "4em" }}
                ></i>
              </div>
            </div>
          `;
      })}
      </div>

      <!-- Lightbox Overlay -->
      ${showOverlay && m$1`
        <div className="lightbox-overlay" style=${overlayStyle}>
          <div style=${closeButtonWrapperStyle}>
            <button style=${closeButtonStyle} onClick=${closeLightbox}>
              <i class=${ApplicationIcons.close}></i>
            </button>
          </div>

          ${slides.length > 1 ? m$1` <button style=${prevButtonStyle} onClick=${showPrev}>
                <i class=${ApplicationIcons.previous}></i>
              </button>` : ""}
          ${slides.length > 1 ? m$1` <button style=${nextButtonStyle} onClick=${showNext}>
                <i class=${ApplicationIcons.next}></i>
              </button>` : ""}

          <div
            key=${`carousel-slide-${currentIndex}`}
            className="lightbox-content"
            style=${contentStyle}
          >
            ${slides[currentIndex].render()}
          </div>
        </div>
      `}
    </div>
  `;
    };
    const HumanBaselineView = ({
      started,
      runtime,
      answer,
      completed,
      running,
      sessionLogs
    }) => {
      const player_fns = [];
      const revokableUrls = [];
      const revokableUrl = (data) => {
        const blob = new Blob([data], { type: "text/plain" });
        const url = URL.createObjectURL(blob);
        revokableUrls.push(url);
        return url;
      };
      y(() => {
        return () => {
          revokableUrls.forEach((url) => URL.revokeObjectURL(url));
        };
      }, []);
      let count = 1;
      for (const sessionLog of sessionLogs) {
        const rows = extractSize(sessionLog.output, "LINES");
        const cols = extractSize(sessionLog.output, "COLUMNS");
        const currentCount = count;
        const title = sessionLogs.length === 1 ? "Terminal Session" : `Terminal Session ${currentCount}`;
        player_fns.push({
          label: title,
          render: () => m$1`
        <${AsciiCinemaPlayer}
          id=${`player-${currentCount}`}
          inputUrl=${revokableUrl(sessionLog.input)}
          outputUrl=${revokableUrl(sessionLog.output)}
          timingUrl=${revokableUrl(sessionLog.timing)}
          rows=${rows}
          cols=${cols}
          style=${{
            maxHeight: "100vh",
            maxWidth: "100vw",
            height: `${parseInt(rows) * 2}em`,
            width: `${parseInt(cols) * 2}em`
          }}
          fit="both"
        />
      `
        });
        count += 1;
      }
      const StatusMessage = ({ completed: completed2, running: running2, answer: answer2 }) => {
        if (running2) {
          return m$1`<span style=${{ ...TextStyle.label }}>Running</span>`;
        } else if (completed2) {
          return m$1`<span style=${{ ...TextStyle.label, marginRight: "0.5em" }}
          >Answer</span
        ><span>${answer2}</span>`;
        } else {
          return "Unknown status";
        }
      };
      return m$1`<div style=${{ display: "flex", justifyContent: "center" }}>
    <div
      style=${{
        display: "grid",
        gridTemplateColumns: "1fr 1fr 1fr",
        gridTemplateRows: "auto auto",
        width: "100%"
      }}
    >
      <div
        style=${{
        justifySelf: "start",
        ...TextStyle.label
      }}
      >
        ${started ? formatDateTime(started) : ""}${runtime ? ` (${formatTime$1(Math.floor(runtime))})` : ""}
      </div>
      <div
        style=${{
        justifySelf: "center",
        ...TextStyle.label
      }}
      ></div>
      <div
        style=${{
        justifySelf: "end"
      }}
      >
        <${StatusMessage}
          completed=${completed}
          running=${running}
          answer=${answer}
        />
      </div>
      <div
        style=${{
        gridColumn: "span 3",
        width: "100%"
      }}
      >
        <${LightboxCarousel} slides=${player_fns} />
      </div>
    </div>
  </div>`;
    };
    const extractSize = (value, label) => {
      const regex2 = new RegExp(`${label}="(\\d+)"`);
      const match = value.match(regex2);
      const size = match ? match[1] : void 0;
      return size;
    };
    const system_msg_added_sig = {
      type: "system_message",
      signature: {
        remove: ["/messages/0/source"],
        replace: ["/messages/0/role", "/messages/0/content"],
        add: ["/messages/1"]
      },
      render: (_changes, resolvedState) => {
        const message = resolvedState["messages"][0];
        return m$1`<${ChatView}
      id="system_msg_event_preview"
      messages=${[message]}
    />`;
      }
    };
    const kToolPattern = "/tools/(\\d+)";
    const use_tools = {
      type: "use_tools",
      signature: {
        add: ["/tools/0"],
        replace: ["/tool_choice"],
        remove: []
      },
      render: (changes, resolvedState) => {
        return renderTools(changes, resolvedState);
      }
    };
    const add_tools = {
      type: "add_tools",
      signature: {
        add: [kToolPattern],
        replace: [],
        remove: []
      },
      render: (changes, resolvedState) => {
        return renderTools(changes, resolvedState);
      }
    };
    const humanAgentKey = (key2) => {
      return `HumanAgentState:${key2}`;
    };
    const human_baseline_session = {
      type: "human_baseline_session",
      signature: {
        add: ["HumanAgentState:logs"],
        replace: [],
        remove: []
      },
      render: (changes, resolvedState) => {
        const started = resolvedState[humanAgentKey("started_running")];
        const runtime = resolvedState[humanAgentKey("accumulated_time")];
        const answer = resolvedState[humanAgentKey("answer")];
        const completed = !!answer;
        const running = resolvedState[humanAgentKey("running_state")];
        const rawSessions = resolvedState[humanAgentKey("logs")];
        const startedDate = started ? new Date(started * 1e3) : void 0;
        const sessions = {};
        if (rawSessions) {
          for (const key2 of Object.keys(rawSessions)) {
            const value = rawSessions[key2];
            const match = key2.match(/(.*)_(\d+_\d+)\.(.*)/);
            if (match) {
              const user = match[1];
              const timestamp = match[2];
              const type = match[3];
              sessions[timestamp] = sessions[timestamp] || {};
              sessions[timestamp][type] = value;
              sessions[timestamp]["user"] = user;
            }
          }
        }
        return m$1`<${HumanBaselineView}
      started=${startedDate}
      running=${running}
      completed=${completed}
      answer=${answer}
      runtime=${runtime}
      sessionLogs=${Object.values(sessions)}
    />`;
      }
    };
    const renderTools = (changes, resolvedState) => {
      const toolIndexes = [];
      for (const change of changes) {
        const match = change.path.match(kToolPattern);
        if (match) {
          toolIndexes.push(match[1]);
        }
      }
      const toolName = (toolChoice) => {
        if (typeof toolChoice === "object" && toolChoice) {
          return toolChoice["name"];
        } else {
          return toolChoice;
        }
      };
      const toolsInfo = {};
      const hasToolChoice = changes.find((change) => {
        return change.path.startsWith("/tool_choice");
      });
      if (resolvedState.tool_choice && hasToolChoice) {
        toolsInfo["Tool Choice"] = toolName(resolvedState.tool_choice);
      }
      if (resolvedState.tools.length > 0) {
        if (toolIndexes.length === 0) {
          toolsInfo["Tools"] = m$1`<${Tools}
        toolDefinitions=${resolvedState.tools}
      />`;
        } else {
          const filtered = resolvedState.tools.filter((_2, index) => {
            return toolIndexes.includes(index.toString());
          });
          toolsInfo["Tools"] = m$1`<${Tools} toolDefinitions=${filtered} />`;
        }
      }
      return m$1`
    <div
      style=${{
        display: "grid",
        gridTemplateColumns: "max-content max-content",
        columnGap: "1rem",
        margin: "0"
      }}
    >
      ${Object.keys(toolsInfo).map((key2) => {
        return m$1` <div
            style=${{
          fontSize: FontSize.smaller,
          ...TextStyle.label,
          ...TextStyle.secondary
        }}
          >
            ${key2}
          </div>
          <div style=${{ fontSize: FontSize.base }}>${toolsInfo[key2]}</div>`;
      })}
    </div>
  `;
    };
    const RenderableChangeTypes = [
      system_msg_added_sig,
      use_tools,
      add_tools
    ];
    const StoreSpecificRenderableTypes = [human_baseline_session];
    const Tools = ({ toolDefinitions }) => {
      return toolDefinitions.map((toolDefinition) => {
        var _a2;
        const toolName = toolDefinition.name;
        const toolArgs = ((_a2 = toolDefinition.parameters) == null ? void 0 : _a2.properties) ? Object.keys(toolDefinition.parameters.properties) : [];
        return m$1`<${Tool} toolName=${toolName} toolArgs=${toolArgs} />`;
      });
    };
    const Tool = ({ toolName, toolArgs }) => {
      const functionCall = toolArgs && toolArgs.length > 0 ? `${toolName}(${toolArgs.join(", ")})` : toolName;
      return m$1`<div>
    <code style=${{ fontSize: FontSize.small, padding: "0" }}
      >${functionCall}</code
    >
  </div>`;
    };
    class Processor {
      constructor(options) {
        this.selfOptions = options || {};
        this.pipes = {};
      }
      options(options) {
        if (options) {
          this.selfOptions = options;
        }
        return this.selfOptions;
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      pipe(name2, pipeArg) {
        let pipe = pipeArg;
        if (typeof name2 === "string") {
          if (typeof pipe === "undefined") {
            return this.pipes[name2];
          } else {
            this.pipes[name2] = pipe;
          }
        }
        if (name2 && name2.name) {
          pipe = name2;
          if (pipe.processor === this) {
            return pipe;
          }
          this.pipes[pipe.name] = pipe;
        }
        pipe.processor = this;
        return pipe;
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      process(input, pipe) {
        let context = input;
        context.options = this.options();
        let nextPipe = pipe || input.pipe || "default";
        let lastPipe;
        while (nextPipe) {
          if (typeof context.nextAfterChildren !== "undefined") {
            context.next = context.nextAfterChildren;
            context.nextAfterChildren = null;
          }
          if (typeof nextPipe === "string") {
            nextPipe = this.pipe(nextPipe);
          }
          nextPipe.process(context);
          lastPipe = nextPipe;
          nextPipe = null;
          if (context) {
            if (context.next) {
              context = context.next;
              nextPipe = context.pipe || lastPipe;
            }
          }
        }
        return context.hasResult ? context.result : void 0;
      }
    }
    class Pipe {
      constructor(name2) {
        this.name = name2;
        this.filters = [];
      }
      process(input) {
        if (!this.processor) {
          throw new Error("add this pipe to a processor before using it");
        }
        const debug = this.debug;
        const length = this.filters.length;
        const context = input;
        for (let index = 0; index < length; index++) {
          const filter = this.filters[index];
          if (debug) {
            this.log(`filter: ${filter.filterName}`);
          }
          filter(context);
          if (typeof context === "object" && context.exiting) {
            context.exiting = false;
            break;
          }
        }
        if (!context.next && this.resultCheck) {
          this.resultCheck(context);
        }
      }
      log(msg) {
        console.log(`[jsondiffpatch] ${this.name} pipe, ${msg}`);
      }
      append(...args) {
        this.filters.push(...args);
        return this;
      }
      prepend(...args) {
        this.filters.unshift(...args);
        return this;
      }
      indexOf(filterName) {
        if (!filterName) {
          throw new Error("a filter name is required");
        }
        for (let index = 0; index < this.filters.length; index++) {
          const filter = this.filters[index];
          if (filter.filterName === filterName) {
            return index;
          }
        }
        throw new Error(`filter not found: ${filterName}`);
      }
      list() {
        return this.filters.map((f2) => f2.filterName);
      }
      after(filterName, ...params) {
        const index = this.indexOf(filterName);
        this.filters.splice(index + 1, 0, ...params);
        return this;
      }
      before(filterName, ...params) {
        const index = this.indexOf(filterName);
        this.filters.splice(index, 0, ...params);
        return this;
      }
      replace(filterName, ...params) {
        const index = this.indexOf(filterName);
        this.filters.splice(index, 1, ...params);
        return this;
      }
      remove(filterName) {
        const index = this.indexOf(filterName);
        this.filters.splice(index, 1);
        return this;
      }
      clear() {
        this.filters.length = 0;
        return this;
      }
      shouldHaveResult(should) {
        if (should === false) {
          this.resultCheck = null;
          return;
        }
        if (this.resultCheck) {
          return;
        }
        this.resultCheck = (context) => {
          if (!context.hasResult) {
            console.log(context);
            const error2 = new Error(`${this.name} failed`);
            error2.noResult = true;
            throw error2;
          }
        };
        return this;
      }
    }
    class Context {
      setResult(result) {
        this.result = result;
        this.hasResult = true;
        return this;
      }
      exit() {
        this.exiting = true;
        return this;
      }
      push(child, name2) {
        child.parent = this;
        if (typeof name2 !== "undefined") {
          child.childName = name2;
        }
        child.root = this.root || this;
        child.options = child.options || this.options;
        if (!this.children) {
          this.children = [child];
          this.nextAfterChildren = this.next || null;
          this.next = child;
        } else {
          this.children[this.children.length - 1].next = child;
          this.children.push(child);
        }
        child.next = this;
        return this;
      }
    }
    function cloneRegExp(re) {
      const regexMatch = /^\/(.*)\/([gimyu]*)$/.exec(re.toString());
      return new RegExp(regexMatch[1], regexMatch[2]);
    }
    function clone(arg) {
      if (typeof arg !== "object") {
        return arg;
      }
      if (arg === null) {
        return null;
      }
      if (Array.isArray(arg)) {
        return arg.map(clone);
      }
      if (arg instanceof Date) {
        return new Date(arg.getTime());
      }
      if (arg instanceof RegExp) {
        return cloneRegExp(arg);
      }
      const cloned = {};
      for (const name2 in arg) {
        if (Object.prototype.hasOwnProperty.call(arg, name2)) {
          cloned[name2] = clone(arg[name2]);
        }
      }
      return cloned;
    }
    class DiffContext extends Context {
      constructor(left2, right2) {
        super();
        this.left = left2;
        this.right = right2;
        this.pipe = "diff";
      }
      setResult(result) {
        if (this.options.cloneDiffValues && typeof result === "object") {
          const clone$1 = typeof this.options.cloneDiffValues === "function" ? this.options.cloneDiffValues : clone;
          if (typeof result[0] === "object") {
            result[0] = clone$1(result[0]);
          }
          if (typeof result[1] === "object") {
            result[1] = clone$1(result[1]);
          }
        }
        return super.setResult(result);
      }
    }
    class PatchContext extends Context {
      constructor(left2, delta) {
        super();
        this.left = left2;
        this.delta = delta;
        this.pipe = "patch";
      }
    }
    class ReverseContext extends Context {
      constructor(delta) {
        super();
        this.delta = delta;
        this.pipe = "reverse";
      }
    }
    const diffFilter$3 = function trivialMatchesDiffFilter(context) {
      if (context.left === context.right) {
        context.setResult(void 0).exit();
        return;
      }
      if (typeof context.left === "undefined") {
        if (typeof context.right === "function") {
          throw new Error("functions are not supported");
        }
        context.setResult([context.right]).exit();
        return;
      }
      if (typeof context.right === "undefined") {
        context.setResult([context.left, 0, 0]).exit();
        return;
      }
      if (typeof context.left === "function" || typeof context.right === "function") {
        throw new Error("functions are not supported");
      }
      context.leftType = context.left === null ? "null" : typeof context.left;
      context.rightType = context.right === null ? "null" : typeof context.right;
      if (context.leftType !== context.rightType) {
        context.setResult([context.left, context.right]).exit();
        return;
      }
      if (context.leftType === "boolean" || context.leftType === "number") {
        context.setResult([context.left, context.right]).exit();
        return;
      }
      if (context.leftType === "object") {
        context.leftIsArray = Array.isArray(context.left);
      }
      if (context.rightType === "object") {
        context.rightIsArray = Array.isArray(context.right);
      }
      if (context.leftIsArray !== context.rightIsArray) {
        context.setResult([context.left, context.right]).exit();
        return;
      }
      if (context.left instanceof RegExp) {
        if (context.right instanceof RegExp) {
          context.setResult([context.left.toString(), context.right.toString()]).exit();
        } else {
          context.setResult([context.left, context.right]).exit();
        }
      }
    };
    diffFilter$3.filterName = "trivial";
    const patchFilter$3 = function trivialMatchesPatchFilter(context) {
      if (typeof context.delta === "undefined") {
        context.setResult(context.left).exit();
        return;
      }
      context.nested = !Array.isArray(context.delta);
      if (context.nested) {
        return;
      }
      const nonNestedDelta = context.delta;
      if (nonNestedDelta.length === 1) {
        context.setResult(nonNestedDelta[0]).exit();
        return;
      }
      if (nonNestedDelta.length === 2) {
        if (context.left instanceof RegExp) {
          const regexArgs = /^\/(.*)\/([gimyu]+)$/.exec(nonNestedDelta[1]);
          if (regexArgs) {
            context.setResult(new RegExp(regexArgs[1], regexArgs[2])).exit();
            return;
          }
        }
        context.setResult(nonNestedDelta[1]).exit();
        return;
      }
      if (nonNestedDelta.length === 3 && nonNestedDelta[2] === 0) {
        context.setResult(void 0).exit();
      }
    };
    patchFilter$3.filterName = "trivial";
    const reverseFilter$3 = function trivialReferseFilter(context) {
      if (typeof context.delta === "undefined") {
        context.setResult(context.delta).exit();
        return;
      }
      context.nested = !Array.isArray(context.delta);
      if (context.nested) {
        return;
      }
      const nonNestedDelta = context.delta;
      if (nonNestedDelta.length === 1) {
        context.setResult([nonNestedDelta[0], 0, 0]).exit();
        return;
      }
      if (nonNestedDelta.length === 2) {
        context.setResult([nonNestedDelta[1], nonNestedDelta[0]]).exit();
        return;
      }
      if (nonNestedDelta.length === 3 && nonNestedDelta[2] === 0) {
        context.setResult([nonNestedDelta[0]]).exit();
      }
    };
    reverseFilter$3.filterName = "trivial";
    const collectChildrenDiffFilter = (context) => {
      if (!context || !context.children) {
        return;
      }
      const length = context.children.length;
      let child;
      let result = context.result;
      for (let index = 0; index < length; index++) {
        child = context.children[index];
        if (typeof child.result === "undefined") {
          continue;
        }
        result = result || {};
        result[child.childName] = child.result;
      }
      if (result && context.leftIsArray) {
        result._t = "a";
      }
      context.setResult(result).exit();
    };
    collectChildrenDiffFilter.filterName = "collectChildren";
    const objectsDiffFilter = (context) => {
      if (context.leftIsArray || context.leftType !== "object") {
        return;
      }
      const left2 = context.left;
      const right2 = context.right;
      let name2;
      let child;
      const propertyFilter = context.options.propertyFilter;
      for (name2 in left2) {
        if (!Object.prototype.hasOwnProperty.call(left2, name2)) {
          continue;
        }
        if (propertyFilter && !propertyFilter(name2, context)) {
          continue;
        }
        child = new DiffContext(left2[name2], right2[name2]);
        context.push(child, name2);
      }
      for (name2 in right2) {
        if (!Object.prototype.hasOwnProperty.call(right2, name2)) {
          continue;
        }
        if (propertyFilter && !propertyFilter(name2, context)) {
          continue;
        }
        if (typeof left2[name2] === "undefined") {
          child = new DiffContext(void 0, right2[name2]);
          context.push(child, name2);
        }
      }
      if (!context.children || context.children.length === 0) {
        context.setResult(void 0).exit();
        return;
      }
      context.exit();
    };
    objectsDiffFilter.filterName = "objects";
    const patchFilter$2 = function nestedPatchFilter(context) {
      if (!context.nested) {
        return;
      }
      const nestedDelta = context.delta;
      if (nestedDelta._t) {
        return;
      }
      const objectDelta = nestedDelta;
      let name2;
      let child;
      for (name2 in objectDelta) {
        child = new PatchContext(context.left[name2], objectDelta[name2]);
        context.push(child, name2);
      }
      context.exit();
    };
    patchFilter$2.filterName = "objects";
    const collectChildrenPatchFilter$1 = function collectChildrenPatchFilter2(context) {
      if (!context || !context.children) {
        return;
      }
      const deltaWithChildren = context.delta;
      if (deltaWithChildren._t) {
        return;
      }
      const object = context.left;
      const length = context.children.length;
      let child;
      for (let index = 0; index < length; index++) {
        child = context.children[index];
        const property = child.childName;
        if (Object.prototype.hasOwnProperty.call(context.left, property) && child.result === void 0) {
          delete object[property];
        } else if (object[property] !== child.result) {
          object[property] = child.result;
        }
      }
      context.setResult(object).exit();
    };
    collectChildrenPatchFilter$1.filterName = "collectChildren";
    const reverseFilter$2 = function nestedReverseFilter(context) {
      if (!context.nested) {
        return;
      }
      const nestedDelta = context.delta;
      if (nestedDelta._t) {
        return;
      }
      const objectDelta = context.delta;
      let name2;
      let child;
      for (name2 in objectDelta) {
        child = new ReverseContext(objectDelta[name2]);
        context.push(child, name2);
      }
      context.exit();
    };
    reverseFilter$2.filterName = "objects";
    const collectChildrenReverseFilter$1 = (context) => {
      if (!context || !context.children) {
        return;
      }
      const deltaWithChildren = context.delta;
      if (deltaWithChildren._t) {
        return;
      }
      const length = context.children.length;
      let child;
      const delta = {};
      for (let index = 0; index < length; index++) {
        child = context.children[index];
        const property = child.childName;
        if (delta[property] !== child.result) {
          delta[property] = child.result;
        }
      }
      context.setResult(delta).exit();
    };
    collectChildrenReverseFilter$1.filterName = "collectChildren";
    const defaultMatch = function(array1, array2, index1, index2) {
      return array1[index1] === array2[index2];
    };
    const lengthMatrix = function(array1, array2, match, context) {
      const len1 = array1.length;
      const len2 = array2.length;
      let x2, y2;
      const matrix = new Array(len1 + 1);
      for (x2 = 0; x2 < len1 + 1; x2++) {
        matrix[x2] = new Array(len2 + 1);
        for (y2 = 0; y2 < len2 + 1; y2++) {
          matrix[x2][y2] = 0;
        }
      }
      matrix.match = match;
      for (x2 = 1; x2 < len1 + 1; x2++) {
        for (y2 = 1; y2 < len2 + 1; y2++) {
          if (match(array1, array2, x2 - 1, y2 - 1, context)) {
            matrix[x2][y2] = matrix[x2 - 1][y2 - 1] + 1;
          } else {
            matrix[x2][y2] = Math.max(matrix[x2 - 1][y2], matrix[x2][y2 - 1]);
          }
        }
      }
      return matrix;
    };
    const backtrack = function(matrix, array1, array2, context) {
      let index1 = array1.length;
      let index2 = array2.length;
      const subsequence = {
        sequence: [],
        indices1: [],
        indices2: []
      };
      while (index1 !== 0 && index2 !== 0) {
        const sameLetter = matrix.match(array1, array2, index1 - 1, index2 - 1, context);
        if (sameLetter) {
          subsequence.sequence.unshift(array1[index1 - 1]);
          subsequence.indices1.unshift(index1 - 1);
          subsequence.indices2.unshift(index2 - 1);
          --index1;
          --index2;
        } else {
          const valueAtMatrixAbove = matrix[index1][index2 - 1];
          const valueAtMatrixLeft = matrix[index1 - 1][index2];
          if (valueAtMatrixAbove > valueAtMatrixLeft) {
            --index2;
          } else {
            --index1;
          }
        }
      }
      return subsequence;
    };
    const get = function(array1, array2, match, context) {
      const innerContext = context || {};
      const matrix = lengthMatrix(array1, array2, match || defaultMatch, innerContext);
      return backtrack(matrix, array1, array2, innerContext);
    };
    const lcs = {
      get
    };
    const ARRAY_MOVE = 3;
    function arraysHaveMatchByRef(array1, array2, len1, len2) {
      for (let index1 = 0; index1 < len1; index1++) {
        const val1 = array1[index1];
        for (let index2 = 0; index2 < len2; index2++) {
          const val2 = array2[index2];
          if (index1 !== index2 && val1 === val2) {
            return true;
          }
        }
      }
    }
    function matchItems(array1, array2, index1, index2, context) {
      const value1 = array1[index1];
      const value2 = array2[index2];
      if (value1 === value2) {
        return true;
      }
      if (typeof value1 !== "object" || typeof value2 !== "object") {
        return false;
      }
      const objectHash = context.objectHash;
      if (!objectHash) {
        return context.matchByPosition && index1 === index2;
      }
      context.hashCache1 = context.hashCache1 || [];
      let hash1 = context.hashCache1[index1];
      if (typeof hash1 === "undefined") {
        context.hashCache1[index1] = hash1 = objectHash(value1, index1);
      }
      if (typeof hash1 === "undefined") {
        return false;
      }
      context.hashCache2 = context.hashCache2 || [];
      let hash2 = context.hashCache2[index2];
      if (typeof hash2 === "undefined") {
        context.hashCache2[index2] = hash2 = objectHash(value2, index2);
      }
      if (typeof hash2 === "undefined") {
        return false;
      }
      return hash1 === hash2;
    }
    const diffFilter$2 = function arraysDiffFilter(context) {
      if (!context.leftIsArray) {
        return;
      }
      const matchContext = {
        objectHash: context.options && context.options.objectHash,
        matchByPosition: context.options && context.options.matchByPosition
      };
      let commonHead = 0;
      let commonTail = 0;
      let index;
      let index1;
      let index2;
      const array1 = context.left;
      const array2 = context.right;
      const len1 = array1.length;
      const len2 = array2.length;
      let child;
      if (len1 > 0 && len2 > 0 && !matchContext.objectHash && typeof matchContext.matchByPosition !== "boolean") {
        matchContext.matchByPosition = !arraysHaveMatchByRef(array1, array2, len1, len2);
      }
      while (commonHead < len1 && commonHead < len2 && matchItems(array1, array2, commonHead, commonHead, matchContext)) {
        index = commonHead;
        child = new DiffContext(array1[index], array2[index]);
        context.push(child, index);
        commonHead++;
      }
      while (commonTail + commonHead < len1 && commonTail + commonHead < len2 && matchItems(array1, array2, len1 - 1 - commonTail, len2 - 1 - commonTail, matchContext)) {
        index1 = len1 - 1 - commonTail;
        index2 = len2 - 1 - commonTail;
        child = new DiffContext(array1[index1], array2[index2]);
        context.push(child, index2);
        commonTail++;
      }
      let result;
      if (commonHead + commonTail === len1) {
        if (len1 === len2) {
          context.setResult(void 0).exit();
          return;
        }
        result = result || {
          _t: "a"
        };
        for (index = commonHead; index < len2 - commonTail; index++) {
          result[index] = [array2[index]];
        }
        context.setResult(result).exit();
        return;
      }
      if (commonHead + commonTail === len2) {
        result = result || {
          _t: "a"
        };
        for (index = commonHead; index < len1 - commonTail; index++) {
          result[`_${index}`] = [array1[index], 0, 0];
        }
        context.setResult(result).exit();
        return;
      }
      delete matchContext.hashCache1;
      delete matchContext.hashCache2;
      const trimmed1 = array1.slice(commonHead, len1 - commonTail);
      const trimmed2 = array2.slice(commonHead, len2 - commonTail);
      const seq = lcs.get(trimmed1, trimmed2, matchItems, matchContext);
      const removedItems = [];
      result = result || {
        _t: "a"
      };
      for (index = commonHead; index < len1 - commonTail; index++) {
        if (seq.indices1.indexOf(index - commonHead) < 0) {
          result[`_${index}`] = [array1[index], 0, 0];
          removedItems.push(index);
        }
      }
      let detectMove = true;
      if (context.options && context.options.arrays && context.options.arrays.detectMove === false) {
        detectMove = false;
      }
      let includeValueOnMove = false;
      if (context.options && context.options.arrays && context.options.arrays.includeValueOnMove) {
        includeValueOnMove = true;
      }
      const removedItemsLength = removedItems.length;
      for (index = commonHead; index < len2 - commonTail; index++) {
        const indexOnArray2 = seq.indices2.indexOf(index - commonHead);
        if (indexOnArray2 < 0) {
          let isMove = false;
          if (detectMove && removedItemsLength > 0) {
            for (let removeItemIndex1 = 0; removeItemIndex1 < removedItemsLength; removeItemIndex1++) {
              index1 = removedItems[removeItemIndex1];
              if (matchItems(trimmed1, trimmed2, index1 - commonHead, index - commonHead, matchContext)) {
                result[`_${index1}`].splice(1, 2, index, ARRAY_MOVE);
                if (!includeValueOnMove) {
                  result[`_${index1}`][0] = "";
                }
                index2 = index;
                child = new DiffContext(array1[index1], array2[index2]);
                context.push(child, index2);
                removedItems.splice(removeItemIndex1, 1);
                isMove = true;
                break;
              }
            }
          }
          if (!isMove) {
            result[index] = [array2[index]];
          }
        } else {
          index1 = seq.indices1[indexOnArray2] + commonHead;
          index2 = seq.indices2[indexOnArray2] + commonHead;
          child = new DiffContext(array1[index1], array2[index2]);
          context.push(child, index2);
        }
      }
      context.setResult(result).exit();
    };
    diffFilter$2.filterName = "arrays";
    const compare$1 = {
      numerically(a2, b) {
        return a2 - b;
      },
      numericallyBy(name2) {
        return (a2, b) => a2[name2] - b[name2];
      }
    };
    const patchFilter$1 = function nestedPatchFilter(context) {
      if (!context.nested) {
        return;
      }
      const nestedDelta = context.delta;
      if (nestedDelta._t !== "a") {
        return;
      }
      let index;
      let index1;
      const delta = nestedDelta;
      const array = context.left;
      let toRemove = [];
      let toInsert = [];
      const toModify = [];
      for (index in delta) {
        if (index !== "_t") {
          if (index[0] === "_") {
            const removedOrMovedIndex = index;
            if (delta[removedOrMovedIndex][2] === 0 || delta[removedOrMovedIndex][2] === ARRAY_MOVE) {
              toRemove.push(parseInt(index.slice(1), 10));
            } else {
              throw new Error(`only removal or move can be applied at original array indices, invalid diff type: ${delta[removedOrMovedIndex][2]}`);
            }
          } else {
            const numberIndex = index;
            if (delta[numberIndex].length === 1) {
              toInsert.push({
                index: parseInt(numberIndex, 10),
                value: delta[numberIndex][0]
              });
            } else {
              toModify.push({
                index: parseInt(numberIndex, 10),
                delta: delta[numberIndex]
              });
            }
          }
        }
      }
      toRemove = toRemove.sort(compare$1.numerically);
      for (index = toRemove.length - 1; index >= 0; index--) {
        index1 = toRemove[index];
        const indexDiff = delta[`_${index1}`];
        const removedValue = array.splice(index1, 1)[0];
        if (indexDiff[2] === ARRAY_MOVE) {
          toInsert.push({
            index: indexDiff[1],
            value: removedValue
          });
        }
      }
      toInsert = toInsert.sort(compare$1.numericallyBy("index"));
      const toInsertLength = toInsert.length;
      for (index = 0; index < toInsertLength; index++) {
        const insertion = toInsert[index];
        array.splice(insertion.index, 0, insertion.value);
      }
      const toModifyLength = toModify.length;
      let child;
      if (toModifyLength > 0) {
        for (index = 0; index < toModifyLength; index++) {
          const modification = toModify[index];
          child = new PatchContext(array[modification.index], modification.delta);
          context.push(child, modification.index);
        }
      }
      if (!context.children) {
        context.setResult(array).exit();
        return;
      }
      context.exit();
    };
    patchFilter$1.filterName = "arrays";
    const collectChildrenPatchFilter = function collectChildrenPatchFilter2(context) {
      if (!context || !context.children) {
        return;
      }
      const deltaWithChildren = context.delta;
      if (deltaWithChildren._t !== "a") {
        return;
      }
      const array = context.left;
      const length = context.children.length;
      let child;
      for (let index = 0; index < length; index++) {
        child = context.children[index];
        const arrayIndex = child.childName;
        array[arrayIndex] = child.result;
      }
      context.setResult(array).exit();
    };
    collectChildrenPatchFilter.filterName = "arraysCollectChildren";
    const reverseFilter$1 = function arraysReverseFilter(context) {
      if (!context.nested) {
        const nonNestedDelta = context.delta;
        if (nonNestedDelta[2] === ARRAY_MOVE) {
          const arrayMoveDelta = nonNestedDelta;
          context.newName = `_${arrayMoveDelta[1]}`;
          context.setResult([
            arrayMoveDelta[0],
            parseInt(context.childName.substring(1), 10),
            ARRAY_MOVE
          ]).exit();
        }
        return;
      }
      const nestedDelta = context.delta;
      if (nestedDelta._t !== "a") {
        return;
      }
      const arrayDelta = nestedDelta;
      let name2;
      let child;
      for (name2 in arrayDelta) {
        if (name2 === "_t") {
          continue;
        }
        child = new ReverseContext(arrayDelta[name2]);
        context.push(child, name2);
      }
      context.exit();
    };
    reverseFilter$1.filterName = "arrays";
    const reverseArrayDeltaIndex = (delta, index, itemDelta) => {
      if (typeof index === "string" && index[0] === "_") {
        return parseInt(index.substring(1), 10);
      } else if (Array.isArray(itemDelta) && itemDelta[2] === 0) {
        return `_${index}`;
      }
      let reverseIndex = +index;
      for (const deltaIndex in delta) {
        const deltaItem = delta[deltaIndex];
        if (Array.isArray(deltaItem)) {
          if (deltaItem[2] === ARRAY_MOVE) {
            const moveFromIndex = parseInt(deltaIndex.substring(1), 10);
            const moveToIndex = deltaItem[1];
            if (moveToIndex === +index) {
              return moveFromIndex;
            }
            if (moveFromIndex <= reverseIndex && moveToIndex > reverseIndex) {
              reverseIndex++;
            } else if (moveFromIndex >= reverseIndex && moveToIndex < reverseIndex) {
              reverseIndex--;
            }
          } else if (deltaItem[2] === 0) {
            const deleteIndex = parseInt(deltaIndex.substring(1), 10);
            if (deleteIndex <= reverseIndex) {
              reverseIndex++;
            }
          } else if (deltaItem.length === 1 && parseInt(deltaIndex, 10) <= reverseIndex) {
            reverseIndex--;
          }
        }
      }
      return reverseIndex;
    };
    const collectChildrenReverseFilter = (context) => {
      if (!context || !context.children) {
        return;
      }
      const deltaWithChildren = context.delta;
      if (deltaWithChildren._t !== "a") {
        return;
      }
      const arrayDelta = deltaWithChildren;
      const length = context.children.length;
      let child;
      const delta = {
        _t: "a"
      };
      for (let index = 0; index < length; index++) {
        child = context.children[index];
        let name2 = child.newName;
        if (typeof name2 === "undefined") {
          name2 = reverseArrayDeltaIndex(arrayDelta, child.childName, child.result);
        }
        if (delta[name2] !== child.result) {
          delta[name2] = child.result;
        }
      }
      context.setResult(delta).exit();
    };
    collectChildrenReverseFilter.filterName = "arraysCollectChildren";
    const diffFilter$1 = function datesDiffFilter(context) {
      if (context.left instanceof Date) {
        if (context.right instanceof Date) {
          if (context.left.getTime() !== context.right.getTime()) {
            context.setResult([context.left, context.right]);
          } else {
            context.setResult(void 0);
          }
        } else {
          context.setResult([context.left, context.right]);
        }
        context.exit();
      } else if (context.right instanceof Date) {
        context.setResult([context.left, context.right]).exit();
      }
    };
    diffFilter$1.filterName = "dates";
    const TEXT_DIFF = 2;
    const DEFAULT_MIN_LENGTH = 60;
    let cachedDiffPatch = null;
    function getDiffMatchPatch(options, required) {
      var _a2;
      if (!cachedDiffPatch) {
        let instance;
        if ((_a2 = options === null || options === void 0 ? void 0 : options.textDiff) === null || _a2 === void 0 ? void 0 : _a2.diffMatchPatch) {
          instance = new options.textDiff.diffMatchPatch();
        } else {
          if (!required) {
            return null;
          }
          const error2 = new Error("The diff-match-patch library was not provided. Pass the library in through the options or use the `jsondiffpatch/with-text-diffs` entry-point.");
          error2.diff_match_patch_not_found = true;
          throw error2;
        }
        cachedDiffPatch = {
          diff: function(txt1, txt2) {
            return instance.patch_toText(instance.patch_make(txt1, txt2));
          },
          patch: function(txt1, patch) {
            const results = instance.patch_apply(instance.patch_fromText(patch), txt1);
            for (let i2 = 0; i2 < results[1].length; i2++) {
              if (!results[1][i2]) {
                const error2 = new Error("text patch failed");
                error2.textPatchFailed = true;
              }
            }
            return results[0];
          }
        };
      }
      return cachedDiffPatch;
    }
    const diffFilter = function textsDiffFilter(context) {
      if (context.leftType !== "string") {
        return;
      }
      const left2 = context.left;
      const right2 = context.right;
      const minLength = context.options && context.options.textDiff && context.options.textDiff.minLength || DEFAULT_MIN_LENGTH;
      if (left2.length < minLength || right2.length < minLength) {
        context.setResult([left2, right2]).exit();
        return;
      }
      const diffMatchPatch = getDiffMatchPatch(context.options);
      if (!diffMatchPatch) {
        context.setResult([left2, right2]).exit();
        return;
      }
      const diff2 = diffMatchPatch.diff;
      context.setResult([diff2(left2, right2), 0, TEXT_DIFF]).exit();
    };
    diffFilter.filterName = "texts";
    const patchFilter = function textsPatchFilter(context) {
      if (context.nested) {
        return;
      }
      const nonNestedDelta = context.delta;
      if (nonNestedDelta[2] !== TEXT_DIFF) {
        return;
      }
      const textDiffDelta = nonNestedDelta;
      const patch = getDiffMatchPatch(context.options, true).patch;
      context.setResult(patch(context.left, textDiffDelta[0])).exit();
    };
    patchFilter.filterName = "texts";
    const textDeltaReverse = function(delta) {
      let i2;
      let l2;
      let line2;
      let lineTmp;
      let header = null;
      const headerRegex = /^@@ +-(\d+),(\d+) +\+(\d+),(\d+) +@@$/;
      let lineHeader;
      const lines = delta.split("\n");
      for (i2 = 0, l2 = lines.length; i2 < l2; i2++) {
        line2 = lines[i2];
        const lineStart = line2.slice(0, 1);
        if (lineStart === "@") {
          header = headerRegex.exec(line2);
          lineHeader = i2;
          lines[lineHeader] = "@@ -" + header[3] + "," + header[4] + " +" + header[1] + "," + header[2] + " @@";
        } else if (lineStart === "+") {
          lines[i2] = "-" + lines[i2].slice(1);
          if (lines[i2 - 1].slice(0, 1) === "+") {
            lineTmp = lines[i2];
            lines[i2] = lines[i2 - 1];
            lines[i2 - 1] = lineTmp;
          }
        } else if (lineStart === "-") {
          lines[i2] = "+" + lines[i2].slice(1);
        }
      }
      return lines.join("\n");
    };
    const reverseFilter = function textsReverseFilter(context) {
      if (context.nested) {
        return;
      }
      const nonNestedDelta = context.delta;
      if (nonNestedDelta[2] !== TEXT_DIFF) {
        return;
      }
      const textDiffDelta = nonNestedDelta;
      context.setResult([textDeltaReverse(textDiffDelta[0]), 0, TEXT_DIFF]).exit();
    };
    reverseFilter.filterName = "texts";
    class DiffPatcher {
      constructor(options) {
        this.processor = new Processor(options);
        this.processor.pipe(new Pipe("diff").append(collectChildrenDiffFilter, diffFilter$3, diffFilter$1, diffFilter, objectsDiffFilter, diffFilter$2).shouldHaveResult());
        this.processor.pipe(new Pipe("patch").append(collectChildrenPatchFilter$1, collectChildrenPatchFilter, patchFilter$3, patchFilter, patchFilter$2, patchFilter$1).shouldHaveResult());
        this.processor.pipe(new Pipe("reverse").append(collectChildrenReverseFilter$1, collectChildrenReverseFilter, reverseFilter$3, reverseFilter, reverseFilter$2, reverseFilter$1).shouldHaveResult());
      }
      options(options) {
        return this.processor.options(options);
      }
      diff(left2, right2) {
        return this.processor.process(new DiffContext(left2, right2));
      }
      patch(left2, delta) {
        return this.processor.process(new PatchContext(left2, delta));
      }
      reverse(delta) {
        return this.processor.process(new ReverseContext(delta));
      }
      unpatch(right2, delta) {
        return this.patch(right2, this.reverse(delta));
      }
      clone(value) {
        return clone(value);
      }
    }
    let defaultInstance$1;
    function diff(left2, right2) {
      if (!defaultInstance$1) {
        defaultInstance$1 = new DiffPatcher();
      }
      return defaultInstance$1.diff(left2, right2);
    }
    const trimUnderscore = (str2) => {
      if (str2.substring(0, 1) === "_") {
        return str2.slice(1);
      }
      return str2;
    };
    const arrayKeyToSortNumber = (key2) => {
      if (key2 === "_t") {
        return -1;
      } else {
        if (key2.substring(0, 1) === "_") {
          return parseInt(key2.slice(1), 10);
        } else {
          return parseInt(key2, 10) + 0.1;
        }
      }
    };
    const arrayKeyComparer = (key1, key2) => arrayKeyToSortNumber(key1) - arrayKeyToSortNumber(key2);
    class BaseFormatter {
      format(delta, left2) {
        const context = {};
        this.prepareContext(context);
        const preparedContext = context;
        this.recurse(preparedContext, delta, left2);
        return this.finalize(preparedContext);
      }
      prepareContext(context) {
        context.buffer = [];
        context.out = function(...args) {
          this.buffer.push(...args);
        };
      }
      typeFormattterNotFound(context, deltaType) {
        throw new Error(`cannot format delta type: ${deltaType}`);
      }
      /* eslint-disable @typescript-eslint/no-unused-vars */
      typeFormattterErrorFormatter(context, err2, delta, leftValue, key2, leftKey, movedFrom) {
      }
      /* eslint-enable @typescript-eslint/no-unused-vars */
      finalize({ buffer: buffer2 }) {
        if (Array.isArray(buffer2)) {
          return buffer2.join("");
        }
      }
      recurse(context, delta, left2, key2, leftKey, movedFrom, isLast) {
        const useMoveOriginHere = delta && movedFrom;
        const leftValue = useMoveOriginHere ? movedFrom.value : left2;
        if (typeof delta === "undefined" && typeof key2 === "undefined") {
          return void 0;
        }
        const type = this.getDeltaType(delta, movedFrom);
        const nodeType = type === "node" ? delta._t === "a" ? "array" : "object" : "";
        if (typeof key2 !== "undefined") {
          this.nodeBegin(context, key2, leftKey, type, nodeType, isLast);
        } else {
          this.rootBegin(context, type, nodeType);
        }
        let typeFormattter;
        try {
          typeFormattter = type !== "unknown" ? this[`format_${type}`] : this.typeFormattterNotFound(context, type);
          typeFormattter.call(this, context, delta, leftValue, key2, leftKey, movedFrom);
        } catch (err2) {
          this.typeFormattterErrorFormatter(context, err2, delta, leftValue, key2, leftKey, movedFrom);
          if (typeof console !== "undefined" && console.error) {
            console.error(err2.stack);
          }
        }
        if (typeof key2 !== "undefined") {
          this.nodeEnd(context, key2, leftKey, type, nodeType, isLast);
        } else {
          this.rootEnd(context, type, nodeType);
        }
      }
      formatDeltaChildren(context, delta, left2) {
        this.forEachDeltaKey(delta, left2, (key2, leftKey, movedFrom, isLast) => {
          this.recurse(context, delta[key2], left2 ? left2[leftKey] : void 0, key2, leftKey, movedFrom, isLast);
        });
      }
      forEachDeltaKey(delta, left2, fn2) {
        const keys = Object.keys(delta);
        const arrayKeys = delta._t === "a";
        const moveDestinations = {};
        let name2;
        if (typeof left2 !== "undefined") {
          for (name2 in left2) {
            if (Object.prototype.hasOwnProperty.call(left2, name2)) {
              if (typeof delta[name2] === "undefined" && (!arrayKeys || typeof delta[`_${name2}`] === "undefined")) {
                keys.push(name2);
              }
            }
          }
        }
        for (name2 in delta) {
          if (Object.prototype.hasOwnProperty.call(delta, name2)) {
            const value = delta[name2];
            if (Array.isArray(value) && value[2] === 3) {
              const movedDelta = value;
              moveDestinations[`${movedDelta[1]}`] = {
                key: name2,
                value: left2 && left2[parseInt(name2.substring(1), 10)]
              };
              if (this.includeMoveDestinations !== false) {
                if (typeof left2 === "undefined" && typeof delta[movedDelta[1]] === "undefined") {
                  keys.push(movedDelta[1].toString());
                }
              }
            }
          }
        }
        if (arrayKeys) {
          keys.sort(arrayKeyComparer);
        } else {
          keys.sort();
        }
        for (let index = 0, length = keys.length; index < length; index++) {
          const key2 = keys[index];
          if (arrayKeys && key2 === "_t") {
            continue;
          }
          const leftKey = arrayKeys ? parseInt(trimUnderscore(key2), 10) : key2;
          const isLast = index === length - 1;
          fn2(key2, leftKey, moveDestinations[leftKey], isLast);
        }
      }
      getDeltaType(delta, movedFrom) {
        if (typeof delta === "undefined") {
          if (typeof movedFrom !== "undefined") {
            return "movedestination";
          }
          return "unchanged";
        }
        if (Array.isArray(delta)) {
          if (delta.length === 1) {
            return "added";
          }
          if (delta.length === 2) {
            return "modified";
          }
          if (delta.length === 3 && delta[2] === 0) {
            return "deleted";
          }
          if (delta.length === 3 && delta[2] === 2) {
            return "textdiff";
          }
          if (delta.length === 3 && delta[2] === 3) {
            return "moved";
          }
        } else if (typeof delta === "object") {
          return "node";
        }
        return "unknown";
      }
      parseTextDiff(value) {
        const output = [];
        const lines = value.split("\n@@ ");
        for (let i2 = 0, l2 = lines.length; i2 < l2; i2++) {
          const line2 = lines[i2];
          const lineOutput = {
            pieces: []
          };
          const location = /^(?:@@ )?[-+]?(\d+),(\d+)/.exec(line2).slice(1);
          lineOutput.location = {
            line: location[0],
            chr: location[1]
          };
          const pieces = line2.split("\n").slice(1);
          for (let pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {
            const piece = pieces[pieceIndex];
            if (!piece.length) {
              continue;
            }
            const pieceOutput = {
              type: "context"
            };
            if (piece.substring(0, 1) === "+") {
              pieceOutput.type = "added";
            } else if (piece.substring(0, 1) === "-") {
              pieceOutput.type = "deleted";
            }
            pieceOutput.text = piece.slice(1);
            lineOutput.pieces.push(pieceOutput);
          }
          output.push(lineOutput);
        }
        return output;
      }
    }
    class HtmlFormatter extends BaseFormatter {
      typeFormattterErrorFormatter(context, err2) {
        context.out(`<pre class="jsondiffpatch-error">${err2}</pre>`);
      }
      formatValue(context, value) {
        context.out(`<pre>${htmlEscape(JSON.stringify(value, null, 2))}</pre>`);
      }
      formatTextDiffString(context, value) {
        const lines = this.parseTextDiff(value);
        context.out('<ul class="jsondiffpatch-textdiff">');
        for (let i2 = 0, l2 = lines.length; i2 < l2; i2++) {
          const line2 = lines[i2];
          context.out(`<li><div class="jsondiffpatch-textdiff-location"><span class="jsondiffpatch-textdiff-line-number">${line2.location.line}</span><span class="jsondiffpatch-textdiff-char">${line2.location.chr}</span></div><div class="jsondiffpatch-textdiff-line">`);
          const pieces = line2.pieces;
          for (let pieceIndex = 0, piecesLength = pieces.length; pieceIndex < piecesLength; pieceIndex++) {
            const piece = pieces[pieceIndex];
            context.out(`<span class="jsondiffpatch-textdiff-${piece.type}">${htmlEscape(decodeURI(piece.text))}</span>`);
          }
          context.out("</div></li>");
        }
        context.out("</ul>");
      }
      rootBegin(context, type, nodeType) {
        const nodeClass = `jsondiffpatch-${type}${nodeType ? ` jsondiffpatch-child-node-type-${nodeType}` : ""}`;
        context.out(`<div class="jsondiffpatch-delta ${nodeClass}">`);
      }
      rootEnd(context) {
        context.out(`</div>${context.hasArrows ? `<script type="text/javascript">setTimeout(${adjustArrows.toString()},10);<\/script>` : ""}`);
      }
      nodeBegin(context, key2, leftKey, type, nodeType) {
        const nodeClass = `jsondiffpatch-${type}${nodeType ? ` jsondiffpatch-child-node-type-${nodeType}` : ""}`;
        context.out(`<li class="${nodeClass}" data-key="${leftKey}"><div class="jsondiffpatch-property-name">${leftKey}</div>`);
      }
      nodeEnd(context) {
        context.out("</li>");
      }
      format_unchanged(context, delta, left2) {
        if (typeof left2 === "undefined") {
          return;
        }
        context.out('<div class="jsondiffpatch-value">');
        this.formatValue(context, left2);
        context.out("</div>");
      }
      format_movedestination(context, delta, left2) {
        if (typeof left2 === "undefined") {
          return;
        }
        context.out('<div class="jsondiffpatch-value">');
        this.formatValue(context, left2);
        context.out("</div>");
      }
      format_node(context, delta, left2) {
        const nodeType = delta._t === "a" ? "array" : "object";
        context.out(`<ul class="jsondiffpatch-node jsondiffpatch-node-type-${nodeType}">`);
        this.formatDeltaChildren(context, delta, left2);
        context.out("</ul>");
      }
      format_added(context, delta) {
        context.out('<div class="jsondiffpatch-value">');
        this.formatValue(context, delta[0]);
        context.out("</div>");
      }
      format_modified(context, delta) {
        context.out('<div class="jsondiffpatch-value jsondiffpatch-left-value">');
        this.formatValue(context, delta[0]);
        context.out('</div><div class="jsondiffpatch-value jsondiffpatch-right-value">');
        this.formatValue(context, delta[1]);
        context.out("</div>");
      }
      format_deleted(context, delta) {
        context.out('<div class="jsondiffpatch-value">');
        this.formatValue(context, delta[0]);
        context.out("</div>");
      }
      format_moved(context, delta) {
        context.out('<div class="jsondiffpatch-value">');
        this.formatValue(context, delta[0]);
        context.out(`</div><div class="jsondiffpatch-moved-destination">${delta[1]}</div>`);
        context.out(
          /* jshint multistr: true */
          `<div class="jsondiffpatch-arrow" style="position: relative; left: -34px;">
          <svg width="30" height="60" style="position: absolute; display: none;">
          <defs>
              <marker id="markerArrow" markerWidth="8" markerHeight="8"
                 refx="2" refy="4"
                     orient="auto" markerUnits="userSpaceOnUse">
                  <path d="M1,1 L1,7 L7,4 L1,1" style="fill: #339;" />
              </marker>
          </defs>
          <path d="M30,0 Q-10,25 26,50"
            style="stroke: #88f; stroke-width: 2px; fill: none; stroke-opacity: 0.5; marker-end: url(#markerArrow);"
          ></path>
          </svg>
      </div>`
        );
        context.hasArrows = true;
      }
      format_textdiff(context, delta) {
        context.out('<div class="jsondiffpatch-value">');
        this.formatTextDiffString(context, delta[0]);
        context.out("</div>");
      }
    }
    function htmlEscape(text2) {
      let html = text2;
      const replacements = [
        [/&/g, "&amp;"],
        [/</g, "&lt;"],
        [/>/g, "&gt;"],
        [/'/g, "&apos;"],
        [/"/g, "&quot;"]
      ];
      for (let i2 = 0; i2 < replacements.length; i2++) {
        html = html.replace(replacements[i2][0], replacements[i2][1]);
      }
      return html;
    }
    const adjustArrows = function jsondiffpatchHtmlFormatterAdjustArrows(nodeArg) {
      const node = nodeArg || document;
      const getElementText = ({ textContent, innerText }) => textContent || innerText;
      const eachByQuery = (el, query, fn2) => {
        const elems = el.querySelectorAll(query);
        for (let i2 = 0, l2 = elems.length; i2 < l2; i2++) {
          fn2(elems[i2]);
        }
      };
      const eachChildren = ({ children: children2 }, fn2) => {
        for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
          fn2(children2[i2], i2);
        }
      };
      eachByQuery(node, ".jsondiffpatch-arrow", ({ parentNode, children: children2, style: style2 }) => {
        const arrowParent = parentNode;
        const svg2 = children2[0];
        const path = svg2.children[1];
        svg2.style.display = "none";
        const destination = getElementText(arrowParent.querySelector(".jsondiffpatch-moved-destination"));
        const container = arrowParent.parentNode;
        let destinationElem;
        eachChildren(container, (child) => {
          if (child.getAttribute("data-key") === destination) {
            destinationElem = child;
          }
        });
        if (!destinationElem) {
          return;
        }
        try {
          const distance = destinationElem.offsetTop - arrowParent.offsetTop;
          svg2.setAttribute("height", `${Math.abs(distance) + 6}`);
          style2.top = `${-8 + (distance > 0 ? 0 : distance)}px`;
          const curve = distance > 0 ? `M30,0 Q-10,${Math.round(distance / 2)} 26,${distance - 4}` : `M30,${-distance} Q-10,${Math.round(-distance / 2)} 26,4`;
          path.setAttribute("d", curve);
          svg2.style.display = "";
        } catch (err2) {
        }
      });
    };
    let defaultInstance;
    function format(delta, left2) {
      if (!defaultInstance) {
        defaultInstance = new HtmlFormatter();
      }
      return defaultInstance.format(delta, left2);
    }
    const StateDiffView = ({ before, after, style: style2 }) => {
      const state_diff = diff(sanitizeKeys(before), sanitizeKeys(after));
      const html_result = format(state_diff) || "Unable to render differences";
      return m$1`<div
    dangerouslySetInnerHTML=${{ __html: unescapeNewlines(html_result) }}
    style=${{ ...style2 }}
  ></div>`;
    };
    function unescapeNewlines(obj) {
      if (typeof obj === "string") {
        return obj.replace(/\\n/g, "\n");
      } else if (typeof obj === "object") {
        for (let key2 in obj) {
          obj[key2] = unescapeNewlines(obj[key2]);
        }
      }
      return obj;
    }
    function sanitizeKeys(obj) {
      if (typeof obj !== "object" || obj === null) {
        return obj;
      }
      if (Array.isArray(obj)) {
        return obj.map(sanitizeKeys);
      }
      return Object.fromEntries(
        Object.entries(obj).map(([key2, value]) => [
          key2.replace(/</g, "&lt;").replace(/>/g, "&gt;"),
          sanitizeKeys(value)
        ])
      );
    }
    const StateEventView = ({
      id,
      event,
      eventState,
      setEventState,
      isStore,
      style: style2
    }) => {
      const summary = summarizeChanges(event.changes);
      const [before, after] = synthesizeComparable(event.changes);
      const tabs = [
        m$1`<${StateDiffView}
      before=${before}
      after=${after}
      name="Diff"
      style=${{ margin: "1em 0em" }}
    />`
      ];
      const changePreview = generatePreview(
        event.changes,
        structuredClone(after),
        isStore
      );
      if (changePreview) {
        tabs.unshift(
          m$1`<div name="Summary" style=${{ margin: "1em 0em", width: "100%" }}>
        ${changePreview}
      </div>`
        );
      }
      const title = event.event === "state" ? "State Updated" : "Store Updated";
      return m$1`
  <${EventPanel} 
    id=${id} 
    title="${title}" 
    subTitle=${formatDateTime(new Date(event.timestamp))} 
    text=${tabs.length === 1 ? summary : void 0} 
    collapse=${changePreview === void 0 ? true : void 0} 
    style=${style2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}                  
  >
    ${tabs}
  </${EventPanel}>`;
    };
    const generatePreview = (changes, resolvedState, isStore) => {
      const results = [];
      for (const changeType of [
        ...RenderableChangeTypes,
        ...isStore ? StoreSpecificRenderableTypes : []
      ]) {
        const requiredMatchCount = changeType.signature.remove.length + changeType.signature.replace.length + changeType.signature.add.length;
        let matchingOps = 0;
        for (const change of changes) {
          if (changeType.signature[change.op] && changeType.signature[change.op].length > 0) {
            changeType.signature[change.op].forEach((signature) => {
              if (change.path.match(signature)) {
                matchingOps++;
              }
            });
          }
        }
        if (matchingOps === requiredMatchCount) {
          results.push(changeType.render(changes, resolvedState));
          break;
        }
      }
      return results.length > 0 ? results : void 0;
    };
    const summarizeChanges = (changes) => {
      const changeMap = {
        add: [],
        copy: [],
        move: [],
        replace: [],
        remove: [],
        test: []
      };
      for (const change of changes) {
        changeMap[change.op].push(change.path);
      }
      const changeList = [];
      const totalOpCount = Object.keys(changeMap).reduce((prev, current) => {
        return prev + changeMap[current].length;
      }, 0);
      if (totalOpCount > 2) {
        Object.keys(changeMap).forEach((key2) => {
          const opChanges = changeMap[key2];
          if (opChanges.length > 0) {
            changeList.push(`${key2} ${opChanges.length}`);
          }
        });
      } else {
        Object.keys(changeMap).forEach((key2) => {
          const opChanges = changeMap[key2];
          if (opChanges.length > 0) {
            changeList.push(`${key2} ${opChanges.join(", ")}`);
          }
        });
      }
      return changeList.join(", ");
    };
    const synthesizeComparable = (changes) => {
      const before = {};
      const after = {};
      for (const change of changes) {
        switch (change.op) {
          case "add":
            initializeArrays(before, change.path);
            initializeArrays(after, change.path);
            setPath(after, change.path, change.value);
            break;
          case "copy":
            setPath(before, change.path, change.value);
            setPath(after, change.path, change.value);
            break;
          case "move":
            setPath(before, change.from, change.value);
            setPath(after, change.path, change.value);
            break;
          case "remove":
            setPath(before, change.path, change.value);
            break;
          case "replace":
            setPath(before, change.path, change.replaced);
            setPath(after, change.path, change.value);
            break;
        }
      }
      return [before, after];
    };
    function setPath(target, path, value) {
      const keys = parsePath(path);
      let current = target;
      for (let i2 = 0; i2 < keys.length - 1; i2++) {
        const key2 = keys[i2];
        if (!(key2 in current)) {
          current[key2] = isArrayIndex(keys[i2 + 1]) ? [] : {};
        }
        current = current[key2];
      }
      const lastKey = keys[keys.length - 1];
      current[lastKey] = value;
    }
    function initializeArrays(target, path) {
      const keys = parsePath(path);
      let current = target;
      for (let i2 = 0; i2 < keys.length - 1; i2++) {
        const key2 = keys[i2];
        const nextKey = keys[i2 + 1];
        if (isArrayIndex(nextKey)) {
          current[key2] = initializeArray(current[key2], nextKey);
        } else {
          current[key2] = initializeObject(current[key2]);
        }
        current = current[key2];
      }
      const lastKey = keys[keys.length - 1];
      if (isArrayIndex(lastKey)) {
        initializeArray(current, lastKey);
      }
    }
    function parsePath(path) {
      return path.split("/").filter(Boolean);
    }
    function isArrayIndex(key2) {
      return /^\d+$/.test(key2);
    }
    function initializeArray(current, nextKey) {
      if (!Array.isArray(current)) {
        current = [];
      }
      const nextKeyIndex = parseInt(nextKey, 10);
      while (current.length < nextKeyIndex) {
        current.push("");
      }
      return current;
    }
    function initializeObject(current) {
      return current ?? {};
    }
    const StepEventView = ({
      event,
      eventState,
      setEventState,
      children: children2,
      style: style2,
      scrollRef
    }) => {
      const descriptor = stepDescriptor(event);
      const title = descriptor.name || `${event.type ? event.type + ": " : "Step: "}${event.name}`;
      const text2 = summarize(children2);
      const [transcriptState, setTranscriptState] = h({});
      const onTranscriptState = q$1(
        (state) => {
          setTranscriptState({ ...state });
        },
        [transcriptState, setTranscriptState]
      );
      return m$1`<${EventPanel}
    id=${`step-${event.name}`}
    classes="transcript-step"
    title="${title}"
    subTitle=${formatDateTime(new Date(event.timestamp))}
    icon=${descriptor.icon}
    style=${{ ...descriptor.style, ...style2 }}
    titleStyle=${{ ...descriptor.titleStyle }}
    collapse=${false}
    text=${text2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}        
  >
    <${TranscriptVirtualListComponent}
      id=${`step-${event.name}-transcript`}
      eventNodes=${children2}
      scrollRef=${scrollRef}
      transcriptState=${transcriptState}
      setTranscriptState=${onTranscriptState}
    />
  </EventPanel>
  `;
    };
    const summarize = (children2) => {
      if (children2.length === 0) {
        return "(no events)";
      }
      const formatEvent = (event, count) => {
        if (count === 1) {
          return `${count} ${event} event`;
        } else {
          return `${count} ${event} events`;
        }
      };
      const typeCount = {};
      children2.forEach((child) => {
        const currentCount = typeCount[child.event.event] || 0;
        typeCount[child.event.event] = currentCount + 1;
      });
      const numberOfTypes = Object.keys(typeCount).length;
      if (numberOfTypes < 3) {
        return Object.keys(typeCount).map((key2) => {
          return formatEvent(key2, typeCount[key2]);
        }).join(", ");
      }
      if (children2.length === 1) {
        return "1 event";
      } else {
        return `${children2.length} events`;
      }
    };
    const rootStepStyle = {};
    const rootTitleStyle = {
      fontWeight: "600"
    };
    const stepDescriptor = (event) => {
      const rootStepDescriptor = {
        style: rootStepStyle,
        endSpace: true,
        titleStyle: rootTitleStyle
      };
      if (event.type === "solver") {
        switch (event.name) {
          case "chain_of_thought":
            return {
              ...rootStepDescriptor
            };
          case "generate":
            return {
              ...rootStepDescriptor
            };
          case "self_critique":
            return {
              ...rootStepDescriptor
            };
          case "system_message":
            return {
              ...rootStepDescriptor
            };
          case "use_tools":
            return {
              ...rootStepDescriptor
            };
          case "multiple_choice":
            return {
              ...rootStepDescriptor
            };
          default:
            return {
              ...rootStepDescriptor
            };
        }
      } else if (event.type === "scorer") {
        return {
          ...rootStepDescriptor
        };
      } else {
        switch (event.name) {
          case "sample_init":
            return {
              ...rootStepDescriptor,
              name: "Sample Init"
            };
          default:
            return {
              style: {},
              endSpace: false,
              titleStyle: {}
            };
        }
      }
    };
    const SubtaskEventView = ({
      id,
      event,
      eventState,
      setEventState,
      style: style2,
      depth
    }) => {
      const transcript = event.events.length > 0 ? m$1`<${TranscriptView}
          id="${id}-subtask"
          name="Transcript"
          events=${event.events}
          depth=${depth + 1}
        />` : "";
      const body = event.type === "fork" ? m$1`
          <div title="Summary" style=${{ width: "100%", margin: "0.5em 0em" }}>
            <div style=${{ ...TextStyle.label }}>Inputs</div>
            <div style=${{ marginBottom: "1em" }}>
              <${Rendered} values=${event.input} />
            </div>
            <div style=${{ ...TextStyle.label }}>Transcript</div>
            ${transcript}
          </div>
        ` : m$1`
          <${SubtaskSummary}
            name="Summary"
            input=${event.input}
            result=${event.result}
          />
          ${transcript}
        `;
      const type = event.type === "fork" ? "Fork" : "Subtask";
      return m$1`
    <${EventPanel} 
      id=${id} 
      title="${type}: ${event.name}" 
      subTitle=${formatDateTime(new Date(event.timestamp))} 
      style=${style2} 
      collapse=${false}
      selectedNav=${eventState.selectedNav || ""}
      onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
      collapsed=${eventState.collapsed}
      onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}              
    >
      ${body}
    </${EventPanel}>`;
    };
    const SubtaskSummary = ({ input, result }) => {
      result = typeof result === "object" ? result : { result };
      return m$1` <div
    style=${{
        display: "grid",
        gridTemplateColumns: "minmax(0, 1fr) max-content minmax(0, 1fr)",
        columnGap: "1em",
        margin: "0.5em 0"
      }}
  >
    <div style=${{ ...TextStyle.label }}>Input</div>
    <div style=${{ fontSize: FontSize.large, padding: "0 2em" }}></div>
    <div style=${{ ...TextStyle.label }}>Output</div>
    <${Rendered} values=${input} />
    <div style=${{ fontSize: FontSize["title-secondary"], padding: "0 2em" }}>
      <i class="${ApplicationIcons.arrows.right}" />
    </div>
    <div>
      <${Rendered} values=${result} />
    </div>
  </div>`;
    };
    const Rendered = ({ values }) => {
      if (Array.isArray(values)) {
        return values.map((val) => {
          return m$1`<${Rendered} values=${val} />`;
        });
      } else if (values && typeof values === "object") {
        return m$1`<${MetaDataView} entries=${values} />`;
      } else {
        return values;
      }
    };
    const ModelTokenTable = ({ model_usage, style: style2 }) => {
      return m$1`
  <${TokenTable$1} style=${style2}>
    <${TokenHeader}/>
    <tbody>
    ${Object.keys(model_usage).map((key2) => {
        return m$1`<${TokenRow} model=${key2} usage=${model_usage[key2]} />`;
      })}
    </tbody>
  </${TokenTable$1}>
  `;
    };
    const TokenTable$1 = ({ style: style2, children: children2 }) => {
      return m$1`<table
    class="table table-sm"
    style=${{
        width: "100%",
        fontSize: FontSize.smaller,
        marginTop: "0.7rem",
        ...style2
      }}
  >
    ${children2}
  </table>`;
    };
    const thStyle = {
      padding: 0,
      fontWeight: 300,
      fontSize: FontSize.small,
      ...TextStyle.label,
      ...TextStyle.secondary
    };
    const TokenHeader = () => {
      return m$1`<thead>
    <tr>
      <td></td>
      <td
        colspan="3"
        align="center"
        class="card-subheading"
        style=${{
        paddingBottom: "0.7rem",
        fontSize: FontSize.small,
        ...TextStyle.label,
        ...TextStyle.secondary
      }}
      >
        Tokens
      </td>
    </tr>
    <tr>
      <th style=${thStyle}>Model</th>
      <th style=${thStyle}>Usage</th>
    </tr>
  </thead>`;
    };
    const TokenRow = ({ model, usage }) => {
      return m$1`<tr>
    <td>${model}</td>
    <td>
      <${ModelUsagePanel} usage=${usage} />
    </td>
  </tr>`;
    };
    const kUsageCardBodyId = "usage-card-body";
    const UsageCard = ({ stats }) => {
      if (!stats) {
        return "";
      }
      const totalDuration = formatDuration(
        new Date(stats.started_at),
        new Date(stats.completed_at)
      );
      const usageMetadataStyle = {
        fontSize: FontSize.smaller
      };
      return m$1`

    <${Card}>
      <${CardHeader} icon=${ApplicationIcons.usage} label="Usage"/>
      <${CardBody} id=${kUsageCardBodyId} style=${{
        paddingTop: "0",
        paddingBottom: "0",
        borderTop: "solid var(--bs-border-color) 1px"
      }}>
        <div style=${{
        paddingTop: "0",
        paddingBottom: "1em",
        marginLeft: "0",
        display: "flex"
      }}>

          <div style=${{ flex: "1 1 40%", marginRight: "1em" }}>
          <div style=${{ marginTop: "1em", fontSize: FontSize.smaller, ...TextStyle.label, ...TextStyle.secondary }}>Duration</div>
          <${MetaDataView}
            entries="${{
        ["Start"]: new Date(stats.started_at).toLocaleString(),
        ["End"]: new Date(stats.completed_at).toLocaleString(),
        ["Duration"]: totalDuration
      }}"
            tableOptions="borderless,sm"
            style=${usageMetadataStyle}
          />
          </div>

          <div style=${{ flex: "1 1 60%" }}>
            <${ModelTokenTable} model_usage=${stats.model_usage}/>
          </div>
        </div>
      </${CardBody}>
    </${Card}>
  `;
    };
    const ModelUsagePanel = ({ usage }) => {
      if (!usage) {
        return "";
      }
      const rows = [
        {
          label: "input",
          value: usage.input_tokens,
          secondary: false
        }
      ];
      if (usage.input_tokens_cache_read) {
        rows.push({
          label: "cache_read",
          value: usage.input_tokens_cache_read,
          secondary: true
        });
      }
      if (usage.input_tokens_cache_write) {
        rows.push({
          label: "cache_write",
          value: usage.input_tokens_cache_write,
          secondary: true
        });
      }
      rows.push({
        label: "Output",
        value: usage.output_tokens,
        secondary: false,
        bordered: true
      });
      rows.push({
        label: "---",
        value: void 0,
        secondary: false
      });
      rows.push({
        label: "Total",
        value: usage.total_tokens,
        secondary: false
      });
      return m$1` <div
    style=${{
        display: "grid",
        gridTemplateColumns: "0 auto auto",
        columnGap: "0.5em",
        fontSize: FontSize.small
      }}
  >
    ${rows.map((row) => {
        if (row.label === "---") {
          return m$1`<div
          style=${{
            gridColumn: "-1/1",
            height: "1px",
            backgroundColor: "var(--bs-light-border-subtle)"
          }}
        ></div>`;
        } else {
          return m$1`
          <div
            style=${{
            ...TextStyle.label,
            ...TextStyle.secondary,
            gridColumn: row.secondary ? "2" : "1/3"
          }}
          >
            ${row.label}
          </div>
          <div style=${{ gridColumn: "3" }}>${formatNumber(row.value)}</div>
        `;
        }
      })}
  </div>`;
    };
    const ModelEventView = ({
      id,
      event,
      eventState,
      setEventState,
      style: style2
    }) => {
      var _a2, _b2;
      const totalUsage = (_a2 = event.output.usage) == null ? void 0 : _a2.total_tokens;
      const callTime = event.output.time;
      const subItems = [];
      if (totalUsage) {
        subItems.push(`${formatNumber(totalUsage)} tokens`);
      }
      if (callTime) {
        subItems.push(`${formatPrettyDecimal(callTime)} sec`);
      }
      const subtitle = subItems.length > 0 ? `(${subItems.join(", ")})` : "";
      const outputMessages = (_b2 = event.output.choices) == null ? void 0 : _b2.map((choice) => {
        return choice.message;
      });
      const entries = { ...event.config };
      entries["tool_choice"] = event.tool_choice;
      delete entries["max_connections"];
      const tableSectionStyle = {
        width: "fit-content",
        alignSelf: "start",
        justifySelf: "start"
      };
      const userMessages = [];
      for (const msg of event.input.slice().reverse()) {
        if (msg.role === "user" && !msg.tool_call_id) {
          userMessages.push(msg);
        } else {
          break;
        }
      }
      return m$1`
  <${EventPanel} 
    id=${id} 
    title="Model Call: ${event.model} ${subtitle}"
    subTitle=${formatDateTime(new Date(event.timestamp))} 
    icon=${ApplicationIcons.model} 
    style=${style2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}
  >
  
    <div name="Summary" style=${{ margin: "0.5em 0" }}>
    <${ChatView}
      id="${id}-model-output"
      messages=${[...userMessages, ...outputMessages || []]}
      style=${{ paddingTop: "1em" }}
      numbered=${false}
      toolCallStyle="compact"
      />
    </div>

    <div name="All" style=${{ margin: "0.5em 0" }}>

      <div style=${{ display: "grid", gridTemplateColumns: "1fr 1fr", columnGap: "1em" }}>
      <${EventSection} title="Configuration" style=${tableSectionStyle}>
        <${MetaDataGrid} entries=${entries} plain=${true}/>
      </${EventSection}>

      <${EventSection} title="Usage" style=${tableSectionStyle}>
        <${ModelUsagePanel} usage=${event.output.usage}/>
      </${EventSection}>

      <${EventSection} title="Tools" style=${{ gridColumn: "-1/1", ...tableSectionStyle }}>
        <${ToolsConfig} tools=${event.tools}/>
      </${EventSection}>

      </div>

      <${EventSection} title="Messages">
        <${ChatView}
          id="${id}-model-input-full"
          messages=${[...event.input, ...outputMessages || []]}
          />      
      </${EventSection}>

    </div>

    ${event.call ? m$1`<${APIView} name="API" call=${event.call} style=${{ margin: "0.5em 0", width: "100%" }} />` : ""}
   
  </${EventPanel}>`;
    };
    const APIView = ({ call, style: style2 }) => {
      if (!call) {
        return "";
      }
      return m$1`<div style=${style2}>

    <${EventSection} title="Request">
      <${APICodeCell} contents=${call.request} />
    </${EventSection}>
    <${EventSection} title="Response">
      <${APICodeCell} contents=${call.response} />
    </${EventSection}>

    </div>`;
    };
    const APICodeCell = ({ id, contents }) => {
      if (!contents) {
        return "";
      }
      const codeRef = A$1();
      const sourceCode = T$1(() => {
        return JSON.stringify(contents, void 0, 2);
      }, [contents]);
      y(() => {
        if (codeRef.current) {
          Prism$1.highlightElement(codeRef.current);
        }
      }, [codeRef.current, contents]);
      return m$1`<div>
    <pre
      style=${{
        background: "var(--bs-light)",
        width: "100%",
        padding: "0.5em",
        borderRadius: "var(--bs-border-radius)"
      }}
    >
      <code 
        id=${id} 
        ref=${codeRef}
        class="language-json" 
        style=${{
        fontSize: FontSize.small,
        whiteSpace: "pre-wrap",
        wordWrap: "anywhere"
      }}>
        ${sourceCode}
      </code>
      </pre>
  </div>`;
    };
    const ToolsConfig = ({ tools }) => {
      const toolEls = tools.map((tool) => {
        return m$1`<div style=${{ ...TextStyle.label, ...TextStyle.secondary }}>
        ${tool.name}
      </div>
      <div>${tool.description}</div>`;
      });
      return m$1`<div
    style=${{
        display: "grid",
        gridTemplateColumns: "max-content auto",
        columnGap: "1em",
        rowGap: "0.5em"
      }}
  >
    ${toolEls}
  </div>`;
    };
    const EventRow = ({ title, icon, style: style2, children: children2 }) => {
      const contentEl = title ? m$1`<div
        style=${{
        marginLeft: "0.5em",
        display: "grid",
        gridTemplateColumns: "max-content max-content minmax(0, 1fr)",
        columnGap: "0.5em",
        fontSize: FontSize.small
      }}
      >
        <i class=${icon || ApplicationIcons.metadata} />
        <div style=${{ ...TextStyle.label }}>${title}</div>
        <div>${children2}</div>
      </div>` : "";
      const card = m$1` <div
    class="card"
    style=${{
        padding: "0.4em",
        marginBottom: "0",
        border: "solid 1px var(--bs-light-border-subtle)",
        borderRadius: "var(--bs-border-radius)",
        ...style2
      }}
  >
    ${contentEl}
  </div>`;
      return card;
    };
    const LoggerEventView = ({ id, event, style: style2 }) => {
      return m$1`
  <${EventRow} 
    id=${id}
    title=${event.message.level} 
    icon=${ApplicationIcons.logging[event.message.level.toLowerCase()]}  
    style=${style2}
  >
  <div
    style=${{ width: "100%", display: "grid", gridTemplateColumns: "1fr max-content", columnGap: "1em", fontSize: FontSize.base }}
  >
    <div style=${{ fontSize: FontSize.smaller }}>${event.message.message}</div>
    <div style=${{ fontSize: FontSize.smaller, ...TextStyle.secondary }}>${event.message.filename}:${event.message.lineno}</div>
  </div>
  </${EventRow}>`;
    };
    const kPrismRenderMaxSize = 25e4;
    const JSONPanel = ({ id, json, data, simple, style: style2 }) => {
      const codeRef = A$1();
      const sourceCode = T$1(() => {
        return json || JSON.stringify(data, void 0, 2);
      }, [json, data]);
      y(() => {
        if (sourceCode.length < kPrismRenderMaxSize) {
          Prism$1.highlightElement(codeRef.current);
        }
      }, [sourceCode]);
      return m$1`<div>
    <pre
      style=${{
        background: simple ? void 0 : "var(--bs-light)",
        width: "100%",
        padding: "0.5em",
        borderRadius: simple ? void 0 : "var(--bs-border-radius)",
        ...style2
      }}
      class="jsonPanel"
    >
    <code 
      id=${id}
      ref=${codeRef}
      class="sourceCode language-javascript" 
      style=${{
        fontSize: FontSize.small,
        whiteSpace: "pre-wrap",
        wordWrap: "anywhere"
      }}>
      ${sourceCode}
    </code>
    </pre>
  </div>`;
    };
    const InfoEventView = ({
      id,
      event,
      style: style2,
      eventState,
      setEventState
    }) => {
      const panels = [];
      if (typeof event.data === "string") {
        panels.push(
          m$1`<${MarkdownDiv}
        markdown=${event.data}
        style=${{ margin: "0.5em 0" }}
      />`
        );
      } else {
        panels.push(
          m$1`<${JSONPanel} data=${event.data} style=${{ margin: "0.5em 0" }} />`
        );
      }
      return m$1`
  <${EventPanel} 
    id=${id} 
    title="Info" 
    subTitle=${formatDateTime(new Date(event.timestamp))} 
    icon=${ApplicationIcons.info} 
    style=${style2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}
  >
    ${panels}
  </${EventPanel}>`;
    };
    const ScoreEventView = ({
      id,
      event,
      eventState,
      setEventState,
      style: style2
    }) => {
      const resolvedTarget = event.target ? Array.isArray(event.target) ? event.target.join("\n") : event.target : void 0;
      return m$1`
  <${EventPanel} 
    id=${id} 
    title="Score" 
    subTitle=${formatDateTime(new Date(event.timestamp))} 
    icon=${ApplicationIcons.scorer} 
    style=${style2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}    
  >
  
    <div
      name="Explanation"
      style=${{ display: "grid", gridTemplateColumns: "max-content auto", columnGap: "1em", margin: "0.5em 0" }}
    >
      ${event.target ? m$1` <div
                style=${{
        gridColumn: "1 / -1",
        borderBottom: "solid 1px var(--bs-light-border-subtle"
      }}
              ></div>
              <div style=${{ ...TextStyle.label }}>Target</div>
              <div><${MarkdownDiv} markdown=${resolvedTarget} /></div>` : ""}
      <div style=${{ gridColumn: "1 / -1", borderBottom: "solid 1px var(--bs-light-border-subtle" }}></div>
      <div style=${{ ...TextStyle.label }}>Answer</div>
      <div><${MarkdownDiv} markdown=${event.score.answer}/></div>
      <div style=${{ gridColumn: "1 / -1", borderBottom: "solid 1px var(--bs-light-border-subtle" }}></div>
      <div style=${{ ...TextStyle.label }}>Explanation</div>
      <div><${MarkdownDiv} markdown=${event.score.explanation}/></div>
      <div style=${{ gridColumn: "1 / -1", borderBottom: "solid 1px var(--bs-light-border-subtle" }}></div>
      <div style=${{ ...TextStyle.label }}>Score</div>  
      <div>${renderScore(event.score.value)}</div>
      <div style=${{ gridColumn: "1 / -1", borderBottom: "solid 1px var(--bs-light-border-subtle" }}></div>
    </div>
    ${event.score.metadata ? m$1`<div name="Metadata">
            <${MetaDataGrid}
              entries=${event.score.metadata}
              compact=${true}
              style=${{ margin: "0.5em 0" }}
            />
          </div>` : void 0}
  </${EventPanel}>`;
    };
    const renderScore = (value) => {
      if (Array.isArray(value)) {
        return m$1`<${MetaDataGrid} entries=${value} />`;
      } else if (typeof value === "object") {
        return m$1`<${MetaDataGrid} entries=${value} />`;
      } else {
        return value;
      }
    };
    const ApprovalEventView = ({ id, event, style: style2 }) => {
      return m$1`
  <${EventRow}
      id=${id}
      title="${decisionLabel(event.decision)}"
      icon=${decisionIcon(event.decision)}  
      style=${style2}
    >
    ${event.explanation}
  </${EventRow}>`;
    };
    const decisionLabel = (decision) => {
      switch (decision) {
        case "approve":
          return "Approved";
        case "reject":
          return "Rejected";
        case "terminate":
          return "Terminated";
        case "escalate":
          return "Escalated";
        case "modify":
          return "Modified";
        default:
          return decision;
      }
    };
    const decisionIcon = (decision) => {
      switch (decision) {
        case "approve":
          return ApplicationIcons.approvals.approve;
        case "reject":
          return ApplicationIcons.approvals.reject;
        case "terminate":
          return ApplicationIcons.approvals.terminate;
        case "escalate":
          return ApplicationIcons.approvals.escalate;
        case "modify":
          return ApplicationIcons.approvals.modify;
        default:
          return ApplicationIcons.approve;
      }
    };
    const ToolEventView = ({
      id,
      event,
      eventState,
      setEventState,
      style: style2,
      depth
    }) => {
      var _a2, _b2;
      const { input, functionCall, inputType } = resolveToolInput(
        event.function,
        event.arguments
      );
      const approvalEvent = event.events.find((e2) => {
        return e2.event === "approval";
      });
      const title = `Tool: ${((_a2 = event.view) == null ? void 0 : _a2.title) || event.function}`;
      return m$1`
  <${EventPanel} 
    id=${id} 
    title="${title}" 
    subTitle=${formatDateTime(new Date(event.timestamp))} 
    icon=${ApplicationIcons.solvers.use_tools} 
    style=${style2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}              
  >  
  <div name="Summary" style=${{ margin: "0.5em 0", width: "100%" }}>
    <${ToolCallView}
      functionCall=${functionCall}
      input=${input}
      inputType=${inputType}
      output=${((_b2 = event.error) == null ? void 0 : _b2.message) || event.result}
      mode="compact"
      view=${event.view}
      />
      ${approvalEvent ? m$1`<${ApprovalEventView}
              id="${id}-approval"
              event=${approvalEvent}
              style=${{ border: "none", padding: 0, marginBottom: 0 }}
            />` : ""}
  </div>
    ${event.events.length > 0 ? m$1`<${TranscriptView}
            id="${id}-subtask"
            name="Transcript"
            events=${event.events}
            depth=${depth + 1}
          />` : ""}
  </${EventPanel}>`;
    };
    const ErrorEventView = ({
      id,
      event,
      style: style2,
      eventState,
      setEventState
    }) => {
      return m$1`
  <${EventPanel} 
    id=${id} 
    title="Error" 
    subTitle=${formatDateTime(new Date(event.timestamp))} 
    icon=${ApplicationIcons.error} 
    style=${style2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}
  >
    <${ANSIDisplay} output=${event.error.traceback_ansi} style=${{ fontSize: "clamp(0.5rem, calc(0.25em + 1vw), 0.8rem)", margin: "0.5em 0" }}/>
  </${EventPanel}>`;
    };
    const InputEventView = ({
      id,
      event,
      style: style2,
      eventState,
      setEventState
    }) => {
      return m$1`
  <${EventPanel} 
    id=${id} 
    title="Input" 
    subTitle=${formatDateTime(new Date(event.timestamp))} 
    icon=${ApplicationIcons.input} 
    style=${style2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}
    >
    <${ANSIDisplay} output=${event.input_ansi} style=${{ fontSize: "clamp(0.4rem, 1.15vw, 0.9rem)", ...style2 }}/>
  </${EventPanel}>`;
    };
    const SampleLimitEventView = ({
      id,
      event,
      eventState,
      setEventState,
      style: style2
    }) => {
      const resolve_title = (type) => {
        switch (type) {
          case "context":
            return "Context Limit Exceeded";
          case "time":
            return "Time Limit Execeeded";
          case "message":
            return "Message Limit Exceeded";
          case "token":
            return "Token Limit Exceeded";
          case "operator":
            return "Operator Canceled";
        }
      };
      const resolve_icon = (type) => {
        switch (type) {
          case "context":
            return ApplicationIcons.limits.context;
          case "time":
            return ApplicationIcons.limits.time;
          case "message":
            return ApplicationIcons.limits.messages;
          case "token":
            return ApplicationIcons.limits.tokens;
          case "operator":
            return ApplicationIcons.limits.operator;
        }
      };
      const title = resolve_title(event.type);
      const icon = resolve_icon(event.type);
      return m$1`
  <${EventPanel} 
    id=${id} 
    title=${title} 
    icon=${icon} 
    style=${style2}
    selectedNav=${eventState.selectedNav || ""}
    onSelectedNav=${(selectedNav) => {
        setEventState({ ...eventState, selectedNav });
      }}
    collapsed=${eventState.collapsed}
    onCollapsed=${(collapsed) => {
        setEventState({ ...eventState, collapsed });
      }}
  >
    ${event.message}
  </${EventPanel}>`;
    };
    class EventNode {
      /**
       * Create an EventNode.
       * @param { import("../../types/log").SampleInitEvent | import("../../types/log").SampleLimitEvent | import("../../types/log").StateEvent | import("../../types/log").StoreEvent | import("../../types/log").ModelEvent | import("../../types/log").LoggerEvent | import("../../types/log").InfoEvent | import("../../types/log").StepEvent | import("../../types/log").SubtaskEvent| import("../../types/log").ScoreEvent | import("../../types/log").ToolEvent | import("../../types/log").InputEvent | import("../../types/log").ErrorEvent | import("../../types/log").ApprovalEvent } event - This event.
       * @param {number} depth - the depth of this item
       */
      constructor(event, depth) {
        this.event = event;
        this.children = [];
        this.depth = depth;
      }
    }
    const TranscriptView = ({ id, events, depth = 0 }) => {
      const [transcriptState, setTranscriptState] = h({});
      const onTranscriptState = q$1(
        (state) => {
          setTranscriptState(state);
        },
        [transcriptState, setTranscriptState]
      );
      const resolvedEvents = fixupEventStream(events);
      const eventNodes = treeifyEvents(resolvedEvents, depth);
      return m$1`
    <${TranscriptComponent}
      id=${id}
      eventNodes=${eventNodes}
      transcriptState=${transcriptState}
      setTranscriptState=${onTranscriptState}
    />
  `;
    };
    const TranscriptVirtualList = (props) => {
      let { id, scrollRef, events, depth, style: style2 } = props;
      const resolvedEvents = fixupEventStream(events);
      const eventNodes = treeifyEvents(resolvedEvents, depth);
      const [transcriptState, setTranscriptState] = h({});
      const onTranscriptState = q$1(
        (state) => {
          setTranscriptState(state);
        },
        [transcriptState, setTranscriptState]
      );
      return m$1`<${TranscriptVirtualListComponent}
    id=${id}
    eventNodes=${eventNodes}
    style=${style2}
    scrollRef=${scrollRef}
    transcriptState=${transcriptState}
    setTranscriptState=${onTranscriptState}
  />`;
    };
    const TranscriptVirtualListComponent = ({
      id,
      eventNodes,
      style: style2,
      scrollRef,
      transcriptState,
      setTranscriptState
    }) => {
      const renderRow = (item, index) => {
        const toggleStyle = {};
        if (item.depth % 2 == 0) {
          toggleStyle.backgroundColor = "var(--bs-light-bg-subtle)";
        } else {
          toggleStyle.backgroundColor = "var(--bs-body-bg)";
        }
        let paddingTop = "0";
        if (index === 0) {
          paddingTop = ".5em";
        }
        const eventId = `${id}-event${index}`;
        const setEventState = q$1(
          (state) => {
            setTranscriptState({ ...transcriptState, [eventId]: state });
          },
          [setTranscriptState, transcriptState]
        );
        return m$1`<div style=${{ paddingTop, paddingBottom: ".5em" }}>
      <${RenderedEventNode}
        id=${eventId}
        node=${item}
        style=${{
          ...toggleStyle,
          ...style2
        }}
        scrollRef=${scrollRef}
        eventState=${transcriptState[eventId] || {}}
        setEventState=${setEventState}
      />
    </div>`;
      };
      return m$1`<${VirtualList}
    data=${eventNodes}
    tabIndex="0"
    renderRow=${renderRow}
    scrollRef=${scrollRef}
    style=${{ width: "100%", marginTop: "1em" }}
  />`;
    };
    const TranscriptComponent = ({
      id,
      transcriptState,
      setTranscriptState,
      eventNodes,
      style: style2
    }) => {
      const rows = eventNodes.map((eventNode, index) => {
        const toggleStyle = {};
        if (eventNode.depth % 2 == 0) {
          toggleStyle.backgroundColor = "var(--bs-light-bg-subtle)";
        } else {
          toggleStyle.backgroundColor = "var(--bs-body-bg)";
        }
        if (index === eventNodes.length - 1) {
          toggleStyle.marginBottom = "0";
        } else if (eventNode.depth === 0) {
          toggleStyle.marginBottom = "1.5em";
        }
        let paddingBottom = ".5em";
        if (index === eventNodes.length - 1) {
          paddingBottom = "0";
        }
        const eventId = `${id}-event${index}`;
        const setEventState = q$1(
          (state) => {
            setTranscriptState({ ...transcriptState, [eventId]: state });
          },
          [setTranscriptState, transcriptState]
        );
        const row = m$1`
      <div style=${{ paddingBottom }}>
        <${RenderedEventNode}
          id=${eventId}
          node=${eventNode}
          style=${{
          ...toggleStyle,
          ...style2
        }}
          eventState=${transcriptState[eventId] || {}}
          setEventState=${setEventState}
        />
      </div>
    `;
        return row;
      });
      return m$1`<div
    id=${id}
    key=${id}
    style=${{
        fontSize: FontSize.small,
        display: "grid",
        margin: "0.5em 0 0 0",
        width: "100%"
      }}
  >
    ${rows}
  </div>`;
    };
    const RenderedEventNode = ({
      id,
      node,
      style: style2,
      scrollRef,
      eventState,
      setEventState
    }) => {
      switch (node.event.event) {
        case "sample_init":
          return m$1`<${SampleInitEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "sample_limit":
          return m$1`<${SampleLimitEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "info":
          return m$1`<${InfoEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "logger":
          return m$1`<${LoggerEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "model":
          return m$1`<${ModelEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "score":
          return m$1`<${ScoreEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "state":
          return m$1`<${StateEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "step":
          return m$1`<${StepEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        children=${node.children}
        style=${style2}
        scrollRef=${scrollRef}
      />`;
        case "store":
          return m$1`<${StateEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
        isStore=${true}
      />`;
        case "subtask":
          return m$1`<${SubtaskEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
        depth=${node.depth}
      />`;
        case "tool":
          return m$1`<${ToolEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
        depth=${node.depth}
      />`;
        case "input":
          return m$1`<${InputEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "error":
          return m$1`<${ErrorEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        case "approval":
          return m$1`<${ApprovalEventView}
        id=${id}
        event=${node.event}
        eventState=${eventState}
        setEventState=${setEventState}
        style=${style2}
      />`;
        default:
          return m$1``;
      }
    };
    const fixupEventStream = (events) => {
      const initEventIndex = events.findIndex((e2) => {
        return e2.event === "sample_init";
      });
      const initEvent = events[initEventIndex];
      const fixedUp = [...events];
      if (initEvent) {
        fixedUp.splice(initEventIndex, 0, {
          timestamp: initEvent.timestamp,
          event: "step",
          action: "begin",
          type: null,
          name: "sample_init",
          pending: false
        });
        fixedUp.splice(initEventIndex + 2, 0, {
          timestamp: initEvent.timestamp,
          event: "step",
          action: "end",
          type: null,
          name: "sample_init",
          pending: false
        });
      }
      return fixedUp;
    };
    function treeifyEvents(events, depth) {
      const rootNodes = [];
      const stack2 = [];
      const pushNode = (event) => {
        const node = new EventNode(event, stack2.length + depth);
        if (stack2.length > 0) {
          const parentNode = stack2[stack2.length - 1];
          parentNode.children.push(node);
        } else {
          rootNodes.push(node);
        }
        return node;
      };
      events.forEach((event) => {
        if (event.event === "step" && event.action === "begin") {
          const node = pushNode(event);
          stack2.push(node);
        } else if (event.event === "step" && event.action === "end") {
          if (stack2.length > 0) {
            stack2.pop();
          }
        } else {
          pushNode(event);
        }
      });
      return rootNodes;
    }
    const SampleTranscript = ({ id, evalEvents, scrollRef }) => {
      return m$1`<${TranscriptVirtualList}
    id=${id}
    events=${evalEvents}
    scrollRef=${scrollRef}
  />`;
    };
    const SampleError = ({ message, align, style: style2 }) => {
      align = align || "center";
      return m$1`<div
    style=${{
        color: "var(--bs-danger)",
        display: "grid",
        gridTemplateColumns: "1fr",
        alignContent: align,
        justifyItems: "center",
        ...style2
      }}
  >
    <i
      class=${ApplicationIcons.error}
      style=${{
        fontSize: FontSize.small,
        lineHeight: FontSize.small,
        height: FontSize.small
      }}
    />
    <div style=${{ maxWidth: "300px", ...ApplicationStyles.lineClamp(2) }}>
      ${errorType(message)}
    </div>
  </div>`;
    };
    const FlatSampleError = ({ message, style: style2 }) => {
      return m$1`<div
    style=${{
        color: "var(--bs-danger)",
        display: "grid",
        gridTemplateColumns: "max-content max-content",
        columnGap: "0.2em",
        ...style2
      }}
  >
    <i
      class=${ApplicationIcons.error}
      style=${{
        fontSize: FontSize.base,
        lineHeight: FontSize.base,
        height: FontSize.base
      }}
    />
    <div
      style=${{
        fontSize: FontSize.base,
        lineHeight: FontSize.base,
        height: FontSize.base
      }}
    >
      ${errorType(message)}
    </div>
  </div>`;
    };
    const errorType = (message) => {
      if (!message) {
        return "Error";
      }
      if (message.includes("(")) {
        return message.split("(")[0];
      }
      return "Error";
    };
    const printHtml = (html, css) => {
      const printWindow = window.open("", "", "height=600,width=800");
      printWindow.document.write("<html><head><title>Print</title>");
      printWindow.document.write(`
          <link rel="stylesheet" crossorigin="" href="./assets/index.css">
          <style>
            @media print {
              ${css}
            }
          </style>
        `);
      printWindow.document.write("</head><body>");
      printWindow.document.write(html);
      printWindow.document.write("</body></html>");
      printWindow.document.close();
      printWindow.onload = function() {
        printWindow.focus();
        printWindow.print();
        printWindow.close();
      };
    };
    const printHeadingHtml = () => {
      const task = document.getElementById("task-title").innerText;
      const model = document.getElementById("task-model").innerText;
      const time = document.getElementById("task-created").innerText;
      const headingHtml = `
<div style="display: grid; grid-template-columns: repeat(3, 1fr); column-gap: 0.5em; margin-bottom: 2em; justify-content: space-between; border-bottom: solid 1px silver;">
<div style="font-weight: 600">${task}</div>
<div style="text-align: center;">${model}</div>
<div style="text-align: right;">${time}</div>
</div>`;
      return headingHtml;
    };
    const kEvalWorkspaceTabId = "eval-tab";
    const kJsonWorkspaceTabId = "json-tab";
    const kInfoWorkspaceTabId = "plan-tab";
    const kSampleMessagesTabId = `sample-display-messages`;
    const kSampleTranscriptTabId = `sample-display-transcript`;
    const kSampleScoringTabId = `sample-display-scoring`;
    const kSampleMetdataTabId = `sample-display-metadata`;
    const kSampleErrorTabId = `sample-display-error`;
    const kSampleJsonTabId = `sample-display-json`;
    const kScoreTypePassFail = "passfail";
    const kScoreTypeCategorical = "categorical";
    const kScoreTypeNumeric = "numeric";
    const kScoreTypeOther = "other";
    const kScoreTypeObject = "object";
    const kScoreTypeBoolean = "boolean";
    const kSampleAscVal = "sample-asc";
    const kSampleDescVal = "sample-desc";
    const kEpochAscVal = "epoch-asc";
    const kEpochDescVal = "epoch-desc";
    const kScoreAscVal = "score-asc";
    const kScoreDescVal = "score-desc";
    const kDefaultSort = kSampleAscVal;
    const InlineSampleDisplay = ({
      id,
      sample,
      sampleStatus,
      sampleError,
      sampleDescriptor,
      selectedTab,
      setSelectedTab,
      scrollRef
    }) => {
      return m$1`<div style=${{ flexDirection: "row", width: "100%" }}>
    <${ProgressBar}
      animating=${sampleStatus === "loading"}
      containerStyle=${{
        background: "var(--bs-body-bg)"
      }}
    />
    <div style=${{ margin: "1em 1em 1em 1em" }}>
      ${sampleError ? m$1`<${ErrorPanel}
            title="Unable to load sample"
            error=${sampleError}
          />` : m$1` <${SampleDisplay}
            id=${id}
            sample=${sample}
            sampleDescriptor=${sampleDescriptor}
            selectedTab=${selectedTab}
            setSelectedTab=${setSelectedTab}
            scrollRef=${scrollRef}
          />`}
    </div>
  </div>`;
    };
    const SampleDisplay = ({
      id,
      sample,
      sampleDescriptor,
      selectedTab,
      setSelectedTab,
      scrollRef
    }) => {
      const baseId = `sample-dialog`;
      if (!sample) {
        return m$1`<${EmptyPanel} />`;
      }
      const onSelectedTab = (e2) => {
        const id2 = e2.currentTarget.id;
        setSelectedTab(id2);
        return false;
      };
      const tabs = [
        m$1`
    <${TabPanel} id=${kSampleMessagesTabId} classes="sample-tab" title="Messages" onSelected=${onSelectedTab} selected=${selectedTab === kSampleMessagesTabId} scrollable=${false} style=${{ width: "100%" }}>
      <${ChatViewVirtualList} 
        key=${`${baseId}-chat-${id}`} 
        id=${`${baseId}-chat-${id}`} 
        messages=${sample.messages} 
        style=${{ marginLeft: ".8em", marginTop: "1em" }}
        indented=${true}
        scrollRef=${scrollRef}
      />
    </${TabPanel}>`
      ];
      if (sample.events && sample.events.length > 0) {
        tabs.unshift(m$1`
      <${TabPanel} id=${kSampleTranscriptTabId} classes="sample-tab" title="Transcript" onSelected=${onSelectedTab} selected=${selectedTab === kSampleTranscriptTabId || selectedTab === void 0} scrollable=${false}>
        <${SampleTranscript} key=${`${baseId}-transcript-display-${id}`} id=${`${baseId}-transcript-display-${id}`} evalEvents=${sample.events} scrollRef=${scrollRef}/>
      </${TabPanel}>`);
      }
      const scorerNames = Object.keys(sample.scores);
      if (scorerNames.length === 1) {
        tabs.push(m$1`
      <${TabPanel} id=${kSampleScoringTabId} classes="sample-tab" title="Scoring" onSelected=${onSelectedTab} selected=${selectedTab === kSampleScoringTabId}>
        <${SampleScoreView}
          sample=${sample}
          sampleDescriptor=${sampleDescriptor}
          scorer=${Object.keys(sample.scores)[0]}
        />
      </${TabPanel}>`);
      } else {
        for (const scorer of Object.keys(sample.scores)) {
          const tabId = `score-${scorer}`;
          tabs.push(m$1`
        <${TabPanel} id="${tabId}" classes="sample-tab" title="${scorer}" onSelected=${onSelectedTab} selected=${selectedTab === tabId}>
          <${SampleScoreView}
            sample=${sample}
            sampleDescriptor=${sampleDescriptor}
            scorer=${scorer}
          />
        </${TabPanel}>`);
        }
      }
      const sampleMetadatas = metadataViewsForSample(`${baseId}-${id}`, sample);
      if (sampleMetadatas.length > 0) {
        tabs.push(
          m$1`
      <${TabPanel} 
          id=${kSampleMetdataTabId} 
          classes="sample-tab"
          title="Metadata" 
          onSelected=${onSelectedTab} 
          selected=${selectedTab === kSampleMetdataTabId}>
         <div style=${{ display: "flex", flexWrap: "wrap", alignItems: "flex-start", gap: "1em", paddingLeft: "0", marginTop: "0.5em" }}> 
          ${sampleMetadatas}
        </div>
      </${TabPanel}>`
        );
      }
      if (sample.error) {
        tabs.push(
          m$1`
      <${TabPanel} 
          id=${kSampleErrorTabId} 
          classes="sample-tab"
          title="Error" 
          onSelected=${onSelectedTab} 
          selected=${selectedTab === kSampleErrorTabId}>
         <div style=${{ paddingLeft: "0.8em", marginTop: "0.4em" }}> 
          <${ANSIDisplay} output=${sample.error.traceback_ansi} style=${{ fontSize: FontSize.small, margin: "1em 0" }}/>
        </div>
      </${TabPanel}>`
        );
      }
      if (sample.messages.length < 100) {
        tabs.push(m$1`<${TabPanel} 
        id=${kSampleJsonTabId} 
        classes="sample-tab"
        title="JSON" 
        onSelected=${onSelectedTab} 
        selected=${selectedTab === kSampleJsonTabId}>
      <div style=${{ paddingLeft: "0.8em", marginTop: "0.4em" }}> 
        <${JSONPanel} data=${sample} simple=${true}/>
      </div>
    </${TabPanel}>`);
      }
      const tabsetId = `task-sample-details-tab-${id}`;
      const targetId = `${tabsetId}-content`;
      const printSample = () => {
        const targetTabEl = document.querySelector(
          `#${escapeSelector(targetId)} .sample-tab.tab-pane.show.active`
        );
        if (targetTabEl) {
          const targetEl = targetTabEl.firstElementChild;
          if (targetEl) {
            const headingId = `sample-heading-${id}`;
            const headingEl = document.getElementById(headingId);
            const headingHtml = printHeadingHtml();
            const css = `
        html { font-size: 9pt }
        /* Allow content to break anywhere without any forced page breaks */
        * {
          break-inside: auto;  /* Let elements break anywhere */
          page-break-inside: auto;  /* Legacy support */
          break-before: auto;
          page-break-before: auto;
          break-after: auto;
          page-break-after: auto;
        }
        /* Specifically disable all page breaks for divs */
        div {
          break-inside: auto;
          page-break-inside: auto;
        }
        body > .transcript-step {
          break-inside: avoid;
        }
        body{
          -webkit-print-color-adjust:exact !important;
          print-color-adjust:exact !important;
        }
        /* Allow preformatted text and code blocks to break across pages */
        pre, code {
            white-space: pre-wrap; /* Wrap long lines instead of keeping them on one line */
            overflow-wrap: break-word; /* Ensure long words are broken to fit within the page */
            break-inside: auto; /* Allow page breaks inside the element */
            page-break-inside: auto; /* Older equivalent */
        }

        /* Additional control for long lines within code/preformatted blocks */
        pre {
            word-wrap: break-word; /* Break long words if needed */
        }    
            
        `;
            printHtml(
              [headingHtml, headingEl.outerHTML, targetEl.innerHTML].join("\n"),
              css
            );
          }
        }
      };
      const tools = [];
      if (!isVscode()) {
        tools.push(
          m$1`<${ToolButton}
        name=${m$1`Print`}
        icon="${ApplicationIcons.copy}"
        onclick="${printSample}"
      />`
        );
      }
      return m$1`<${SampleSummary}
    id=${id}
    sample=${sample}
    sampleDescriptor=${sampleDescriptor}/>

  <${TabSet} id=${tabsetId} styles=${{
        tabs: {
          fontSize: FontSize.base
        },
        tabBody: { paddingBottom: "1em" }
      }}
    tools=${tools}>
    ${tabs}
  </${TabSet}>`;
    };
    const metadataViewsForSample = (id, sample) => {
      const sampleMetadatas = [];
      if (sample.model_usage && Object.keys(sample.model_usage).length > 0) {
        sampleMetadatas.push(m$1`
      <${Card}>
        <${CardHeader} label="Usage"/>
        <${CardBody}>
          <${ModelTokenTable} model_usage=${sample.model_usage} style=${{ marginTop: 0 }}/>
        </${CardBody}>
      </${Card}>`);
      }
      if (Object.keys(sample == null ? void 0 : sample.metadata).length > 0) {
        sampleMetadatas.push(
          m$1`
      <${Card}>
        <${CardHeader} label="Metadata"/>
        <${CardBody}>
          <${MetaDataView}
            id="task-sample-metadata-${id}"
            classes="tab-pane"
            entries="${sample == null ? void 0 : sample.metadata}"
            style=${{ marginTop: "0" }}
          />
        </${CardBody}>
        </${Card}>`
        );
      }
      if (Object.keys(sample == null ? void 0 : sample.store).length > 0) {
        sampleMetadatas.push(
          m$1`
      <${Card}>
        <${CardHeader} label="Store"/>
        <${CardBody}>
          <${MetaDataView}
            id="task-sample-store-${id}"
            classes="tab-pane"
            entries="${sample == null ? void 0 : sample.store}"
            style=${{ marginTop: "0" }}
          />
        </${CardBody}>
      </${Card}>`
        );
      }
      return sampleMetadatas;
    };
    const SampleSummary = ({ parent_id, sample, style: style2, sampleDescriptor }) => {
      const input = (sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.normalized.input) > 0 ? Math.max(0.15, sampleDescriptor.messageShape.normalized.input) : 0;
      const target = (sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.normalized.target) > 0 ? Math.max(0.15, sampleDescriptor.messageShape.normalized.target) : 0;
      const answer = (sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.normalized.answer) > 0 ? Math.max(0.15, sampleDescriptor.messageShape.normalized.answer) : 0;
      const limitSize = (sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.normalized.limit) > 0 ? Math.max(0.15, sampleDescriptor.messageShape.normalized.limit) : 0;
      const idSize = Math.max(
        2,
        Math.min(10, sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.raw.id)
      );
      const scoreInput = inputString(sample.input);
      if (sample.choices && sample.choices.length > 0) {
        scoreInput.push("");
        scoreInput.push(
          ...sample.choices.map((choice, index) => {
            return `${String.fromCharCode(65 + index)}) ${choice}`;
          })
        );
      }
      const columns = [];
      columns.push({
        label: "Id",
        value: sample.id,
        size: `${idSize}em`
      });
      columns.push({
        label: "Input",
        value: scoreInput,
        size: `${input}fr`,
        clamp: true
      });
      if (sample.target) {
        columns.push({
          label: "Target",
          value: m$1`<${MarkdownDiv}
        markdown=${arrayToString(arrayToString((sample == null ? void 0 : sample.target) || "none"))}
        style=${{ paddingLeft: "0" }}
        class="no-last-para-padding"
      />`,
          size: `${target}fr`,
          clamp: true
        });
      }
      const fullAnswer = sample && sampleDescriptor ? sampleDescriptor.selectedScorerDescriptor(sample).answer() : void 0;
      if (fullAnswer) {
        columns.push({
          label: "Answer",
          value: sample ? m$1`<${MarkdownDiv}
            markdown=${fullAnswer}
            style=${{ paddingLeft: "0" }}
            class="no-last-para-padding"
          />` : "",
          size: `${answer}fr`,
          clamp: true
        });
      }
      if (sample.limit && limitSize > 0) {
        columns.push({
          label: "Limit",
          value: sample.limit.type,
          size: `${limitSize}fr`,
          center: true
        });
      }
      columns.push({
        label: "Score",
        value: sample.error ? m$1`<${FlatSampleError}
          message=${sample.error.message}
          style=${{ marginTop: "0.4rem" }}
        />` : (
          // TODO: Cleanup once the PR lands which makes sample / sample summary share common interface
          // @ts-ignore
          sampleDescriptor == null ? void 0 : sampleDescriptor.selectedScore(sample).render()
        ),
        size: "minmax(2em, auto)",
        center: true
      });
      return m$1`
    <div
      id=${`sample-heading-${parent_id}`}
      style=${{
        display: "grid",
        gridTemplateColumns: `${columns.map((col) => {
          return col.size;
        }).join(" ")}`,
        gridColumnGap: "0.5em",
        fontSize: FontSize.base,
        borderBottom: "solid var(--bs-border-color) 1px",
        marginBottom: "1em",
        padding: "0em 1em 1em 1em",
        ...style2
      }}
    >
      ${columns.map((col) => {
        const style3 = {
          ...TextStyle.label,
          ...TextStyle.secondary,
          fontSize: FontSize.base
        };
        if (col.center) {
          style3["display"] = "flex";
          style3["justifyContent"] = "center";
        }
        return m$1`<div style=${{ ...style3 }}>${col.label}</div>`;
      })}
      ${columns.map((col) => {
        const style3 = {
          ...col.clamp ? ApplicationStyles.threeLineClamp : {}
        };
        if (col.center) {
          style3.display = "flex";
          style3.justifyContent = "center";
        }
        style3.wordWrap = "anywhere";
        return m$1`<div style=${{ ...style3 }}>${col.value}</div>`;
      })}
    </div>
  `;
    };
    const SampleDialog = ({
      id,
      title,
      sample,
      sampleDescriptor,
      nextSample,
      prevSample,
      sampleStatus,
      sampleError,
      showingSampleDialog,
      setShowingSampleDialog,
      selectedTab,
      setSelectedTab,
      sampleScrollPositionRef,
      setSampleScrollPosition
    }) => {
      const scrollRef = A$1(
        /** @type {HTMLElement|null} */
        null
      );
      const tools = T$1(() => {
        const nextTool = {
          label: "Next Sample",
          icon: ApplicationIcons.next,
          onclick: nextSample,
          enabled: !!nextSample
        };
        const prevTool = {
          label: "Previous Sample",
          icon: ApplicationIcons.previous,
          onclick: prevSample,
          enabled: !!prevSample
        };
        return {
          left: [prevTool],
          right: [nextTool]
        };
      }, [prevSample, nextSample]);
      const handleKeyUp = q$1(
        (e2) => {
          switch (e2.key) {
            case "ArrowRight":
              if (nextSample) {
                nextSample();
              }
              break;
            case "ArrowLeft":
              if (prevSample) {
                prevSample();
              }
              break;
            case "Escape":
              setShowingSampleDialog(false);
              break;
          }
        },
        [prevSample, nextSample]
      );
      const children2 = T$1(() => {
        return sampleError ? m$1`<${ErrorPanel} title="Sample Error" error=${sampleError} />` : m$1`<${SampleDisplay}
          id=${id}
          sample=${sample}
          sampleDescriptor=${sampleDescriptor}
          selectedTab=${selectedTab}
          setSelectedTab=${setSelectedTab}
          scrollRef=${scrollRef}
        />`;
      }, [id, sample, sampleDescriptor, selectedTab, setSelectedTab, sampleError]);
      const onHide = q$1(() => {
        setShowingSampleDialog(false);
      }, [setShowingSampleDialog]);
      return m$1`
    <${LargeModal} 
      id=${id} 
      detail=${title}
      detailTools=${tools}
      onkeyup=${handleKeyUp}   
      visible=${showingSampleDialog}
      onHide=${onHide}
      showProgress=${sampleStatus === "loading"}
      initialScrollPositionRef=${sampleScrollPositionRef}
      setInitialScrollPosition=${setSampleScrollPosition}
      scrollRef=${scrollRef}
    >
        ${children2}
    </${LargeModal}>`;
    };
    const kSampleHeight = 88;
    const kSeparatorHeight = 24;
    const SampleList = (props) => {
      const {
        listRef,
        items,
        sampleDescriptor,
        style: style2,
        selectedIndex,
        setSelectedIndex,
        selectedScore,
        nextSample,
        prevSample,
        showSample
      } = props;
      if (items.length === 0) {
        return m$1`<${EmptyPanel}>No Samples</${EmptyPanel}>`;
      }
      const [hidden, setHidden] = h(false);
      y(() => {
        setHidden(false);
      }, [items]);
      const itemRowMapping = T$1(() => {
        const rowIndexes = [];
        items.forEach((item, index) => {
          if (item.type === "sample") {
            rowIndexes.push(index);
          }
        });
        return rowIndexes;
      }, [items]);
      const prevSelectedIndexRef = A$1(null);
      y(() => {
        var _a2;
        const listEl = listRef.current;
        if (listEl) {
          const actualRowIndex = itemRowMapping[selectedIndex];
          const direction = actualRowIndex > prevSelectedIndexRef.current ? "down" : "up";
          (_a2 = listRef.current) == null ? void 0 : _a2.scrollToIndex(actualRowIndex, direction);
          prevSelectedIndexRef.current = actualRowIndex;
        }
      }, [selectedIndex, listRef, itemRowMapping]);
      const renderRow = (item) => {
        if (item.type === "sample") {
          return m$1`
        <${SampleRow}
          id=${item.number}
          index=${item.index}
          sample=${item.data}
          height=${kSampleHeight}
          sampleDescriptor=${sampleDescriptor}
          selected=${selectedIndex === item.index}
          setSelected=${setSelectedIndex}
          selectedScore=${selectedScore}
          showSample=${showSample}
        />
      `;
        } else if (item.type === "separator") {
          return m$1`
        <${SeparatorRow}
          id=${`sample-group${item.number}`}
          title=${item.data}
          height=${kSeparatorHeight}
        />
      `;
        } else {
          return "";
        }
      };
      const onkeydown = q$1(
        (e2) => {
          switch (e2.key) {
            case "ArrowUp":
              prevSample();
              e2.preventDefault();
              e2.stopPropagation();
              return false;
            case "ArrowDown":
              nextSample();
              e2.preventDefault();
              e2.stopPropagation();
              return false;
            case "Enter":
              showSample(selectedIndex);
              e2.preventDefault();
              e2.stopPropagation();
              return false;
          }
        },
        [selectedIndex]
      );
      const listStyle = { ...style2, flex: "1", overflowY: "auto", outline: "none" };
      const { input, limit, answer, target } = gridColumns(sampleDescriptor);
      const headerRow = m$1`<div
    style=${{
        display: "grid",
        ...gridColumnStyles(sampleDescriptor),
        fontSize: FontSize.smaller,
        ...TextStyle.label,
        ...TextStyle.secondary,
        paddingBottom: "0.3em",
        paddingTop: "0.3em",
        borderBottom: "solid var(--bs-light-border-subtle) 1px"
      }}
  >
    <div>Id</div>
    <div>${input !== "0" ? "Input" : ""}</div>
    <div>${target !== "0" ? "Target" : ""}</div>
    <div>${answer !== "0" ? "Answer" : ""}</div>
    <div>${limit !== "0" ? "Limit" : ""}</div>
    <div style=${{ justifySelf: "center" }}>Score</div>
  </div>`;
      const sampleCount = items == null ? void 0 : items.reduce((prev, current) => {
        if (current.type === "sample") {
          return prev + 1;
        } else {
          return prev;
        }
      }, 0);
      const footerRow = m$1` <div
    style=${{
        borderTop: "solid var(--bs-light-border-subtle) 1px",
        background: "var(--bs-light-bg-subtle)",
        fontSize: FontSize.smaller,
        display: "grid",
        gridTemplateColumns: "max-content",
        justifyContent: "end",
        alignContent: "end",
        padding: "0.2em 1em"
      }}
  >
    <div>${sampleCount} Samples</div>
  </div>`;
      const errorCount = items == null ? void 0 : items.reduce((previous, item) => {
        if (item.data.error) {
          return previous + 1;
        } else {
          return previous;
        }
      }, 0);
      const limitCount = items == null ? void 0 : items.reduce((previous, item) => {
        if (item.data.limit) {
          return previous + 1;
        } else {
          return previous;
        }
      }, 0);
      const percentError = errorCount / sampleCount * 100;
      const percentLimit = limitCount / sampleCount * 100;
      const warningMessage = errorCount > 0 ? `INFO: ${errorCount} of ${sampleCount} samples (${formatNoDecimal(percentError)}%) had errors and were not scored.` : limitCount ? `INFO: ${limitCount} of ${sampleCount} samples (${formatNoDecimal(percentLimit)}%) completed due to exceeding a limit.` : void 0;
      const warningRow = warningMessage ? m$1`<${MessageBand}
        message=${warningMessage}
        hidden=${hidden}
        setHidden=${setHidden}
        type="info"
      />` : "";
      return m$1` <div
    style=${{ display: "flex", flexDirection: "column", width: "100%" }}
  >
    ${warningRow} ${headerRow}
    <${VirtualList}
      ref=${listRef}
      data=${items}
      tabIndex="0"
      renderRow=${renderRow}
      onkeydown=${onkeydown}
      style=${listStyle}
    />
    ${footerRow}
  </div>`;
    };
    const SeparatorRow = ({ id, title, height }) => {
      return m$1`<div
    id=${id}
    style=${{
        padding: ".25em 1em .25em 1em",
        textTransform: "uppercase",
        ...TextStyle.secondary,
        fontSize: FontSize.smaller,
        fontWeight: 600,
        borderBottom: "solid 1px var(--bs-border-color)",
        height: `${height}px`
      }}
  >
    <div>${title}</div>
  </div>`;
    };
    const SampleRow = ({
      id,
      index,
      sample,
      sampleDescriptor,
      height,
      selected,
      showSample
    }) => {
      const selectedStyle = selected ? {
        boxShadow: "inset 0 0 0px 2px var(--bs-focus-ring-color)"
      } : {};
      const cellStyle = {
        paddingLeft: "0em",
        paddingRight: "0em"
      };
      return m$1`
    <div
      id=${`sample-${id}`}
      onclick=${() => {
        showSample(index);
      }}
      style=${{
        height: `${height}px`,
        display: "grid",
        ...gridColumnStyles(sampleDescriptor),
        paddingTop: "1em",
        paddingBottom: "1em",
        gridTemplateRows: `${height - 28}px`,
        fontSize: FontSize.base,
        borderBottom: "solid var(--bs-border-color) 1px",
        cursor: "pointer",
        ...selectedStyle,
        overflowY: "hidden"
      }}
    >
      <div
        class="sample-id"
        style=${{ ...cellStyle, ...ApplicationStyles.threeLineClamp }}
      >
        ${sample.id}
      </div>
      <div
        class="sample-input"
        style=${{
        ...ApplicationStyles.threeLineClamp,
        wordWrap: "anywhere",
        ...cellStyle
      }}
      >
        ${inputString(sample.input).join(" ")}
      </div>
      <div
        class="sample-target"
        style=${{
        ...ApplicationStyles.threeLineClamp,
        ...cellStyle
      }}
      >
        <${MarkdownDiv}
          markdown=${arrayToString(sample == null ? void 0 : sample.target)}
          style=${{ paddingLeft: "0" }}
          class="no-last-para-padding"
        />
      </div>
      <div
        class="sample-answer"
        style=${{
        ...ApplicationStyles.threeLineClamp,
        ...cellStyle
      }}
      >
        ${sample ? m$1`
              <${MarkdownDiv}
                markdown=${sampleDescriptor == null ? void 0 : sampleDescriptor.selectedScorerDescriptor(sample).answer()}
                style=${{ paddingLeft: "0" }}
                class="no-last-para-padding"
              />
            ` : ""}
      </div>
      <div
        class="sample-limit"
        style=${{
        fontSize: FontSize.small,
        ...ApplicationStyles.threeLineClamp,
        ...cellStyle
      }}
      >
        ${sample.limit}
      </div>

      <div
        style=${{
        fontSize: FontSize.small,
        ...cellStyle,
        display: "flex",
        justifySelf: "center"
      }}
      >
        ${sample.error ? m$1`<${SampleError} message=${sample.error} />` : sampleDescriptor == null ? void 0 : sampleDescriptor.selectedScore(sample).render()}
      </div>
    </div>
  `;
    };
    const gridColumnStyles = (sampleDescriptor) => {
      const { input, target, answer, limit, id, score: score2 } = gridColumns(sampleDescriptor);
      return {
        gridGap: "10px",
        gridTemplateColumns: `${id} ${input} ${target} ${answer} ${limit} ${score2}`,
        paddingLeft: "1rem",
        paddingRight: "1rem"
      };
    };
    const gridColumns = (sampleDescriptor) => {
      const input = (sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.normalized.input) > 0 ? Math.max(0.15, sampleDescriptor.messageShape.normalized.input) : 0;
      const target = (sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.normalized.target) > 0 ? Math.max(0.15, sampleDescriptor.messageShape.normalized.target) : 0;
      const answer = (sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.normalized.answer) > 0 ? Math.max(0.15, sampleDescriptor.messageShape.normalized.answer) : 0;
      const limit = (sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.normalized.limit) > 0 ? Math.max(0.15, sampleDescriptor.messageShape.normalized.limit) : 0;
      const id = Math.max(2, Math.min(10, sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.raw.id));
      const score2 = Math.max(
        3,
        Math.min(10, sampleDescriptor == null ? void 0 : sampleDescriptor.messageShape.raw.score)
      );
      const frSize = (val) => {
        if (val === 0) {
          return "0";
        } else {
          return `${val}fr`;
        }
      };
      return {
        input: frSize(input),
        target: frSize(target),
        answer: frSize(answer),
        limit: frSize(limit),
        id: `${id}rem`,
        score: `${score2}rem`
      };
    };
    const SamplesTab = ({
      task_id,
      sample,
      samples,
      sampleMode,
      groupBy,
      groupByOrder,
      sampleDescriptor,
      selectedScore,
      sampleStatus,
      sampleError,
      selectedSampleIndex,
      setSelectedSampleIndex,
      showingSampleDialog,
      setShowingSampleDialog,
      selectedSampleTab,
      setSelectedSampleTab,
      sampleScrollPositionRef,
      setSampleScrollPosition,
      sampleTabScrollRef
    }) => {
      const [items, setItems] = h([]);
      const [sampleItems, setSampleItems] = h([]);
      const sampleListRef = A$1(
        /** @type {HTMLElement|null} */
        null
      );
      const sampleDialogRef = A$1(
        /** @type {HTMLElement|null} */
        null
      );
      const showSample = q$1(
        (index2) => {
          setSelectedSampleIndex(index2);
          setShowingSampleDialog(true);
        },
        [sampleDialogRef]
      );
      y(() => {
        if (showingSampleDialog) {
          setTimeout(() => {
            sampleDialogRef.current.base.focus();
          }, 0);
        } else {
          setTimeout(() => {
            if (sampleListRef.current) {
              sampleListRef.current.focus();
            }
          }, 0);
        }
      }, [showingSampleDialog]);
      y(() => {
        const sampleProcessor = getSampleProcessor(
          samples,
          groupBy,
          groupByOrder,
          sampleDescriptor
        );
        const items2 = samples.flatMap((sample2, index2) => {
          const results = [];
          const previousSample2 = index2 !== 0 ? samples[index2 - 1] : void 0;
          const items3 = sampleProcessor(sample2, index2, previousSample2);
          results.push(...items3);
          return results;
        });
        setItems(items2);
        setSampleItems(
          items2.filter((item) => {
            return item.type === "sample";
          })
        );
      }, [samples, groupBy, groupByOrder, sampleDescriptor]);
      const nextSampleIndex = q$1(() => {
        if (selectedSampleIndex < sampleItems.length - 1) {
          return selectedSampleIndex + 1;
        } else {
          return -1;
        }
      }, [selectedSampleIndex, items]);
      const previousSampleIndex = q$1(() => {
        return selectedSampleIndex > 0 ? selectedSampleIndex - 1 : -1;
      }, [selectedSampleIndex, items]);
      const nextSample = q$1(() => {
        const next = nextSampleIndex();
        if (sampleStatus !== "loading" && next > -1) {
          setSelectedSampleIndex(next);
        }
      }, [selectedSampleIndex, samples, sampleStatus, nextSampleIndex]);
      const previousSample = q$1(() => {
        const prev = previousSampleIndex();
        if (sampleStatus !== "loading" && prev > -1) {
          setSelectedSampleIndex(prev);
        }
      }, [selectedSampleIndex, samples, sampleStatus, previousSampleIndex]);
      const elements = [];
      if (sampleMode === "single") {
        elements.push(
          m$1` <${InlineSampleDisplay}
        key=${`${task_id}-single-sample`}
        id="sample-display"
        sample=${sample}
        sampleStatus=${sampleStatus}
        sampleError=${sampleError}
        sampleDescriptor=${sampleDescriptor}
        selectedTab=${selectedSampleTab}
        setSelectedTab=${setSelectedSampleTab}
        scrollRef=${sampleTabScrollRef}
      />`
        );
      } else if (sampleMode === "many") {
        elements.push(
          m$1`<${SampleList}
        listRef=${sampleListRef}
        items=${items}
        sampleDescriptor=${sampleDescriptor}
        selectedIndex=${selectedSampleIndex}
        setSelectedIndex=${setSelectedSampleIndex}
        selectedScore=${selectedScore}
        nextSample=${nextSample}
        prevSample=${previousSample}
        showSample=${showSample}
      />`
        );
      } else {
        elements.push(m$1`<${EmptyPanel} />`);
      }
      const title = selectedSampleIndex > -1 && sampleItems.length > selectedSampleIndex ? sampleItems[selectedSampleIndex].label : "";
      const index = selectedSampleIndex > -1 && sampleItems.length > selectedSampleIndex ? sampleItems[selectedSampleIndex].index : -1;
      elements.push(m$1`
    <${SampleDialog}
      id=${(sample == null ? void 0 : sample.id) || ""}
      ref=${sampleDialogRef}
      task=${task_id}
      title=${title}
      index=${index}
      sample=${sample}
      sampleStatus=${sampleStatus}
      sampleError=${sampleError}
      sampleDescriptor=${sampleDescriptor}
      showingSampleDialog=${showingSampleDialog}
      setShowingSampleDialog=${setShowingSampleDialog}
      selectedTab=${selectedSampleTab}
      setSelectedTab=${setSelectedSampleTab}
      nextSample=${nextSample}
      prevSample=${previousSample}
      sampleScrollPositionRef=${sampleScrollPositionRef}
      setSampleScrollPosition=${setSampleScrollPosition}
    />
  `);
      return elements;
    };
    const getSampleProcessor = (samples, groupBy, groupByOrder, sampleDescriptor) => {
      if (groupBy == "epoch") {
        return groupByEpoch(samples, sampleDescriptor, groupByOrder);
      } else if (groupBy === "sample") {
        return groupBySample(samples, sampleDescriptor, groupByOrder);
      } else {
        return noGrouping(samples, groupByOrder);
      }
    };
    const noGrouping = (samples, order2) => {
      const counter = getCounter(samples.length, 1, order2);
      return (sample, index) => {
        counter.incrementItem();
        const itemCount = counter.item();
        return [
          {
            label: `Sample ${itemCount}`,
            number: itemCount,
            index,
            data: sample,
            type: "sample"
          }
        ];
      };
    };
    const groupBySample = (samples, sampleDescriptor, order2) => {
      samples = samples.sort((a2, b) => {
        if (typeof a2.id === "string") {
          if (order2 === "asc") {
            return String(a2.id).localeCompare(String(b.id));
          } else {
            return String(b.id).localeCompare(String(a2.id));
          }
        } else {
          if (order2 === "asc") {
            return Number(a2.id) - Number(b.id);
          } else {
            return Number(b.id) - Number(b.id);
          }
        }
      });
      const groupCount = samples.length / sampleDescriptor.evalDescriptor.epochs;
      const itemCount = samples.length / groupCount;
      const counter = getCounter(itemCount, groupCount, order2);
      return (sample, index, previousSample) => {
        const results = [];
        const lastId = previousSample ? previousSample.id : void 0;
        if (sample.id !== lastId) {
          counter.incrementGroup();
          results.push({
            label: `Sample ${itemCount}`,
            number: counter.group(),
            index,
            data: `Sample ${counter.group()}`,
            type: "separator"
          });
          counter.resetItem();
        }
        counter.incrementItem();
        results.push({
          label: `Sample ${counter.group()} (Epoch ${counter.item()})`,
          number: counter.item(),
          index,
          data: sample,
          type: "sample"
        });
        return results;
      };
    };
    const groupByEpoch = (samples, sampleDescriptor, order2) => {
      const groupCount = sampleDescriptor.evalDescriptor.epochs;
      const itemCount = samples.length / groupCount;
      const counter = getCounter(itemCount, groupCount, order2);
      return (sample, index, previousSample) => {
        const results = [];
        const lastEpoch = previousSample ? previousSample.epoch : -1;
        if (lastEpoch !== sample.epoch) {
          counter.incrementGroup();
          results.push({
            label: `Epoch ${counter.group()}`,
            number: counter.group(),
            index,
            data: `Epoch ${counter.group()}`,
            type: "separator"
          });
          counter.resetItem();
        }
        counter.incrementItem();
        results.push({
          label: `Sample ${counter.item()} (Epoch ${counter.group()})`,
          number: counter.item(),
          index,
          data: sample,
          type: "sample"
        });
        return results;
      };
    };
    const getCounter = (itemCount, groupCount, order2) => {
      let itemIndex = order2 !== "desc" ? 0 : itemCount + 1;
      let groupIndex = order2 !== "desc" ? 0 : groupCount + 1;
      return {
        resetItem: () => {
          itemIndex = order2 !== "desc" ? 0 : itemCount + 1;
        },
        incrementItem: () => {
          if (order2 !== "desc") {
            itemIndex++;
          } else {
            itemIndex--;
          }
        },
        incrementGroup: () => {
          if (order2 !== "desc") {
            groupIndex++;
          } else {
            groupIndex--;
          }
        },
        item: () => {
          return itemIndex;
        },
        group: () => {
          return groupIndex;
        }
      };
    };
    const asyncJsonParse = async (text2) => {
      const encoder = new TextEncoder();
      const encodedText = encoder.encode(text2);
      const blob = new Blob([kWorkerCode], {
        type: "application/javascript"
      });
      const blobURL = URL.createObjectURL(blob);
      const worker = new Worker(blobURL);
      try {
        const result = new Promise((resolve, reject) => {
          worker.onmessage = function(e2) {
            if (e2.data.success) {
              resolve(e2.data.result);
            } else {
              reject(new Error(e2.data.error));
            }
          };
          worker.onerror = function(error2) {
            reject(new Error(error2.message));
          };
        });
        worker.postMessage({
          scriptContent: kJson5ScriptBase64,
          encodedText
        }, [encodedText.buffer]);
        return await result;
      } finally {
        worker.terminate();
        URL.revokeObjectURL(blobURL);
      }
    };
    const kWorkerCode = `
self.onmessage = function (e) {
  eval(atob(e.data.scriptContent));
  const { encodedText } = e.data;
  const decoder = new TextDecoder();
  const text = decoder.decode(encodedText);
  try {
    const result = JSON.parse(text);
    postMessage({ success: true, result });
  } catch (err) {
    postMessage({ success: false, error: err.message });
  }
};`;
    const kJson5ScriptBase64 = ``;
    async function download_file$1(filename2, filecontents) {
      const blob = new Blob([filecontents], {
        type: "text/plain"
      });
      const link2 = document.createElement("a");
      link2.href = URL.createObjectURL(blob);
      link2.download = filename2;
      document.body.appendChild(link2);
      link2.click();
      document.body.removeChild(link2);
    }
    function encodePathParts(url) {
      if (!url) return url;
      try {
        const fullUrl = new URL(url);
        fullUrl.pathname = fullUrl.pathname.split("/").map((segment) => segment ? encodeURIComponent(decodeURIComponent(segment)) : "").join("/");
        return fullUrl.toString();
      } catch {
        return url.split("/").map((segment) => segment ? encodeURIComponent(decodeURIComponent(segment)) : "").join("/");
      }
    }
    const loaded_time = Date.now();
    let last_eval_time = 0;
    async function client_events$1() {
      const params = new URLSearchParams();
      params.append("loaded_time", String(loaded_time.valueOf()));
      params.append("last_eval_time", String(last_eval_time.valueOf()));
      return (await api$2("GET", `/api/events?${params.toString()}`)).parsed;
    }
    async function eval_logs$1() {
      const logs = await api$2("GET", `/api/logs`);
      last_eval_time = Date.now();
      return logs.parsed;
    }
    async function eval_log$1(file, headerOnly, _capabilities) {
      return await api$2("GET", `/api/logs/${encodeURIComponent(file)}?header-only=${headerOnly}`);
    }
    async function eval_log_size$1(file) {
      return (await api$2("GET", `/api/log-size/${encodeURIComponent(file)}`)).parsed;
    }
    async function eval_log_bytes$1(file, start2, end2) {
      return await api_bytes("GET", `/api/log-bytes/${encodeURIComponent(file)}?start=${start2}&end=${end2}`);
    }
    async function eval_log_headers$1(files) {
      const params = new URLSearchParams();
      for (const file of files) {
        params.append("file", file);
      }
      return (await api$2("GET", `/api/log-headers?${params.toString()}`)).parsed;
    }
    async function api$2(method, path, body) {
      const headers = {
        Accept: "application/json",
        Pragma: "no-cache",
        Expires: "0",
        ["Cache-Control"]: "no-cache"
      };
      const response = await fetch(`${path}`, {
        method,
        headers,
        body
      });
      if (response.ok) {
        const text2 = await response.text();
        return {
          parsed: await asyncJsonParse(text2),
          raw: text2
        };
      } else if (response.status !== 200) {
        const message = await response.text() || response.statusText;
        const error2 = new Error(`Error: ${response.status}: ${message})`);
        throw error2;
      } else {
        throw new Error(`${response.status} - ${response.statusText} `);
      }
    }
    async function api_bytes(method, path) {
      const headers = {
        Accept: "application/octet-stream",
        Pragma: "no-cache",
        Expires: "0",
        ["Cache-Control"]: "no-cache"
      };
      const response = await fetch(`${path}`, {
        method,
        headers
      });
      if (response.ok) {
        const buffer2 = await response.arrayBuffer();
        return new Uint8Array(buffer2);
      } else if (response.status !== 200) {
        const message = await response.text() || response.statusText;
        const error2 = new Error(`Error: ${response.status}: ${message})`);
        throw error2;
      } else {
        throw new Error(`${response.status} - ${response.statusText} `);
      }
    }
    async function open_log_file$1() {
    }
    const browserApi = {
      client_events: client_events$1,
      eval_logs: eval_logs$1,
      eval_log: eval_log$1,
      eval_log_size: eval_log_size$1,
      eval_log_bytes: eval_log_bytes$1,
      eval_log_headers: eval_log_headers$1,
      download_file: download_file$1,
      open_log_file: open_log_file$1
    };
    var Space_Separator = /[\u1680\u2000-\u200A\u202F\u205F\u3000]/;
    var ID_Start = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/;
    var ID_Continue = /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/;
    var unicode = {
      Space_Separator,
      ID_Start,
      ID_Continue
    };
    var util = {
      isSpaceSeparator(c2) {
        return typeof c2 === "string" && unicode.Space_Separator.test(c2);
      },
      isIdStartChar(c2) {
        return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 === "$" || c2 === "_" || unicode.ID_Start.test(c2));
      },
      isIdContinueChar(c2) {
        return typeof c2 === "string" && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || c2 === "$" || c2 === "_" || c2 === "‌" || c2 === "‍" || unicode.ID_Continue.test(c2));
      },
      isDigit(c2) {
        return typeof c2 === "string" && /[0-9]/.test(c2);
      },
      isHexDigit(c2) {
        return typeof c2 === "string" && /[0-9A-Fa-f]/.test(c2);
      }
    };
    let source;
    let parseState;
    let stack;
    let pos;
    let line;
    let column;
    let token;
    let key;
    let root;
    var parse = function parse2(text2, reviver) {
      source = String(text2);
      parseState = "start";
      stack = [];
      pos = 0;
      line = 1;
      column = 0;
      token = void 0;
      key = void 0;
      root = void 0;
      do {
        token = lex();
        parseStates[parseState]();
      } while (token.type !== "eof");
      if (typeof reviver === "function") {
        return internalize({ "": root }, "", reviver);
      }
      return root;
    };
    function internalize(holder, name2, reviver) {
      const value = holder[name2];
      if (value != null && typeof value === "object") {
        if (Array.isArray(value)) {
          for (let i2 = 0; i2 < value.length; i2++) {
            const key2 = String(i2);
            const replacement = internalize(value, key2, reviver);
            if (replacement === void 0) {
              delete value[key2];
            } else {
              Object.defineProperty(value, key2, {
                value: replacement,
                writable: true,
                enumerable: true,
                configurable: true
              });
            }
          }
        } else {
          for (const key2 in value) {
            const replacement = internalize(value, key2, reviver);
            if (replacement === void 0) {
              delete value[key2];
            } else {
              Object.defineProperty(value, key2, {
                value: replacement,
                writable: true,
                enumerable: true,
                configurable: true
              });
            }
          }
        }
      }
      return reviver.call(holder, name2, value);
    }
    let lexState;
    let buffer;
    let doubleQuote;
    let sign;
    let c;
    function lex() {
      lexState = "default";
      buffer = "";
      doubleQuote = false;
      sign = 1;
      for (; ; ) {
        c = peek();
        const token2 = lexStates[lexState]();
        if (token2) {
          return token2;
        }
      }
    }
    function peek() {
      if (source[pos]) {
        return String.fromCodePoint(source.codePointAt(pos));
      }
    }
    function read() {
      const c2 = peek();
      if (c2 === "\n") {
        line++;
        column = 0;
      } else if (c2) {
        column += c2.length;
      } else {
        column++;
      }
      if (c2) {
        pos += c2.length;
      }
      return c2;
    }
    const lexStates = {
      default() {
        switch (c) {
          case "	":
          case "\v":
          case "\f":
          case " ":
          case " ":
          case "\uFEFF":
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            read();
            return;
          case "/":
            read();
            lexState = "comment";
            return;
          case void 0:
            read();
            return newToken("eof");
        }
        if (util.isSpaceSeparator(c)) {
          read();
          return;
        }
        return lexStates[parseState]();
      },
      comment() {
        switch (c) {
          case "*":
            read();
            lexState = "multiLineComment";
            return;
          case "/":
            read();
            lexState = "singleLineComment";
            return;
        }
        throw invalidChar(read());
      },
      multiLineComment() {
        switch (c) {
          case "*":
            read();
            lexState = "multiLineCommentAsterisk";
            return;
          case void 0:
            throw invalidChar(read());
        }
        read();
      },
      multiLineCommentAsterisk() {
        switch (c) {
          case "*":
            read();
            return;
          case "/":
            read();
            lexState = "default";
            return;
          case void 0:
            throw invalidChar(read());
        }
        read();
        lexState = "multiLineComment";
      },
      singleLineComment() {
        switch (c) {
          case "\n":
          case "\r":
          case "\u2028":
          case "\u2029":
            read();
            lexState = "default";
            return;
          case void 0:
            read();
            return newToken("eof");
        }
        read();
      },
      value() {
        switch (c) {
          case "{":
          case "[":
            return newToken("punctuator", read());
          case "n":
            read();
            literal$1("ull");
            return newToken("null", null);
          case "t":
            read();
            literal$1("rue");
            return newToken("boolean", true);
          case "f":
            read();
            literal$1("alse");
            return newToken("boolean", false);
          case "-":
          case "+":
            if (read() === "-") {
              sign = -1;
            }
            lexState = "sign";
            return;
          case ".":
            buffer = read();
            lexState = "decimalPointLeading";
            return;
          case "0":
            buffer = read();
            lexState = "zero";
            return;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            buffer = read();
            lexState = "decimalInteger";
            return;
          case "I":
            read();
            literal$1("nfinity");
            return newToken("numeric", Infinity);
          case "N":
            read();
            literal$1("aN");
            return newToken("numeric", NaN);
          case '"':
          case "'":
            doubleQuote = read() === '"';
            buffer = "";
            lexState = "string";
            return;
        }
        throw invalidChar(read());
      },
      identifierNameStartEscape() {
        if (c !== "u") {
          throw invalidChar(read());
        }
        read();
        const u2 = unicodeEscape();
        switch (u2) {
          case "$":
          case "_":
            break;
          default:
            if (!util.isIdStartChar(u2)) {
              throw invalidIdentifier();
            }
            break;
        }
        buffer += u2;
        lexState = "identifierName";
      },
      identifierName() {
        switch (c) {
          case "$":
          case "_":
          case "‌":
          case "‍":
            buffer += read();
            return;
          case "\\":
            read();
            lexState = "identifierNameEscape";
            return;
        }
        if (util.isIdContinueChar(c)) {
          buffer += read();
          return;
        }
        return newToken("identifier", buffer);
      },
      identifierNameEscape() {
        if (c !== "u") {
          throw invalidChar(read());
        }
        read();
        const u2 = unicodeEscape();
        switch (u2) {
          case "$":
          case "_":
          case "‌":
          case "‍":
            break;
          default:
            if (!util.isIdContinueChar(u2)) {
              throw invalidIdentifier();
            }
            break;
        }
        buffer += u2;
        lexState = "identifierName";
      },
      sign() {
        switch (c) {
          case ".":
            buffer = read();
            lexState = "decimalPointLeading";
            return;
          case "0":
            buffer = read();
            lexState = "zero";
            return;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
            buffer = read();
            lexState = "decimalInteger";
            return;
          case "I":
            read();
            literal$1("nfinity");
            return newToken("numeric", sign * Infinity);
          case "N":
            read();
            literal$1("aN");
            return newToken("numeric", NaN);
        }
        throw invalidChar(read());
      },
      zero() {
        switch (c) {
          case ".":
            buffer += read();
            lexState = "decimalPoint";
            return;
          case "e":
          case "E":
            buffer += read();
            lexState = "decimalExponent";
            return;
          case "x":
          case "X":
            buffer += read();
            lexState = "hexadecimal";
            return;
        }
        return newToken("numeric", sign * 0);
      },
      decimalInteger() {
        switch (c) {
          case ".":
            buffer += read();
            lexState = "decimalPoint";
            return;
          case "e":
          case "E":
            buffer += read();
            lexState = "decimalExponent";
            return;
        }
        if (util.isDigit(c)) {
          buffer += read();
          return;
        }
        return newToken("numeric", sign * Number(buffer));
      },
      decimalPointLeading() {
        if (util.isDigit(c)) {
          buffer += read();
          lexState = "decimalFraction";
          return;
        }
        throw invalidChar(read());
      },
      decimalPoint() {
        switch (c) {
          case "e":
          case "E":
            buffer += read();
            lexState = "decimalExponent";
            return;
        }
        if (util.isDigit(c)) {
          buffer += read();
          lexState = "decimalFraction";
          return;
        }
        return newToken("numeric", sign * Number(buffer));
      },
      decimalFraction() {
        switch (c) {
          case "e":
          case "E":
            buffer += read();
            lexState = "decimalExponent";
            return;
        }
        if (util.isDigit(c)) {
          buffer += read();
          return;
        }
        return newToken("numeric", sign * Number(buffer));
      },
      decimalExponent() {
        switch (c) {
          case "+":
          case "-":
            buffer += read();
            lexState = "decimalExponentSign";
            return;
        }
        if (util.isDigit(c)) {
          buffer += read();
          lexState = "decimalExponentInteger";
          return;
        }
        throw invalidChar(read());
      },
      decimalExponentSign() {
        if (util.isDigit(c)) {
          buffer += read();
          lexState = "decimalExponentInteger";
          return;
        }
        throw invalidChar(read());
      },
      decimalExponentInteger() {
        if (util.isDigit(c)) {
          buffer += read();
          return;
        }
        return newToken("numeric", sign * Number(buffer));
      },
      hexadecimal() {
        if (util.isHexDigit(c)) {
          buffer += read();
          lexState = "hexadecimalInteger";
          return;
        }
        throw invalidChar(read());
      },
      hexadecimalInteger() {
        if (util.isHexDigit(c)) {
          buffer += read();
          return;
        }
        return newToken("numeric", sign * Number(buffer));
      },
      string() {
        switch (c) {
          case "\\":
            read();
            buffer += escape();
            return;
          case '"':
            if (doubleQuote) {
              read();
              return newToken("string", buffer);
            }
            buffer += read();
            return;
          case "'":
            if (!doubleQuote) {
              read();
              return newToken("string", buffer);
            }
            buffer += read();
            return;
          case "\n":
          case "\r":
            throw invalidChar(read());
          case "\u2028":
          case "\u2029":
            separatorChar(c);
            break;
          case void 0:
            throw invalidChar(read());
        }
        buffer += read();
      },
      start() {
        switch (c) {
          case "{":
          case "[":
            return newToken("punctuator", read());
        }
        lexState = "value";
      },
      beforePropertyName() {
        switch (c) {
          case "$":
          case "_":
            buffer = read();
            lexState = "identifierName";
            return;
          case "\\":
            read();
            lexState = "identifierNameStartEscape";
            return;
          case "}":
            return newToken("punctuator", read());
          case '"':
          case "'":
            doubleQuote = read() === '"';
            lexState = "string";
            return;
        }
        if (util.isIdStartChar(c)) {
          buffer += read();
          lexState = "identifierName";
          return;
        }
        throw invalidChar(read());
      },
      afterPropertyName() {
        if (c === ":") {
          return newToken("punctuator", read());
        }
        throw invalidChar(read());
      },
      beforePropertyValue() {
        lexState = "value";
      },
      afterPropertyValue() {
        switch (c) {
          case ",":
          case "}":
            return newToken("punctuator", read());
        }
        throw invalidChar(read());
      },
      beforeArrayValue() {
        if (c === "]") {
          return newToken("punctuator", read());
        }
        lexState = "value";
      },
      afterArrayValue() {
        switch (c) {
          case ",":
          case "]":
            return newToken("punctuator", read());
        }
        throw invalidChar(read());
      },
      end() {
        throw invalidChar(read());
      }
    };
    function newToken(type, value) {
      return {
        type,
        value,
        line,
        column
      };
    }
    function literal$1(s2) {
      for (const c2 of s2) {
        const p2 = peek();
        if (p2 !== c2) {
          throw invalidChar(read());
        }
        read();
      }
    }
    function escape() {
      const c2 = peek();
      switch (c2) {
        case "b":
          read();
          return "\b";
        case "f":
          read();
          return "\f";
        case "n":
          read();
          return "\n";
        case "r":
          read();
          return "\r";
        case "t":
          read();
          return "	";
        case "v":
          read();
          return "\v";
        case "0":
          read();
          if (util.isDigit(peek())) {
            throw invalidChar(read());
          }
          return "\0";
        case "x":
          read();
          return hexEscape();
        case "u":
          read();
          return unicodeEscape();
        case "\n":
        case "\u2028":
        case "\u2029":
          read();
          return "";
        case "\r":
          read();
          if (peek() === "\n") {
            read();
          }
          return "";
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
          throw invalidChar(read());
        case void 0:
          throw invalidChar(read());
      }
      return read();
    }
    function hexEscape() {
      let buffer2 = "";
      let c2 = peek();
      if (!util.isHexDigit(c2)) {
        throw invalidChar(read());
      }
      buffer2 += read();
      c2 = peek();
      if (!util.isHexDigit(c2)) {
        throw invalidChar(read());
      }
      buffer2 += read();
      return String.fromCodePoint(parseInt(buffer2, 16));
    }
    function unicodeEscape() {
      let buffer2 = "";
      let count = 4;
      while (count-- > 0) {
        const c2 = peek();
        if (!util.isHexDigit(c2)) {
          throw invalidChar(read());
        }
        buffer2 += read();
      }
      return String.fromCodePoint(parseInt(buffer2, 16));
    }
    const parseStates = {
      start() {
        if (token.type === "eof") {
          throw invalidEOF();
        }
        push();
      },
      beforePropertyName() {
        switch (token.type) {
          case "identifier":
          case "string":
            key = token.value;
            parseState = "afterPropertyName";
            return;
          case "punctuator":
            pop();
            return;
          case "eof":
            throw invalidEOF();
        }
      },
      afterPropertyName() {
        if (token.type === "eof") {
          throw invalidEOF();
        }
        parseState = "beforePropertyValue";
      },
      beforePropertyValue() {
        if (token.type === "eof") {
          throw invalidEOF();
        }
        push();
      },
      beforeArrayValue() {
        if (token.type === "eof") {
          throw invalidEOF();
        }
        if (token.type === "punctuator" && token.value === "]") {
          pop();
          return;
        }
        push();
      },
      afterPropertyValue() {
        if (token.type === "eof") {
          throw invalidEOF();
        }
        switch (token.value) {
          case ",":
            parseState = "beforePropertyName";
            return;
          case "}":
            pop();
        }
      },
      afterArrayValue() {
        if (token.type === "eof") {
          throw invalidEOF();
        }
        switch (token.value) {
          case ",":
            parseState = "beforeArrayValue";
            return;
          case "]":
            pop();
        }
      },
      end() {
      }
    };
    function push() {
      let value;
      switch (token.type) {
        case "punctuator":
          switch (token.value) {
            case "{":
              value = {};
              break;
            case "[":
              value = [];
              break;
          }
          break;
        case "null":
        case "boolean":
        case "numeric":
        case "string":
          value = token.value;
          break;
      }
      if (root === void 0) {
        root = value;
      } else {
        const parent = stack[stack.length - 1];
        if (Array.isArray(parent)) {
          parent.push(value);
        } else {
          Object.defineProperty(parent, key, {
            value,
            writable: true,
            enumerable: true,
            configurable: true
          });
        }
      }
      if (value !== null && typeof value === "object") {
        stack.push(value);
        if (Array.isArray(value)) {
          parseState = "beforeArrayValue";
        } else {
          parseState = "beforePropertyName";
        }
      } else {
        const current = stack[stack.length - 1];
        if (current == null) {
          parseState = "end";
        } else if (Array.isArray(current)) {
          parseState = "afterArrayValue";
        } else {
          parseState = "afterPropertyValue";
        }
      }
    }
    function pop() {
      stack.pop();
      const current = stack[stack.length - 1];
      if (current == null) {
        parseState = "end";
      } else if (Array.isArray(current)) {
        parseState = "afterArrayValue";
      } else {
        parseState = "afterPropertyValue";
      }
    }
    function invalidChar(c2) {
      if (c2 === void 0) {
        return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
      }
      return syntaxError(`JSON5: invalid character '${formatChar(c2)}' at ${line}:${column}`);
    }
    function invalidEOF() {
      return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
    }
    function invalidIdentifier() {
      column -= 5;
      return syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
    }
    function separatorChar(c2) {
      console.warn(`JSON5: '${formatChar(c2)}' in strings is not valid ECMAScript; consider escaping`);
    }
    function formatChar(c2) {
      const replacements = {
        "'": "\\'",
        '"': '\\"',
        "\\": "\\\\",
        "\b": "\\b",
        "\f": "\\f",
        "\n": "\\n",
        "\r": "\\r",
        "	": "\\t",
        "\v": "\\v",
        "\0": "\\0",
        "\u2028": "\\u2028",
        "\u2029": "\\u2029"
      };
      if (replacements[c2]) {
        return replacements[c2];
      }
      if (c2 < " ") {
        const hexString = c2.charCodeAt(0).toString(16);
        return "\\x" + ("00" + hexString).substring(hexString.length);
      }
      return c2;
    }
    function syntaxError(message) {
      const err2 = new SyntaxError(message);
      err2.lineNumber = line;
      err2.columnNumber = column;
      return err2;
    }
    var stringify = function stringify2(value, replacer, space) {
      const stack2 = [];
      let indent = "";
      let propertyList;
      let replacerFunc;
      let gap = "";
      let quote;
      if (replacer != null && typeof replacer === "object" && !Array.isArray(replacer)) {
        space = replacer.space;
        quote = replacer.quote;
        replacer = replacer.replacer;
      }
      if (typeof replacer === "function") {
        replacerFunc = replacer;
      } else if (Array.isArray(replacer)) {
        propertyList = [];
        for (const v2 of replacer) {
          let item;
          if (typeof v2 === "string") {
            item = v2;
          } else if (typeof v2 === "number" || v2 instanceof String || v2 instanceof Number) {
            item = String(v2);
          }
          if (item !== void 0 && propertyList.indexOf(item) < 0) {
            propertyList.push(item);
          }
        }
      }
      if (space instanceof Number) {
        space = Number(space);
      } else if (space instanceof String) {
        space = String(space);
      }
      if (typeof space === "number") {
        if (space > 0) {
          space = Math.min(10, Math.floor(space));
          gap = "          ".substr(0, space);
        }
      } else if (typeof space === "string") {
        gap = space.substr(0, 10);
      }
      return serializeProperty("", { "": value });
      function serializeProperty(key2, holder) {
        let value2 = holder[key2];
        if (value2 != null) {
          if (typeof value2.toJSON5 === "function") {
            value2 = value2.toJSON5(key2);
          } else if (typeof value2.toJSON === "function") {
            value2 = value2.toJSON(key2);
          }
        }
        if (replacerFunc) {
          value2 = replacerFunc.call(holder, key2, value2);
        }
        if (value2 instanceof Number) {
          value2 = Number(value2);
        } else if (value2 instanceof String) {
          value2 = String(value2);
        } else if (value2 instanceof Boolean) {
          value2 = value2.valueOf();
        }
        switch (value2) {
          case null:
            return "null";
          case true:
            return "true";
          case false:
            return "false";
        }
        if (typeof value2 === "string") {
          return quoteString(value2);
        }
        if (typeof value2 === "number") {
          return String(value2);
        }
        if (typeof value2 === "object") {
          return Array.isArray(value2) ? serializeArray(value2) : serializeObject(value2);
        }
        return void 0;
      }
      function quoteString(value2) {
        const quotes = {
          "'": 0.1,
          '"': 0.2
        };
        const replacements = {
          "'": "\\'",
          '"': '\\"',
          "\\": "\\\\",
          "\b": "\\b",
          "\f": "\\f",
          "\n": "\\n",
          "\r": "\\r",
          "	": "\\t",
          "\v": "\\v",
          "\0": "\\0",
          "\u2028": "\\u2028",
          "\u2029": "\\u2029"
        };
        let product = "";
        for (let i2 = 0; i2 < value2.length; i2++) {
          const c2 = value2[i2];
          switch (c2) {
            case "'":
            case '"':
              quotes[c2]++;
              product += c2;
              continue;
            case "\0":
              if (util.isDigit(value2[i2 + 1])) {
                product += "\\x00";
                continue;
              }
          }
          if (replacements[c2]) {
            product += replacements[c2];
            continue;
          }
          if (c2 < " ") {
            let hexString = c2.charCodeAt(0).toString(16);
            product += "\\x" + ("00" + hexString).substring(hexString.length);
            continue;
          }
          product += c2;
        }
        const quoteChar = quote || Object.keys(quotes).reduce((a2, b) => quotes[a2] < quotes[b] ? a2 : b);
        product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]);
        return quoteChar + product + quoteChar;
      }
      function serializeObject(value2) {
        if (stack2.indexOf(value2) >= 0) {
          throw TypeError("Converting circular structure to JSON5");
        }
        stack2.push(value2);
        let stepback = indent;
        indent = indent + gap;
        let keys = propertyList || Object.keys(value2);
        let partial = [];
        for (const key2 of keys) {
          const propertyString = serializeProperty(key2, value2);
          if (propertyString !== void 0) {
            let member = serializeKey(key2) + ":";
            if (gap !== "") {
              member += " ";
            }
            member += propertyString;
            partial.push(member);
          }
        }
        let final;
        if (partial.length === 0) {
          final = "{}";
        } else {
          let properties;
          if (gap === "") {
            properties = partial.join(",");
            final = "{" + properties + "}";
          } else {
            let separator = ",\n" + indent;
            properties = partial.join(separator);
            final = "{\n" + indent + properties + ",\n" + stepback + "}";
          }
        }
        stack2.pop();
        indent = stepback;
        return final;
      }
      function serializeKey(key2) {
        if (key2.length === 0) {
          return quoteString(key2);
        }
        const firstChar = String.fromCodePoint(key2.codePointAt(0));
        if (!util.isIdStartChar(firstChar)) {
          return quoteString(key2);
        }
        for (let i2 = firstChar.length; i2 < key2.length; i2++) {
          if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i2)))) {
            return quoteString(key2);
          }
        }
        return key2;
      }
      function serializeArray(value2) {
        if (stack2.indexOf(value2) >= 0) {
          throw TypeError("Converting circular structure to JSON5");
        }
        stack2.push(value2);
        let stepback = indent;
        indent = indent + gap;
        let partial = [];
        for (let i2 = 0; i2 < value2.length; i2++) {
          const propertyString = serializeProperty(String(i2), value2);
          partial.push(propertyString !== void 0 ? propertyString : "null");
        }
        let final;
        if (partial.length === 0) {
          final = "[]";
        } else {
          if (gap === "") {
            let properties = partial.join(",");
            final = "[" + properties + "]";
          } else {
            let separator = ",\n" + indent;
            let properties = partial.join(separator);
            final = "[\n" + indent + properties + ",\n" + stepback + "]";
          }
        }
        stack2.pop();
        indent = stepback;
        return final;
      }
    };
    const JSON5 = {
      parse,
      stringify
    };
    var lib = JSON5;
    const kMethodEvalLogs = "eval_logs";
    const kMethodEvalLog = "eval_log";
    const kMethodEvalLogSize = "eval_log_size";
    const kMethodEvalLogBytes = "eval_log_bytes";
    const kMethodEvalLogHeaders = "eval_log_headers";
    const kJsonRpcVersion = "2.0";
    function webViewJsonRpcClient(vscode2) {
      const target = {
        postMessage: (data) => {
          vscode2.postMessage(data);
        },
        onMessage: (handler) => {
          const onMessage = (ev) => {
            handler(ev.data);
          };
          window.addEventListener("message", onMessage);
          return () => {
            window.removeEventListener("message", onMessage);
          };
        }
      };
      return jsonRpcPostMessageRequestTransport(target).request;
    }
    function jsonRpcPostMessageRequestTransport(target) {
      const requests = /* @__PURE__ */ new Map();
      const disconnect = target.onMessage((ev) => {
        const response = asJsonRpcResponse(ev);
        if (response) {
          const request = requests.get(response.id);
          if (request) {
            requests.delete(response.id);
            if (response.error) {
              request.reject(response.error);
            } else {
              request.resolve(response.result);
            }
          }
        }
      });
      return {
        request: (method, params) => {
          return new Promise((resolve, reject) => {
            const requestId = Math.floor(Math.random() * 1e6);
            requests.set(requestId, {
              resolve,
              reject
            });
            const request = {
              jsonrpc: kJsonRpcVersion,
              id: requestId,
              method,
              params
            };
            target.postMessage(request);
          });
        },
        disconnect
      };
    }
    function isJsonRpcMessage(message) {
      return message.jsonrpc !== void 0 && message.id !== void 0;
    }
    function asJsonRpcMessage(data) {
      if (isJsonRpcMessage(data) && data.jsonrpc === kJsonRpcVersion) {
        return data;
      }
      return null;
    }
    function asJsonRpcResponse(data) {
      const message = asJsonRpcMessage(data);
      if (message) {
        return message;
      }
      return null;
    }
    let vscodeApi;
    const getVscodeApi = () => {
      if (window.acquireVsCodeApi) {
        if (vscodeApi === void 0) {
          vscodeApi = window.acquireVsCodeApi();
        }
        return vscodeApi;
      } else {
        return void 0;
      }
    };
    const vscodeClient = webViewJsonRpcClient(getVscodeApi());
    async function client_events() {
      return [];
    }
    async function eval_logs() {
      const response = await vscodeClient(kMethodEvalLogs, []);
      if (response) {
        const parsed = lib.parse(response);
        if (Array.isArray(parsed)) {
          return {
            log_dir: "",
            files: parsed
          };
        } else {
          return parsed;
        }
      } else {
        return void 0;
      }
    }
    async function eval_log(log_file, headerOnly, capabilities) {
      const response = await vscodeClient(kMethodEvalLog, [log_file, headerOnly]);
      if (response) {
        let json;
        if (capabilities == null ? void 0 : capabilities.webWorkers) {
          json = await asyncJsonParse(response);
        } else {
          json = lib.parse(response);
        }
        return {
          parsed: json,
          raw: response
        };
      } else {
        throw new Error(`Unable to load eval log ${log_file}.`);
      }
    }
    async function eval_log_size(log_file) {
      return await vscodeClient(kMethodEvalLogSize, [log_file]);
    }
    async function eval_log_bytes(log_file, start2, end2) {
      return await vscodeClient(kMethodEvalLogBytes, [log_file, start2, end2]);
    }
    async function eval_log_headers(files) {
      const response = await vscodeClient(kMethodEvalLogHeaders, [files]);
      if (response) {
        return lib.parse(response);
      } else {
        return void 0;
      }
    }
    async function download_file() {
      throw Error("Downloading files is not supported in VS Code");
    }
    async function open_log_file(log_file, log_dir) {
      var _a2;
      const msg = {
        type: "displayLogFile",
        url: log_file,
        log_dir
      };
      (_a2 = getVscodeApi()) == null ? void 0 : _a2.postMessage(msg);
    }
    const api$1 = {
      client_events,
      eval_logs,
      eval_log,
      eval_log_size,
      eval_log_bytes,
      eval_log_headers,
      download_file,
      open_log_file
    };
    var ch2 = {};
    var wk = function(c2, id, msg, transfer, cb) {
      var w2 = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([
        c2 + ';addEventListener("error",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'
      ], { type: "text/javascript" }))));
      w2.onmessage = function(e2) {
        var d2 = e2.data, ed = d2.$e$;
        if (ed) {
          var err2 = new Error(ed[0]);
          err2["code"] = ed[1];
          err2.stack = ed[2];
          cb(err2, null);
        } else
          cb(null, d2);
      };
      w2.postMessage(msg, transfer);
      return w2;
    };
    var u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;
    var fleb = new u8([
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      1,
      1,
      1,
      1,
      2,
      2,
      2,
      2,
      3,
      3,
      3,
      3,
      4,
      4,
      4,
      4,
      5,
      5,
      5,
      5,
      0,
      /* unused */
      0,
      0,
      /* impossible */
      0
    ]);
    var fdeb = new u8([
      0,
      0,
      0,
      0,
      1,
      1,
      2,
      2,
      3,
      3,
      4,
      4,
      5,
      5,
      6,
      6,
      7,
      7,
      8,
      8,
      9,
      9,
      10,
      10,
      11,
      11,
      12,
      12,
      13,
      13,
      /* unused */
      0,
      0
    ]);
    var clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
    var freb = function(eb, start2) {
      var b = new u16(31);
      for (var i2 = 0; i2 < 31; ++i2) {
        b[i2] = start2 += 1 << eb[i2 - 1];
      }
      var r2 = new i32(b[30]);
      for (var i2 = 1; i2 < 30; ++i2) {
        for (var j2 = b[i2]; j2 < b[i2 + 1]; ++j2) {
          r2[j2] = j2 - b[i2] << 5 | i2;
        }
      }
      return { b, r: r2 };
    };
    var _a$1 = freb(fleb, 2), fl = _a$1.b, revfl = _a$1.r;
    fl[28] = 258, revfl[258] = 28;
    var _b = freb(fdeb, 0), fd = _b.b;
    var rev = new u16(32768);
    for (var i$1 = 0; i$1 < 32768; ++i$1) {
      var x = (i$1 & 43690) >> 1 | (i$1 & 21845) << 1;
      x = (x & 52428) >> 2 | (x & 13107) << 2;
      x = (x & 61680) >> 4 | (x & 3855) << 4;
      rev[i$1] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;
    }
    var hMap = function(cd, mb, r2) {
      var s2 = cd.length;
      var i2 = 0;
      var l2 = new u16(mb);
      for (; i2 < s2; ++i2) {
        if (cd[i2])
          ++l2[cd[i2] - 1];
      }
      var le = new u16(mb);
      for (i2 = 1; i2 < mb; ++i2) {
        le[i2] = le[i2 - 1] + l2[i2 - 1] << 1;
      }
      var co;
      if (r2) {
        co = new u16(1 << mb);
        var rvb = 15 - mb;
        for (i2 = 0; i2 < s2; ++i2) {
          if (cd[i2]) {
            var sv = i2 << 4 | cd[i2];
            var r_1 = mb - cd[i2];
            var v2 = le[cd[i2] - 1]++ << r_1;
            for (var m2 = v2 | (1 << r_1) - 1; v2 <= m2; ++v2) {
              co[rev[v2] >> rvb] = sv;
            }
          }
        }
      } else {
        co = new u16(s2);
        for (i2 = 0; i2 < s2; ++i2) {
          if (cd[i2]) {
            co[i2] = rev[le[cd[i2] - 1]++] >> 15 - cd[i2];
          }
        }
      }
      return co;
    };
    var flt = new u8(288);
    for (var i$1 = 0; i$1 < 144; ++i$1)
      flt[i$1] = 8;
    for (var i$1 = 144; i$1 < 256; ++i$1)
      flt[i$1] = 9;
    for (var i$1 = 256; i$1 < 280; ++i$1)
      flt[i$1] = 7;
    for (var i$1 = 280; i$1 < 288; ++i$1)
      flt[i$1] = 8;
    var fdt = new u8(32);
    for (var i$1 = 0; i$1 < 32; ++i$1)
      fdt[i$1] = 5;
    var flrm = /* @__PURE__ */ hMap(flt, 9, 1);
    var fdrm = /* @__PURE__ */ hMap(fdt, 5, 1);
    var max = function(a2) {
      var m2 = a2[0];
      for (var i2 = 1; i2 < a2.length; ++i2) {
        if (a2[i2] > m2)
          m2 = a2[i2];
      }
      return m2;
    };
    var bits = function(d2, p2, m2) {
      var o2 = p2 / 8 | 0;
      return (d2[o2] | d2[o2 + 1] << 8) >> (p2 & 7) & m2;
    };
    var bits16 = function(d2, p2) {
      var o2 = p2 / 8 | 0;
      return (d2[o2] | d2[o2 + 1] << 8 | d2[o2 + 2] << 16) >> (p2 & 7);
    };
    var shft = function(p2) {
      return (p2 + 7) / 8 | 0;
    };
    var slc = function(v2, s2, e2) {
      if (s2 == null || s2 < 0)
        s2 = 0;
      if (e2 == null || e2 > v2.length)
        e2 = v2.length;
      return new u8(v2.subarray(s2, e2));
    };
    var ec = [
      "unexpected EOF",
      "invalid block type",
      "invalid length/literal",
      "invalid distance",
      "stream finished",
      "no stream handler",
      ,
      "no callback",
      "invalid UTF-8 data",
      "extra field too long",
      "date not in range 1980-2099",
      "filename too long",
      "stream finishing",
      "invalid zip data"
      // determined by unknown compression method
    ];
    var err = function(ind, msg, nt) {
      var e2 = new Error(msg || ec[ind]);
      e2.code = ind;
      if (Error.captureStackTrace)
        Error.captureStackTrace(e2, err);
      if (!nt)
        throw e2;
      return e2;
    };
    var inflt = function(dat, st, buf, dict) {
      var sl = dat.length, dl = dict ? dict.length : 0;
      if (!sl || st.f && !st.l)
        return buf || new u8(0);
      var noBuf = !buf;
      var resize = noBuf || st.i != 2;
      var noSt = st.i;
      if (noBuf)
        buf = new u8(sl * 3);
      var cbuf = function(l3) {
        var bl = buf.length;
        if (l3 > bl) {
          var nbuf = new u8(Math.max(bl * 2, l3));
          nbuf.set(buf);
          buf = nbuf;
        }
      };
      var final = st.f || 0, pos2 = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;
      var tbts = sl * 8;
      do {
        if (!lm) {
          final = bits(dat, pos2, 1);
          var type = bits(dat, pos2 + 1, 3);
          pos2 += 3;
          if (!type) {
            var s2 = shft(pos2) + 4, l2 = dat[s2 - 4] | dat[s2 - 3] << 8, t2 = s2 + l2;
            if (t2 > sl) {
              if (noSt)
                err(0);
              break;
            }
            if (resize)
              cbuf(bt + l2);
            buf.set(dat.subarray(s2, t2), bt);
            st.b = bt += l2, st.p = pos2 = t2 * 8, st.f = final;
            continue;
          } else if (type == 1)
            lm = flrm, dm = fdrm, lbt = 9, dbt = 5;
          else if (type == 2) {
            var hLit = bits(dat, pos2, 31) + 257, hcLen = bits(dat, pos2 + 10, 15) + 4;
            var tl = hLit + bits(dat, pos2 + 5, 31) + 1;
            pos2 += 14;
            var ldt = new u8(tl);
            var clt = new u8(19);
            for (var i2 = 0; i2 < hcLen; ++i2) {
              clt[clim[i2]] = bits(dat, pos2 + i2 * 3, 7);
            }
            pos2 += hcLen * 3;
            var clb = max(clt), clbmsk = (1 << clb) - 1;
            var clm = hMap(clt, clb, 1);
            for (var i2 = 0; i2 < tl; ) {
              var r2 = clm[bits(dat, pos2, clbmsk)];
              pos2 += r2 & 15;
              var s2 = r2 >> 4;
              if (s2 < 16) {
                ldt[i2++] = s2;
              } else {
                var c2 = 0, n2 = 0;
                if (s2 == 16)
                  n2 = 3 + bits(dat, pos2, 3), pos2 += 2, c2 = ldt[i2 - 1];
                else if (s2 == 17)
                  n2 = 3 + bits(dat, pos2, 7), pos2 += 3;
                else if (s2 == 18)
                  n2 = 11 + bits(dat, pos2, 127), pos2 += 7;
                while (n2--)
                  ldt[i2++] = c2;
              }
            }
            var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);
            lbt = max(lt);
            dbt = max(dt);
            lm = hMap(lt, lbt, 1);
            dm = hMap(dt, dbt, 1);
          } else
            err(1);
          if (pos2 > tbts) {
            if (noSt)
              err(0);
            break;
          }
        }
        if (resize)
          cbuf(bt + 131072);
        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;
        var lpos = pos2;
        for (; ; lpos = pos2) {
          var c2 = lm[bits16(dat, pos2) & lms], sym = c2 >> 4;
          pos2 += c2 & 15;
          if (pos2 > tbts) {
            if (noSt)
              err(0);
            break;
          }
          if (!c2)
            err(2);
          if (sym < 256)
            buf[bt++] = sym;
          else if (sym == 256) {
            lpos = pos2, lm = null;
            break;
          } else {
            var add2 = sym - 254;
            if (sym > 264) {
              var i2 = sym - 257, b = fleb[i2];
              add2 = bits(dat, pos2, (1 << b) - 1) + fl[i2];
              pos2 += b;
            }
            var d2 = dm[bits16(dat, pos2) & dms], dsym = d2 >> 4;
            if (!d2)
              err(3);
            pos2 += d2 & 15;
            var dt = fd[dsym];
            if (dsym > 3) {
              var b = fdeb[dsym];
              dt += bits16(dat, pos2) & (1 << b) - 1, pos2 += b;
            }
            if (pos2 > tbts) {
              if (noSt)
                err(0);
              break;
            }
            if (resize)
              cbuf(bt + 131072);
            var end2 = bt + add2;
            if (bt < dt) {
              var shift2 = dl - dt, dend = Math.min(dt, end2);
              if (shift2 + bt < 0)
                err(3);
              for (; bt < dend; ++bt)
                buf[bt] = dict[shift2 + bt];
            }
            for (; bt < end2; ++bt)
              buf[bt] = buf[bt - dt];
          }
        }
        st.l = lm, st.p = lpos, st.b = bt, st.f = final;
        if (lm)
          final = 1, st.m = lbt, st.d = dm, st.n = dbt;
      } while (!final);
      return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);
    };
    var et = /* @__PURE__ */ new u8(0);
    var mrg = function(a2, b) {
      var o2 = {};
      for (var k2 in a2)
        o2[k2] = a2[k2];
      for (var k2 in b)
        o2[k2] = b[k2];
      return o2;
    };
    var wcln = function(fn2, fnStr, td2) {
      var dt = fn2();
      var st = fn2.toString();
      var ks = st.slice(st.indexOf("[") + 1, st.lastIndexOf("]")).replace(/\s+/g, "").split(",");
      for (var i2 = 0; i2 < dt.length; ++i2) {
        var v2 = dt[i2], k2 = ks[i2];
        if (typeof v2 == "function") {
          fnStr += ";" + k2 + "=";
          var st_1 = v2.toString();
          if (v2.prototype) {
            if (st_1.indexOf("[native code]") != -1) {
              var spInd = st_1.indexOf(" ", 8) + 1;
              fnStr += st_1.slice(spInd, st_1.indexOf("(", spInd));
            } else {
              fnStr += st_1;
              for (var t2 in v2.prototype)
                fnStr += ";" + k2 + ".prototype." + t2 + "=" + v2.prototype[t2].toString();
            }
          } else
            fnStr += st_1;
        } else
          td2[k2] = v2;
      }
      return fnStr;
    };
    var ch = [];
    var cbfs = function(v2) {
      var tl = [];
      for (var k2 in v2) {
        if (v2[k2].buffer) {
          tl.push((v2[k2] = new v2[k2].constructor(v2[k2])).buffer);
        }
      }
      return tl;
    };
    var wrkr = function(fns, init, id, cb) {
      if (!ch[id]) {
        var fnStr = "", td_1 = {}, m2 = fns.length - 1;
        for (var i2 = 0; i2 < m2; ++i2)
          fnStr = wcln(fns[i2], fnStr, td_1);
        ch[id] = { c: wcln(fns[m2], fnStr, td_1), e: td_1 };
      }
      var td2 = mrg({}, ch[id].e);
      return wk(ch[id].c + ";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=" + init.toString() + "}", id, td2, cbfs(td2), cb);
    };
    var bInflt = function() {
      return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt];
    };
    var guze = function() {
      return [gzs, gzl];
    };
    var zule = function() {
      return [zls];
    };
    var pbf = function(msg) {
      return postMessage(msg, [msg.buffer]);
    };
    var gopt = function(o2) {
      return o2 && {
        out: o2.size && new u8(o2.size),
        dictionary: o2.dictionary
      };
    };
    var cbify = function(dat, opts, fns, init, id, cb) {
      var w2 = wrkr(fns, init, id, function(err2, dat2) {
        w2.terminate();
        cb(err2, dat2);
      });
      w2.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);
      return function() {
        w2.terminate();
      };
    };
    var gzs = function(d2) {
      if (d2[0] != 31 || d2[1] != 139 || d2[2] != 8)
        err(6, "invalid gzip data");
      var flg = d2[3];
      var st = 10;
      if (flg & 4)
        st += (d2[10] | d2[11] << 8) + 2;
      for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d2[st++])
        ;
      return st + (flg & 2);
    };
    var gzl = function(d2) {
      var l2 = d2.length;
      return (d2[l2 - 4] | d2[l2 - 3] << 8 | d2[l2 - 2] << 16 | d2[l2 - 1] << 24) >>> 0;
    };
    var zls = function(d2, dict) {
      if ((d2[0] & 15) != 8 || d2[0] >> 4 > 7 || (d2[0] << 8 | d2[1]) % 31)
        err(6, "invalid zlib data");
      if ((d2[1] >> 5 & 1) == +!dict)
        err(6, "invalid zlib data: " + (d2[1] & 32 ? "need" : "unexpected") + " dictionary");
      return (d2[1] >> 3 & 4) + 2;
    };
    function inflate(data, opts, cb) {
      if (!cb)
        cb = opts, opts = {};
      if (typeof cb != "function")
        err(7);
      return cbify(data, opts, [
        bInflt
      ], function(ev) {
        return pbf(inflateSync(ev.data[0], gopt(ev.data[1])));
      }, 1, cb);
    }
    function inflateSync(data, opts) {
      return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);
    }
    function gunzip(data, opts, cb) {
      if (!cb)
        cb = opts, opts = {};
      if (typeof cb != "function")
        err(7);
      return cbify(data, opts, [
        bInflt,
        guze,
        function() {
          return [gunzipSync];
        }
      ], function(ev) {
        return pbf(gunzipSync(ev.data[0], ev.data[1]));
      }, 3, cb);
    }
    function gunzipSync(data, opts) {
      var st = gzs(data);
      if (st + 8 > data.length)
        err(6, "invalid gzip data");
      return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);
    }
    function unzlib(data, opts, cb) {
      if (!cb)
        cb = opts, opts = {};
      if (typeof cb != "function")
        err(7);
      return cbify(data, opts, [
        bInflt,
        zule,
        function() {
          return [unzlibSync];
        }
      ], function(ev) {
        return pbf(unzlibSync(ev.data[0], gopt(ev.data[1])));
      }, 5, cb);
    }
    function unzlibSync(data, opts) {
      return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);
    }
    function decompress(data, opts, cb) {
      if (!cb)
        cb = opts, opts = {};
      if (typeof cb != "function")
        err(7);
      return data[0] == 31 && data[1] == 139 && data[2] == 8 ? gunzip(data, opts, cb) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? inflate(data, opts, cb) : unzlib(data, opts, cb);
    }
    var td = typeof TextDecoder != "undefined" && /* @__PURE__ */ new TextDecoder();
    var tds = 0;
    try {
      td.decode(et, { stream: true });
      tds = 1;
    } catch (e2) {
    }
    class FileSizeLimitError extends Error {
      /**
       * Creates a new FileSizeLimitError.
       *
       * @param {string} file - The name of the file that caused the error.
       * @param {number} maxBytes - The maximum allowed size for the file, in bytes.
       */
      constructor(file, maxBytes) {
        super(
          `File "${file}" exceeds the maximum size (${maxBytes} bytes) and cannot be loaded.`
        );
        this.name = "FileSizeLimitError";
        this.file = file;
        this.maxBytes = maxBytes;
      }
    }
    const openRemoteZipFile = async (url, fetchContentLength = fetchSize, fetchBytes = fetchRange) => {
      const contentLength = await fetchContentLength(url);
      const eocdrBuffer = await fetchBytes(
        url,
        contentLength - 22,
        contentLength - 1
      );
      const eocdrView = new DataView(eocdrBuffer.buffer);
      const centralDirOffset = eocdrView.getUint32(16, true);
      const centralDirSize = eocdrView.getUint32(12, true);
      const centralDirBuffer = await fetchBytes(
        url,
        centralDirOffset,
        centralDirOffset + centralDirSize - 1
      );
      const centralDirectory = parseCentralDirectory(centralDirBuffer);
      return {
        centralDirectory,
        readFile: async (file, maxBytes) => {
          const entry = centralDirectory.get(file);
          if (!entry) {
            throw new Error(`File not found: ${file}`);
          }
          const headerSize = 30;
          const headerData = await fetchBytes(
            url,
            entry.fileOffset,
            entry.fileOffset + headerSize - 1
          );
          const filenameLength = headerData[26] + (headerData[27] << 8);
          const extraFieldLength = headerData[28] + (headerData[29] << 8);
          const totalSizeToFetch = headerSize + filenameLength + extraFieldLength + entry.compressedSize;
          if (maxBytes && totalSizeToFetch > maxBytes) {
            throw new FileSizeLimitError(file, maxBytes);
          }
          const fileData = await fetchBytes(
            url,
            entry.fileOffset,
            entry.fileOffset + totalSizeToFetch - 1
          );
          const zipFileEntry = await parseZipFileEntry(file, fileData);
          if (zipFileEntry.compressionMethod === 0) {
            return zipFileEntry.data;
          } else if (zipFileEntry.compressionMethod === 8) {
            const results = await decompressAsync(zipFileEntry.data, {
              size: zipFileEntry.uncompressedSize
            });
            return results;
          } else {
            throw new Error(`Unsupported compressionMethod for file ${file}`);
          }
        }
      };
    };
    const fetchSize = async (url) => {
      const response = await fetch(`${url}`, { method: "HEAD" });
      const contentLength = Number(response.headers.get("Content-Length"));
      return contentLength;
    };
    const fetchRange = async (url, start2, end2) => {
      const response = await fetch(`${url}`, {
        headers: { Range: `bytes=${start2}-${end2}` }
      });
      const arrayBuffer = await response.arrayBuffer();
      return new Uint8Array(arrayBuffer);
    };
    const decompressAsync = async (data, opts) => {
      return new Promise((resolve, reject) => {
        decompress(data, opts, (err2, result) => {
          if (err2) {
            reject(err2);
          } else {
            resolve(result);
          }
        });
      });
    };
    const parseZipFileEntry = async (file, rawData) => {
      const view = new DataView(rawData.buffer);
      let offset2 = 0;
      const signature = view.getUint32(offset2, true);
      if (signature !== 67324752) {
        throw new Error(`Invalid ZIP entry signature for ${file}`);
      }
      offset2 += 4;
      const versionNeeded = view.getUint16(offset2, true);
      offset2 += 2;
      const bitFlag = view.getUint16(offset2, true);
      offset2 += 2;
      const compressionMethod = view.getUint16(offset2, true);
      offset2 += 2;
      offset2 += 4;
      const crc32 = view.getUint32(offset2, true);
      offset2 += 4;
      const compressedSize = view.getUint32(offset2, true);
      offset2 += 4;
      const uncompressedSize = view.getUint32(offset2, true);
      offset2 += 4;
      const filenameLength = view.getUint16(offset2, true);
      offset2 += 2;
      const extraFieldLength = view.getUint16(offset2, true);
      offset2 += 2;
      offset2 += filenameLength + extraFieldLength;
      const data = rawData.subarray(offset2, offset2 + compressedSize);
      return {
        versionNeeded,
        bitFlag,
        compressionMethod,
        crc32,
        compressedSize,
        uncompressedSize,
        filenameLength,
        extraFieldLength,
        data
      };
    };
    const parseCentralDirectory = (buffer2) => {
      let offset2 = 0;
      const view = new DataView(buffer2.buffer);
      const entries = /* @__PURE__ */ new Map();
      while (offset2 < buffer2.length) {
        if (view.getUint32(offset2, true) !== 33639248) break;
        const filenameLength = view.getUint16(offset2 + 28, true);
        const extraFieldLength = view.getUint16(offset2 + 30, true);
        const fileCommentLength = view.getUint16(offset2 + 32, true);
        const filename2 = new TextDecoder().decode(
          buffer2.subarray(offset2 + 46, offset2 + 46 + filenameLength)
        );
        const entry = {
          filename: filename2,
          compressionMethod: view.getUint16(offset2 + 10, true),
          compressedSize: view.getUint32(offset2 + 20, true),
          uncompressedSize: view.getUint32(offset2 + 24, true),
          fileOffset: view.getUint32(offset2 + 42, true)
        };
        entries.set(filename2, entry);
        offset2 += 46 + filenameLength + extraFieldLength + fileCommentLength;
      }
      return entries;
    };
    function simpleHttpApi(log_dir, log_file) {
      const resolved_log_dir = log_dir == null ? void 0 : log_dir.replace(" ", "+");
      const resolved_log_path = log_file ? log_file.replace(" ", "+") : void 0;
      return simpleHttpAPI({
        log_file: resolved_log_path,
        log_dir: resolved_log_dir
      });
    }
    function simpleHttpAPI(logInfo) {
      const log_dir = logInfo.log_dir;
      async function open_log_file2() {
      }
      return {
        client_events: async () => {
          return Promise.resolve([]);
        },
        eval_logs: async () => {
          if (log_dir) {
            const headers = await fetchLogHeaders(log_dir);
            if (headers) {
              const logRecord = headers.parsed;
              const logs = Object.keys(logRecord).map((key2) => {
                return {
                  name: joinURI(log_dir, key2),
                  task: logRecord[key2].eval.task,
                  task_id: logRecord[key2].eval.task_id
                };
              });
              return Promise.resolve({
                files: logs,
                log_dir
              });
            }
          }
          return void 0;
        },
        eval_log: async (log_file2, _headerOnly, _capabilities) => {
          const response = await fetchLogFile(log_file2);
          if (response) {
            return response;
          } else {
            throw new Error(`"Unable to load eval log ${log_file2}`);
          }
        },
        eval_log_size: async (log_file2) => {
          return await fetchSize(log_file2);
        },
        eval_log_bytes: async (log_file2, start2, end2) => {
          return await fetchRange(log_file2, start2, end2);
        },
        eval_log_headers: async (files) => {
          if (files.length === 0) {
            return [];
          }
          if (log_dir) {
            const headers = await fetchLogHeaders(log_dir);
            if (headers) {
              const keys = Object.keys(headers.parsed);
              const result = [];
              files.forEach((file) => {
                const fileKey = keys.find((key2) => {
                  return file.endsWith(key2);
                });
                if (fileKey) {
                  result.push(headers.parsed[fileKey]);
                }
              });
              return result;
            }
          }
          throw new Error(`Failed to load a manifest files using the directory: ${log_dir}. Please be sure you have deployed a manifest file (logs.json).`);
        },
        download_file: download_file$1,
        open_log_file: open_log_file2
      };
    }
    async function fetchFile(url, parse2, handleError2) {
      const safe_url = encodePathParts(url);
      const response = await fetch(`${safe_url}`, {
        method: "GET"
      });
      if (response.ok) {
        const text2 = await response.text();
        return await parse2(text2);
      } else if (response.status !== 200) {
        if (handleError2 && handleError2(response)) {
          return void 0;
        }
        const message = await response.text() || response.statusText;
        const error2 = new Error(`${response.status}: ${message})`);
        throw error2;
      } else {
        throw new Error(`${response.status} - ${response.statusText} `);
      }
    }
    const fetchLogFile = async (file) => {
      return fetchFile(file, async (text2) => {
        var _a2;
        const log = await asyncJsonParse(text2);
        if (log.version === 1) {
          if (log.results) {
            const untypedLog = log;
            log.results.scores = [];
            untypedLog.results.scorer.scorer = untypedLog.results.scorer.name;
            log.results.scores.push(untypedLog.results.scorer);
            delete untypedLog.results.scorer;
            log.results.scores[0].metrics = untypedLog.results.metrics;
            delete untypedLog.results.metrics;
            const scorerName = log.results.scores[0].name;
            (_a2 = log.samples) == null ? void 0 : _a2.forEach((sample) => {
              const untypedSample = sample;
              sample.scores = {
                [scorerName]: untypedSample.score
              };
              delete untypedSample.score;
            });
          }
        }
        return {
          raw: text2,
          parsed: log
        };
      });
    };
    const fetchLogHeaders = async (log_dir) => {
      const logs = await fetchFile(log_dir + "/logs.json", async (text2) => {
        const parsed = await asyncJsonParse(text2);
        return {
          raw: text2,
          parsed
        };
      }, (response) => {
        if (response.status === 404) {
          return true;
        } else {
          return false;
        }
      });
      return logs;
    };
    function joinURI(...segments) {
      return segments.map((segment) => segment.replace(/(^\/+|\/+$)/g, "")).join("/");
    }
    class AsyncQueue {
      /**
       * Creates an instance of AsyncQueue.
       * @param {number} [concurrentLimit=6] - The maximum number of tasks that can run concurrently.
       */
      constructor(concurrentLimit = 6) {
        this.concurrentLimit = concurrentLimit;
        this.queue = [];
        this.runningCount = 0;
      }
      /**
       * Adds a task to the queue and runs it if the concurrency limit allows.
       * @param {Function} task - The task to be executed asynchronously. This should be a function that returns a promise.
       * @returns {Promise<*>} - A promise that resolves with the result of the task or rejects if the task throws an error.
       */
      async enqueue(task) {
        return new Promise((resolve, reject) => {
          this.queue.push(async () => {
            try {
              const result = await task();
              resolve(result);
            } catch (error2) {
              reject(error2);
            } finally {
              this.runningCount--;
              this.runNext();
            }
          });
          if (this.runningCount < this.concurrentLimit) {
            this.runNext();
          }
        });
      }
      /**
       * Runs the next task in the queue if there are available slots for concurrent execution.
       * @private
       */
      runNext() {
        if (this.queue.length > 0 && this.runningCount < this.concurrentLimit) {
          const task = this.queue.shift();
          if (task) {
            this.runningCount++;
            task();
          }
        }
      }
    }
    const MAX_BYTES = 50 * 1024 * 1024;
    const openRemoteLogFile = async (api2, url, concurrency) => {
      const queue = new AsyncQueue(concurrency);
      const remoteZipFile = await openRemoteZipFile(url, api2.eval_log_size, api2.eval_log_bytes);
      const readJSONFile = async (file, maxBytes) => {
        try {
          const data = await remoteZipFile.readFile(file, maxBytes);
          const textDecoder = new TextDecoder("utf-8");
          const jsonString = textDecoder.decode(data);
          return asyncJsonParse(jsonString);
        } catch (error2) {
          if (error2 instanceof FileSizeLimitError) {
            throw error2;
          } else if (error2 instanceof Error) {
            throw new Error(`Failed to read or parse file ${file}: ${error2.message}`);
          } else {
            throw new Error(`Failed to read or parse file ${file} - an unknown error occurred`);
          }
        }
      };
      const listSamples = async () => {
        return Array.from(remoteZipFile.centralDirectory.keys()).filter((filename2) => filename2.startsWith("samples/") && filename2.endsWith(".json")).map((filename2) => {
          const [sampleId, epochStr] = filename2.split("/")[1].split("_epoch_");
          return {
            sampleId,
            epoch: parseInt(epochStr.split(".")[0], 10)
          };
        });
      };
      const readSample = async (sampleId, epoch) => {
        const sampleFile = `samples/${sampleId}_epoch_${epoch}.json`;
        if (remoteZipFile.centralDirectory.has(sampleFile)) {
          return await readJSONFile(sampleFile, MAX_BYTES);
        } else {
          console.log({
            dir: remoteZipFile.centralDirectory
          });
          throw new Error(`Unable to read sample file ${sampleFile} - it is not present in the manifest.`);
        }
      };
      const readHeader = async () => {
        if (remoteZipFile.centralDirectory.has("header.json")) {
          return await readJSONFile("header.json");
        } else {
          const evalSpec = await readJSONFile("_journal/start.json");
          return {
            status: "started",
            eval: evalSpec.eval,
            plan: evalSpec.plan
          };
        }
      };
      const readFallbackSummaries = async () => {
        const summaryFiles = Array.from(remoteZipFile.centralDirectory.keys()).filter((filename2) => filename2.startsWith("_journal/summaries/") && filename2.endsWith(".json"));
        const summaries = [];
        const errors2 = [];
        await Promise.all(summaryFiles.map((filename2) => queue.enqueue(async () => {
          try {
            const partialSummary = await readJSONFile(filename2);
            summaries.push(...partialSummary);
          } catch (error2) {
            errors2.push(error2);
          }
        })));
        if (errors2.length > 0) {
          console.error(`Encountered ${errors2.length} errors while reading summary files:`, errors2);
        }
        return summaries;
      };
      const readSampleSummaries = async () => {
        if (remoteZipFile.centralDirectory.has("summaries.json")) {
          return await readJSONFile("summaries.json");
        } else {
          return readFallbackSummaries();
        }
      };
      return {
        readHeader,
        readLogSummary: async () => {
          const [header, sampleSummaries] = await Promise.all([readHeader(), readSampleSummaries()]);
          const result = {
            status: header.status,
            eval: header.eval,
            plan: header.plan,
            results: header.results,
            stats: header.stats,
            error: header.error,
            sampleSummaries
          };
          return result;
        },
        readSample,
        /**
         * Reads the complete log file.
         */
        readCompleteLog: async () => {
          const [evalLog, samples] = await Promise.all([readHeader(), listSamples().then((sampleIds) => Promise.all(sampleIds.map(({
            sampleId,
            epoch
          }) => readSample(sampleId, epoch).then((sample) => sample))))]);
          return {
            status: evalLog.status,
            eval: evalLog.eval,
            plan: evalLog.plan,
            results: evalLog.results,
            stats: evalLog.stats,
            error: evalLog.error,
            samples
          };
        }
      };
    };
    const isEvalFile = (file) => {
      return file.endsWith(".eval");
    };
    class SampleSizeLimitedExceededError extends Error {
      constructor(id, epoch, maxBytes) {
        super(`Sample ${id} in epoch ${epoch} exceeds the maximum supported size (${maxBytes / 1024 / 1024}MB) and cannot be loaded.`);
        this.name = "SampleSizeLimitedExceededError";
        this.id = id;
        this.epoch = epoch;
        this.maxBytes = maxBytes;
        this.displayStack = false;
        Object.setPrototypeOf(this, SampleSizeLimitedExceededError.prototype);
      }
    }
    const clientApi = (api2, log_file) => {
      let current_log = void 0;
      let current_path = void 0;
      const loadedEvalFile = {
        file: void 0,
        remoteLog: void 0
      };
      const remoteEvalFile = async (log_file2, cached = false) => {
        if (!cached || loadedEvalFile.file !== log_file2) {
          loadedEvalFile.file = log_file2;
          loadedEvalFile.remoteLog = await openRemoteLogFile(api2, encodePathParts(log_file2), 5);
        }
        return loadedEvalFile.remoteLog;
      };
      const get_log = async (log_file2, cached = false) => {
        if (!cached || log_file2 !== current_path || !current_log) {
          if (pending_log_promise) {
            return pending_log_promise;
          }
          pending_log_promise = api2.eval_log(log_file2, 100).then((log) => {
            current_log = log;
            current_path = log_file2;
            pending_log_promise = null;
            return log;
          }).catch((err2) => {
            pending_log_promise = null;
            throw err2;
          });
          return pending_log_promise;
        }
        return current_log;
      };
      let pending_log_promise = null;
      const get_log_summary = async (log_file2) => {
        var _a2;
        if (isEvalFile(log_file2)) {
          const remoteLogFile = await remoteEvalFile(log_file2);
          if (remoteLogFile) {
            return await remoteLogFile.readLogSummary();
          } else {
            throw new Error("Unable to read remote eval file");
          }
        } else {
          const logContents = await get_log(log_file2);
          const sampleSummaries = logContents.parsed.samples ? (_a2 = logContents.parsed.samples) == null ? void 0 : _a2.map((sample) => {
            var _a3;
            return {
              id: sample.id,
              epoch: sample.epoch,
              input: sample.input,
              target: sample.target,
              scores: sample.scores,
              metadata: sample.metadata,
              error: (_a3 = sample.error) == null ? void 0 : _a3.message
            };
          }) : [];
          const parsed = logContents.parsed;
          return {
            version: parsed.version,
            status: parsed.status,
            eval: parsed.eval,
            plan: parsed.plan,
            results: parsed.results,
            stats: parsed.stats,
            error: parsed.error,
            sampleSummaries
          };
        }
      };
      const get_log_sample = async (log_file2, id, epoch) => {
        if (isEvalFile(log_file2)) {
          const remoteLogFile = await remoteEvalFile(log_file2, true);
          try {
            if (remoteLogFile) {
              const sample = await remoteLogFile.readSample(String(id), epoch);
              return sample;
            } else {
              throw new Error(`Unable to read remove eval file ${log_file2}`);
            }
          } catch (error2) {
            if (error2 instanceof FileSizeLimitError) {
              throw new SampleSizeLimitedExceededError(id, epoch, error2.maxBytes);
            } else {
              throw error2;
            }
          }
        } else {
          const logContents = await get_log(log_file2, true);
          if (logContents.parsed.samples && logContents.parsed.samples.length > 0) {
            return logContents.parsed.samples.find((sample) => {
              return sample.id === id && sample.epoch === epoch;
            });
          }
        }
        return void 0;
      };
      const get_eval_log_header = async (log_file2) => {
        const remoteLogFile = await openRemoteLogFile(api2, encodePathParts(log_file2), 5);
        return remoteLogFile.readHeader();
      };
      const get_log_headers = async (log_files) => {
        const eval_files = {};
        const json_files = {};
        let index = 0;
        for (const file of log_files) {
          if (isEvalFile(file)) {
            eval_files[file] = index;
          } else {
            json_files[file] = index;
          }
          index++;
        }
        const evalLogHeadersPromises = Object.keys(eval_files).map((file) => get_eval_log_header(file).then((header) => ({
          index: eval_files[file],
          // Store original index
          header
        })));
        const jsonLogHeadersPromise = api2.eval_log_headers(Object.keys(json_files)).then((headers2) => headers2.map((header, i2) => ({
          index: json_files[Object.keys(json_files)[i2]],
          // Store original index
          header
        })));
        const headers = await Promise.all([...evalLogHeadersPromises, jsonLogHeadersPromise]);
        const orderedHeaders = headers.flat().sort((a2, b) => a2.index - b.index);
        return orderedHeaders.map(({
          header
        }) => header);
      };
      const get_log_paths = async () => {
        const logFiles = await api2.eval_logs();
        if (logFiles) {
          return logFiles;
        } else if (log_file) {
          const summary = await get_log_summary(log_file);
          if (summary) {
            return {
              files: [{
                name: log_file,
                task: summary.eval.task,
                task_id: summary.eval.task_id
              }]
            };
          }
        }
        throw new Error("Unable to determine log paths.");
      };
      return {
        client_events: () => {
          return api2.client_events();
        },
        get_log_paths: () => {
          return get_log_paths();
        },
        get_log_headers: (log_files) => {
          return get_log_headers(log_files);
        },
        get_log_summary,
        get_log_sample,
        open_log_file: (log_file2, log_dir) => {
          return api2.open_log_file(log_file2, log_dir);
        },
        download_file: (download_file2, file_contents) => {
          return api2.download_file(download_file2, file_contents);
        }
      };
    };
    const resolveApi = () => {
      if (getVscodeApi()) {
        return clientApi(api$1);
      } else {
        const scriptEl = document.getElementById("log_dir_context");
        if (scriptEl) {
          const context = scriptEl.textContent;
          if (context !== null) {
            const data = JSON.parse(context);
            if (data.log_dir || data.log_file) {
              const log_dir2 = data.log_dir || dirname(data.log_file);
              const api2 = simpleHttpApi(log_dir2, data.log_file);
              return clientApi(api2, data.log_file);
            }
          }
        }
        const urlParams = new URLSearchParams(window.location.search);
        const log_file = urlParams.get("log_file");
        const log_dir = urlParams.get("log_dir");
        if (log_file !== null || log_dir !== null) {
          const resolved_log_dir = log_dir === null ? void 0 : log_dir;
          const resolved_log_file = log_file === null ? void 0 : log_file;
          const api2 = simpleHttpApi(resolved_log_dir, resolved_log_file);
          return clientApi(api2, resolved_log_file);
        }
        return clientApi(browserApi);
      }
    };
    const api = resolveApi();
    const DownloadButton = ({ label, fileName, fileContents }) => {
      return m$1`<button
    class="btn btn-outline-primary"
    style=${{ fontSize: FontSize.small, marginTop: "3em" }}
    onclick=${async () => {
        await api.download_file(fileName, fileContents);
      }}
  >
    ${label}
  </button>`;
    };
    const DownloadPanel = ({
      message,
      buttonLabel,
      logFile,
      fileName,
      fileContents
    }) => {
      return m$1`<div
    style=${{
        display: "grid",
        gridTemplateRows: "content content",
        paddingTop: "3em",
        justifyItems: "center"
      }}
  >
    <div style=${{ fontSize: FontSize.small }}>${message}</div>
    <${DownloadButton}
      label=${buttonLabel}
      logFile=${logFile}
      fileName=${fileName}
      fileContents=${fileContents}
    />
  </div>`;
    };
    const kJsonMaxSize = 1e7;
    const JsonTab = ({ logFileName, capabilities, json }) => {
      const renderedContent = [];
      if (json.length > kJsonMaxSize && capabilities.downloadFiles) {
        const file = `${filename(logFileName)}.json`;
        renderedContent.push(
          m$1`<${DownloadPanel}
        message="Log file raw JSON is too large to render."
        buttonLabel="Download JSON File"
        logFile=${logFileName}
        fileName=${file}
        fileContents=${json}
      />`
        );
      } else {
        return m$1` <div
      style=${{
          padding: "0.5rem",
          fontSize: FontSize.small,
          width: "100%"
        }}
    >
      <${JSONPanel} id="task-json-contents" json=${json} simple=${true} />
    </div>`;
      }
    };
    const EpochFilter = ({ epochs, epoch, setEpoch }) => {
      const options = ["all"];
      for (let i2 = 1; i2 <= epochs; i2++) {
        options.push(i2 + "");
      }
      return m$1`
    <div style=${{ display: "flex" }}>
      <span
        class="epoch-filter-label"
        style=${{
        alignSelf: "center",
        fontSize: FontSize.smaller,
        ...TextStyle.label,
        ...TextStyle.secondary,
        marginRight: "0.3em",
        marginLeft: "0.2em"
      }}
        >Epochs:</span
      >
      <select
        class="form-select form-select-sm"
        aria-label=".epoch-filter-label"
        style=${{ fontSize: FontSize.smaller }}
        value=${epoch}
        onChange=${(e2) => {
        setEpoch(e2.target.value);
      }}
      >
        ${options.map((option) => {
        return m$1`<option value="${option}">${option}</option>`;
      })}
      </select>
    </div>
  `;
    };
    const SortFilter = ({ sampleDescriptor, sort, setSort, epochs }) => {
      var _a2;
      const options = [
        { label: "sample asc", val: kSampleAscVal },
        { label: "sample desc", val: kSampleDescVal }
      ];
      if (epochs) {
        options.push({
          label: "epoch asc",
          val: kEpochAscVal
        });
        options.push({
          label: "epoch desc",
          val: kEpochDescVal
        });
      }
      if ((_a2 = sampleDescriptor == null ? void 0 : sampleDescriptor.selectedScoreDescriptor) == null ? void 0 : _a2.compare) {
        options.push({
          label: "score asc",
          val: kScoreAscVal
        });
        options.push({
          label: "score desc",
          val: kScoreDescVal
        });
      }
      return m$1`
    <div style=${{ display: "flex" }}>
      <span
        class="sort-filter-label"
        style=${{
        alignSelf: "center",
        fontSize: FontSize.smaller,
        ...TextStyle.label,
        ...TextStyle.secondary,
        marginRight: "0.3em",
        marginLeft: "0.2em"
      }}
        >Sort:</span
      >
      <select
        class="form-select form-select-sm"
        aria-label=".sort-filter-label"
        style=${{ fontSize: FontSize.smaller }}
        value=${sort}
        onChange=${(e2) => {
        setSort(e2.target.value);
      }}
      >
        ${options.map((option) => {
        return m$1`<option value="${option.val}">${option.label}</option>`;
      })}
      </select>
    </div>
  `;
    };
    const byEpoch = (sort) => {
      return sort === kEpochAscVal || sort === kEpochDescVal;
    };
    const bySample = (sort) => {
      return sort === kSampleAscVal || sort === kSampleDescVal;
    };
    const sortId = (a2, b) => {
      if (isNumeric(a2.id) && isNumeric(b.id)) {
        return Number(a2.id) - Number(b.id);
      } else {
        return String(a2.id).localeCompare(String(b.id));
      }
    };
    const sortSamples = (sort, samples, samplesDescriptor) => {
      const sortedSamples = samples.sort((a2, b) => {
        switch (sort) {
          case kSampleAscVal: {
            const result = sortId(a2, b);
            if (result !== 0) {
              return result;
            } else {
              return a2.epoch - b.epoch;
            }
          }
          case kSampleDescVal: {
            const result = sortId(b, a2);
            if (result !== 0) {
              return result;
            } else {
              return a2.epoch - b.epoch;
            }
          }
          case kEpochAscVal: {
            const result = a2.epoch - b.epoch;
            if (result !== 0) {
              return result;
            } else {
              return sortId(a2, b);
            }
          }
          case kEpochDescVal: {
            const result = b.epoch - a2.epoch;
            if (result !== 0) {
              return result;
            } else {
              return sortId(a2, b);
            }
          }
          case kScoreAscVal:
            return samplesDescriptor.selectedScoreDescriptor.compare(
              samplesDescriptor.selectedScore(a2).value,
              samplesDescriptor.selectedScore(b).value
            );
          case kScoreDescVal:
            return samplesDescriptor.selectedScoreDescriptor.compare(
              samplesDescriptor.selectedScore(b).value,
              samplesDescriptor.selectedScore(a2).value
            );
        }
      });
      return {
        sorted: sortedSamples,
        order: sort === kSampleAscVal || sort === kEpochAscVal || sort === kScoreAscVal ? "asc" : "desc"
      };
    };
    class Text {
      /**
      Get the line description around the given position.
      */
      lineAt(pos2) {
        if (pos2 < 0 || pos2 > this.length)
          throw new RangeError(`Invalid position ${pos2} in document of length ${this.length}`);
        return this.lineInner(pos2, false, 1, 0);
      }
      /**
      Get the description for the given (1-based) line number.
      */
      line(n2) {
        if (n2 < 1 || n2 > this.lines)
          throw new RangeError(`Invalid line number ${n2} in ${this.lines}-line document`);
        return this.lineInner(n2, true, 1, 0);
      }
      /**
      Replace a range of the text with the given content.
      */
      replace(from, to, text2) {
        [from, to] = clip(this, from, to);
        let parts = [];
        this.decompose(
          0,
          from,
          parts,
          2
          /* Open.To */
        );
        if (text2.length)
          text2.decompose(
            0,
            text2.length,
            parts,
            1 | 2
            /* Open.To */
          );
        this.decompose(
          to,
          this.length,
          parts,
          1
          /* Open.From */
        );
        return TextNode.from(parts, this.length - (to - from) + text2.length);
      }
      /**
      Append another document to this one.
      */
      append(other) {
        return this.replace(this.length, this.length, other);
      }
      /**
      Retrieve the text between the given points.
      */
      slice(from, to = this.length) {
        [from, to] = clip(this, from, to);
        let parts = [];
        this.decompose(from, to, parts, 0);
        return TextNode.from(parts, to - from);
      }
      /**
      Test whether this text is equal to another instance.
      */
      eq(other) {
        if (other == this)
          return true;
        if (other.length != this.length || other.lines != this.lines)
          return false;
        let start2 = this.scanIdentical(other, 1), end2 = this.length - this.scanIdentical(other, -1);
        let a2 = new RawTextCursor(this), b = new RawTextCursor(other);
        for (let skip = start2, pos2 = start2; ; ) {
          a2.next(skip);
          b.next(skip);
          skip = 0;
          if (a2.lineBreak != b.lineBreak || a2.done != b.done || a2.value != b.value)
            return false;
          pos2 += a2.value.length;
          if (a2.done || pos2 >= end2)
            return true;
        }
      }
      /**
      Iterate over the text. When `dir` is `-1`, iteration happens
      from end to start. This will return lines and the breaks between
      them as separate strings.
      */
      iter(dir = 1) {
        return new RawTextCursor(this, dir);
      }
      /**
      Iterate over a range of the text. When `from` > `to`, the
      iterator will run in reverse.
      */
      iterRange(from, to = this.length) {
        return new PartialTextCursor(this, from, to);
      }
      /**
      Return a cursor that iterates over the given range of lines,
      _without_ returning the line breaks between, and yielding empty
      strings for empty lines.
      
      When `from` and `to` are given, they should be 1-based line numbers.
      */
      iterLines(from, to) {
        let inner;
        if (from == null) {
          inner = this.iter();
        } else {
          if (to == null)
            to = this.lines + 1;
          let start2 = this.line(from).from;
          inner = this.iterRange(start2, Math.max(start2, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
        }
        return new LineCursor(inner);
      }
      /**
      Return the document as a string, using newline characters to
      separate lines.
      */
      toString() {
        return this.sliceString(0);
      }
      /**
      Convert the document to an array of lines (which can be
      deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
      */
      toJSON() {
        let lines = [];
        this.flatten(lines);
        return lines;
      }
      /**
      @internal
      */
      constructor() {
      }
      /**
      Create a `Text` instance for the given array of lines.
      */
      static of(text2) {
        if (text2.length == 0)
          throw new RangeError("A document must have at least one line");
        if (text2.length == 1 && !text2[0])
          return Text.empty;
        return text2.length <= 32 ? new TextLeaf(text2) : TextNode.from(TextLeaf.split(text2, []));
      }
    }
    class TextLeaf extends Text {
      constructor(text2, length = textLength(text2)) {
        super();
        this.text = text2;
        this.length = length;
      }
      get lines() {
        return this.text.length;
      }
      get children() {
        return null;
      }
      lineInner(target, isLine, line2, offset2) {
        for (let i2 = 0; ; i2++) {
          let string2 = this.text[i2], end2 = offset2 + string2.length;
          if ((isLine ? line2 : end2) >= target)
            return new Line(offset2, end2, line2, string2);
          offset2 = end2 + 1;
          line2++;
        }
      }
      decompose(from, to, target, open) {
        let text2 = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
        if (open & 1) {
          let prev = target.pop();
          let joined = appendText(text2.text, prev.text.slice(), 0, text2.length);
          if (joined.length <= 32) {
            target.push(new TextLeaf(joined, prev.length + text2.length));
          } else {
            let mid = joined.length >> 1;
            target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
          }
        } else {
          target.push(text2);
        }
      }
      replace(from, to, text2) {
        if (!(text2 instanceof TextLeaf))
          return super.replace(from, to, text2);
        [from, to] = clip(this, from, to);
        let lines = appendText(this.text, appendText(text2.text, sliceText(this.text, 0, from)), to);
        let newLen = this.length + text2.length - (to - from);
        if (lines.length <= 32)
          return new TextLeaf(lines, newLen);
        return TextNode.from(TextLeaf.split(lines, []), newLen);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
        [from, to] = clip(this, from, to);
        let result = "";
        for (let pos2 = 0, i2 = 0; pos2 <= to && i2 < this.text.length; i2++) {
          let line2 = this.text[i2], end2 = pos2 + line2.length;
          if (pos2 > from && i2)
            result += lineSep;
          if (from < end2 && to > pos2)
            result += line2.slice(Math.max(0, from - pos2), to - pos2);
          pos2 = end2 + 1;
        }
        return result;
      }
      flatten(target) {
        for (let line2 of this.text)
          target.push(line2);
      }
      scanIdentical() {
        return 0;
      }
      static split(text2, target) {
        let part = [], len = -1;
        for (let line2 of text2) {
          part.push(line2);
          len += line2.length + 1;
          if (part.length == 32) {
            target.push(new TextLeaf(part, len));
            part = [];
            len = -1;
          }
        }
        if (len > -1)
          target.push(new TextLeaf(part, len));
        return target;
      }
    }
    class TextNode extends Text {
      constructor(children2, length) {
        super();
        this.children = children2;
        this.length = length;
        this.lines = 0;
        for (let child of children2)
          this.lines += child.lines;
      }
      lineInner(target, isLine, line2, offset2) {
        for (let i2 = 0; ; i2++) {
          let child = this.children[i2], end2 = offset2 + child.length, endLine = line2 + child.lines - 1;
          if ((isLine ? endLine : end2) >= target)
            return child.lineInner(target, isLine, line2, offset2);
          offset2 = end2 + 1;
          line2 = endLine + 1;
        }
      }
      decompose(from, to, target, open) {
        for (let i2 = 0, pos2 = 0; pos2 <= to && i2 < this.children.length; i2++) {
          let child = this.children[i2], end2 = pos2 + child.length;
          if (from <= end2 && to >= pos2) {
            let childOpen = open & ((pos2 <= from ? 1 : 0) | (end2 >= to ? 2 : 0));
            if (pos2 >= from && end2 <= to && !childOpen)
              target.push(child);
            else
              child.decompose(from - pos2, to - pos2, target, childOpen);
          }
          pos2 = end2 + 1;
        }
      }
      replace(from, to, text2) {
        [from, to] = clip(this, from, to);
        if (text2.lines < this.lines)
          for (let i2 = 0, pos2 = 0; i2 < this.children.length; i2++) {
            let child = this.children[i2], end2 = pos2 + child.length;
            if (from >= pos2 && to <= end2) {
              let updated = child.replace(from - pos2, to - pos2, text2);
              let totalLines = this.lines - child.lines + updated.lines;
              if (updated.lines < totalLines >> 5 - 1 && updated.lines > totalLines >> 5 + 1) {
                let copy = this.children.slice();
                copy[i2] = updated;
                return new TextNode(copy, this.length - (to - from) + text2.length);
              }
              return super.replace(pos2, end2, updated);
            }
            pos2 = end2 + 1;
          }
        return super.replace(from, to, text2);
      }
      sliceString(from, to = this.length, lineSep = "\n") {
        [from, to] = clip(this, from, to);
        let result = "";
        for (let i2 = 0, pos2 = 0; i2 < this.children.length && pos2 <= to; i2++) {
          let child = this.children[i2], end2 = pos2 + child.length;
          if (pos2 > from && i2)
            result += lineSep;
          if (from < end2 && to > pos2)
            result += child.sliceString(from - pos2, to - pos2, lineSep);
          pos2 = end2 + 1;
        }
        return result;
      }
      flatten(target) {
        for (let child of this.children)
          child.flatten(target);
      }
      scanIdentical(other, dir) {
        if (!(other instanceof TextNode))
          return 0;
        let length = 0;
        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length] : [this.children.length - 1, other.children.length - 1, -1, -1];
        for (; ; iA += dir, iB += dir) {
          if (iA == eA || iB == eB)
            return length;
          let chA = this.children[iA], chB = other.children[iB];
          if (chA != chB)
            return length + chA.scanIdentical(chB, dir);
          length += chA.length + 1;
        }
      }
      static from(children2, length = children2.reduce((l2, ch3) => l2 + ch3.length + 1, -1)) {
        let lines = 0;
        for (let ch3 of children2)
          lines += ch3.lines;
        if (lines < 32) {
          let flat = [];
          for (let ch3 of children2)
            ch3.flatten(flat);
          return new TextLeaf(flat, length);
        }
        let chunk = Math.max(
          32,
          lines >> 5
          /* Tree.BranchShift */
        ), maxChunk = chunk << 1, minChunk = chunk >> 1;
        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
        function add2(child) {
          let last;
          if (child.lines > maxChunk && child instanceof TextNode) {
            for (let node of child.children)
              add2(node);
          } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
            flush();
            chunked.push(child);
          } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32) {
            currentLines += child.lines;
            currentLen += child.length + 1;
            currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
          } else {
            if (currentLines + child.lines > chunk)
              flush();
            currentLines += child.lines;
            currentLen += child.length + 1;
            currentChunk.push(child);
          }
        }
        function flush() {
          if (currentLines == 0)
            return;
          chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
          currentLen = -1;
          currentLines = currentChunk.length = 0;
        }
        for (let child of children2)
          add2(child);
        flush();
        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
      }
    }
    Text.empty = /* @__PURE__ */ new TextLeaf([""], 0);
    function textLength(text2) {
      let length = -1;
      for (let line2 of text2)
        length += line2.length + 1;
      return length;
    }
    function appendText(text2, target, from = 0, to = 1e9) {
      for (let pos2 = 0, i2 = 0, first = true; i2 < text2.length && pos2 <= to; i2++) {
        let line2 = text2[i2], end2 = pos2 + line2.length;
        if (end2 >= from) {
          if (end2 > to)
            line2 = line2.slice(0, to - pos2);
          if (pos2 < from)
            line2 = line2.slice(from - pos2);
          if (first) {
            target[target.length - 1] += line2;
            first = false;
          } else
            target.push(line2);
        }
        pos2 = end2 + 1;
      }
      return target;
    }
    function sliceText(text2, from, to) {
      return appendText(text2, [""], from, to);
    }
    class RawTextCursor {
      constructor(text2, dir = 1) {
        this.dir = dir;
        this.done = false;
        this.lineBreak = false;
        this.value = "";
        this.nodes = [text2];
        this.offsets = [dir > 0 ? 1 : (text2 instanceof TextLeaf ? text2.text.length : text2.children.length) << 1];
      }
      nextInner(skip, dir) {
        this.done = this.lineBreak = false;
        for (; ; ) {
          let last = this.nodes.length - 1;
          let top2 = this.nodes[last], offsetValue = this.offsets[last], offset2 = offsetValue >> 1;
          let size = top2 instanceof TextLeaf ? top2.text.length : top2.children.length;
          if (offset2 == (dir > 0 ? size : 0)) {
            if (last == 0) {
              this.done = true;
              this.value = "";
              return this;
            }
            if (dir > 0)
              this.offsets[last - 1]++;
            this.nodes.pop();
            this.offsets.pop();
          } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
            this.offsets[last] += dir;
            if (skip == 0) {
              this.lineBreak = true;
              this.value = "\n";
              return this;
            }
            skip--;
          } else if (top2 instanceof TextLeaf) {
            let next = top2.text[offset2 + (dir < 0 ? -1 : 0)];
            this.offsets[last] += dir;
            if (next.length > Math.max(0, skip)) {
              this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
              return this;
            }
            skip -= next.length;
          } else {
            let next = top2.children[offset2 + (dir < 0 ? -1 : 0)];
            if (skip > next.length) {
              skip -= next.length;
              this.offsets[last] += dir;
            } else {
              if (dir < 0)
                this.offsets[last]--;
              this.nodes.push(next);
              this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
            }
          }
        }
      }
      next(skip = 0) {
        if (skip < 0) {
          this.nextInner(-skip, -this.dir);
          skip = this.value.length;
        }
        return this.nextInner(skip, this.dir);
      }
    }
    class PartialTextCursor {
      constructor(text2, start2, end2) {
        this.value = "";
        this.done = false;
        this.cursor = new RawTextCursor(text2, start2 > end2 ? -1 : 1);
        this.pos = start2 > end2 ? text2.length : 0;
        this.from = Math.min(start2, end2);
        this.to = Math.max(start2, end2);
      }
      nextInner(skip, dir) {
        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
          this.value = "";
          this.done = true;
          return this;
        }
        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
        if (skip > limit)
          skip = limit;
        limit -= skip;
        let { value } = this.cursor.next(skip);
        this.pos += (value.length + skip) * dir;
        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
        this.done = !this.value;
        return this;
      }
      next(skip = 0) {
        if (skip < 0)
          skip = Math.max(skip, this.from - this.pos);
        else if (skip > 0)
          skip = Math.min(skip, this.to - this.pos);
        return this.nextInner(skip, this.cursor.dir);
      }
      get lineBreak() {
        return this.cursor.lineBreak && this.value != "";
      }
    }
    class LineCursor {
      constructor(inner) {
        this.inner = inner;
        this.afterBreak = true;
        this.value = "";
        this.done = false;
      }
      next(skip = 0) {
        let { done, lineBreak, value } = this.inner.next(skip);
        if (done && this.afterBreak) {
          this.value = "";
          this.afterBreak = false;
        } else if (done) {
          this.done = true;
          this.value = "";
        } else if (lineBreak) {
          if (this.afterBreak) {
            this.value = "";
          } else {
            this.afterBreak = true;
            this.next();
          }
        } else {
          this.value = value;
          this.afterBreak = false;
        }
        return this;
      }
      get lineBreak() {
        return false;
      }
    }
    if (typeof Symbol != "undefined") {
      Text.prototype[Symbol.iterator] = function() {
        return this.iter();
      };
      RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] = LineCursor.prototype[Symbol.iterator] = function() {
        return this;
      };
    }
    class Line {
      /**
      @internal
      */
      constructor(from, to, number2, text2) {
        this.from = from;
        this.to = to;
        this.number = number2;
        this.text = text2;
      }
      /**
      The length of the line (not including any line break after it).
      */
      get length() {
        return this.to - this.from;
      }
    }
    function clip(text2, from, to) {
      from = Math.max(0, Math.min(text2.length, from));
      return [from, Math.max(from, Math.min(text2.length, to))];
    }
    let extend = /* @__PURE__ */ "lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map((s2) => s2 ? parseInt(s2, 36) : 1);
    for (let i2 = 1; i2 < extend.length; i2++)
      extend[i2] += extend[i2 - 1];
    function isExtendingChar(code2) {
      for (let i2 = 1; i2 < extend.length; i2 += 2)
        if (extend[i2] > code2)
          return extend[i2 - 1] <= code2;
      return false;
    }
    function isRegionalIndicator(code2) {
      return code2 >= 127462 && code2 <= 127487;
    }
    const ZWJ = 8205;
    function findClusterBreak(str2, pos2, forward = true, includeExtending = true) {
      return (forward ? nextClusterBreak : prevClusterBreak)(str2, pos2, includeExtending);
    }
    function nextClusterBreak(str2, pos2, includeExtending) {
      if (pos2 == str2.length)
        return pos2;
      if (pos2 && surrogateLow(str2.charCodeAt(pos2)) && surrogateHigh(str2.charCodeAt(pos2 - 1)))
        pos2--;
      let prev = codePointAt(str2, pos2);
      pos2 += codePointSize(prev);
      while (pos2 < str2.length) {
        let next = codePointAt(str2, pos2);
        if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
          pos2 += codePointSize(next);
          prev = next;
        } else if (isRegionalIndicator(next)) {
          let countBefore = 0, i2 = pos2 - 2;
          while (i2 >= 0 && isRegionalIndicator(codePointAt(str2, i2))) {
            countBefore++;
            i2 -= 2;
          }
          if (countBefore % 2 == 0)
            break;
          else
            pos2 += 2;
        } else {
          break;
        }
      }
      return pos2;
    }
    function prevClusterBreak(str2, pos2, includeExtending) {
      while (pos2 > 0) {
        let found = nextClusterBreak(str2, pos2 - 2, includeExtending);
        if (found < pos2)
          return found;
        pos2--;
      }
      return 0;
    }
    function surrogateLow(ch3) {
      return ch3 >= 56320 && ch3 < 57344;
    }
    function surrogateHigh(ch3) {
      return ch3 >= 55296 && ch3 < 56320;
    }
    function codePointAt(str2, pos2) {
      let code0 = str2.charCodeAt(pos2);
      if (!surrogateHigh(code0) || pos2 + 1 == str2.length)
        return code0;
      let code1 = str2.charCodeAt(pos2 + 1);
      if (!surrogateLow(code1))
        return code0;
      return (code0 - 55296 << 10) + (code1 - 56320) + 65536;
    }
    function fromCodePoint(code2) {
      if (code2 <= 65535)
        return String.fromCharCode(code2);
      code2 -= 65536;
      return String.fromCharCode((code2 >> 10) + 55296, (code2 & 1023) + 56320);
    }
    function codePointSize(code2) {
      return code2 < 65536 ? 1 : 2;
    }
    const DefaultSplit = /\r\n?|\n/;
    var MapMode = /* @__PURE__ */ function(MapMode2) {
      MapMode2[MapMode2["Simple"] = 0] = "Simple";
      MapMode2[MapMode2["TrackDel"] = 1] = "TrackDel";
      MapMode2[MapMode2["TrackBefore"] = 2] = "TrackBefore";
      MapMode2[MapMode2["TrackAfter"] = 3] = "TrackAfter";
      return MapMode2;
    }(MapMode || (MapMode = {}));
    class ChangeDesc {
      // Sections are encoded as pairs of integers. The first is the
      // length in the current document, and the second is -1 for
      // unaffected sections, and the length of the replacement content
      // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
      // 0), and a replacement two positive numbers.
      /**
      @internal
      */
      constructor(sections) {
        this.sections = sections;
      }
      /**
      The length of the document before the change.
      */
      get length() {
        let result = 0;
        for (let i2 = 0; i2 < this.sections.length; i2 += 2)
          result += this.sections[i2];
        return result;
      }
      /**
      The length of the document after the change.
      */
      get newLength() {
        let result = 0;
        for (let i2 = 0; i2 < this.sections.length; i2 += 2) {
          let ins = this.sections[i2 + 1];
          result += ins < 0 ? this.sections[i2] : ins;
        }
        return result;
      }
      /**
      False when there are actual changes in this set.
      */
      get empty() {
        return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
      }
      /**
      Iterate over the unchanged parts left by these changes. `posA`
      provides the position of the range in the old document, `posB`
      the new position in the changed document.
      */
      iterGaps(f2) {
        for (let i2 = 0, posA = 0, posB = 0; i2 < this.sections.length; ) {
          let len = this.sections[i2++], ins = this.sections[i2++];
          if (ins < 0) {
            f2(posA, posB, len);
            posB += len;
          } else {
            posB += ins;
          }
          posA += len;
        }
      }
      /**
      Iterate over the ranges changed by these changes. (See
      [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
      variant that also provides you with the inserted text.)
      `fromA`/`toA` provides the extent of the change in the starting
      document, `fromB`/`toB` the extent of the replacement in the
      changed document.
      
      When `individual` is true, adjacent changes (which are kept
      separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
      reported separately.
      */
      iterChangedRanges(f2, individual = false) {
        iterChanges(this, f2, individual);
      }
      /**
      Get a description of the inverted form of these changes.
      */
      get invertedDesc() {
        let sections = [];
        for (let i2 = 0; i2 < this.sections.length; ) {
          let len = this.sections[i2++], ins = this.sections[i2++];
          if (ins < 0)
            sections.push(len, ins);
          else
            sections.push(ins, len);
        }
        return new ChangeDesc(sections);
      }
      /**
      Compute the combined effect of applying another set of changes
      after this one. The length of the document after this set should
      match the length before `other`.
      */
      composeDesc(other) {
        return this.empty ? other : other.empty ? this : composeSets(this, other);
      }
      /**
      Map this description, which should start with the same document
      as `other`, over another set of changes, so that it can be
      applied after it. When `before` is true, map as if the changes
      in `other` happened before the ones in `this`.
      */
      mapDesc(other, before = false) {
        return other.empty ? this : mapSet(this, other, before);
      }
      mapPos(pos2, assoc = -1, mode = MapMode.Simple) {
        let posA = 0, posB = 0;
        for (let i2 = 0; i2 < this.sections.length; ) {
          let len = this.sections[i2++], ins = this.sections[i2++], endA = posA + len;
          if (ins < 0) {
            if (endA > pos2)
              return posB + (pos2 - posA);
            posB += len;
          } else {
            if (mode != MapMode.Simple && endA >= pos2 && (mode == MapMode.TrackDel && posA < pos2 && endA > pos2 || mode == MapMode.TrackBefore && posA < pos2 || mode == MapMode.TrackAfter && endA > pos2))
              return null;
            if (endA > pos2 || endA == pos2 && assoc < 0 && !len)
              return pos2 == posA || assoc < 0 ? posB : posB + ins;
            posB += ins;
          }
          posA = endA;
        }
        if (pos2 > posA)
          throw new RangeError(`Position ${pos2} is out of range for changeset of length ${posA}`);
        return posB;
      }
      /**
      Check whether these changes touch a given range. When one of the
      changes entirely covers the range, the string `"cover"` is
      returned.
      */
      touchesRange(from, to = from) {
        for (let i2 = 0, pos2 = 0; i2 < this.sections.length && pos2 <= to; ) {
          let len = this.sections[i2++], ins = this.sections[i2++], end2 = pos2 + len;
          if (ins >= 0 && pos2 <= to && end2 >= from)
            return pos2 < from && end2 > to ? "cover" : true;
          pos2 = end2;
        }
        return false;
      }
      /**
      @internal
      */
      toString() {
        let result = "";
        for (let i2 = 0; i2 < this.sections.length; ) {
          let len = this.sections[i2++], ins = this.sections[i2++];
          result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
        }
        return result;
      }
      /**
      Serialize this change desc to a JSON-representable value.
      */
      toJSON() {
        return this.sections;
      }
      /**
      Create a change desc from its JSON representation (as produced
      by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
      */
      static fromJSON(json) {
        if (!Array.isArray(json) || json.length % 2 || json.some((a2) => typeof a2 != "number"))
          throw new RangeError("Invalid JSON representation of ChangeDesc");
        return new ChangeDesc(json);
      }
      /**
      @internal
      */
      static create(sections) {
        return new ChangeDesc(sections);
      }
    }
    class ChangeSet extends ChangeDesc {
      constructor(sections, inserted) {
        super(sections);
        this.inserted = inserted;
      }
      /**
      Apply the changes to a document, returning the modified
      document.
      */
      apply(doc2) {
        if (this.length != doc2.length)
          throw new RangeError("Applying change set to a document with the wrong length");
        iterChanges(this, (fromA, toA, fromB, _toB, text2) => doc2 = doc2.replace(fromB, fromB + (toA - fromA), text2), false);
        return doc2;
      }
      mapDesc(other, before = false) {
        return mapSet(this, other, before, true);
      }
      /**
      Given the document as it existed _before_ the changes, return a
      change set that represents the inverse of this set, which could
      be used to go from the document created by the changes back to
      the document as it existed before the changes.
      */
      invert(doc2) {
        let sections = this.sections.slice(), inserted = [];
        for (let i2 = 0, pos2 = 0; i2 < sections.length; i2 += 2) {
          let len = sections[i2], ins = sections[i2 + 1];
          if (ins >= 0) {
            sections[i2] = ins;
            sections[i2 + 1] = len;
            let index = i2 >> 1;
            while (inserted.length < index)
              inserted.push(Text.empty);
            inserted.push(len ? doc2.slice(pos2, pos2 + len) : Text.empty);
          }
          pos2 += len;
        }
        return new ChangeSet(sections, inserted);
      }
      /**
      Combine two subsequent change sets into a single set. `other`
      must start in the document produced by `this`. If `this` goes
      `docA` → `docB` and `other` represents `docB` → `docC`, the
      returned value will represent the change `docA` → `docC`.
      */
      compose(other) {
        return this.empty ? other : other.empty ? this : composeSets(this, other, true);
      }
      /**
      Given another change set starting in the same document, maps this
      change set over the other, producing a new change set that can be
      applied to the document produced by applying `other`. When
      `before` is `true`, order changes as if `this` comes before
      `other`, otherwise (the default) treat `other` as coming first.
      
      Given two changes `A` and `B`, `A.compose(B.map(A))` and
      `B.compose(A.map(B, true))` will produce the same document. This
      provides a basic form of [operational
      transformation](https://en.wikipedia.org/wiki/Operational_transformation),
      and can be used for collaborative editing.
      */
      map(other, before = false) {
        return other.empty ? this : mapSet(this, other, before, true);
      }
      /**
      Iterate over the changed ranges in the document, calling `f` for
      each, with the range in the original document (`fromA`-`toA`)
      and the range that replaces it in the new document
      (`fromB`-`toB`).
      
      When `individual` is true, adjacent changes are reported
      separately.
      */
      iterChanges(f2, individual = false) {
        iterChanges(this, f2, individual);
      }
      /**
      Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
      set.
      */
      get desc() {
        return ChangeDesc.create(this.sections);
      }
      /**
      @internal
      */
      filter(ranges) {
        let resultSections = [], resultInserted = [], filteredSections = [];
        let iter = new SectionIter(this);
        done: for (let i2 = 0, pos2 = 0; ; ) {
          let next = i2 == ranges.length ? 1e9 : ranges[i2++];
          while (pos2 < next || pos2 == next && iter.len == 0) {
            if (iter.done)
              break done;
            let len = Math.min(iter.len, next - pos2);
            addSection(filteredSections, len, -1);
            let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
            addSection(resultSections, len, ins);
            if (ins > 0)
              addInsert(resultInserted, resultSections, iter.text);
            iter.forward(len);
            pos2 += len;
          }
          let end2 = ranges[i2++];
          while (pos2 < end2) {
            if (iter.done)
              break done;
            let len = Math.min(iter.len, end2 - pos2);
            addSection(resultSections, len, -1);
            addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
            iter.forward(len);
            pos2 += len;
          }
        }
        return {
          changes: new ChangeSet(resultSections, resultInserted),
          filtered: ChangeDesc.create(filteredSections)
        };
      }
      /**
      Serialize this change set to a JSON-representable value.
      */
      toJSON() {
        let parts = [];
        for (let i2 = 0; i2 < this.sections.length; i2 += 2) {
          let len = this.sections[i2], ins = this.sections[i2 + 1];
          if (ins < 0)
            parts.push(len);
          else if (ins == 0)
            parts.push([len]);
          else
            parts.push([len].concat(this.inserted[i2 >> 1].toJSON()));
        }
        return parts;
      }
      /**
      Create a change set for the given changes, for a document of the
      given length, using `lineSep` as line separator.
      */
      static of(changes, length, lineSep) {
        let sections = [], inserted = [], pos2 = 0;
        let total = null;
        function flush(force = false) {
          if (!force && !sections.length)
            return;
          if (pos2 < length)
            addSection(sections, length - pos2, -1);
          let set = new ChangeSet(sections, inserted);
          total = total ? total.compose(set.map(total)) : set;
          sections = [];
          inserted = [];
          pos2 = 0;
        }
        function process(spec) {
          if (Array.isArray(spec)) {
            for (let sub of spec)
              process(sub);
          } else if (spec instanceof ChangeSet) {
            if (spec.length != length)
              throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
            flush();
            total = total ? total.compose(spec.map(total)) : spec;
          } else {
            let { from, to = from, insert: insert2 } = spec;
            if (from > to || from < 0 || to > length)
              throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
            let insText = !insert2 ? Text.empty : typeof insert2 == "string" ? Text.of(insert2.split(lineSep || DefaultSplit)) : insert2;
            let insLen = insText.length;
            if (from == to && insLen == 0)
              return;
            if (from < pos2)
              flush();
            if (from > pos2)
              addSection(sections, from - pos2, -1);
            addSection(sections, to - from, insLen);
            addInsert(inserted, sections, insText);
            pos2 = to;
          }
        }
        process(changes);
        flush(!total);
        return total;
      }
      /**
      Create an empty changeset of the given length.
      */
      static empty(length) {
        return new ChangeSet(length ? [length, -1] : [], []);
      }
      /**
      Create a changeset from its JSON representation (as produced by
      [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
      */
      static fromJSON(json) {
        if (!Array.isArray(json))
          throw new RangeError("Invalid JSON representation of ChangeSet");
        let sections = [], inserted = [];
        for (let i2 = 0; i2 < json.length; i2++) {
          let part = json[i2];
          if (typeof part == "number") {
            sections.push(part, -1);
          } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e2, i3) => i3 && typeof e2 != "string")) {
            throw new RangeError("Invalid JSON representation of ChangeSet");
          } else if (part.length == 1) {
            sections.push(part[0], 0);
          } else {
            while (inserted.length < i2)
              inserted.push(Text.empty);
            inserted[i2] = Text.of(part.slice(1));
            sections.push(part[0], inserted[i2].length);
          }
        }
        return new ChangeSet(sections, inserted);
      }
      /**
      @internal
      */
      static createSet(sections, inserted) {
        return new ChangeSet(sections, inserted);
      }
    }
    function addSection(sections, len, ins, forceJoin = false) {
      if (len == 0 && ins <= 0)
        return;
      let last = sections.length - 2;
      if (last >= 0 && ins <= 0 && ins == sections[last + 1])
        sections[last] += len;
      else if (len == 0 && sections[last] == 0)
        sections[last + 1] += ins;
      else if (forceJoin) {
        sections[last] += len;
        sections[last + 1] += ins;
      } else
        sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
      if (value.length == 0)
        return;
      let index = sections.length - 2 >> 1;
      if (index < values.length) {
        values[values.length - 1] = values[values.length - 1].append(value);
      } else {
        while (values.length < index)
          values.push(Text.empty);
        values.push(value);
      }
    }
    function iterChanges(desc, f2, individual) {
      let inserted = desc.inserted;
      for (let posA = 0, posB = 0, i2 = 0; i2 < desc.sections.length; ) {
        let len = desc.sections[i2++], ins = desc.sections[i2++];
        if (ins < 0) {
          posA += len;
          posB += len;
        } else {
          let endA = posA, endB = posB, text2 = Text.empty;
          for (; ; ) {
            endA += len;
            endB += ins;
            if (ins && inserted)
              text2 = text2.append(inserted[i2 - 2 >> 1]);
            if (individual || i2 == desc.sections.length || desc.sections[i2 + 1] < 0)
              break;
            len = desc.sections[i2++];
            ins = desc.sections[i2++];
          }
          f2(posA, endA, posB, endB, text2);
          posA = endA;
          posB = endB;
        }
      }
    }
    function mapSet(setA, setB, before, mkSet = false) {
      let sections = [], insert2 = mkSet ? [] : null;
      let a2 = new SectionIter(setA), b = new SectionIter(setB);
      for (let inserted = -1; ; ) {
        if (a2.ins == -1 && b.ins == -1) {
          let len = Math.min(a2.len, b.len);
          addSection(sections, len, -1);
          a2.forward(len);
          b.forward(len);
        } else if (b.ins >= 0 && (a2.ins < 0 || inserted == a2.i || a2.off == 0 && (b.len < a2.len || b.len == a2.len && !before))) {
          let len = b.len;
          addSection(sections, b.ins, -1);
          while (len) {
            let piece = Math.min(a2.len, len);
            if (a2.ins >= 0 && inserted < a2.i && a2.len <= piece) {
              addSection(sections, 0, a2.ins);
              if (insert2)
                addInsert(insert2, sections, a2.text);
              inserted = a2.i;
            }
            a2.forward(piece);
            len -= piece;
          }
          b.next();
        } else if (a2.ins >= 0) {
          let len = 0, left2 = a2.len;
          while (left2) {
            if (b.ins == -1) {
              let piece = Math.min(left2, b.len);
              len += piece;
              left2 -= piece;
              b.forward(piece);
            } else if (b.ins == 0 && b.len < left2) {
              left2 -= b.len;
              b.next();
            } else {
              break;
            }
          }
          addSection(sections, len, inserted < a2.i ? a2.ins : 0);
          if (insert2 && inserted < a2.i)
            addInsert(insert2, sections, a2.text);
          inserted = a2.i;
          a2.forward(a2.len - left2);
        } else if (a2.done && b.done) {
          return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
        } else {
          throw new Error("Mismatched change set lengths");
        }
      }
    }
    function composeSets(setA, setB, mkSet = false) {
      let sections = [];
      let insert2 = mkSet ? [] : null;
      let a2 = new SectionIter(setA), b = new SectionIter(setB);
      for (let open = false; ; ) {
        if (a2.done && b.done) {
          return insert2 ? ChangeSet.createSet(sections, insert2) : ChangeDesc.create(sections);
        } else if (a2.ins == 0) {
          addSection(sections, a2.len, 0, open);
          a2.next();
        } else if (b.len == 0 && !b.done) {
          addSection(sections, 0, b.ins, open);
          if (insert2)
            addInsert(insert2, sections, b.text);
          b.next();
        } else if (a2.done || b.done) {
          throw new Error("Mismatched change set lengths");
        } else {
          let len = Math.min(a2.len2, b.len), sectionLen = sections.length;
          if (a2.ins == -1) {
            let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
            addSection(sections, len, insB, open);
            if (insert2 && insB)
              addInsert(insert2, sections, b.text);
          } else if (b.ins == -1) {
            addSection(sections, a2.off ? 0 : a2.len, len, open);
            if (insert2)
              addInsert(insert2, sections, a2.textBit(len));
          } else {
            addSection(sections, a2.off ? 0 : a2.len, b.off ? 0 : b.ins, open);
            if (insert2 && !b.off)
              addInsert(insert2, sections, b.text);
          }
          open = (a2.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
          a2.forward2(len);
          b.forward(len);
        }
      }
    }
    class SectionIter {
      constructor(set) {
        this.set = set;
        this.i = 0;
        this.next();
      }
      next() {
        let { sections } = this.set;
        if (this.i < sections.length) {
          this.len = sections[this.i++];
          this.ins = sections[this.i++];
        } else {
          this.len = 0;
          this.ins = -2;
        }
        this.off = 0;
      }
      get done() {
        return this.ins == -2;
      }
      get len2() {
        return this.ins < 0 ? this.len : this.ins;
      }
      get text() {
        let { inserted } = this.set, index = this.i - 2 >> 1;
        return index >= inserted.length ? Text.empty : inserted[index];
      }
      textBit(len) {
        let { inserted } = this.set, index = this.i - 2 >> 1;
        return index >= inserted.length && !len ? Text.empty : inserted[index].slice(this.off, len == null ? void 0 : this.off + len);
      }
      forward(len) {
        if (len == this.len)
          this.next();
        else {
          this.len -= len;
          this.off += len;
        }
      }
      forward2(len) {
        if (this.ins == -1)
          this.forward(len);
        else if (len == this.ins)
          this.next();
        else {
          this.ins -= len;
          this.off += len;
        }
      }
    }
    class SelectionRange {
      constructor(from, to, flags) {
        this.from = from;
        this.to = to;
        this.flags = flags;
      }
      /**
      The anchor of the range—the side that doesn't move when you
      extend it.
      */
      get anchor() {
        return this.flags & 32 ? this.to : this.from;
      }
      /**
      The head of the range, which is moved when the range is
      [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
      */
      get head() {
        return this.flags & 32 ? this.from : this.to;
      }
      /**
      True when `anchor` and `head` are at the same position.
      */
      get empty() {
        return this.from == this.to;
      }
      /**
      If this is a cursor that is explicitly associated with the
      character on one of its sides, this returns the side. -1 means
      the character before its position, 1 the character after, and 0
      means no association.
      */
      get assoc() {
        return this.flags & 8 ? -1 : this.flags & 16 ? 1 : 0;
      }
      /**
      The bidirectional text level associated with this cursor, if
      any.
      */
      get bidiLevel() {
        let level = this.flags & 7;
        return level == 7 ? null : level;
      }
      /**
      The goal column (stored vertical offset) associated with a
      cursor. This is used to preserve the vertical position when
      [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
      lines of different length.
      */
      get goalColumn() {
        let value = this.flags >> 6;
        return value == 16777215 ? void 0 : value;
      }
      /**
      Map this range through a change, producing a valid range in the
      updated document.
      */
      map(change, assoc = -1) {
        let from, to;
        if (this.empty) {
          from = to = change.mapPos(this.from, assoc);
        } else {
          from = change.mapPos(this.from, 1);
          to = change.mapPos(this.to, -1);
        }
        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
      }
      /**
      Extend this range to cover at least `from` to `to`.
      */
      extend(from, to = from) {
        if (from <= this.anchor && to >= this.anchor)
          return EditorSelection.range(from, to);
        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
        return EditorSelection.range(this.anchor, head);
      }
      /**
      Compare this range to another range.
      */
      eq(other, includeAssoc = false) {
        return this.anchor == other.anchor && this.head == other.head && (!includeAssoc || !this.empty || this.assoc == other.assoc);
      }
      /**
      Return a JSON-serializable object representing the range.
      */
      toJSON() {
        return { anchor: this.anchor, head: this.head };
      }
      /**
      Convert a JSON representation of a range to a `SelectionRange`
      instance.
      */
      static fromJSON(json) {
        if (!json || typeof json.anchor != "number" || typeof json.head != "number")
          throw new RangeError("Invalid JSON representation for SelectionRange");
        return EditorSelection.range(json.anchor, json.head);
      }
      /**
      @internal
      */
      static create(from, to, flags) {
        return new SelectionRange(from, to, flags);
      }
    }
    class EditorSelection {
      constructor(ranges, mainIndex) {
        this.ranges = ranges;
        this.mainIndex = mainIndex;
      }
      /**
      Map a selection through a change. Used to adjust the selection
      position for changes.
      */
      map(change, assoc = -1) {
        if (change.empty)
          return this;
        return EditorSelection.create(this.ranges.map((r2) => r2.map(change, assoc)), this.mainIndex);
      }
      /**
      Compare this selection to another selection. By default, ranges
      are compared only by position. When `includeAssoc` is true,
      cursor ranges must also have the same
      [`assoc`](https://codemirror.net/6/docs/ref/#state.SelectionRange.assoc) value.
      */
      eq(other, includeAssoc = false) {
        if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex)
          return false;
        for (let i2 = 0; i2 < this.ranges.length; i2++)
          if (!this.ranges[i2].eq(other.ranges[i2], includeAssoc))
            return false;
        return true;
      }
      /**
      Get the primary selection range. Usually, you should make sure
      your code applies to _all_ ranges, by using methods like
      [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
      */
      get main() {
        return this.ranges[this.mainIndex];
      }
      /**
      Make sure the selection only has one range. Returns a selection
      holding only the main range from this selection.
      */
      asSingle() {
        return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
      }
      /**
      Extend this selection with an extra range.
      */
      addRange(range, main2 = true) {
        return EditorSelection.create([range].concat(this.ranges), main2 ? 0 : this.mainIndex + 1);
      }
      /**
      Replace a given range with another range, and then normalize the
      selection to merge and sort ranges if necessary.
      */
      replaceRange(range, which = this.mainIndex) {
        let ranges = this.ranges.slice();
        ranges[which] = range;
        return EditorSelection.create(ranges, this.mainIndex);
      }
      /**
      Convert this selection to an object that can be serialized to
      JSON.
      */
      toJSON() {
        return { ranges: this.ranges.map((r2) => r2.toJSON()), main: this.mainIndex };
      }
      /**
      Create a selection from a JSON representation.
      */
      static fromJSON(json) {
        if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
          throw new RangeError("Invalid JSON representation for EditorSelection");
        return new EditorSelection(json.ranges.map((r2) => SelectionRange.fromJSON(r2)), json.main);
      }
      /**
      Create a selection holding a single range.
      */
      static single(anchor, head = anchor) {
        return new EditorSelection([EditorSelection.range(anchor, head)], 0);
      }
      /**
      Sort and merge the given set of ranges, creating a valid
      selection.
      */
      static create(ranges, mainIndex = 0) {
        if (ranges.length == 0)
          throw new RangeError("A selection needs at least one range");
        for (let pos2 = 0, i2 = 0; i2 < ranges.length; i2++) {
          let range = ranges[i2];
          if (range.empty ? range.from <= pos2 : range.from < pos2)
            return EditorSelection.normalized(ranges.slice(), mainIndex);
          pos2 = range.to;
        }
        return new EditorSelection(ranges, mainIndex);
      }
      /**
      Create a cursor selection range at the given position. You can
      safely ignore the optional arguments in most situations.
      */
      static cursor(pos2, assoc = 0, bidiLevel, goalColumn) {
        return SelectionRange.create(pos2, pos2, (assoc == 0 ? 0 : assoc < 0 ? 8 : 16) | (bidiLevel == null ? 7 : Math.min(6, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6);
      }
      /**
      Create a selection range.
      */
      static range(anchor, head, goalColumn, bidiLevel) {
        let flags = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 16777215) << 6 | (bidiLevel == null ? 7 : Math.min(6, bidiLevel));
        return head < anchor ? SelectionRange.create(head, anchor, 32 | 16 | flags) : SelectionRange.create(anchor, head, (head > anchor ? 8 : 0) | flags);
      }
      /**
      @internal
      */
      static normalized(ranges, mainIndex = 0) {
        let main2 = ranges[mainIndex];
        ranges.sort((a2, b) => a2.from - b.from);
        mainIndex = ranges.indexOf(main2);
        for (let i2 = 1; i2 < ranges.length; i2++) {
          let range = ranges[i2], prev = ranges[i2 - 1];
          if (range.empty ? range.from <= prev.to : range.from < prev.to) {
            let from = prev.from, to = Math.max(range.to, prev.to);
            if (i2 <= mainIndex)
              mainIndex--;
            ranges.splice(--i2, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
          }
        }
        return new EditorSelection(ranges, mainIndex);
      }
    }
    function checkSelection(selection, docLength) {
      for (let range of selection.ranges)
        if (range.to > docLength)
          throw new RangeError("Selection points outside of document");
    }
    let nextID = 0;
    class Facet {
      constructor(combine, compareInput, compare2, isStatic, enables) {
        this.combine = combine;
        this.compareInput = compareInput;
        this.compare = compare2;
        this.isStatic = isStatic;
        this.id = nextID++;
        this.default = combine([]);
        this.extensions = typeof enables == "function" ? enables(this) : enables;
      }
      /**
      Returns a facet reader for this facet, which can be used to
      [read](https://codemirror.net/6/docs/ref/#state.EditorState.facet) it but not to define values for it.
      */
      get reader() {
        return this;
      }
      /**
      Define a new facet.
      */
      static define(config2 = {}) {
        return new Facet(config2.combine || ((a2) => a2), config2.compareInput || ((a2, b) => a2 === b), config2.compare || (!config2.combine ? sameArray$1 : (a2, b) => a2 === b), !!config2.static, config2.enables);
      }
      /**
      Returns an extension that adds the given value to this facet.
      */
      of(value) {
        return new FacetProvider([], this, 0, value);
      }
      /**
      Create an extension that computes a value for the facet from a
      state. You must take care to declare the parts of the state that
      this value depends on, since your function is only called again
      for a new state when one of those parts changed.
      
      In cases where your value depends only on a single field, you'll
      want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
      */
      compute(deps, get2) {
        if (this.isStatic)
          throw new Error("Can't compute a static facet");
        return new FacetProvider(deps, this, 1, get2);
      }
      /**
      Create an extension that computes zero or more values for this
      facet from a state.
      */
      computeN(deps, get2) {
        if (this.isStatic)
          throw new Error("Can't compute a static facet");
        return new FacetProvider(deps, this, 2, get2);
      }
      from(field, get2) {
        if (!get2)
          get2 = (x2) => x2;
        return this.compute([field], (state) => get2(state.field(field)));
      }
    }
    function sameArray$1(a2, b) {
      return a2 == b || a2.length == b.length && a2.every((e2, i2) => e2 === b[i2]);
    }
    class FacetProvider {
      constructor(dependencies, facet, type, value) {
        this.dependencies = dependencies;
        this.facet = facet;
        this.type = type;
        this.value = value;
        this.id = nextID++;
      }
      dynamicSlot(addresses) {
        var _a2;
        let getter = this.value;
        let compare2 = this.facet.compareInput;
        let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2;
        let depDoc = false, depSel = false, depAddrs = [];
        for (let dep of this.dependencies) {
          if (dep == "doc")
            depDoc = true;
          else if (dep == "selection")
            depSel = true;
          else if ((((_a2 = addresses[dep.id]) !== null && _a2 !== void 0 ? _a2 : 1) & 1) == 0)
            depAddrs.push(addresses[dep.id]);
        }
        return {
          create(state) {
            state.values[idx] = getter(state);
            return 1;
          },
          update(state, tr) {
            if (depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || ensureAll(state, depAddrs)) {
              let newVal = getter(state);
              if (multi ? !compareArray(newVal, state.values[idx], compare2) : !compare2(newVal, state.values[idx])) {
                state.values[idx] = newVal;
                return 1;
              }
            }
            return 0;
          },
          reconfigure: (state, oldState) => {
            let newVal, oldAddr = oldState.config.address[id];
            if (oldAddr != null) {
              let oldVal = getAddr(oldState, oldAddr);
              if (this.dependencies.every((dep) => {
                return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) : dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
              }) || (multi ? compareArray(newVal = getter(state), oldVal, compare2) : compare2(newVal = getter(state), oldVal))) {
                state.values[idx] = oldVal;
                return 0;
              }
            } else {
              newVal = getter(state);
            }
            state.values[idx] = newVal;
            return 1;
          }
        };
      }
    }
    function compareArray(a2, b, compare2) {
      if (a2.length != b.length)
        return false;
      for (let i2 = 0; i2 < a2.length; i2++)
        if (!compare2(a2[i2], b[i2]))
          return false;
      return true;
    }
    function ensureAll(state, addrs) {
      let changed = false;
      for (let addr of addrs)
        if (ensureAddr(state, addr) & 1)
          changed = true;
      return changed;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
      let providerAddrs = providers.map((p2) => addresses[p2.id]);
      let providerTypes = providers.map((p2) => p2.type);
      let dynamic = providerAddrs.filter((p2) => !(p2 & 1));
      let idx = addresses[facet.id] >> 1;
      function get2(state) {
        let values = [];
        for (let i2 = 0; i2 < providerAddrs.length; i2++) {
          let value = getAddr(state, providerAddrs[i2]);
          if (providerTypes[i2] == 2)
            for (let val of value)
              values.push(val);
          else
            values.push(value);
        }
        return facet.combine(values);
      }
      return {
        create(state) {
          for (let addr of providerAddrs)
            ensureAddr(state, addr);
          state.values[idx] = get2(state);
          return 1;
        },
        update(state, tr) {
          if (!ensureAll(state, dynamic))
            return 0;
          let value = get2(state);
          if (facet.compare(value, state.values[idx]))
            return 0;
          state.values[idx] = value;
          return 1;
        },
        reconfigure(state, oldState) {
          let depChanged = ensureAll(state, providerAddrs);
          let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
          if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
            state.values[idx] = oldValue;
            return 0;
          }
          let value = get2(state);
          if (facet.compare(value, oldValue)) {
            state.values[idx] = oldValue;
            return 0;
          }
          state.values[idx] = value;
          return 1;
        }
      };
    }
    const initField = /* @__PURE__ */ Facet.define({ static: true });
    class StateField {
      constructor(id, createF, updateF, compareF, spec) {
        this.id = id;
        this.createF = createF;
        this.updateF = updateF;
        this.compareF = compareF;
        this.spec = spec;
        this.provides = void 0;
      }
      /**
      Define a state field.
      */
      static define(config2) {
        let field = new StateField(nextID++, config2.create, config2.update, config2.compare || ((a2, b) => a2 === b), config2);
        if (config2.provide)
          field.provides = config2.provide(field);
        return field;
      }
      create(state) {
        let init = state.facet(initField).find((i2) => i2.field == this);
        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
      }
      /**
      @internal
      */
      slot(addresses) {
        let idx = addresses[this.id] >> 1;
        return {
          create: (state) => {
            state.values[idx] = this.create(state);
            return 1;
          },
          update: (state, tr) => {
            let oldVal = state.values[idx];
            let value = this.updateF(oldVal, tr);
            if (this.compareF(oldVal, value))
              return 0;
            state.values[idx] = value;
            return 1;
          },
          reconfigure: (state, oldState) => {
            if (oldState.config.address[this.id] != null) {
              state.values[idx] = oldState.field(this);
              return 0;
            }
            state.values[idx] = this.create(state);
            return 1;
          }
        };
      }
      /**
      Returns an extension that enables this field and overrides the
      way it is initialized. Can be useful when you need to provide a
      non-default starting value for the field.
      */
      init(create2) {
        return [this, initField.of({ field: this, create: create2 })];
      }
      /**
      State field instances can be used as
      [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
      given state.
      */
      get extension() {
        return this;
      }
    }
    const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    function prec(value) {
      return (ext) => new PrecExtension(ext, value);
    }
    const Prec = {
      /**
      The highest precedence level, for extensions that should end up
      near the start of the precedence ordering.
      */
      highest: /* @__PURE__ */ prec(Prec_.highest),
      /**
      A higher-than-default precedence, for extensions that should
      come before those with default precedence.
      */
      high: /* @__PURE__ */ prec(Prec_.high),
      /**
      The default precedence, which is also used for extensions
      without an explicit precedence.
      */
      default: /* @__PURE__ */ prec(Prec_.default),
      /**
      A lower-than-default precedence.
      */
      low: /* @__PURE__ */ prec(Prec_.low),
      /**
      The lowest precedence level. Meant for things that should end up
      near the end of the extension order.
      */
      lowest: /* @__PURE__ */ prec(Prec_.lowest)
    };
    class PrecExtension {
      constructor(inner, prec2) {
        this.inner = inner;
        this.prec = prec2;
      }
    }
    class Compartment {
      /**
      Create an instance of this compartment to add to your [state
      configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
      */
      of(ext) {
        return new CompartmentInstance(this, ext);
      }
      /**
      Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
      reconfigures this compartment.
      */
      reconfigure(content2) {
        return Compartment.reconfigure.of({ compartment: this, extension: content2 });
      }
      /**
      Get the current content of the compartment in the state, or
      `undefined` if it isn't present.
      */
      get(state) {
        return state.config.compartments.get(this);
      }
    }
    class CompartmentInstance {
      constructor(compartment, inner) {
        this.compartment = compartment;
        this.inner = inner;
      }
    }
    class Configuration {
      constructor(base2, compartments, dynamicSlots, address, staticValues, facets) {
        this.base = base2;
        this.compartments = compartments;
        this.dynamicSlots = dynamicSlots;
        this.address = address;
        this.staticValues = staticValues;
        this.facets = facets;
        this.statusTemplate = [];
        while (this.statusTemplate.length < dynamicSlots.length)
          this.statusTemplate.push(
            0
            /* SlotStatus.Unresolved */
          );
      }
      staticFacet(facet) {
        let addr = this.address[facet.id];
        return addr == null ? facet.default : this.staticValues[addr >> 1];
      }
      static resolve(base2, compartments, oldState) {
        let fields = [];
        let facets = /* @__PURE__ */ Object.create(null);
        let newCompartments = /* @__PURE__ */ new Map();
        for (let ext of flatten$1(base2, compartments, newCompartments)) {
          if (ext instanceof StateField)
            fields.push(ext);
          else
            (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
        }
        let address = /* @__PURE__ */ Object.create(null);
        let staticValues = [];
        let dynamicSlots = [];
        for (let field of fields) {
          address[field.id] = dynamicSlots.length << 1;
          dynamicSlots.push((a2) => field.slot(a2));
        }
        let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
        for (let id in facets) {
          let providers = facets[id], facet = providers[0].facet;
          let oldProviders = oldFacets && oldFacets[id] || [];
          if (providers.every(
            (p2) => p2.type == 0
            /* Provider.Static */
          )) {
            address[facet.id] = staticValues.length << 1 | 1;
            if (sameArray$1(oldProviders, providers)) {
              staticValues.push(oldState.facet(facet));
            } else {
              let value = facet.combine(providers.map((p2) => p2.value));
              staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
            }
          } else {
            for (let p2 of providers) {
              if (p2.type == 0) {
                address[p2.id] = staticValues.length << 1 | 1;
                staticValues.push(p2.value);
              } else {
                address[p2.id] = dynamicSlots.length << 1;
                dynamicSlots.push((a2) => p2.dynamicSlot(a2));
              }
            }
            address[facet.id] = dynamicSlots.length << 1;
            dynamicSlots.push((a2) => dynamicFacetSlot(a2, facet, providers));
          }
        }
        let dynamic = dynamicSlots.map((f2) => f2(address));
        return new Configuration(base2, newCompartments, dynamic, address, staticValues, facets);
      }
    }
    function flatten$1(extension, compartments, newCompartments) {
      let result = [[], [], [], [], []];
      let seen = /* @__PURE__ */ new Map();
      function inner(ext, prec2) {
        let known = seen.get(ext);
        if (known != null) {
          if (known <= prec2)
            return;
          let found = result[known].indexOf(ext);
          if (found > -1)
            result[known].splice(found, 1);
          if (ext instanceof CompartmentInstance)
            newCompartments.delete(ext.compartment);
        }
        seen.set(ext, prec2);
        if (Array.isArray(ext)) {
          for (let e2 of ext)
            inner(e2, prec2);
        } else if (ext instanceof CompartmentInstance) {
          if (newCompartments.has(ext.compartment))
            throw new RangeError(`Duplicate use of compartment in extensions`);
          let content2 = compartments.get(ext.compartment) || ext.inner;
          newCompartments.set(ext.compartment, content2);
          inner(content2, prec2);
        } else if (ext instanceof PrecExtension) {
          inner(ext.inner, ext.prec);
        } else if (ext instanceof StateField) {
          result[prec2].push(ext);
          if (ext.provides)
            inner(ext.provides, prec2);
        } else if (ext instanceof FacetProvider) {
          result[prec2].push(ext);
          if (ext.facet.extensions)
            inner(ext.facet.extensions, Prec_.default);
        } else {
          let content2 = ext.extension;
          if (!content2)
            throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
          inner(content2, prec2);
        }
      }
      inner(extension, Prec_.default);
      return result.reduce((a2, b) => a2.concat(b));
    }
    function ensureAddr(state, addr) {
      if (addr & 1)
        return 2;
      let idx = addr >> 1;
      let status = state.status[idx];
      if (status == 4)
        throw new Error("Cyclic dependency between fields and/or facets");
      if (status & 2)
        return status;
      state.status[idx] = 4;
      let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
      return state.status[idx] = 2 | changed;
    }
    function getAddr(state, addr) {
      return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }
    const languageData = /* @__PURE__ */ Facet.define();
    const allowMultipleSelections = /* @__PURE__ */ Facet.define({
      combine: (values) => values.some((v2) => v2),
      static: true
    });
    const lineSeparator = /* @__PURE__ */ Facet.define({
      combine: (values) => values.length ? values[0] : void 0,
      static: true
    });
    const changeFilter = /* @__PURE__ */ Facet.define();
    const transactionFilter = /* @__PURE__ */ Facet.define();
    const transactionExtender = /* @__PURE__ */ Facet.define();
    const readOnly = /* @__PURE__ */ Facet.define({
      combine: (values) => values.length ? values[0] : false
    });
    class Annotation {
      /**
      @internal
      */
      constructor(type, value) {
        this.type = type;
        this.value = value;
      }
      /**
      Define a new type of annotation.
      */
      static define() {
        return new AnnotationType();
      }
    }
    class AnnotationType {
      /**
      Create an instance of this annotation.
      */
      of(value) {
        return new Annotation(this, value);
      }
    }
    class StateEffectType {
      /**
      @internal
      */
      constructor(map2) {
        this.map = map2;
      }
      /**
      Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
      type.
      */
      of(value) {
        return new StateEffect(this, value);
      }
    }
    class StateEffect {
      /**
      @internal
      */
      constructor(type, value) {
        this.type = type;
        this.value = value;
      }
      /**
      Map this effect through a position mapping. Will return
      `undefined` when that ends up deleting the effect.
      */
      map(mapping) {
        let mapped = this.type.map(this.value, mapping);
        return mapped === void 0 ? void 0 : mapped == this.value ? this : new StateEffect(this.type, mapped);
      }
      /**
      Tells you whether this effect object is of a given
      [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
      */
      is(type) {
        return this.type == type;
      }
      /**
      Define a new effect type. The type parameter indicates the type
      of values that his effect holds. It should be a type that
      doesn't include `undefined`, since that is used in
      [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
      removed.
      */
      static define(spec = {}) {
        return new StateEffectType(spec.map || ((v2) => v2));
      }
      /**
      Map an array of effects through a change set.
      */
      static mapEffects(effects, mapping) {
        if (!effects.length)
          return effects;
        let result = [];
        for (let effect2 of effects) {
          let mapped = effect2.map(mapping);
          if (mapped)
            result.push(mapped);
        }
        return result;
      }
    }
    StateEffect.reconfigure = /* @__PURE__ */ StateEffect.define();
    StateEffect.appendConfig = /* @__PURE__ */ StateEffect.define();
    class Transaction {
      constructor(startState, changes, selection, effects, annotations, scrollIntoView2) {
        this.startState = startState;
        this.changes = changes;
        this.selection = selection;
        this.effects = effects;
        this.annotations = annotations;
        this.scrollIntoView = scrollIntoView2;
        this._doc = null;
        this._state = null;
        if (selection)
          checkSelection(selection, changes.newLength);
        if (!annotations.some((a2) => a2.type == Transaction.time))
          this.annotations = annotations.concat(Transaction.time.of(Date.now()));
      }
      /**
      @internal
      */
      static create(startState, changes, selection, effects, annotations, scrollIntoView2) {
        return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView2);
      }
      /**
      The new document produced by the transaction. Contrary to
      [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
      force the entire new state to be computed right away, so it is
      recommended that [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
      when they need to look at the new document.
      */
      get newDoc() {
        return this._doc || (this._doc = this.changes.apply(this.startState.doc));
      }
      /**
      The new selection produced by the transaction. If
      [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
      this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
      current selection through the changes made by the transaction.
      */
      get newSelection() {
        return this.selection || this.startState.selection.map(this.changes);
      }
      /**
      The new state created by the transaction. Computed on demand
      (but retained for subsequent access), so it is recommended not to
      access it in [transaction
      filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
      */
      get state() {
        if (!this._state)
          this.startState.applyTransaction(this);
        return this._state;
      }
      /**
      Get the value of the given annotation type, if any.
      */
      annotation(type) {
        for (let ann of this.annotations)
          if (ann.type == type)
            return ann.value;
        return void 0;
      }
      /**
      Indicates whether the transaction changed the document.
      */
      get docChanged() {
        return !this.changes.empty;
      }
      /**
      Indicates whether this transaction reconfigures the state
      (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
      with a top-level configuration
      [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
      */
      get reconfigured() {
        return this.startState.config != this.state.config;
      }
      /**
      Returns true if the transaction has a [user
      event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
      or more specific than `event`. For example, if the transaction
      has `"select.pointer"` as user event, `"select"` and
      `"select.pointer"` will match it.
      */
      isUserEvent(event) {
        let e2 = this.annotation(Transaction.userEvent);
        return !!(e2 && (e2 == event || e2.length > event.length && e2.slice(0, event.length) == event && e2[event.length] == "."));
      }
    }
    Transaction.time = /* @__PURE__ */ Annotation.define();
    Transaction.userEvent = /* @__PURE__ */ Annotation.define();
    Transaction.addToHistory = /* @__PURE__ */ Annotation.define();
    Transaction.remote = /* @__PURE__ */ Annotation.define();
    function joinRanges(a2, b) {
      let result = [];
      for (let iA = 0, iB = 0; ; ) {
        let from, to;
        if (iA < a2.length && (iB == b.length || b[iB] >= a2[iA])) {
          from = a2[iA++];
          to = a2[iA++];
        } else if (iB < b.length) {
          from = b[iB++];
          to = b[iB++];
        } else
          return result;
        if (!result.length || result[result.length - 1] < from)
          result.push(from, to);
        else if (result[result.length - 1] < to)
          result[result.length - 1] = to;
      }
    }
    function mergeTransaction(a2, b, sequential) {
      var _a2;
      let mapForA, mapForB, changes;
      if (sequential) {
        mapForA = b.changes;
        mapForB = ChangeSet.empty(b.changes.length);
        changes = a2.changes.compose(b.changes);
      } else {
        mapForA = b.changes.map(a2.changes);
        mapForB = a2.changes.mapDesc(b.changes, true);
        changes = a2.changes.compose(mapForA);
      }
      return {
        changes,
        selection: b.selection ? b.selection.map(mapForB) : (_a2 = a2.selection) === null || _a2 === void 0 ? void 0 : _a2.map(mapForA),
        effects: StateEffect.mapEffects(a2.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
        annotations: a2.annotations.length ? a2.annotations.concat(b.annotations) : b.annotations,
        scrollIntoView: a2.scrollIntoView || b.scrollIntoView
      };
    }
    function resolveTransactionInner(state, spec, docSize) {
      let sel = spec.selection, annotations = asArray(spec.annotations);
      if (spec.userEvent)
        annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
      return {
        changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
        selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
        effects: asArray(spec.effects),
        annotations,
        scrollIntoView: !!spec.scrollIntoView
      };
    }
    function resolveTransaction(state, specs, filter) {
      let s2 = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
      if (specs.length && specs[0].filter === false)
        filter = false;
      for (let i2 = 1; i2 < specs.length; i2++) {
        if (specs[i2].filter === false)
          filter = false;
        let seq = !!specs[i2].sequential;
        s2 = mergeTransaction(s2, resolveTransactionInner(state, specs[i2], seq ? s2.changes.newLength : state.doc.length), seq);
      }
      let tr = Transaction.create(state, s2.changes, s2.selection, s2.effects, s2.annotations, s2.scrollIntoView);
      return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    function filterTransaction(tr) {
      let state = tr.startState;
      let result = true;
      for (let filter of state.facet(changeFilter)) {
        let value = filter(tr);
        if (value === false) {
          result = false;
          break;
        }
        if (Array.isArray(value))
          result = result === true ? value : joinRanges(result, value);
      }
      if (result !== true) {
        let changes, back;
        if (result === false) {
          back = tr.changes.invertedDesc;
          changes = ChangeSet.empty(state.doc.length);
        } else {
          let filtered = tr.changes.filter(result);
          changes = filtered.changes;
          back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
        }
        tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
      }
      let filters = state.facet(transactionFilter);
      for (let i2 = filters.length - 1; i2 >= 0; i2--) {
        let filtered = filters[i2](tr);
        if (filtered instanceof Transaction)
          tr = filtered;
        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
          tr = filtered[0];
        else
          tr = resolveTransaction(state, asArray(filtered), false);
      }
      return tr;
    }
    function extendTransaction(tr) {
      let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
      for (let i2 = extenders.length - 1; i2 >= 0; i2--) {
        let extension = extenders[i2](tr);
        if (extension && Object.keys(extension).length)
          spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
      }
      return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none$2 = [];
    function asArray(value) {
      return value == null ? none$2 : Array.isArray(value) ? value : [value];
    }
    var CharCategory = /* @__PURE__ */ function(CharCategory2) {
      CharCategory2[CharCategory2["Word"] = 0] = "Word";
      CharCategory2[CharCategory2["Space"] = 1] = "Space";
      CharCategory2[CharCategory2["Other"] = 2] = "Other";
      return CharCategory2;
    }(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
      wordChar = /* @__PURE__ */ new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    } catch (_2) {
    }
    function hasWordChar(str2) {
      if (wordChar)
        return wordChar.test(str2);
      for (let i2 = 0; i2 < str2.length; i2++) {
        let ch3 = str2[i2];
        if (/\w/.test(ch3) || ch3 > "" && (ch3.toUpperCase() != ch3.toLowerCase() || nonASCIISingleCaseWordChar.test(ch3)))
          return true;
      }
      return false;
    }
    function makeCategorizer(wordChars) {
      return (char) => {
        if (!/\S/.test(char))
          return CharCategory.Space;
        if (hasWordChar(char))
          return CharCategory.Word;
        for (let i2 = 0; i2 < wordChars.length; i2++)
          if (char.indexOf(wordChars[i2]) > -1)
            return CharCategory.Word;
        return CharCategory.Other;
      };
    }
    class EditorState {
      constructor(config2, doc2, selection, values, computeSlot, tr) {
        this.config = config2;
        this.doc = doc2;
        this.selection = selection;
        this.values = values;
        this.status = config2.statusTemplate.slice();
        this.computeSlot = computeSlot;
        if (tr)
          tr._state = this;
        for (let i2 = 0; i2 < this.config.dynamicSlots.length; i2++)
          ensureAddr(this, i2 << 1);
        this.computeSlot = null;
      }
      field(field, require2 = true) {
        let addr = this.config.address[field.id];
        if (addr == null) {
          if (require2)
            throw new RangeError("Field is not present in this state");
          return void 0;
        }
        ensureAddr(this, addr);
        return getAddr(this, addr);
      }
      /**
      Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
      state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
      can be passed. Unless
      [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
      [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
      are assumed to start in the _current_ document (not the document
      produced by previous specs), and its
      [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
      [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
      to the document created by its _own_ changes. The resulting
      transaction contains the combined effect of all the different
      specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
      specs take precedence over earlier ones.
      */
      update(...specs) {
        return resolveTransaction(this, specs, true);
      }
      /**
      @internal
      */
      applyTransaction(tr) {
        let conf = this.config, { base: base2, compartments } = conf;
        for (let effect2 of tr.effects) {
          if (effect2.is(Compartment.reconfigure)) {
            if (conf) {
              compartments = /* @__PURE__ */ new Map();
              conf.compartments.forEach((val, key2) => compartments.set(key2, val));
              conf = null;
            }
            compartments.set(effect2.value.compartment, effect2.value.extension);
          } else if (effect2.is(StateEffect.reconfigure)) {
            conf = null;
            base2 = effect2.value;
          } else if (effect2.is(StateEffect.appendConfig)) {
            conf = null;
            base2 = asArray(base2).concat(effect2.value);
          }
        }
        let startValues;
        if (!conf) {
          conf = Configuration.resolve(base2, compartments, this);
          let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
          startValues = intermediateState.values;
        } else {
          startValues = tr.startState.values.slice();
        }
        let selection = tr.startState.facet(allowMultipleSelections) ? tr.newSelection : tr.newSelection.asSingle();
        new EditorState(conf, tr.newDoc, selection, startValues, (state, slot) => slot.update(state, tr), tr);
      }
      /**
      Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
      replaces every selection range with the given content.
      */
      replaceSelection(text2) {
        if (typeof text2 == "string")
          text2 = this.toText(text2);
        return this.changeByRange((range) => ({
          changes: { from: range.from, to: range.to, insert: text2 },
          range: EditorSelection.cursor(range.from + text2.length)
        }));
      }
      /**
      Create a set of changes and a new selection by running the given
      function for each range in the active selection. The function
      can return an optional set of changes (in the coordinate space
      of the start document), plus an updated range (in the coordinate
      space of the document produced by the call's own changes). This
      method will merge all the changes and ranges into a single
      changeset and selection, and return it as a [transaction
      spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
      [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
      */
      changeByRange(f2) {
        let sel = this.selection;
        let result1 = f2(sel.ranges[0]);
        let changes = this.changes(result1.changes), ranges = [result1.range];
        let effects = asArray(result1.effects);
        for (let i2 = 1; i2 < sel.ranges.length; i2++) {
          let result = f2(sel.ranges[i2]);
          let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
          for (let j2 = 0; j2 < i2; j2++)
            ranges[j2] = ranges[j2].map(newMapped);
          let mapBy = changes.mapDesc(newChanges, true);
          ranges.push(result.range.map(mapBy));
          changes = changes.compose(newMapped);
          effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
        }
        return {
          changes,
          selection: EditorSelection.create(ranges, sel.mainIndex),
          effects
        };
      }
      /**
      Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
      description, taking the state's document length and line
      separator into account.
      */
      changes(spec = []) {
        if (spec instanceof ChangeSet)
          return spec;
        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
      }
      /**
      Using the state's [line
      separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
      [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
      */
      toText(string2) {
        return Text.of(string2.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
      }
      /**
      Return the given range of the document as a string.
      */
      sliceDoc(from = 0, to = this.doc.length) {
        return this.doc.sliceString(from, to, this.lineBreak);
      }
      /**
      Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
      */
      facet(facet) {
        let addr = this.config.address[facet.id];
        if (addr == null)
          return facet.default;
        ensureAddr(this, addr);
        return getAddr(this, addr);
      }
      /**
      Convert this state to a JSON-serializable object. When custom
      fields should be serialized, you can pass them in as an object
      mapping property names (in the resulting object, which should
      not use `doc` or `selection`) to fields.
      */
      toJSON(fields) {
        let result = {
          doc: this.sliceDoc(),
          selection: this.selection.toJSON()
        };
        if (fields)
          for (let prop in fields) {
            let value = fields[prop];
            if (value instanceof StateField && this.config.address[value.id] != null)
              result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
          }
        return result;
      }
      /**
      Deserialize a state from its JSON representation. When custom
      fields should be deserialized, pass the same object you passed
      to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
      third argument.
      */
      static fromJSON(json, config2 = {}, fields) {
        if (!json || typeof json.doc != "string")
          throw new RangeError("Invalid JSON representation for EditorState");
        let fieldInit = [];
        if (fields)
          for (let prop in fields) {
            if (Object.prototype.hasOwnProperty.call(json, prop)) {
              let field = fields[prop], value = json[prop];
              fieldInit.push(field.init((state) => field.spec.fromJSON(value, state)));
            }
          }
        return EditorState.create({
          doc: json.doc,
          selection: EditorSelection.fromJSON(json.selection),
          extensions: config2.extensions ? fieldInit.concat([config2.extensions]) : fieldInit
        });
      }
      /**
      Create a new state. You'll usually only need this when
      initializing an editor—updated states are created by applying
      transactions.
      */
      static create(config2 = {}) {
        let configuration = Configuration.resolve(config2.extensions || [], /* @__PURE__ */ new Map());
        let doc2 = config2.doc instanceof Text ? config2.doc : Text.of((config2.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
        let selection = !config2.selection ? EditorSelection.single(0) : config2.selection instanceof EditorSelection ? config2.selection : EditorSelection.single(config2.selection.anchor, config2.selection.head);
        checkSelection(selection, doc2.length);
        if (!configuration.staticFacet(allowMultipleSelections))
          selection = selection.asSingle();
        return new EditorState(configuration, doc2, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
      }
      /**
      The size (in columns) of a tab in the document, determined by
      the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
      */
      get tabSize() {
        return this.facet(EditorState.tabSize);
      }
      /**
      Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
      string for this state.
      */
      get lineBreak() {
        return this.facet(EditorState.lineSeparator) || "\n";
      }
      /**
      Returns true when the editor is
      [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
      */
      get readOnly() {
        return this.facet(readOnly);
      }
      /**
      Look up a translation for the given phrase (via the
      [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
      original string if no translation is found.
      
      If additional arguments are passed, they will be inserted in
      place of markers like `$1` (for the first value) and `$2`, etc.
      A single `$` is equivalent to `$1`, and `$$` will produce a
      literal dollar sign.
      */
      phrase(phrase, ...insert2) {
        for (let map2 of this.facet(EditorState.phrases))
          if (Object.prototype.hasOwnProperty.call(map2, phrase)) {
            phrase = map2[phrase];
            break;
          }
        if (insert2.length)
          phrase = phrase.replace(/\$(\$|\d*)/g, (m2, i2) => {
            if (i2 == "$")
              return "$";
            let n2 = +(i2 || 1);
            return !n2 || n2 > insert2.length ? m2 : insert2[n2 - 1];
          });
        return phrase;
      }
      /**
      Find the values for a given language data field, provided by the
      the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
      
      Examples of language data fields are...
      
      - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
        comment syntax.
      - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
        for providing language-specific completion sources.
      - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
        characters that should be considered part of words in this
        language.
      - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
        bracket closing behavior.
      */
      languageDataAt(name2, pos2, side = -1) {
        let values = [];
        for (let provider of this.facet(languageData)) {
          for (let result of provider(this, pos2, side)) {
            if (Object.prototype.hasOwnProperty.call(result, name2))
              values.push(result[name2]);
          }
        }
        return values;
      }
      /**
      Return a function that can categorize strings (expected to
      represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
      into one of:
      
       - Word (contains an alphanumeric character or a character
         explicitly listed in the local language's `"wordChars"`
         language data, which should be a string)
       - Space (contains only whitespace)
       - Other (anything else)
      */
      charCategorizer(at) {
        return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
      }
      /**
      Find the word at the given position, meaning the range
      containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
      around it. If no word characters are adjacent to the position,
      this returns null.
      */
      wordAt(pos2) {
        let { text: text2, from, length } = this.doc.lineAt(pos2);
        let cat = this.charCategorizer(pos2);
        let start2 = pos2 - from, end2 = pos2 - from;
        while (start2 > 0) {
          let prev = findClusterBreak(text2, start2, false);
          if (cat(text2.slice(prev, start2)) != CharCategory.Word)
            break;
          start2 = prev;
        }
        while (end2 < length) {
          let next = findClusterBreak(text2, end2);
          if (cat(text2.slice(end2, next)) != CharCategory.Word)
            break;
          end2 = next;
        }
        return start2 == end2 ? null : EditorSelection.range(start2 + from, end2 + from);
      }
    }
    EditorState.allowMultipleSelections = allowMultipleSelections;
    EditorState.tabSize = /* @__PURE__ */ Facet.define({
      combine: (values) => values.length ? values[0] : 4
    });
    EditorState.lineSeparator = lineSeparator;
    EditorState.readOnly = readOnly;
    EditorState.phrases = /* @__PURE__ */ Facet.define({
      compare(a2, b) {
        let kA = Object.keys(a2), kB = Object.keys(b);
        return kA.length == kB.length && kA.every((k2) => a2[k2] == b[k2]);
      }
    });
    EditorState.languageData = languageData;
    EditorState.changeFilter = changeFilter;
    EditorState.transactionFilter = transactionFilter;
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /* @__PURE__ */ StateEffect.define();
    function combineConfig(configs, defaults, combine = {}) {
      let result = {};
      for (let config2 of configs)
        for (let key2 of Object.keys(config2)) {
          let value = config2[key2], current = result[key2];
          if (current === void 0)
            result[key2] = value;
          else if (current === value || value === void 0) ;
          else if (Object.hasOwnProperty.call(combine, key2))
            result[key2] = combine[key2](current, value);
          else
            throw new Error("Config merge conflict for field " + key2);
        }
      for (let key2 in defaults)
        if (result[key2] === void 0)
          result[key2] = defaults[key2];
      return result;
    }
    class RangeValue {
      /**
      Compare this value with another value. Used when comparing
      rangesets. The default implementation compares by identity.
      Unless you are only creating a fixed number of unique instances
      of your value type, it is a good idea to implement this
      properly.
      */
      eq(other) {
        return this == other;
      }
      /**
      Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
      */
      range(from, to = from) {
        return Range$1.create(from, to, this);
      }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    let Range$1 = class Range2 {
      constructor(from, to, value) {
        this.from = from;
        this.to = to;
        this.value = value;
      }
      /**
      @internal
      */
      static create(from, to, value) {
        return new Range2(from, to, value);
      }
    };
    function cmpRange(a2, b) {
      return a2.from - b.from || a2.value.startSide - b.value.startSide;
    }
    class Chunk {
      constructor(from, to, value, maxPoint) {
        this.from = from;
        this.to = to;
        this.value = value;
        this.maxPoint = maxPoint;
      }
      get length() {
        return this.to[this.to.length - 1];
      }
      // Find the index of the given position and side. Use the ranges'
      // `from` pos when `end == false`, `to` when `end == true`.
      findIndex(pos2, side, end2, startAt = 0) {
        let arr2 = end2 ? this.to : this.from;
        for (let lo = startAt, hi = arr2.length; ; ) {
          if (lo == hi)
            return lo;
          let mid = lo + hi >> 1;
          let diff2 = arr2[mid] - pos2 || (end2 ? this.value[mid].endSide : this.value[mid].startSide) - side;
          if (mid == lo)
            return diff2 >= 0 ? lo : hi;
          if (diff2 >= 0)
            hi = mid;
          else
            lo = mid + 1;
        }
      }
      between(offset2, from, to, f2) {
        for (let i2 = this.findIndex(from, -1e9, true), e2 = this.findIndex(to, 1e9, false, i2); i2 < e2; i2++)
          if (f2(this.from[i2] + offset2, this.to[i2] + offset2, this.value[i2]) === false)
            return false;
      }
      map(offset2, changes) {
        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
        for (let i2 = 0; i2 < this.value.length; i2++) {
          let val = this.value[i2], curFrom = this.from[i2] + offset2, curTo = this.to[i2] + offset2, newFrom, newTo;
          if (curFrom == curTo) {
            let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
            if (mapped == null)
              continue;
            newFrom = newTo = mapped;
            if (val.startSide != val.endSide) {
              newTo = changes.mapPos(curFrom, val.endSide);
              if (newTo < newFrom)
                continue;
            }
          } else {
            newFrom = changes.mapPos(curFrom, val.startSide);
            newTo = changes.mapPos(curTo, val.endSide);
            if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
              continue;
          }
          if ((newTo - newFrom || val.endSide - val.startSide) < 0)
            continue;
          if (newPos < 0)
            newPos = newFrom;
          if (val.point)
            maxPoint = Math.max(maxPoint, newTo - newFrom);
          value.push(val);
          from.push(newFrom - newPos);
          to.push(newTo - newPos);
        }
        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
      }
    }
    class RangeSet {
      constructor(chunkPos, chunk, nextLayer, maxPoint) {
        this.chunkPos = chunkPos;
        this.chunk = chunk;
        this.nextLayer = nextLayer;
        this.maxPoint = maxPoint;
      }
      /**
      @internal
      */
      static create(chunkPos, chunk, nextLayer, maxPoint) {
        return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
      }
      /**
      @internal
      */
      get length() {
        let last = this.chunk.length - 1;
        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
      }
      /**
      The number of ranges in the set.
      */
      get size() {
        if (this.isEmpty)
          return 0;
        let size = this.nextLayer.size;
        for (let chunk of this.chunk)
          size += chunk.value.length;
        return size;
      }
      /**
      @internal
      */
      chunkEnd(index) {
        return this.chunkPos[index] + this.chunk[index].length;
      }
      /**
      Update the range set, optionally adding new ranges or filtering
      out existing ones.
      
      (Note: The type parameter is just there as a kludge to work
      around TypeScript variance issues that prevented `RangeSet<X>`
      from being a subtype of `RangeSet<Y>` when `X` is a subtype of
      `Y`.)
      */
      update(updateSpec) {
        let { add: add2 = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
        let filter = updateSpec.filter;
        if (add2.length == 0 && !filter)
          return this;
        if (sort)
          add2 = add2.slice().sort(cmpRange);
        if (this.isEmpty)
          return add2.length ? RangeSet.of(add2) : this;
        let cur2 = new LayerCursor(this, null, -1).goto(0), i2 = 0, spill = [];
        let builder = new RangeSetBuilder();
        while (cur2.value || i2 < add2.length) {
          if (i2 < add2.length && (cur2.from - add2[i2].from || cur2.startSide - add2[i2].value.startSide) >= 0) {
            let range = add2[i2++];
            if (!builder.addInner(range.from, range.to, range.value))
              spill.push(range);
          } else if (cur2.rangeIndex == 1 && cur2.chunkIndex < this.chunk.length && (i2 == add2.length || this.chunkEnd(cur2.chunkIndex) < add2[i2].from) && (!filter || filterFrom > this.chunkEnd(cur2.chunkIndex) || filterTo < this.chunkPos[cur2.chunkIndex]) && builder.addChunk(this.chunkPos[cur2.chunkIndex], this.chunk[cur2.chunkIndex])) {
            cur2.nextChunk();
          } else {
            if (!filter || filterFrom > cur2.to || filterTo < cur2.from || filter(cur2.from, cur2.to, cur2.value)) {
              if (!builder.addInner(cur2.from, cur2.to, cur2.value))
                spill.push(Range$1.create(cur2.from, cur2.to, cur2.value));
            }
            cur2.next();
          }
        }
        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
      }
      /**
      Map this range set through a set of changes, return the new set.
      */
      map(changes) {
        if (changes.empty || this.isEmpty)
          return this;
        let chunks = [], chunkPos = [], maxPoint = -1;
        for (let i2 = 0; i2 < this.chunk.length; i2++) {
          let start2 = this.chunkPos[i2], chunk = this.chunk[i2];
          let touch = changes.touchesRange(start2, start2 + chunk.length);
          if (touch === false) {
            maxPoint = Math.max(maxPoint, chunk.maxPoint);
            chunks.push(chunk);
            chunkPos.push(changes.mapPos(start2));
          } else if (touch === true) {
            let { mapped, pos: pos2 } = chunk.map(start2, changes);
            if (mapped) {
              maxPoint = Math.max(maxPoint, mapped.maxPoint);
              chunks.push(mapped);
              chunkPos.push(pos2);
            }
          }
        }
        let next = this.nextLayer.map(changes);
        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
      }
      /**
      Iterate over the ranges that touch the region `from` to `to`,
      calling `f` for each. There is no guarantee that the ranges will
      be reported in any specific order. When the callback returns
      `false`, iteration stops.
      */
      between(from, to, f2) {
        if (this.isEmpty)
          return;
        for (let i2 = 0; i2 < this.chunk.length; i2++) {
          let start2 = this.chunkPos[i2], chunk = this.chunk[i2];
          if (to >= start2 && from <= start2 + chunk.length && chunk.between(start2, from - start2, to - start2, f2) === false)
            return;
        }
        this.nextLayer.between(from, to, f2);
      }
      /**
      Iterate over the ranges in this set, in order, including all
      ranges that end at or after `from`.
      */
      iter(from = 0) {
        return HeapCursor.from([this]).goto(from);
      }
      /**
      @internal
      */
      get isEmpty() {
        return this.nextLayer == this;
      }
      /**
      Iterate over the ranges in a collection of sets, in order,
      starting from `from`.
      */
      static iter(sets, from = 0) {
        return HeapCursor.from(sets).goto(from);
      }
      /**
      Iterate over two groups of sets, calling methods on `comparator`
      to notify it of possible differences.
      */
      static compare(oldSets, newSets, textDiff, comparator, minPointSize = -1) {
        let a2 = oldSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
        let b = newSets.filter((set) => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
        let sharedChunks = findSharedChunks(a2, b, textDiff);
        let sideA = new SpanCursor(a2, sharedChunks, minPointSize);
        let sideB = new SpanCursor(b, sharedChunks, minPointSize);
        textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
        if (textDiff.empty && textDiff.length == 0)
          compare(sideA, 0, sideB, 0, 0, comparator);
      }
      /**
      Compare the contents of two groups of range sets, returning true
      if they are equivalent in the given range.
      */
      static eq(oldSets, newSets, from = 0, to) {
        if (to == null)
          to = 1e9 - 1;
        let a2 = oldSets.filter((set) => !set.isEmpty && newSets.indexOf(set) < 0);
        let b = newSets.filter((set) => !set.isEmpty && oldSets.indexOf(set) < 0);
        if (a2.length != b.length)
          return false;
        if (!a2.length)
          return true;
        let sharedChunks = findSharedChunks(a2, b);
        let sideA = new SpanCursor(a2, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
        for (; ; ) {
          if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
            return false;
          if (sideA.to > to)
            return true;
          sideA.next();
          sideB.next();
        }
      }
      /**
      Iterate over a group of range sets at the same time, notifying
      the iterator about the ranges covering every given piece of
      content. Returns the open count (see
      [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
      of the iteration.
      */
      static spans(sets, from, to, iterator, minPointSize = -1) {
        let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos2 = from;
        let openRanges = cursor.openStart;
        for (; ; ) {
          let curTo = Math.min(cursor.to, to);
          if (cursor.point) {
            let active = cursor.activeForPoint(cursor.to);
            let openCount = cursor.pointFrom < from ? active.length + 1 : cursor.point.startSide < 0 ? active.length : Math.min(active.length, openRanges);
            iterator.point(pos2, curTo, cursor.point, active, openCount, cursor.pointRank);
            openRanges = Math.min(cursor.openEnd(curTo), active.length);
          } else if (curTo > pos2) {
            iterator.span(pos2, curTo, cursor.active, openRanges);
            openRanges = cursor.openEnd(curTo);
          }
          if (cursor.to > to)
            return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
          pos2 = cursor.to;
          cursor.next();
        }
      }
      /**
      Create a range set for the given range or array of ranges. By
      default, this expects the ranges to be _sorted_ (by start
      position and, if two start at the same position,
      `value.startSide`). You can pass `true` as second argument to
      cause the method to sort them.
      */
      static of(ranges, sort = false) {
        let build = new RangeSetBuilder();
        for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
          build.add(range.from, range.to, range.value);
        return build.finish();
      }
      /**
      Join an array of range sets into a single set.
      */
      static join(sets) {
        if (!sets.length)
          return RangeSet.empty;
        let result = sets[sets.length - 1];
        for (let i2 = sets.length - 2; i2 >= 0; i2--) {
          for (let layer2 = sets[i2]; layer2 != RangeSet.empty; layer2 = layer2.nextLayer)
            result = new RangeSet(layer2.chunkPos, layer2.chunk, result, Math.max(layer2.maxPoint, result.maxPoint));
        }
        return result;
      }
    }
    RangeSet.empty = /* @__PURE__ */ new RangeSet([], [], null, -1);
    function lazySort(ranges) {
      if (ranges.length > 1)
        for (let prev = ranges[0], i2 = 1; i2 < ranges.length; i2++) {
          let cur2 = ranges[i2];
          if (cmpRange(prev, cur2) > 0)
            return ranges.slice().sort(cmpRange);
          prev = cur2;
        }
      return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    class RangeSetBuilder {
      finishChunk(newArrays) {
        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
        this.chunkPos.push(this.chunkStart);
        this.chunkStart = -1;
        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
        this.maxPoint = -1;
        if (newArrays) {
          this.from = [];
          this.to = [];
          this.value = [];
        }
      }
      /**
      Create an empty builder.
      */
      constructor() {
        this.chunks = [];
        this.chunkPos = [];
        this.chunkStart = -1;
        this.last = null;
        this.lastFrom = -1e9;
        this.lastTo = -1e9;
        this.from = [];
        this.to = [];
        this.value = [];
        this.maxPoint = -1;
        this.setMaxPoint = -1;
        this.nextLayer = null;
      }
      /**
      Add a range. Ranges should be added in sorted (by `from` and
      `value.startSide`) order.
      */
      add(from, to, value) {
        if (!this.addInner(from, to, value))
          (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
      }
      /**
      @internal
      */
      addInner(from, to, value) {
        let diff2 = from - this.lastTo || value.startSide - this.last.endSide;
        if (diff2 <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
          throw new Error("Ranges must be added sorted by `from` position and `startSide`");
        if (diff2 < 0)
          return false;
        if (this.from.length == 250)
          this.finishChunk(true);
        if (this.chunkStart < 0)
          this.chunkStart = from;
        this.from.push(from - this.chunkStart);
        this.to.push(to - this.chunkStart);
        this.last = value;
        this.lastFrom = from;
        this.lastTo = to;
        this.value.push(value);
        if (value.point)
          this.maxPoint = Math.max(this.maxPoint, to - from);
        return true;
      }
      /**
      @internal
      */
      addChunk(from, chunk) {
        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
          return false;
        if (this.from.length)
          this.finishChunk(true);
        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
        this.chunks.push(chunk);
        this.chunkPos.push(from);
        let last = chunk.value.length - 1;
        this.last = chunk.value[last];
        this.lastFrom = chunk.from[last] + from;
        this.lastTo = chunk.to[last] + from;
        return true;
      }
      /**
      Finish the range set. Returns the new set. The builder can't be
      used anymore after this has been called.
      */
      finish() {
        return this.finishInner(RangeSet.empty);
      }
      /**
      @internal
      */
      finishInner(next) {
        if (this.from.length)
          this.finishChunk(false);
        if (this.chunks.length == 0)
          return next;
        let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
        this.from = null;
        return result;
      }
    }
    function findSharedChunks(a2, b, textDiff) {
      let inA = /* @__PURE__ */ new Map();
      for (let set of a2)
        for (let i2 = 0; i2 < set.chunk.length; i2++)
          if (set.chunk[i2].maxPoint <= 0)
            inA.set(set.chunk[i2], set.chunkPos[i2]);
      let shared = /* @__PURE__ */ new Set();
      for (let set of b)
        for (let i2 = 0; i2 < set.chunk.length; i2++) {
          let known = inA.get(set.chunk[i2]);
          if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i2] && !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i2].length)))
            shared.add(set.chunk[i2]);
        }
      return shared;
    }
    class LayerCursor {
      constructor(layer2, skip, minPoint, rank = 0) {
        this.layer = layer2;
        this.skip = skip;
        this.minPoint = minPoint;
        this.rank = rank;
      }
      get startSide() {
        return this.value ? this.value.startSide : 0;
      }
      get endSide() {
        return this.value ? this.value.endSide : 0;
      }
      goto(pos2, side = -1e9) {
        this.chunkIndex = this.rangeIndex = 0;
        this.gotoInner(pos2, side, false);
        return this;
      }
      gotoInner(pos2, side, forward) {
        while (this.chunkIndex < this.layer.chunk.length) {
          let next = this.layer.chunk[this.chunkIndex];
          if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos2 || next.maxPoint < this.minPoint))
            break;
          this.chunkIndex++;
          forward = false;
        }
        if (this.chunkIndex < this.layer.chunk.length) {
          let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos2 - this.layer.chunkPos[this.chunkIndex], side, true);
          if (!forward || this.rangeIndex < rangeIndex)
            this.setRangeIndex(rangeIndex);
        }
        this.next();
      }
      forward(pos2, side) {
        if ((this.to - pos2 || this.endSide - side) < 0)
          this.gotoInner(pos2, side, true);
      }
      next() {
        for (; ; ) {
          if (this.chunkIndex == this.layer.chunk.length) {
            this.from = this.to = 1e9;
            this.value = null;
            break;
          } else {
            let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
            let from = chunkPos + chunk.from[this.rangeIndex];
            this.from = from;
            this.to = chunkPos + chunk.to[this.rangeIndex];
            this.value = chunk.value[this.rangeIndex];
            this.setRangeIndex(this.rangeIndex + 1);
            if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
              break;
          }
        }
      }
      setRangeIndex(index) {
        if (index == this.layer.chunk[this.chunkIndex].value.length) {
          this.chunkIndex++;
          if (this.skip) {
            while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
              this.chunkIndex++;
          }
          this.rangeIndex = 0;
        } else {
          this.rangeIndex = index;
        }
      }
      nextChunk() {
        this.chunkIndex++;
        this.rangeIndex = 0;
        this.next();
      }
      compare(other) {
        return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank || this.to - other.to || this.endSide - other.endSide;
      }
    }
    class HeapCursor {
      constructor(heap2) {
        this.heap = heap2;
      }
      static from(sets, skip = null, minPoint = -1) {
        let heap2 = [];
        for (let i2 = 0; i2 < sets.length; i2++) {
          for (let cur2 = sets[i2]; !cur2.isEmpty; cur2 = cur2.nextLayer) {
            if (cur2.maxPoint >= minPoint)
              heap2.push(new LayerCursor(cur2, skip, minPoint, i2));
          }
        }
        return heap2.length == 1 ? heap2[0] : new HeapCursor(heap2);
      }
      get startSide() {
        return this.value ? this.value.startSide : 0;
      }
      goto(pos2, side = -1e9) {
        for (let cur2 of this.heap)
          cur2.goto(pos2, side);
        for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
          heapBubble(this.heap, i2);
        this.next();
        return this;
      }
      forward(pos2, side) {
        for (let cur2 of this.heap)
          cur2.forward(pos2, side);
        for (let i2 = this.heap.length >> 1; i2 >= 0; i2--)
          heapBubble(this.heap, i2);
        if ((this.to - pos2 || this.value.endSide - side) < 0)
          this.next();
      }
      next() {
        if (this.heap.length == 0) {
          this.from = this.to = 1e9;
          this.value = null;
          this.rank = -1;
        } else {
          let top2 = this.heap[0];
          this.from = top2.from;
          this.to = top2.to;
          this.value = top2.value;
          this.rank = top2.rank;
          if (top2.value)
            top2.next();
          heapBubble(this.heap, 0);
        }
      }
    }
    function heapBubble(heap2, index) {
      for (let cur2 = heap2[index]; ; ) {
        let childIndex = (index << 1) + 1;
        if (childIndex >= heap2.length)
          break;
        let child = heap2[childIndex];
        if (childIndex + 1 < heap2.length && child.compare(heap2[childIndex + 1]) >= 0) {
          child = heap2[childIndex + 1];
          childIndex++;
        }
        if (cur2.compare(child) < 0)
          break;
        heap2[childIndex] = cur2;
        heap2[index] = child;
        index = childIndex;
      }
    }
    class SpanCursor {
      constructor(sets, skip, minPoint) {
        this.minPoint = minPoint;
        this.active = [];
        this.activeTo = [];
        this.activeRank = [];
        this.minActive = -1;
        this.point = null;
        this.pointFrom = 0;
        this.pointRank = 0;
        this.to = -1e9;
        this.endSide = 0;
        this.openStart = -1;
        this.cursor = HeapCursor.from(sets, skip, minPoint);
      }
      goto(pos2, side = -1e9) {
        this.cursor.goto(pos2, side);
        this.active.length = this.activeTo.length = this.activeRank.length = 0;
        this.minActive = -1;
        this.to = pos2;
        this.endSide = side;
        this.openStart = -1;
        this.next();
        return this;
      }
      forward(pos2, side) {
        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos2 || this.active[this.minActive].endSide - side) < 0)
          this.removeActive(this.minActive);
        this.cursor.forward(pos2, side);
      }
      removeActive(index) {
        remove(this.active, index);
        remove(this.activeTo, index);
        remove(this.activeRank, index);
        this.minActive = findMinIndex(this.active, this.activeTo);
      }
      addActive(trackOpen) {
        let i2 = 0, { value, to, rank } = this.cursor;
        while (i2 < this.activeRank.length && (rank - this.activeRank[i2] || to - this.activeTo[i2]) > 0)
          i2++;
        insert(this.active, i2, value);
        insert(this.activeTo, i2, to);
        insert(this.activeRank, i2, rank);
        if (trackOpen)
          insert(trackOpen, i2, this.cursor.from);
        this.minActive = findMinIndex(this.active, this.activeTo);
      }
      // After calling this, if `this.point` != null, the next range is a
      // point. Otherwise, it's a regular range, covered by `this.active`.
      next() {
        let from = this.to, wasPoint = this.point;
        this.point = null;
        let trackOpen = this.openStart < 0 ? [] : null;
        for (; ; ) {
          let a2 = this.minActive;
          if (a2 > -1 && (this.activeTo[a2] - this.cursor.from || this.active[a2].endSide - this.cursor.startSide) < 0) {
            if (this.activeTo[a2] > from) {
              this.to = this.activeTo[a2];
              this.endSide = this.active[a2].endSide;
              break;
            }
            this.removeActive(a2);
            if (trackOpen)
              remove(trackOpen, a2);
          } else if (!this.cursor.value) {
            this.to = this.endSide = 1e9;
            break;
          } else if (this.cursor.from > from) {
            this.to = this.cursor.from;
            this.endSide = this.cursor.startSide;
            break;
          } else {
            let nextVal = this.cursor.value;
            if (!nextVal.point) {
              this.addActive(trackOpen);
              this.cursor.next();
            } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
              this.cursor.next();
            } else {
              this.point = nextVal;
              this.pointFrom = this.cursor.from;
              this.pointRank = this.cursor.rank;
              this.to = this.cursor.to;
              this.endSide = nextVal.endSide;
              this.cursor.next();
              this.forward(this.to, this.endSide);
              break;
            }
          }
        }
        if (trackOpen) {
          this.openStart = 0;
          for (let i2 = trackOpen.length - 1; i2 >= 0 && trackOpen[i2] < from; i2--)
            this.openStart++;
        }
      }
      activeForPoint(to) {
        if (!this.active.length)
          return this.active;
        let active = [];
        for (let i2 = this.active.length - 1; i2 >= 0; i2--) {
          if (this.activeRank[i2] < this.pointRank)
            break;
          if (this.activeTo[i2] > to || this.activeTo[i2] == to && this.active[i2].endSide >= this.point.endSide)
            active.push(this.active[i2]);
        }
        return active.reverse();
      }
      openEnd(to) {
        let open = 0;
        for (let i2 = this.activeTo.length - 1; i2 >= 0 && this.activeTo[i2] > to; i2--)
          open++;
        return open;
      }
    }
    function compare(a2, startA, b, startB, length, comparator) {
      a2.goto(startA);
      b.goto(startB);
      let endB = startB + length;
      let pos2 = startB, dPos = startB - startA;
      for (; ; ) {
        let diff2 = a2.to + dPos - b.to || a2.endSide - b.endSide;
        let end2 = diff2 < 0 ? a2.to + dPos : b.to, clipEnd = Math.min(end2, endB);
        if (a2.point || b.point) {
          if (!(a2.point && b.point && (a2.point == b.point || a2.point.eq(b.point)) && sameValues(a2.activeForPoint(a2.to), b.activeForPoint(b.to))))
            comparator.comparePoint(pos2, clipEnd, a2.point, b.point);
        } else {
          if (clipEnd > pos2 && !sameValues(a2.active, b.active))
            comparator.compareRange(pos2, clipEnd, a2.active, b.active);
        }
        if (end2 > endB)
          break;
        pos2 = end2;
        if (diff2 <= 0)
          a2.next();
        if (diff2 >= 0)
          b.next();
      }
    }
    function sameValues(a2, b) {
      if (a2.length != b.length)
        return false;
      for (let i2 = 0; i2 < a2.length; i2++)
        if (a2[i2] != b[i2] && !a2[i2].eq(b[i2]))
          return false;
      return true;
    }
    function remove(array, index) {
      for (let i2 = index, e2 = array.length - 1; i2 < e2; i2++)
        array[i2] = array[i2 + 1];
      array.pop();
    }
    function insert(array, index, value) {
      for (let i2 = array.length - 1; i2 >= index; i2--)
        array[i2 + 1] = array[i2];
      array[index] = value;
    }
    function findMinIndex(value, array) {
      let found = -1, foundPos = 1e9;
      for (let i2 = 0; i2 < array.length; i2++)
        if ((array[i2] - foundPos || value[i2].endSide - value[found].endSide) < 0) {
          found = i2;
          foundPos = array[i2];
        }
      return found;
    }
    function countColumn(string2, tabSize, to = string2.length) {
      let n2 = 0;
      for (let i2 = 0; i2 < to; ) {
        if (string2.charCodeAt(i2) == 9) {
          n2 += tabSize - n2 % tabSize;
          i2++;
        } else {
          n2++;
          i2 = findClusterBreak(string2, i2);
        }
      }
      return n2;
    }
    function findColumn(string2, col, tabSize, strict) {
      for (let i2 = 0, n2 = 0; ; ) {
        if (n2 >= col)
          return i2;
        if (i2 == string2.length)
          break;
        n2 += string2.charCodeAt(i2) == 9 ? tabSize - n2 % tabSize : 1;
        i2 = findClusterBreak(string2, i2);
      }
      return strict === true ? -1 : string2.length;
    }
    const C = "ͼ";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let { finish } = options || {};
        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
        }
        function render2(selectors, spec2, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec2 == null) return target.push(selectors[0] + ";");
          for (let prop in spec2) {
            let value = spec2[prop];
            if (/&/.test(prop)) {
              render2(
                prop.split(/,\s*/).map((part) => selectors.map((sel) => part.replace(/&/, sel))).reduce((a2, b) => a2.concat(b)),
                value,
                target
              );
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
              render2(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, (l2) => "-" + l2.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
          }
        }
        for (let prop in spec) render2(splitSelector(prop), spec[prop], this.rules);
      }
      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() {
        return this.rules.join("\n");
      }
      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top[COUNT] || 1;
        top[COUNT] = id + 1;
        return C + id.toString(36);
      }
      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      //
      // If a Content Security Policy nonce is provided, it is added to
      // the `<style>` tag generated by the library.
      static mount(root2, modules, options) {
        let set = root2[SET], nonce = options && options.nonce;
        if (!set) set = new StyleSet(root2, nonce);
        else if (nonce) set.setNonce(nonce);
        set.mount(Array.isArray(modules) ? modules : [modules], root2);
      }
    }
    let adoptedSet = /* @__PURE__ */ new Map();
    class StyleSet {
      constructor(root2, nonce) {
        let doc2 = root2.ownerDocument || root2, win = doc2.defaultView;
        if (!root2.head && root2.adoptedStyleSheets && win.CSSStyleSheet) {
          let adopted = adoptedSet.get(doc2);
          if (adopted) return root2[SET] = adopted;
          this.sheet = new win.CSSStyleSheet();
          adoptedSet.set(doc2, this);
        } else {
          this.styleTag = doc2.createElement("style");
          if (nonce) this.styleTag.setAttribute("nonce", nonce);
        }
        this.modules = [];
        root2[SET] = this;
      }
      mount(modules, root2) {
        let sheet = this.sheet;
        let pos2 = 0, j2 = 0;
        for (let i2 = 0; i2 < modules.length; i2++) {
          let mod2 = modules[i2], index = this.modules.indexOf(mod2);
          if (index < j2 && index > -1) {
            this.modules.splice(index, 1);
            j2--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j2++, 0, mod2);
            if (sheet) for (let k2 = 0; k2 < mod2.rules.length; k2++)
              sheet.insertRule(mod2.rules[k2], pos2++);
          } else {
            while (j2 < index) pos2 += this.modules[j2++].rules.length;
            pos2 += mod2.rules.length;
            j2++;
          }
        }
        if (sheet) {
          if (root2.adoptedStyleSheets.indexOf(this.sheet) < 0)
            root2.adoptedStyleSheets = [this.sheet, ...root2.adoptedStyleSheets];
        } else {
          let text2 = "";
          for (let i2 = 0; i2 < this.modules.length; i2++)
            text2 += this.modules[i2].getRules() + "\n";
          this.styleTag.textContent = text2;
          let target = root2.head || root2;
          if (this.styleTag.parentNode != target)
            target.insertBefore(this.styleTag, target.firstChild);
        }
      }
      setNonce(nonce) {
        if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
          this.styleTag.setAttribute("nonce", nonce);
      }
    }
    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };
    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: '"'
    };
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
    for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);
    for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;
    for (var i = 65; i <= 90; i++) {
      base[i] = String.fromCharCode(i + 32);
      shift[i] = String.fromCharCode(i);
    }
    for (var code in base) if (!shift.hasOwnProperty(code)) shift[code] = base[code];
    function keyName(event) {
      var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey || ie$1 && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
      var name2 = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
      if (name2 == "Esc") name2 = "Escape";
      if (name2 == "Del") name2 = "Delete";
      if (name2 == "Left") name2 = "ArrowLeft";
      if (name2 == "Up") name2 = "ArrowUp";
      if (name2 == "Right") name2 = "ArrowRight";
      if (name2 == "Down") name2 = "ArrowDown";
      return name2;
    }
    function getSelection(root2) {
      let target;
      if (root2.nodeType == 11) {
        target = root2.getSelection ? root2 : root2.ownerDocument;
      } else {
        target = root2;
      }
      return target.getSelection();
    }
    function contains(dom, node) {
      return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function hasSelection(dom, selection) {
      if (!selection.anchorNode)
        return false;
      try {
        return contains(dom, selection.anchorNode);
      } catch (_2) {
        return false;
      }
    }
    function clientRectsFor(dom) {
      if (dom.nodeType == 3)
        return textRange(dom, 0, dom.nodeValue.length).getClientRects();
      else if (dom.nodeType == 1)
        return dom.getClientRects();
      else
        return [];
    }
    function isEquivalentPosition(node, off, targetNode, targetOff) {
      return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
    }
    function domIndex(node) {
      for (var index = 0; ; index++) {
        node = node.previousSibling;
        if (!node)
          return index;
      }
    }
    function isBlockElement(node) {
      return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
      for (; ; ) {
        if (node == targetNode && off == targetOff)
          return true;
        if (off == (dir < 0 ? 0 : maxOffset(node))) {
          if (node.nodeName == "DIV")
            return false;
          let parent = node.parentNode;
          if (!parent || parent.nodeType != 1)
            return false;
          off = domIndex(node) + (dir < 0 ? 0 : 1);
          node = parent;
        } else if (node.nodeType == 1) {
          node = node.childNodes[off + (dir < 0 ? -1 : 0)];
          if (node.nodeType == 1 && node.contentEditable == "false")
            return false;
          off = dir < 0 ? maxOffset(node) : 0;
        } else {
          return false;
        }
      }
    }
    function maxOffset(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function flattenRect(rect, left2) {
      let x2 = left2 ? rect.left : rect.right;
      return { left: x2, right: x2, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
      let vp = win.visualViewport;
      if (vp)
        return {
          left: 0,
          right: vp.width,
          top: 0,
          bottom: vp.height
        };
      return {
        left: 0,
        right: win.innerWidth,
        top: 0,
        bottom: win.innerHeight
      };
    }
    function getScale(elt, rect) {
      let scaleX = rect.width / elt.offsetWidth;
      let scaleY = rect.height / elt.offsetHeight;
      if (scaleX > 0.995 && scaleX < 1.005 || !isFinite(scaleX) || Math.abs(rect.width - elt.offsetWidth) < 1)
        scaleX = 1;
      if (scaleY > 0.995 && scaleY < 1.005 || !isFinite(scaleY) || Math.abs(rect.height - elt.offsetHeight) < 1)
        scaleY = 1;
      return { scaleX, scaleY };
    }
    function scrollRectIntoView(dom, rect, side, x2, y2, xMargin, yMargin, ltr) {
      let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
      for (let cur2 = dom, stop = false; cur2 && !stop; ) {
        if (cur2.nodeType == 1) {
          let bounding, top2 = cur2 == doc2.body;
          let scaleX = 1, scaleY = 1;
          if (top2) {
            bounding = windowRect(win);
          } else {
            if (/^(fixed|sticky)$/.test(getComputedStyle(cur2).position))
              stop = true;
            if (cur2.scrollHeight <= cur2.clientHeight && cur2.scrollWidth <= cur2.clientWidth) {
              cur2 = cur2.assignedSlot || cur2.parentNode;
              continue;
            }
            let rect2 = cur2.getBoundingClientRect();
            ({ scaleX, scaleY } = getScale(cur2, rect2));
            bounding = {
              left: rect2.left,
              right: rect2.left + cur2.clientWidth * scaleX,
              top: rect2.top,
              bottom: rect2.top + cur2.clientHeight * scaleY
            };
          }
          let moveX = 0, moveY = 0;
          if (y2 == "nearest") {
            if (rect.top < bounding.top) {
              moveY = -(bounding.top - rect.top + yMargin);
              if (side > 0 && rect.bottom > bounding.bottom + moveY)
                moveY = rect.bottom - bounding.bottom + moveY + yMargin;
            } else if (rect.bottom > bounding.bottom) {
              moveY = rect.bottom - bounding.bottom + yMargin;
              if (side < 0 && rect.top - moveY < bounding.top)
                moveY = -(bounding.top + moveY - rect.top + yMargin);
            }
          } else {
            let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
            let targetTop = y2 == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 : y2 == "start" || y2 == "center" && side < 0 ? rect.top - yMargin : rect.bottom - boundingHeight + yMargin;
            moveY = targetTop - bounding.top;
          }
          if (x2 == "nearest") {
            if (rect.left < bounding.left) {
              moveX = -(bounding.left - rect.left + xMargin);
              if (side > 0 && rect.right > bounding.right + moveX)
                moveX = rect.right - bounding.right + moveX + xMargin;
            } else if (rect.right > bounding.right) {
              moveX = rect.right - bounding.right + xMargin;
              if (side < 0 && rect.left < bounding.left + moveX)
                moveX = -(bounding.left + moveX - rect.left + xMargin);
            }
          } else {
            let targetLeft = x2 == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 : x2 == "start" == ltr ? rect.left - xMargin : rect.right - (bounding.right - bounding.left) + xMargin;
            moveX = targetLeft - bounding.left;
          }
          if (moveX || moveY) {
            if (top2) {
              win.scrollBy(moveX, moveY);
            } else {
              let movedX = 0, movedY = 0;
              if (moveY) {
                let start2 = cur2.scrollTop;
                cur2.scrollTop += moveY / scaleY;
                movedY = (cur2.scrollTop - start2) * scaleY;
              }
              if (moveX) {
                let start2 = cur2.scrollLeft;
                cur2.scrollLeft += moveX / scaleX;
                movedX = (cur2.scrollLeft - start2) * scaleX;
              }
              rect = {
                left: rect.left - movedX,
                top: rect.top - movedY,
                right: rect.right - movedX,
                bottom: rect.bottom - movedY
              };
              if (movedX && Math.abs(movedX - moveX) < 1)
                x2 = "nearest";
              if (movedY && Math.abs(movedY - moveY) < 1)
                y2 = "nearest";
            }
          }
          if (top2)
            break;
          cur2 = cur2.assignedSlot || cur2.parentNode;
        } else if (cur2.nodeType == 11) {
          cur2 = cur2.host;
        } else {
          break;
        }
      }
    }
    function scrollableParents(dom) {
      let doc2 = dom.ownerDocument, x2, y2;
      for (let cur2 = dom.parentNode; cur2; ) {
        if (cur2 == doc2.body || x2 && y2) {
          break;
        } else if (cur2.nodeType == 1) {
          if (!y2 && cur2.scrollHeight > cur2.clientHeight)
            y2 = cur2;
          if (!x2 && cur2.scrollWidth > cur2.clientWidth)
            x2 = cur2;
          cur2 = cur2.assignedSlot || cur2.parentNode;
        } else if (cur2.nodeType == 11) {
          cur2 = cur2.host;
        } else {
          break;
        }
      }
      return { x: x2, y: y2 };
    }
    class DOMSelectionState {
      constructor() {
        this.anchorNode = null;
        this.anchorOffset = 0;
        this.focusNode = null;
        this.focusOffset = 0;
      }
      eq(domSel) {
        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
      }
      setRange(range) {
        let { anchorNode, focusNode } = range;
        this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
      }
      set(anchorNode, anchorOffset, focusNode, focusOffset) {
        this.anchorNode = anchorNode;
        this.anchorOffset = anchorOffset;
        this.focusNode = focusNode;
        this.focusOffset = focusOffset;
      }
    }
    let preventScrollSupported = null;
    function focusPreventScroll(dom) {
      if (dom.setActive)
        return dom.setActive();
      if (preventScrollSupported)
        return dom.focus(preventScrollSupported);
      let stack2 = [];
      for (let cur2 = dom; cur2; cur2 = cur2.parentNode) {
        stack2.push(cur2, cur2.scrollTop, cur2.scrollLeft);
        if (cur2 == cur2.ownerDocument)
          break;
      }
      dom.focus(preventScrollSupported == null ? {
        get preventScroll() {
          preventScrollSupported = { preventScroll: true };
          return true;
        }
      } : void 0);
      if (!preventScrollSupported) {
        preventScrollSupported = false;
        for (let i2 = 0; i2 < stack2.length; ) {
          let elt = stack2[i2++], top2 = stack2[i2++], left2 = stack2[i2++];
          if (elt.scrollTop != top2)
            elt.scrollTop = top2;
          if (elt.scrollLeft != left2)
            elt.scrollLeft = left2;
        }
      }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
      let range = scratchRange || (scratchRange = document.createRange());
      range.setEnd(node, to);
      range.setStart(node, from);
      return range;
    }
    function dispatchKey(elt, name2, code2, mods) {
      let options = { key: name2, code: name2, keyCode: code2, which: code2, cancelable: true };
      if (mods)
        ({ altKey: options.altKey, ctrlKey: options.ctrlKey, shiftKey: options.shiftKey, metaKey: options.metaKey } = mods);
      let down = new KeyboardEvent("keydown", options);
      down.synthetic = true;
      elt.dispatchEvent(down);
      let up = new KeyboardEvent("keyup", options);
      up.synthetic = true;
      elt.dispatchEvent(up);
      return down.defaultPrevented || up.defaultPrevented;
    }
    function getRoot(node) {
      while (node) {
        if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
          return node;
        node = node.assignedSlot || node.parentNode;
      }
      return null;
    }
    function clearAttributes(node) {
      while (node.attributes.length)
        node.removeAttributeNode(node.attributes[0]);
    }
    function atElementStart(doc2, selection) {
      let node = selection.focusNode, offset2 = selection.focusOffset;
      if (!node || selection.anchorNode != node || selection.anchorOffset != offset2)
        return false;
      offset2 = Math.min(offset2, maxOffset(node));
      for (; ; ) {
        if (offset2) {
          if (node.nodeType != 1)
            return false;
          let prev = node.childNodes[offset2 - 1];
          if (prev.contentEditable == "false")
            offset2--;
          else {
            node = prev;
            offset2 = maxOffset(node);
          }
        } else if (node == doc2) {
          return true;
        } else {
          offset2 = domIndex(node);
          node = node.parentNode;
        }
      }
    }
    function isScrolledToBottom(elt) {
      return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
    }
    function textNodeBefore(startNode, startOffset) {
      for (let node = startNode, offset2 = startOffset; ; ) {
        if (node.nodeType == 3 && offset2 > 0) {
          return { node, offset: offset2 };
        } else if (node.nodeType == 1 && offset2 > 0) {
          if (node.contentEditable == "false")
            return null;
          node = node.childNodes[offset2 - 1];
          offset2 = maxOffset(node);
        } else if (node.parentNode && !isBlockElement(node)) {
          offset2 = domIndex(node);
          node = node.parentNode;
        } else {
          return null;
        }
      }
    }
    function textNodeAfter(startNode, startOffset) {
      for (let node = startNode, offset2 = startOffset; ; ) {
        if (node.nodeType == 3 && offset2 < node.nodeValue.length) {
          return { node, offset: offset2 };
        } else if (node.nodeType == 1 && offset2 < node.childNodes.length) {
          if (node.contentEditable == "false")
            return null;
          node = node.childNodes[offset2];
          offset2 = 0;
        } else if (node.parentNode && !isBlockElement(node)) {
          offset2 = domIndex(node) + 1;
          node = node.parentNode;
        } else {
          return null;
        }
      }
    }
    class DOMPos {
      constructor(node, offset2, precise = true) {
        this.node = node;
        this.offset = offset2;
        this.precise = precise;
      }
      static before(dom, precise) {
        return new DOMPos(dom.parentNode, domIndex(dom), precise);
      }
      static after(dom, precise) {
        return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
      }
    }
    const noChildren = [];
    class ContentView {
      constructor() {
        this.parent = null;
        this.dom = null;
        this.flags = 2;
      }
      get overrideDOMText() {
        return null;
      }
      get posAtStart() {
        return this.parent ? this.parent.posBefore(this) : 0;
      }
      get posAtEnd() {
        return this.posAtStart + this.length;
      }
      posBefore(view) {
        let pos2 = this.posAtStart;
        for (let child of this.children) {
          if (child == view)
            return pos2;
          pos2 += child.length + child.breakAfter;
        }
        throw new RangeError("Invalid child in posBefore");
      }
      posAfter(view) {
        return this.posBefore(view) + view.length;
      }
      sync(view, track) {
        if (this.flags & 2) {
          let parent = this.dom;
          let prev = null, next;
          for (let child of this.children) {
            if (child.flags & 7) {
              if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                let contentView = ContentView.get(next);
                if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                  child.reuseDOM(next);
              }
              child.sync(view, track);
              child.flags &= ~7;
            }
            next = prev ? prev.nextSibling : parent.firstChild;
            if (track && !track.written && track.node == parent && next != child.dom)
              track.written = true;
            if (child.dom.parentNode == parent) {
              while (next && next != child.dom)
                next = rm$1(next);
            } else {
              parent.insertBefore(child.dom, next);
            }
            prev = child.dom;
          }
          next = prev ? prev.nextSibling : parent.firstChild;
          if (next && track && track.node == parent)
            track.written = true;
          while (next)
            next = rm$1(next);
        } else if (this.flags & 1) {
          for (let child of this.children)
            if (child.flags & 7) {
              child.sync(view, track);
              child.flags &= ~7;
            }
        }
      }
      reuseDOM(_dom) {
      }
      localPosFromDOM(node, offset2) {
        let after;
        if (node == this.dom) {
          after = this.dom.childNodes[offset2];
        } else {
          let bias = maxOffset(node) == 0 ? 0 : offset2 == 0 ? -1 : 1;
          for (; ; ) {
            let parent = node.parentNode;
            if (parent == this.dom)
              break;
            if (bias == 0 && parent.firstChild != parent.lastChild) {
              if (node == parent.firstChild)
                bias = -1;
              else
                bias = 1;
            }
            node = parent;
          }
          if (bias < 0)
            after = node;
          else
            after = node.nextSibling;
        }
        if (after == this.dom.firstChild)
          return 0;
        while (after && !ContentView.get(after))
          after = after.nextSibling;
        if (!after)
          return this.length;
        for (let i2 = 0, pos2 = 0; ; i2++) {
          let child = this.children[i2];
          if (child.dom == after)
            return pos2;
          pos2 += child.length + child.breakAfter;
        }
      }
      domBoundsAround(from, to, offset2 = 0) {
        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
        for (let i2 = 0, pos2 = offset2, prevEnd = offset2; i2 < this.children.length; i2++) {
          let child = this.children[i2], end2 = pos2 + child.length;
          if (pos2 < from && end2 > to)
            return child.domBoundsAround(from, to, pos2);
          if (end2 >= from && fromI == -1) {
            fromI = i2;
            fromStart = pos2;
          }
          if (pos2 > to && child.dom.parentNode == this.dom) {
            toI = i2;
            toEnd = prevEnd;
            break;
          }
          prevEnd = end2;
          pos2 = end2 + child.breakAfter;
        }
        return {
          from: fromStart,
          to: toEnd < 0 ? offset2 + this.length : toEnd,
          startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
          endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
        };
      }
      markDirty(andParent = false) {
        this.flags |= 2;
        this.markParentsDirty(andParent);
      }
      markParentsDirty(childList) {
        for (let parent = this.parent; parent; parent = parent.parent) {
          if (childList)
            parent.flags |= 2;
          if (parent.flags & 1)
            return;
          parent.flags |= 1;
          childList = false;
        }
      }
      setParent(parent) {
        if (this.parent != parent) {
          this.parent = parent;
          if (this.flags & 7)
            this.markParentsDirty(true);
        }
      }
      setDOM(dom) {
        if (this.dom == dom)
          return;
        if (this.dom)
          this.dom.cmView = null;
        this.dom = dom;
        dom.cmView = this;
      }
      get rootView() {
        for (let v2 = this; ; ) {
          let parent = v2.parent;
          if (!parent)
            return v2;
          v2 = parent;
        }
      }
      replaceChildren(from, to, children2 = noChildren) {
        this.markDirty();
        for (let i2 = from; i2 < to; i2++) {
          let child = this.children[i2];
          if (child.parent == this && children2.indexOf(child) < 0)
            child.destroy();
        }
        if (children2.length < 250)
          this.children.splice(from, to - from, ...children2);
        else
          this.children = [].concat(this.children.slice(0, from), children2, this.children.slice(to));
        for (let i2 = 0; i2 < children2.length; i2++)
          children2[i2].setParent(this);
      }
      ignoreMutation(_rec) {
        return false;
      }
      ignoreEvent(_event) {
        return false;
      }
      childCursor(pos2 = this.length) {
        return new ChildCursor(this.children, pos2, this.children.length);
      }
      childPos(pos2, bias = 1) {
        return this.childCursor().findPos(pos2, bias);
      }
      toString() {
        let name2 = this.constructor.name.replace("View", "");
        return name2 + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name2 == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
      }
      static get(node) {
        return node.cmView;
      }
      get isEditable() {
        return true;
      }
      get isWidget() {
        return false;
      }
      get isHidden() {
        return false;
      }
      merge(from, to, source2, hasStart, openStart, openEnd) {
        return false;
      }
      become(other) {
        return false;
      }
      canReuseDOM(other) {
        return other.constructor == this.constructor && !((this.flags | other.flags) & 8);
      }
      // When this is a zero-length view with a side, this should return a
      // number <= 0 to indicate it is before its position, or a
      // number > 0 when after its position.
      getSide() {
        return 0;
      }
      destroy() {
        for (let child of this.children)
          if (child.parent == this)
            child.destroy();
        this.parent = null;
      }
    }
    ContentView.prototype.breakAfter = 0;
    function rm$1(dom) {
      let next = dom.nextSibling;
      dom.parentNode.removeChild(dom);
      return next;
    }
    class ChildCursor {
      constructor(children2, pos2, i2) {
        this.children = children2;
        this.pos = pos2;
        this.i = i2;
        this.off = 0;
      }
      findPos(pos2, bias = 1) {
        for (; ; ) {
          if (pos2 > this.pos || pos2 == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
            this.off = pos2 - this.pos;
            return this;
          }
          let next = this.children[--this.i];
          this.pos -= next.length + next.breakAfter;
        }
      }
    }
    function replaceRange(parent, fromI, fromOff, toI, toOff, insert2, breakAtStart, openStart, openEnd) {
      let { children: children2 } = parent;
      let before = children2.length ? children2[fromI] : null;
      let last = insert2.length ? insert2[insert2.length - 1] : null;
      let breakAtEnd = last ? last.breakAfter : breakAtStart;
      if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert2.length < 2 && before.merge(fromOff, toOff, insert2.length ? last : null, fromOff == 0, openStart, openEnd))
        return;
      if (toI < children2.length) {
        let after = children2[toI];
        if (after && (toOff < after.length || after.breakAfter && (last === null || last === void 0 ? void 0 : last.breakAfter))) {
          if (fromI == toI) {
            after = after.split(toOff);
            toOff = 0;
          }
          if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
            insert2[insert2.length - 1] = after;
          } else {
            if (toOff || after.children.length && !after.children[0].length)
              after.merge(0, toOff, null, false, 0, openEnd);
            insert2.push(after);
          }
        } else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
          if (last)
            last.breakAfter = 1;
          else
            breakAtStart = 1;
        }
        toI++;
      }
      if (before) {
        before.breakAfter = breakAtStart;
        if (fromOff > 0) {
          if (!breakAtStart && insert2.length && before.merge(fromOff, before.length, insert2[0], false, openStart, 0)) {
            before.breakAfter = insert2.shift().breakAfter;
          } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
            before.merge(fromOff, before.length, null, false, openStart, 0);
          }
          fromI++;
        }
      }
      while (fromI < toI && insert2.length) {
        if (children2[toI - 1].become(insert2[insert2.length - 1])) {
          toI--;
          insert2.pop();
          openEnd = insert2.length ? 0 : openStart;
        } else if (children2[fromI].become(insert2[0])) {
          fromI++;
          insert2.shift();
          openStart = insert2.length ? 0 : openEnd;
        } else {
          break;
        }
      }
      if (!insert2.length && fromI && toI < children2.length && !children2[fromI - 1].breakAfter && children2[toI].merge(0, 0, children2[fromI - 1], false, openStart, openEnd))
        fromI--;
      if (fromI < toI || insert2.length)
        parent.replaceChildren(fromI, toI, insert2);
    }
    function mergeChildrenInto(parent, from, to, insert2, openStart, openEnd) {
      let cur2 = parent.childCursor();
      let { i: toI, off: toOff } = cur2.findPos(to, 1);
      let { i: fromI, off: fromOff } = cur2.findPos(from, -1);
      let dLen = from - to;
      for (let view of insert2)
        dLen += view.length;
      parent.length += dLen;
      replaceRange(parent, fromI, fromOff, toI, toOff, insert2, 0, openStart, openEnd);
    }
    let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    const ie_edge = /* @__PURE__ */ /Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /* @__PURE__ */ /MSIE \d/.test(nav.userAgent);
    const ie_11up = /* @__PURE__ */ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /* @__PURE__ */ /gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /* @__PURE__ */ /Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie && /* @__PURE__ */ /Apple Computer/.test(nav.vendor);
    const ios = safari && (/* @__PURE__ */ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
    var browser = {
      mac: ios || /* @__PURE__ */ /Mac/.test(nav.platform),
      windows: /* @__PURE__ */ /Win/.test(nav.platform),
      linux: /* @__PURE__ */ /Linux|X11/.test(nav.platform),
      ie,
      ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
      gecko,
      gecko_version: gecko ? +(/* @__PURE__ */ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      chrome: !!chrome,
      chrome_version: chrome ? +chrome[1] : 0,
      ios,
      android: /* @__PURE__ */ /Android\b/.test(nav.userAgent),
      webkit,
      safari,
      webkit_version: webkit ? +(/* @__PURE__ */ /\bAppleWebKit\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
      tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };
    const MaxJoinLen = 256;
    class TextView extends ContentView {
      constructor(text2) {
        super();
        this.text = text2;
      }
      get length() {
        return this.text.length;
      }
      createDOM(textDOM) {
        this.setDOM(textDOM || document.createTextNode(this.text));
      }
      sync(view, track) {
        if (!this.dom)
          this.createDOM();
        if (this.dom.nodeValue != this.text) {
          if (track && track.node == this.dom)
            track.written = true;
          this.dom.nodeValue = this.text;
        }
      }
      reuseDOM(dom) {
        if (dom.nodeType == 3)
          this.createDOM(dom);
      }
      merge(from, to, source2) {
        if (this.flags & 8 || source2 && (!(source2 instanceof TextView) || this.length - (to - from) + source2.length > MaxJoinLen || source2.flags & 8))
          return false;
        this.text = this.text.slice(0, from) + (source2 ? source2.text : "") + this.text.slice(to);
        this.markDirty();
        return true;
      }
      split(from) {
        let result = new TextView(this.text.slice(from));
        this.text = this.text.slice(0, from);
        this.markDirty();
        result.flags |= this.flags & 8;
        return result;
      }
      localPosFromDOM(node, offset2) {
        return node == this.dom ? offset2 : offset2 ? this.text.length : 0;
      }
      domAtPos(pos2) {
        return new DOMPos(this.dom, pos2);
      }
      domBoundsAround(_from, _to, offset2) {
        return { from: offset2, to: offset2 + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
      }
      coordsAt(pos2, side) {
        return textCoords(this.dom, pos2, side);
      }
    }
    class MarkView extends ContentView {
      constructor(mark, children2 = [], length = 0) {
        super();
        this.mark = mark;
        this.children = children2;
        this.length = length;
        for (let ch3 of children2)
          ch3.setParent(this);
      }
      setAttrs(dom) {
        clearAttributes(dom);
        if (this.mark.class)
          dom.className = this.mark.class;
        if (this.mark.attrs)
          for (let name2 in this.mark.attrs)
            dom.setAttribute(name2, this.mark.attrs[name2]);
        return dom;
      }
      canReuseDOM(other) {
        return super.canReuseDOM(other) && !((this.flags | other.flags) & 8);
      }
      reuseDOM(node) {
        if (node.nodeName == this.mark.tagName.toUpperCase()) {
          this.setDOM(node);
          this.flags |= 4 | 2;
        }
      }
      sync(view, track) {
        if (!this.dom)
          this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
        else if (this.flags & 4)
          this.setAttrs(this.dom);
        super.sync(view, track);
      }
      merge(from, to, source2, _hasStart, openStart, openEnd) {
        if (source2 && (!(source2 instanceof MarkView && source2.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0))
          return false;
        mergeChildrenInto(this, from, to, source2 ? source2.children.slice() : [], openStart - 1, openEnd - 1);
        this.markDirty();
        return true;
      }
      split(from) {
        let result = [], off = 0, detachFrom = -1, i2 = 0;
        for (let elt of this.children) {
          let end2 = off + elt.length;
          if (end2 > from)
            result.push(off < from ? elt.split(from - off) : elt);
          if (detachFrom < 0 && off >= from)
            detachFrom = i2;
          off = end2;
          i2++;
        }
        let length = this.length - from;
        this.length = from;
        if (detachFrom > -1) {
          this.children.length = detachFrom;
          this.markDirty();
        }
        return new MarkView(this.mark, result, length);
      }
      domAtPos(pos2) {
        return inlineDOMAtPos(this, pos2);
      }
      coordsAt(pos2, side) {
        return coordsInChildren(this, pos2, side);
      }
    }
    function textCoords(text2, pos2, side) {
      let length = text2.nodeValue.length;
      if (pos2 > length)
        pos2 = length;
      let from = pos2, to = pos2, flatten2 = 0;
      if (pos2 == 0 && side < 0 || pos2 == length && side >= 0) {
        if (!(browser.chrome || browser.gecko)) {
          if (pos2) {
            from--;
            flatten2 = 1;
          } else if (to < length) {
            to++;
            flatten2 = -1;
          }
        }
      } else {
        if (side < 0)
          from--;
        else if (to < length)
          to++;
      }
      let rects = textRange(text2, from, to).getClientRects();
      if (!rects.length)
        return null;
      let rect = rects[(flatten2 ? flatten2 < 0 : side >= 0) ? 0 : rects.length - 1];
      if (browser.safari && !flatten2 && rect.width == 0)
        rect = Array.prototype.find.call(rects, (r2) => r2.width) || rect;
      return flatten2 ? flattenRect(rect, flatten2 < 0) : rect || null;
    }
    class WidgetView extends ContentView {
      static create(widget, length, side) {
        return new WidgetView(widget, length, side);
      }
      constructor(widget, length, side) {
        super();
        this.widget = widget;
        this.length = length;
        this.side = side;
        this.prevWidget = null;
      }
      split(from) {
        let result = WidgetView.create(this.widget, this.length - from, this.side);
        this.length -= from;
        return result;
      }
      sync(view) {
        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
          if (this.dom && this.prevWidget)
            this.prevWidget.destroy(this.dom);
          this.prevWidget = null;
          this.setDOM(this.widget.toDOM(view));
          if (!this.widget.editable)
            this.dom.contentEditable = "false";
        }
      }
      getSide() {
        return this.side;
      }
      merge(from, to, source2, hasStart, openStart, openEnd) {
        if (source2 && (!(source2 instanceof WidgetView) || !this.widget.compare(source2.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
          return false;
        this.length = from + (source2 ? source2.length : 0) + (this.length - to);
        return true;
      }
      become(other) {
        if (other instanceof WidgetView && other.side == this.side && this.widget.constructor == other.widget.constructor) {
          if (!this.widget.compare(other.widget))
            this.markDirty(true);
          if (this.dom && !this.prevWidget)
            this.prevWidget = this.widget;
          this.widget = other.widget;
          this.length = other.length;
          return true;
        }
        return false;
      }
      ignoreMutation() {
        return true;
      }
      ignoreEvent(event) {
        return this.widget.ignoreEvent(event);
      }
      get overrideDOMText() {
        if (this.length == 0)
          return Text.empty;
        let top2 = this;
        while (top2.parent)
          top2 = top2.parent;
        let { view } = top2, text2 = view && view.state.doc, start2 = this.posAtStart;
        return text2 ? text2.slice(start2, start2 + this.length) : Text.empty;
      }
      domAtPos(pos2) {
        return (this.length ? pos2 == 0 : this.side > 0) ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos2 == this.length);
      }
      domBoundsAround() {
        return null;
      }
      coordsAt(pos2, side) {
        let custom = this.widget.coordsAt(this.dom, pos2, side);
        if (custom)
          return custom;
        let rects = this.dom.getClientRects(), rect = null;
        if (!rects.length)
          return null;
        let fromBack = this.side ? this.side < 0 : pos2 > 0;
        for (let i2 = fromBack ? rects.length - 1 : 0; ; i2 += fromBack ? -1 : 1) {
          rect = rects[i2];
          if (pos2 > 0 ? i2 == 0 : i2 == rects.length - 1 || rect.top < rect.bottom)
            break;
        }
        return flattenRect(rect, !fromBack);
      }
      get isEditable() {
        return false;
      }
      get isWidget() {
        return true;
      }
      get isHidden() {
        return this.widget.isHidden;
      }
      destroy() {
        super.destroy();
        if (this.dom)
          this.widget.destroy(this.dom);
      }
    }
    class WidgetBufferView extends ContentView {
      constructor(side) {
        super();
        this.side = side;
      }
      get length() {
        return 0;
      }
      merge() {
        return false;
      }
      become(other) {
        return other instanceof WidgetBufferView && other.side == this.side;
      }
      split() {
        return new WidgetBufferView(this.side);
      }
      sync() {
        if (!this.dom) {
          let dom = document.createElement("img");
          dom.className = "cm-widgetBuffer";
          dom.setAttribute("aria-hidden", "true");
          this.setDOM(dom);
        }
      }
      getSide() {
        return this.side;
      }
      domAtPos(pos2) {
        return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom);
      }
      localPosFromDOM() {
        return 0;
      }
      domBoundsAround() {
        return null;
      }
      coordsAt(pos2) {
        return this.dom.getBoundingClientRect();
      }
      get overrideDOMText() {
        return Text.empty;
      }
      get isHidden() {
        return true;
      }
    }
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    function inlineDOMAtPos(parent, pos2) {
      let dom = parent.dom, { children: children2 } = parent, i2 = 0;
      for (let off = 0; i2 < children2.length; i2++) {
        let child = children2[i2], end2 = off + child.length;
        if (end2 == off && child.getSide() <= 0)
          continue;
        if (pos2 > off && pos2 < end2 && child.dom.parentNode == dom)
          return child.domAtPos(pos2 - off);
        if (pos2 <= off)
          break;
        off = end2;
      }
      for (let j2 = i2; j2 > 0; j2--) {
        let prev = children2[j2 - 1];
        if (prev.dom.parentNode == dom)
          return prev.domAtPos(prev.length);
      }
      for (let j2 = i2; j2 < children2.length; j2++) {
        let next = children2[j2];
        if (next.dom.parentNode == dom)
          return next.domAtPos(0);
      }
      return new DOMPos(dom, 0);
    }
    function joinInlineInto(parent, view, open) {
      let last, { children: children2 } = parent;
      if (open > 0 && view instanceof MarkView && children2.length && (last = children2[children2.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
        joinInlineInto(last, view.children[0], open - 1);
      } else {
        children2.push(view);
        view.setParent(parent);
      }
      parent.length += view.length;
    }
    function coordsInChildren(view, pos2, side) {
      let before = null, beforePos = -1, after = null, afterPos = -1;
      function scan(view2, pos3) {
        for (let i2 = 0, off = 0; i2 < view2.children.length && off <= pos3; i2++) {
          let child = view2.children[i2], end2 = off + child.length;
          if (end2 >= pos3) {
            if (child.children.length) {
              scan(child, pos3 - off);
            } else if ((!after || after.isHidden && side > 0) && (end2 > pos3 || off == end2 && child.getSide() > 0)) {
              after = child;
              afterPos = pos3 - off;
            } else if (off < pos3 || off == end2 && child.getSide() < 0 && !child.isHidden) {
              before = child;
              beforePos = pos3 - off;
            }
          }
          off = end2;
        }
      }
      scan(view, pos2);
      let target = (side < 0 ? before : after) || before || after;
      if (target)
        return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
      return fallbackRect(view);
    }
    function fallbackRect(view) {
      let last = view.dom.lastChild;
      if (!last)
        return view.dom.getBoundingClientRect();
      let rects = clientRectsFor(last);
      return rects[rects.length - 1] || null;
    }
    function combineAttrs(source2, target) {
      for (let name2 in source2) {
        if (name2 == "class" && target.class)
          target.class += " " + source2.class;
        else if (name2 == "style" && target.style)
          target.style += ";" + source2.style;
        else
          target[name2] = source2[name2];
      }
      return target;
    }
    const noAttrs$1 = /* @__PURE__ */ Object.create(null);
    function attrsEq(a2, b, ignore) {
      if (a2 == b)
        return true;
      if (!a2)
        a2 = noAttrs$1;
      if (!b)
        b = noAttrs$1;
      let keysA = Object.keys(a2), keysB = Object.keys(b);
      if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) != keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
        return false;
      for (let key2 of keysA) {
        if (key2 != ignore && (keysB.indexOf(key2) == -1 || a2[key2] !== b[key2]))
          return false;
      }
      return true;
    }
    function updateAttrs(dom, prev, attrs) {
      let changed = false;
      if (prev) {
        for (let name2 in prev)
          if (!(attrs && name2 in attrs)) {
            changed = true;
            if (name2 == "style")
              dom.style.cssText = "";
            else
              dom.removeAttribute(name2);
          }
      }
      if (attrs) {
        for (let name2 in attrs)
          if (!(prev && prev[name2] == attrs[name2])) {
            changed = true;
            if (name2 == "style")
              dom.style.cssText = attrs[name2];
            else
              dom.setAttribute(name2, attrs[name2]);
          }
      }
      return changed;
    }
    function getAttrs(dom) {
      let attrs = /* @__PURE__ */ Object.create(null);
      for (let i2 = 0; i2 < dom.attributes.length; i2++) {
        let attr = dom.attributes[i2];
        attrs[attr.name] = attr.value;
      }
      return attrs;
    }
    class WidgetType {
      /**
      Compare this instance to another instance of the same type.
      (TypeScript can't express this, but only instances of the same
      specific class will be passed to this method.) This is used to
      avoid redrawing widgets when they are replaced by a new
      decoration of the same type. The default implementation just
      returns `false`, which will cause new instances of the widget to
      always be redrawn.
      */
      eq(widget) {
        return false;
      }
      /**
      Update a DOM element created by a widget of the same type (but
      different, non-`eq` content) to reflect this widget. May return
      true to indicate that it could update, false to indicate it
      couldn't (in which case the widget will be redrawn). The default
      implementation just returns false.
      */
      updateDOM(dom, view) {
        return false;
      }
      /**
      @internal
      */
      compare(other) {
        return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      The estimated height this widget will have, to be used when
      estimating the height of content that hasn't been drawn. May
      return -1 to indicate you don't know. The default implementation
      returns -1.
      */
      get estimatedHeight() {
        return -1;
      }
      /**
      For inline widgets that are displayed inline (as opposed to
      `inline-block`) and introduce line breaks (through `<br>` tags
      or textual newlines), this must indicate the amount of line
      breaks they introduce. Defaults to 0.
      */
      get lineBreaks() {
        return 0;
      }
      /**
      Can be used to configure which kinds of events inside the widget
      should be ignored by the editor. The default is to ignore all
      events.
      */
      ignoreEvent(event) {
        return true;
      }
      /**
      Override the way screen coordinates for positions at/in the
      widget are found. `pos` will be the offset into the widget, and
      `side` the side of the position that is being queried—less than
      zero for before, greater than zero for after, and zero for
      directly at that position.
      */
      coordsAt(dom, pos2, side) {
        return null;
      }
      /**
      @internal
      */
      get isHidden() {
        return false;
      }
      /**
      @internal
      */
      get editable() {
        return false;
      }
      /**
      This is called when the an instance of the widget is removed
      from the editor view.
      */
      destroy(dom) {
      }
    }
    var BlockType = /* @__PURE__ */ function(BlockType2) {
      BlockType2[BlockType2["Text"] = 0] = "Text";
      BlockType2[BlockType2["WidgetBefore"] = 1] = "WidgetBefore";
      BlockType2[BlockType2["WidgetAfter"] = 2] = "WidgetAfter";
      BlockType2[BlockType2["WidgetRange"] = 3] = "WidgetRange";
      return BlockType2;
    }(BlockType || (BlockType = {}));
    class Decoration extends RangeValue {
      constructor(startSide, endSide, widget, spec) {
        super();
        this.startSide = startSide;
        this.endSide = endSide;
        this.widget = widget;
        this.spec = spec;
      }
      /**
      @internal
      */
      get heightRelevant() {
        return false;
      }
      /**
      Create a mark decoration, which influences the styling of the
      content in its range. Nested mark decorations will cause nested
      DOM elements to be created. Nesting order is determined by
      precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
      the higher-precedence decorations creating the inner DOM nodes.
      Such elements are split on line boundaries and on the boundaries
      of lower-precedence decorations.
      */
      static mark(spec) {
        return new MarkDecoration(spec);
      }
      /**
      Create a widget decoration, which displays a DOM element at the
      given position.
      */
      static widget(spec) {
        let side = Math.max(-1e4, Math.min(1e4, spec.side || 0)), block2 = !!spec.block;
        side += block2 && !spec.inlineOrder ? side > 0 ? 3e8 : -4e8 : side > 0 ? 1e8 : -1e8;
        return new PointDecoration(spec, side, side, block2, spec.widget || null, false);
      }
      /**
      Create a replace decoration which replaces the given range with
      a widget, or simply hides it.
      */
      static replace(spec) {
        let block2 = !!spec.block, startSide, endSide;
        if (spec.isBlockGap) {
          startSide = -5e8;
          endSide = 4e8;
        } else {
          let { start: start2, end: end2 } = getInclusive(spec, block2);
          startSide = (start2 ? block2 ? -3e8 : -1 : 5e8) - 1;
          endSide = (end2 ? block2 ? 2e8 : 1 : -6e8) + 1;
        }
        return new PointDecoration(spec, startSide, endSide, block2, spec.widget || null, true);
      }
      /**
      Create a line decoration, which can add DOM attributes to the
      line starting at the given position.
      */
      static line(spec) {
        return new LineDecoration(spec);
      }
      /**
      Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
      decorated range or ranges. If the ranges aren't already sorted,
      pass `true` for `sort` to make the library sort them for you.
      */
      static set(of, sort = false) {
        return RangeSet.of(of, sort);
      }
      /**
      @internal
      */
      hasHeight() {
        return this.widget ? this.widget.estimatedHeight > -1 : false;
      }
    }
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
      constructor(spec) {
        let { start: start2, end: end2 } = getInclusive(spec);
        super(start2 ? -1 : 5e8, end2 ? 1 : -6e8, null, spec);
        this.tagName = spec.tagName || "span";
        this.class = spec.class || "";
        this.attrs = spec.attributes || null;
      }
      eq(other) {
        var _a2, _b2;
        return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && (this.class || ((_a2 = this.attrs) === null || _a2 === void 0 ? void 0 : _a2.class)) == (other.class || ((_b2 = other.attrs) === null || _b2 === void 0 ? void 0 : _b2.class)) && attrsEq(this.attrs, other.attrs, "class");
      }
      range(from, to = from) {
        if (from >= to)
          throw new RangeError("Mark decorations may not be empty");
        return super.range(from, to);
      }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
      constructor(spec) {
        super(-2e8, -2e8, null, spec);
      }
      eq(other) {
        return other instanceof LineDecoration && this.spec.class == other.spec.class && attrsEq(this.spec.attributes, other.spec.attributes);
      }
      range(from, to = from) {
        if (to != from)
          throw new RangeError("Line decoration ranges must be zero-length");
        return super.range(from, to);
      }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
      constructor(spec, startSide, endSide, block2, widget, isReplace) {
        super(startSide, endSide, widget, spec);
        this.block = block2;
        this.isReplace = isReplace;
        this.mapMode = !block2 ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
      }
      // Only relevant when this.block == true
      get type() {
        return this.startSide != this.endSide ? BlockType.WidgetRange : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
      }
      get heightRelevant() {
        return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
      }
      eq(other) {
        return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
      }
      range(from, to = from) {
        if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide <= 0))
          throw new RangeError("Invalid range for replacement decoration");
        if (!this.isReplace && to != from)
          throw new RangeError("Widget decorations can only have zero-length ranges");
        return super.range(from, to);
      }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec, block2 = false) {
      let { inclusiveStart: start2, inclusiveEnd: end2 } = spec;
      if (start2 == null)
        start2 = spec.inclusive;
      if (end2 == null)
        end2 = spec.inclusive;
      return { start: start2 !== null && start2 !== void 0 ? start2 : block2, end: end2 !== null && end2 !== void 0 ? end2 : block2 };
    }
    function widgetsEq(a2, b) {
      return a2 == b || !!(a2 && b && a2.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
      let last = ranges.length - 1;
      if (last >= 0 && ranges[last] + margin >= from)
        ranges[last] = Math.max(ranges[last], to);
      else
        ranges.push(from, to);
    }
    class LineView extends ContentView {
      constructor() {
        super(...arguments);
        this.children = [];
        this.length = 0;
        this.prevAttrs = void 0;
        this.attrs = null;
        this.breakAfter = 0;
      }
      // Consumes source
      merge(from, to, source2, hasStart, openStart, openEnd) {
        if (source2) {
          if (!(source2 instanceof LineView))
            return false;
          if (!this.dom)
            source2.transferDOM(this);
        }
        if (hasStart)
          this.setDeco(source2 ? source2.attrs : null);
        mergeChildrenInto(this, from, to, source2 ? source2.children.slice() : [], openStart, openEnd);
        return true;
      }
      split(at) {
        let end2 = new LineView();
        end2.breakAfter = this.breakAfter;
        if (this.length == 0)
          return end2;
        let { i: i2, off } = this.childPos(at);
        if (off) {
          end2.append(this.children[i2].split(off), 0);
          this.children[i2].merge(off, this.children[i2].length, null, false, 0, 0);
          i2++;
        }
        for (let j2 = i2; j2 < this.children.length; j2++)
          end2.append(this.children[j2], 0);
        while (i2 > 0 && this.children[i2 - 1].length == 0)
          this.children[--i2].destroy();
        this.children.length = i2;
        this.markDirty();
        this.length = at;
        return end2;
      }
      transferDOM(other) {
        if (!this.dom)
          return;
        this.markDirty();
        other.setDOM(this.dom);
        other.prevAttrs = this.prevAttrs === void 0 ? this.attrs : this.prevAttrs;
        this.prevAttrs = void 0;
        this.dom = null;
      }
      setDeco(attrs) {
        if (!attrsEq(this.attrs, attrs)) {
          if (this.dom) {
            this.prevAttrs = this.attrs;
            this.markDirty();
          }
          this.attrs = attrs;
        }
      }
      append(child, openStart) {
        joinInlineInto(this, child, openStart);
      }
      // Only called when building a line view in ContentBuilder
      addLineDeco(deco) {
        let attrs = deco.spec.attributes, cls = deco.spec.class;
        if (attrs)
          this.attrs = combineAttrs(attrs, this.attrs || {});
        if (cls)
          this.attrs = combineAttrs({ class: cls }, this.attrs || {});
      }
      domAtPos(pos2) {
        return inlineDOMAtPos(this, pos2);
      }
      reuseDOM(node) {
        if (node.nodeName == "DIV") {
          this.setDOM(node);
          this.flags |= 4 | 2;
        }
      }
      sync(view, track) {
        var _a2;
        if (!this.dom) {
          this.setDOM(document.createElement("div"));
          this.dom.className = "cm-line";
          this.prevAttrs = this.attrs ? null : void 0;
        } else if (this.flags & 4) {
          clearAttributes(this.dom);
          this.dom.className = "cm-line";
          this.prevAttrs = this.attrs ? null : void 0;
        }
        if (this.prevAttrs !== void 0) {
          updateAttrs(this.dom, this.prevAttrs, this.attrs);
          this.dom.classList.add("cm-line");
          this.prevAttrs = void 0;
        }
        super.sync(view, track);
        let last = this.dom.lastChild;
        while (last && ContentView.get(last) instanceof MarkView)
          last = last.lastChild;
        if (!last || !this.length || last.nodeName != "BR" && ((_a2 = ContentView.get(last)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) == false && (!browser.ios || !this.children.some((ch3) => ch3 instanceof TextView))) {
          let hack = document.createElement("BR");
          hack.cmIgnore = true;
          this.dom.appendChild(hack);
        }
      }
      measureTextSize() {
        if (this.children.length == 0 || this.length > 20)
          return null;
        let totalWidth = 0, textHeight;
        for (let child of this.children) {
          if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
            return null;
          let rects = clientRectsFor(child.dom);
          if (rects.length != 1)
            return null;
          totalWidth += rects[0].width;
          textHeight = rects[0].height;
        }
        return !totalWidth ? null : {
          lineHeight: this.dom.getBoundingClientRect().height,
          charWidth: totalWidth / this.length,
          textHeight
        };
      }
      coordsAt(pos2, side) {
        let rect = coordsInChildren(this, pos2, side);
        if (!this.children.length && rect && this.parent) {
          let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
          if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
            let dist2 = (height - heightOracle.textHeight) / 2;
            return { top: rect.top + dist2, bottom: rect.bottom - dist2, left: rect.left, right: rect.left };
          }
        }
        return rect;
      }
      become(other) {
        return other instanceof LineView && this.children.length == 0 && other.children.length == 0 && attrsEq(this.attrs, other.attrs) && this.breakAfter == other.breakAfter;
      }
      covers() {
        return true;
      }
      static find(docView, pos2) {
        for (let i2 = 0, off = 0; i2 < docView.children.length; i2++) {
          let block2 = docView.children[i2], end2 = off + block2.length;
          if (end2 >= pos2) {
            if (block2 instanceof LineView)
              return block2;
            if (end2 > pos2)
              break;
          }
          off = end2 + block2.breakAfter;
        }
        return null;
      }
    }
    class BlockWidgetView extends ContentView {
      constructor(widget, length, deco) {
        super();
        this.widget = widget;
        this.length = length;
        this.deco = deco;
        this.breakAfter = 0;
        this.prevWidget = null;
      }
      merge(from, to, source2, _takeDeco, openStart, openEnd) {
        if (source2 && (!(source2 instanceof BlockWidgetView) || !this.widget.compare(source2.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
          return false;
        this.length = from + (source2 ? source2.length : 0) + (this.length - to);
        return true;
      }
      domAtPos(pos2) {
        return pos2 == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos2 == this.length);
      }
      split(at) {
        let len = this.length - at;
        this.length = at;
        let end2 = new BlockWidgetView(this.widget, len, this.deco);
        end2.breakAfter = this.breakAfter;
        return end2;
      }
      get children() {
        return noChildren;
      }
      sync(view) {
        if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
          if (this.dom && this.prevWidget)
            this.prevWidget.destroy(this.dom);
          this.prevWidget = null;
          this.setDOM(this.widget.toDOM(view));
          if (!this.widget.editable)
            this.dom.contentEditable = "false";
        }
      }
      get overrideDOMText() {
        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
      }
      domBoundsAround() {
        return null;
      }
      become(other) {
        if (other instanceof BlockWidgetView && other.widget.constructor == this.widget.constructor) {
          if (!other.widget.compare(this.widget))
            this.markDirty(true);
          if (this.dom && !this.prevWidget)
            this.prevWidget = this.widget;
          this.widget = other.widget;
          this.length = other.length;
          this.deco = other.deco;
          this.breakAfter = other.breakAfter;
          return true;
        }
        return false;
      }
      ignoreMutation() {
        return true;
      }
      ignoreEvent(event) {
        return this.widget.ignoreEvent(event);
      }
      get isEditable() {
        return false;
      }
      get isWidget() {
        return true;
      }
      coordsAt(pos2, side) {
        let custom = this.widget.coordsAt(this.dom, pos2, side);
        if (custom)
          return custom;
        if (this.widget instanceof BlockGapWidget)
          return null;
        return flattenRect(this.dom.getBoundingClientRect(), this.length ? pos2 == 0 : side <= 0);
      }
      destroy() {
        super.destroy();
        if (this.dom)
          this.widget.destroy(this.dom);
      }
      covers(side) {
        let { startSide, endSide } = this.deco;
        return startSide == endSide ? false : side < 0 ? startSide < 0 : endSide > 0;
      }
    }
    class BlockGapWidget extends WidgetType {
      constructor(height) {
        super();
        this.height = height;
      }
      toDOM() {
        let elt = document.createElement("div");
        elt.className = "cm-gap";
        this.updateDOM(elt);
        return elt;
      }
      eq(other) {
        return other.height == this.height;
      }
      updateDOM(elt) {
        elt.style.height = this.height + "px";
        return true;
      }
      get editable() {
        return true;
      }
      get estimatedHeight() {
        return this.height;
      }
      ignoreEvent() {
        return false;
      }
    }
    class ContentBuilder {
      constructor(doc2, pos2, end2, disallowBlockEffectsFor) {
        this.doc = doc2;
        this.pos = pos2;
        this.end = end2;
        this.disallowBlockEffectsFor = disallowBlockEffectsFor;
        this.content = [];
        this.curLine = null;
        this.breakAtStart = 0;
        this.pendingBuffer = 0;
        this.bufferMarks = [];
        this.atCursorPos = true;
        this.openStart = -1;
        this.openEnd = -1;
        this.text = "";
        this.textOff = 0;
        this.cursor = doc2.iter();
        this.skip = pos2;
      }
      posCovered() {
        if (this.content.length == 0)
          return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
        let last = this.content[this.content.length - 1];
        return !(last.breakAfter || last instanceof BlockWidgetView && last.deco.endSide < 0);
      }
      getLine() {
        if (!this.curLine) {
          this.content.push(this.curLine = new LineView());
          this.atCursorPos = true;
        }
        return this.curLine;
      }
      flushBuffer(active = this.bufferMarks) {
        if (this.pendingBuffer) {
          this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
          this.pendingBuffer = 0;
        }
      }
      addBlockWidget(view) {
        this.flushBuffer();
        this.curLine = null;
        this.content.push(view);
      }
      finish(openEnd) {
        if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
          this.flushBuffer();
        else
          this.pendingBuffer = 0;
        if (!this.posCovered() && !(openEnd && this.content.length && this.content[this.content.length - 1] instanceof BlockWidgetView))
          this.getLine();
      }
      buildText(length, active, openStart) {
        while (length > 0) {
          if (this.textOff == this.text.length) {
            let { value, lineBreak, done } = this.cursor.next(this.skip);
            this.skip = 0;
            if (done)
              throw new Error("Ran out of text content when drawing inline views");
            if (lineBreak) {
              if (!this.posCovered())
                this.getLine();
              if (this.content.length)
                this.content[this.content.length - 1].breakAfter = 1;
              else
                this.breakAtStart = 1;
              this.flushBuffer();
              this.curLine = null;
              this.atCursorPos = true;
              length--;
              continue;
            } else {
              this.text = value;
              this.textOff = 0;
            }
          }
          let take = Math.min(
            this.text.length - this.textOff,
            length,
            512
            /* T.Chunk */
          );
          this.flushBuffer(active.slice(active.length - openStart));
          this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
          this.atCursorPos = true;
          this.textOff += take;
          length -= take;
          openStart = 0;
        }
      }
      span(from, to, active, openStart) {
        this.buildText(to - from, active, openStart);
        this.pos = to;
        if (this.openStart < 0)
          this.openStart = openStart;
      }
      point(from, to, deco, active, openStart, index) {
        if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
          if (deco.block)
            throw new RangeError("Block decorations may not be specified via plugins");
          if (to > this.doc.lineAt(this.pos).to)
            throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
        }
        let len = to - from;
        if (deco instanceof PointDecoration) {
          if (deco.block) {
            if (deco.startSide > 0 && !this.posCovered())
              this.getLine();
            this.addBlockWidget(new BlockWidgetView(deco.widget || NullWidget.block, len, deco));
          } else {
            let view = WidgetView.create(deco.widget || NullWidget.inline, len, len ? 0 : deco.startSide);
            let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length && (from < to || deco.startSide > 0);
            let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
            let line2 = this.getLine();
            if (this.pendingBuffer == 2 && !cursorBefore && !view.isEditable)
              this.pendingBuffer = 0;
            this.flushBuffer(active);
            if (cursorBefore) {
              line2.append(wrapMarks(new WidgetBufferView(1), active), openStart);
              openStart = active.length + Math.max(0, openStart - active.length);
            }
            line2.append(wrapMarks(view, active), openStart);
            this.atCursorPos = cursorAfter;
            this.pendingBuffer = !cursorAfter ? 0 : from < to || openStart > active.length ? 1 : 2;
            if (this.pendingBuffer)
              this.bufferMarks = active.slice();
          }
        } else if (this.doc.lineAt(this.pos).from == this.pos) {
          this.getLine().addLineDeco(deco);
        }
        if (len) {
          if (this.textOff + len <= this.text.length) {
            this.textOff += len;
          } else {
            this.skip += len - (this.text.length - this.textOff);
            this.text = "";
            this.textOff = 0;
          }
          this.pos = to;
        }
        if (this.openStart < 0)
          this.openStart = openStart;
      }
      static build(text2, from, to, decorations2, dynamicDecorationMap) {
        let builder = new ContentBuilder(text2, from, to, dynamicDecorationMap);
        builder.openEnd = RangeSet.spans(decorations2, from, to, builder);
        if (builder.openStart < 0)
          builder.openStart = builder.openEnd;
        builder.finish(builder.openEnd);
        return builder;
      }
    }
    function wrapMarks(view, active) {
      for (let mark of active)
        view = new MarkView(mark, [view], view.length);
      return view;
    }
    class NullWidget extends WidgetType {
      constructor(tag) {
        super();
        this.tag = tag;
      }
      eq(other) {
        return other.tag == this.tag;
      }
      toDOM() {
        return document.createElement(this.tag);
      }
      updateDOM(elt) {
        return elt.nodeName.toLowerCase() == this.tag;
      }
      get isHidden() {
        return true;
      }
    }
    NullWidget.inline = /* @__PURE__ */ new NullWidget("span");
    NullWidget.block = /* @__PURE__ */ new NullWidget("div");
    var Direction = /* @__PURE__ */ function(Direction2) {
      Direction2[Direction2["LTR"] = 0] = "LTR";
      Direction2[Direction2["RTL"] = 1] = "RTL";
      return Direction2;
    }(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    function dec(str2) {
      let result = [];
      for (let i2 = 0; i2 < str2.length; i2++)
        result.push(1 << +str2[i2]);
      return result;
    }
    const LowTypes = /* @__PURE__ */ dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    const ArabicTypes = /* @__PURE__ */ dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /* @__PURE__ */ Object.create(null), BracketStack = [];
    for (let p2 of ["()", "[]", "{}"]) {
      let l2 = /* @__PURE__ */ p2.charCodeAt(0), r2 = /* @__PURE__ */ p2.charCodeAt(1);
      Brackets[l2] = r2;
      Brackets[r2] = -l2;
    }
    function charType(ch3) {
      return ch3 <= 247 ? LowTypes[ch3] : 1424 <= ch3 && ch3 <= 1524 ? 2 : 1536 <= ch3 && ch3 <= 1785 ? ArabicTypes[ch3 - 1536] : 1774 <= ch3 && ch3 <= 2220 ? 4 : 8192 <= ch3 && ch3 <= 8204 ? 256 : 64336 <= ch3 && ch3 <= 65023 ? 4 : 1;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
    class BidiSpan {
      /**
      The direction of this span.
      */
      get dir() {
        return this.level % 2 ? RTL : LTR;
      }
      /**
      @internal
      */
      constructor(from, to, level) {
        this.from = from;
        this.to = to;
        this.level = level;
      }
      /**
      @internal
      */
      side(end2, dir) {
        return this.dir == dir == end2 ? this.to : this.from;
      }
      /**
      @internal
      */
      forward(forward, dir) {
        return forward == (this.dir == dir);
      }
      /**
      @internal
      */
      static find(order2, index, level, assoc) {
        let maybe = -1;
        for (let i2 = 0; i2 < order2.length; i2++) {
          let span = order2[i2];
          if (span.from <= index && span.to >= index) {
            if (span.level == level)
              return i2;
            if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order2[maybe].level > span.level))
              maybe = i2;
          }
        }
        if (maybe < 0)
          throw new RangeError("Index out of range");
        return maybe;
      }
    }
    function isolatesEq(a2, b) {
      if (a2.length != b.length)
        return false;
      for (let i2 = 0; i2 < a2.length; i2++) {
        let iA = a2[i2], iB = b[i2];
        if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
          return false;
      }
      return true;
    }
    const types = [];
    function computeCharTypes(line2, rFrom, rTo, isolates, outerType) {
      for (let iI = 0; iI <= isolates.length; iI++) {
        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
        let prevType = iI ? 256 : outerType;
        for (let i2 = from, prev = prevType, prevStrong = prevType; i2 < to; i2++) {
          let type = charType(line2.charCodeAt(i2));
          if (type == 512)
            type = prev;
          else if (type == 8 && prevStrong == 4)
            type = 16;
          types[i2] = type == 4 ? 2 : type;
          if (type & 7)
            prevStrong = type;
          prev = type;
        }
        for (let i2 = from, prev = prevType, prevStrong = prevType; i2 < to; i2++) {
          let type = types[i2];
          if (type == 128) {
            if (i2 < to - 1 && prev == types[i2 + 1] && prev & 24)
              type = types[i2] = prev;
            else
              types[i2] = 256;
          } else if (type == 64) {
            let end2 = i2 + 1;
            while (end2 < to && types[end2] == 64)
              end2++;
            let replace2 = i2 && prev == 8 || end2 < rTo && types[end2] == 8 ? prevStrong == 1 ? 1 : 8 : 256;
            for (let j2 = i2; j2 < end2; j2++)
              types[j2] = replace2;
            i2 = end2 - 1;
          } else if (type == 8 && prevStrong == 1) {
            types[i2] = 1;
          }
          prev = type;
          if (type & 7)
            prevStrong = type;
        }
      }
    }
    function processBracketPairs(line2, rFrom, rTo, isolates, outerType) {
      let oppositeType = outerType == 1 ? 2 : 1;
      for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
        for (let i2 = from, ch3, br, type; i2 < to; i2++) {
          if (br = Brackets[ch3 = line2.charCodeAt(i2)]) {
            if (br < 0) {
              for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                if (BracketStack[sJ + 1] == -br) {
                  let flags = BracketStack[sJ + 2];
                  let type2 = flags & 2 ? outerType : !(flags & 4) ? 0 : flags & 1 ? oppositeType : outerType;
                  if (type2)
                    types[i2] = types[BracketStack[sJ]] = type2;
                  sI = sJ;
                  break;
                }
              }
            } else if (BracketStack.length == 189) {
              break;
            } else {
              BracketStack[sI++] = i2;
              BracketStack[sI++] = ch3;
              BracketStack[sI++] = context;
            }
          } else if ((type = types[i2]) == 2 || type == 1) {
            let embed = type == outerType;
            context = embed ? 0 : 1;
            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
              let cur2 = BracketStack[sJ + 2];
              if (cur2 & 2)
                break;
              if (embed) {
                BracketStack[sJ + 2] |= 2;
              } else {
                if (cur2 & 4)
                  break;
                BracketStack[sJ + 2] |= 4;
              }
            }
          }
        }
      }
    }
    function processNeutrals(rFrom, rTo, isolates, outerType) {
      for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
        let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
        for (let i2 = from; i2 < to; ) {
          let type = types[i2];
          if (type == 256) {
            let end2 = i2 + 1;
            for (; ; ) {
              if (end2 == to) {
                if (iI == isolates.length)
                  break;
                end2 = isolates[iI++].to;
                to = iI < isolates.length ? isolates[iI].from : rTo;
              } else if (types[end2] == 256) {
                end2++;
              } else {
                break;
              }
            }
            let beforeL = prev == 1;
            let afterL = (end2 < rTo ? types[end2] : outerType) == 1;
            let replace2 = beforeL == afterL ? beforeL ? 1 : 2 : outerType;
            for (let j2 = end2, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j2 > i2; ) {
              if (j2 == fromJ) {
                j2 = isolates[--jI].from;
                fromJ = jI ? isolates[jI - 1].to : rFrom;
              }
              types[--j2] = replace2;
            }
            i2 = end2;
          } else {
            prev = type;
            i2++;
          }
        }
      }
    }
    function emitSpans(line2, from, to, level, baseLevel, isolates, order2) {
      let ourType = level % 2 ? 2 : 1;
      if (level % 2 == baseLevel % 2) {
        for (let iCh = from, iI = 0; iCh < to; ) {
          let sameDir = true, isNum = false;
          if (iI == isolates.length || iCh < isolates[iI].from) {
            let next = types[iCh];
            if (next != ourType) {
              sameDir = false;
              isNum = next == 16;
            }
          }
          let recurse = !sameDir && ourType == 1 ? [] : null;
          let localLevel = sameDir ? level : level + 1;
          let iScan = iCh;
          run: for (; ; ) {
            if (iI < isolates.length && iScan == isolates[iI].from) {
              if (isNum)
                break run;
              let iso = isolates[iI];
              if (!sameDir)
                for (let upto = iso.to, jI = iI + 1; ; ) {
                  if (upto == to)
                    break run;
                  if (jI < isolates.length && isolates[jI].from == upto)
                    upto = isolates[jI++].to;
                  else if (types[upto] == ourType)
                    break run;
                  else
                    break;
                }
              iI++;
              if (recurse) {
                recurse.push(iso);
              } else {
                if (iso.from > iCh)
                  order2.push(new BidiSpan(iCh, iso.from, localLevel));
                let dirSwap = iso.direction == LTR != !(localLevel % 2);
                computeSectionOrder(line2, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order2);
                iCh = iso.to;
              }
              iScan = iso.to;
            } else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
              break;
            } else {
              iScan++;
            }
          }
          if (recurse)
            emitSpans(line2, iCh, iScan, level + 1, baseLevel, recurse, order2);
          else if (iCh < iScan)
            order2.push(new BidiSpan(iCh, iScan, localLevel));
          iCh = iScan;
        }
      } else {
        for (let iCh = to, iI = isolates.length; iCh > from; ) {
          let sameDir = true, isNum = false;
          if (!iI || iCh > isolates[iI - 1].to) {
            let next = types[iCh - 1];
            if (next != ourType) {
              sameDir = false;
              isNum = next == 16;
            }
          }
          let recurse = !sameDir && ourType == 1 ? [] : null;
          let localLevel = sameDir ? level : level + 1;
          let iScan = iCh;
          run: for (; ; ) {
            if (iI && iScan == isolates[iI - 1].to) {
              if (isNum)
                break run;
              let iso = isolates[--iI];
              if (!sameDir)
                for (let upto = iso.from, jI = iI; ; ) {
                  if (upto == from)
                    break run;
                  if (jI && isolates[jI - 1].to == upto)
                    upto = isolates[--jI].from;
                  else if (types[upto - 1] == ourType)
                    break run;
                  else
                    break;
                }
              if (recurse) {
                recurse.push(iso);
              } else {
                if (iso.to < iCh)
                  order2.push(new BidiSpan(iso.to, iCh, localLevel));
                let dirSwap = iso.direction == LTR != !(localLevel % 2);
                computeSectionOrder(line2, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order2);
                iCh = iso.from;
              }
              iScan = iso.from;
            } else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
              break;
            } else {
              iScan--;
            }
          }
          if (recurse)
            emitSpans(line2, iScan, iCh, level + 1, baseLevel, recurse, order2);
          else if (iScan < iCh)
            order2.push(new BidiSpan(iScan, iCh, localLevel));
          iCh = iScan;
        }
      }
    }
    function computeSectionOrder(line2, level, baseLevel, isolates, from, to, order2) {
      let outerType = level % 2 ? 2 : 1;
      computeCharTypes(line2, from, to, isolates, outerType);
      processBracketPairs(line2, from, to, isolates, outerType);
      processNeutrals(from, to, isolates, outerType);
      emitSpans(line2, from, to, level, baseLevel, isolates, order2);
    }
    function computeOrder(line2, direction, isolates) {
      if (!line2)
        return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
      if (direction == LTR && !isolates.length && !BidiRE.test(line2))
        return trivialOrder(line2.length);
      if (isolates.length)
        while (line2.length > types.length)
          types[types.length] = 256;
      let order2 = [], level = direction == LTR ? 0 : 1;
      computeSectionOrder(line2, level, level, isolates, 0, line2.length, order2);
      return order2;
    }
    function trivialOrder(length) {
      return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    function moveVisually(line2, order2, dir, start2, forward) {
      var _a2;
      let startIndex = start2.head - line2.from;
      let spanI = BidiSpan.find(order2, startIndex, (_a2 = start2.bidiLevel) !== null && _a2 !== void 0 ? _a2 : -1, start2.assoc);
      let span = order2[spanI], spanEnd = span.side(forward, dir);
      if (startIndex == spanEnd) {
        let nextI = spanI += forward ? 1 : -1;
        if (nextI < 0 || nextI >= order2.length)
          return null;
        span = order2[spanI = nextI];
        startIndex = span.side(!forward, dir);
        spanEnd = span.side(forward, dir);
      }
      let nextIndex = findClusterBreak(line2.text, startIndex, span.forward(forward, dir));
      if (nextIndex < span.from || nextIndex > span.to)
        nextIndex = spanEnd;
      movedOver = line2.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
      let nextSpan = spanI == (forward ? order2.length - 1 : 0) ? null : order2[spanI + (forward ? 1 : -1)];
      if (nextSpan && nextIndex == spanEnd && nextSpan.level + (forward ? 0 : 1) < span.level)
        return EditorSelection.cursor(nextSpan.side(!forward, dir) + line2.from, nextSpan.forward(forward, dir) ? 1 : -1, nextSpan.level);
      return EditorSelection.cursor(nextIndex + line2.from, span.forward(forward, dir) ? -1 : 1, span.level);
    }
    function autoDirection(text2, from, to) {
      for (let i2 = from; i2 < to; i2++) {
        let type = charType(text2.charCodeAt(i2));
        if (type == 1)
          return LTR;
        if (type == 2 || type == 4)
          return RTL;
      }
      return LTR;
    }
    const clickAddsSelectionRange = /* @__PURE__ */ Facet.define();
    const dragMovesSelection$1 = /* @__PURE__ */ Facet.define();
    const mouseSelectionStyle = /* @__PURE__ */ Facet.define();
    const exceptionSink = /* @__PURE__ */ Facet.define();
    const updateListener = /* @__PURE__ */ Facet.define();
    const inputHandler = /* @__PURE__ */ Facet.define();
    const focusChangeEffect = /* @__PURE__ */ Facet.define();
    const clipboardInputFilter = /* @__PURE__ */ Facet.define();
    const clipboardOutputFilter = /* @__PURE__ */ Facet.define();
    const perLineTextDirection = /* @__PURE__ */ Facet.define({
      combine: (values) => values.some((x2) => x2)
    });
    const nativeSelectionHidden = /* @__PURE__ */ Facet.define({
      combine: (values) => values.some((x2) => x2)
    });
    const scrollHandler = /* @__PURE__ */ Facet.define();
    class ScrollTarget {
      constructor(range, y2 = "nearest", x2 = "nearest", yMargin = 5, xMargin = 5, isSnapshot = false) {
        this.range = range;
        this.y = y2;
        this.x = x2;
        this.yMargin = yMargin;
        this.xMargin = xMargin;
        this.isSnapshot = isSnapshot;
      }
      map(changes) {
        return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
      clip(state) {
        return this.range.to <= state.doc.length ? this : new ScrollTarget(EditorSelection.cursor(state.doc.length), this.y, this.x, this.yMargin, this.xMargin, this.isSnapshot);
      }
    }
    const scrollIntoView$1 = /* @__PURE__ */ StateEffect.define({ map: (t2, ch3) => t2.map(ch3) });
    const setEditContextFormatting = /* @__PURE__ */ StateEffect.define();
    function logException(state, exception, context) {
      let handler = state.facet(exceptionSink);
      if (handler.length)
        handler[0](exception);
      else if (window.onerror)
        window.onerror(String(exception), context, void 0, void 0, exception);
      else if (context)
        console.error(context + ":", exception);
      else
        console.error(exception);
    }
    const editable = /* @__PURE__ */ Facet.define({ combine: (values) => values.length ? values[0] : true });
    let nextPluginID = 0;
    const viewPlugin = /* @__PURE__ */ Facet.define();
    class ViewPlugin {
      constructor(id, create2, domEventHandlers, domEventObservers, buildExtensions) {
        this.id = id;
        this.create = create2;
        this.domEventHandlers = domEventHandlers;
        this.domEventObservers = domEventObservers;
        this.extension = buildExtensions(this);
      }
      /**
      Define a plugin from a constructor function that creates the
      plugin's value, given an editor view.
      */
      static define(create2, spec) {
        const { eventHandlers, eventObservers, provide, decorations: deco } = spec || {};
        return new ViewPlugin(nextPluginID++, create2, eventHandlers, eventObservers, (plugin) => {
          let ext = [viewPlugin.of(plugin)];
          if (deco)
            ext.push(decorations.of((view) => {
              let pluginInst = view.plugin(plugin);
              return pluginInst ? deco(pluginInst) : Decoration.none;
            }));
          if (provide)
            ext.push(provide(plugin));
          return ext;
        });
      }
      /**
      Create a plugin for a class whose constructor takes a single
      editor view as argument.
      */
      static fromClass(cls, spec) {
        return ViewPlugin.define((view) => new cls(view), spec);
      }
    }
    class PluginInstance {
      constructor(spec) {
        this.spec = spec;
        this.mustUpdate = null;
        this.value = null;
      }
      update(view) {
        if (!this.value) {
          if (this.spec) {
            try {
              this.value = this.spec.create(view);
            } catch (e2) {
              logException(view.state, e2, "CodeMirror plugin crashed");
              this.deactivate();
            }
          }
        } else if (this.mustUpdate) {
          let update = this.mustUpdate;
          this.mustUpdate = null;
          if (this.value.update) {
            try {
              this.value.update(update);
            } catch (e2) {
              logException(update.state, e2, "CodeMirror plugin crashed");
              if (this.value.destroy)
                try {
                  this.value.destroy();
                } catch (_2) {
                }
              this.deactivate();
            }
          }
        }
        return this;
      }
      destroy(view) {
        var _a2;
        if ((_a2 = this.value) === null || _a2 === void 0 ? void 0 : _a2.destroy) {
          try {
            this.value.destroy();
          } catch (e2) {
            logException(view.state, e2, "CodeMirror plugin crashed");
          }
        }
      }
      deactivate() {
        this.spec = this.value = null;
      }
    }
    const editorAttributes = /* @__PURE__ */ Facet.define();
    const contentAttributes = /* @__PURE__ */ Facet.define();
    const decorations = /* @__PURE__ */ Facet.define();
    const outerDecorations = /* @__PURE__ */ Facet.define();
    const atomicRanges = /* @__PURE__ */ Facet.define();
    const bidiIsolatedRanges = /* @__PURE__ */ Facet.define();
    function getIsolatedRanges(view, line2) {
      let isolates = view.state.facet(bidiIsolatedRanges);
      if (!isolates.length)
        return isolates;
      let sets = isolates.map((i2) => i2 instanceof Function ? i2(view) : i2);
      let result = [];
      RangeSet.spans(sets, line2.from, line2.to, {
        point() {
        },
        span(fromDoc, toDoc, active, open) {
          let from = fromDoc - line2.from, to = toDoc - line2.from;
          let level = result;
          for (let i2 = active.length - 1; i2 >= 0; i2--, open--) {
            let direction = active[i2].spec.bidiIsolate, update;
            if (direction == null)
              direction = autoDirection(line2.text, from, to);
            if (open > 0 && level.length && (update = level[level.length - 1]).to == from && update.direction == direction) {
              update.to = to;
              level = update.inner;
            } else {
              let add2 = { from, to, direction, inner: [] };
              level.push(add2);
              level = add2.inner;
            }
          }
        }
      });
      return result;
    }
    const scrollMargins = /* @__PURE__ */ Facet.define();
    function getScrollMargins(view) {
      let left2 = 0, right2 = 0, top2 = 0, bottom2 = 0;
      for (let source2 of view.state.facet(scrollMargins)) {
        let m2 = source2(view);
        if (m2) {
          if (m2.left != null)
            left2 = Math.max(left2, m2.left);
          if (m2.right != null)
            right2 = Math.max(right2, m2.right);
          if (m2.top != null)
            top2 = Math.max(top2, m2.top);
          if (m2.bottom != null)
            bottom2 = Math.max(bottom2, m2.bottom);
        }
      }
      return { left: left2, right: right2, top: top2, bottom: bottom2 };
    }
    const styleModule = /* @__PURE__ */ Facet.define();
    class ChangedRange {
      constructor(fromA, toA, fromB, toB) {
        this.fromA = fromA;
        this.toA = toA;
        this.fromB = fromB;
        this.toB = toB;
      }
      join(other) {
        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
      }
      addToSet(set) {
        let i2 = set.length, me = this;
        for (; i2 > 0; i2--) {
          let range = set[i2 - 1];
          if (range.fromA > me.toA)
            continue;
          if (range.toA < me.fromA)
            break;
          me = me.join(range);
          set.splice(i2 - 1, 1);
        }
        set.splice(i2, 0, me);
        return set;
      }
      static extendWithRanges(diff2, ranges) {
        if (ranges.length == 0)
          return diff2;
        let result = [];
        for (let dI = 0, rI = 0, posA = 0, posB = 0; ; dI++) {
          let next = dI == diff2.length ? null : diff2[dI], off = posA - posB;
          let end2 = next ? next.fromB : 1e9;
          while (rI < ranges.length && ranges[rI] < end2) {
            let from = ranges[rI], to = ranges[rI + 1];
            let fromB = Math.max(posB, from), toB = Math.min(end2, to);
            if (fromB <= toB)
              new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
            if (to > end2)
              break;
            else
              rI += 2;
          }
          if (!next)
            return result;
          new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
          posA = next.toA;
          posB = next.toB;
        }
      }
    }
    class ViewUpdate {
      constructor(view, state, transactions) {
        this.view = view;
        this.state = state;
        this.transactions = transactions;
        this.flags = 0;
        this.startState = view.state;
        this.changes = ChangeSet.empty(this.startState.doc.length);
        for (let tr of transactions)
          this.changes = this.changes.compose(tr.changes);
        let changedRanges = [];
        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
        this.changedRanges = changedRanges;
      }
      /**
      @internal
      */
      static create(view, state, transactions) {
        return new ViewUpdate(view, state, transactions);
      }
      /**
      Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
      [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
      update.
      */
      get viewportChanged() {
        return (this.flags & 4) > 0;
      }
      /**
      Indicates whether the height of a block element in the editor
      changed in this update.
      */
      get heightChanged() {
        return (this.flags & 2) > 0;
      }
      /**
      Returns true when the document was modified or the size of the
      editor, or elements within the editor, changed.
      */
      get geometryChanged() {
        return this.docChanged || (this.flags & (8 | 2)) > 0;
      }
      /**
      True when this update indicates a focus change.
      */
      get focusChanged() {
        return (this.flags & 1) > 0;
      }
      /**
      Whether the document changed in this update.
      */
      get docChanged() {
        return !this.changes.empty;
      }
      /**
      Whether the selection was explicitly set in this update.
      */
      get selectionSet() {
        return this.transactions.some((tr) => tr.selection);
      }
      /**
      @internal
      */
      get empty() {
        return this.flags == 0 && this.transactions.length == 0;
      }
    }
    class DocView extends ContentView {
      get length() {
        return this.view.state.doc.length;
      }
      constructor(view) {
        super();
        this.view = view;
        this.decorations = [];
        this.dynamicDecorationMap = [false];
        this.domChanged = null;
        this.hasComposition = null;
        this.markedForComposition = /* @__PURE__ */ new Set();
        this.editContextFormatting = Decoration.none;
        this.lastCompositionAfterCursor = false;
        this.minWidth = 0;
        this.minWidthFrom = 0;
        this.minWidthTo = 0;
        this.impreciseAnchor = null;
        this.impreciseHead = null;
        this.forceSelection = false;
        this.lastUpdate = Date.now();
        this.setDOM(view.contentDOM);
        this.children = [new LineView()];
        this.children[0].setParent(this);
        this.updateDeco();
        this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
      }
      // Update the document view to a given state.
      update(update) {
        var _a2;
        let changedRanges = update.changedRanges;
        if (this.minWidth > 0 && changedRanges.length) {
          if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
            this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
          } else {
            this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
            this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
          }
        }
        this.updateEditContextFormatting(update);
        let readCompositionAt = -1;
        if (this.view.inputState.composing >= 0 && !this.view.observer.editContext) {
          if ((_a2 = this.domChanged) === null || _a2 === void 0 ? void 0 : _a2.newSel)
            readCompositionAt = this.domChanged.newSel.head;
          else if (!touchesComposition(update.changes, this.hasComposition) && !update.selectionSet)
            readCompositionAt = update.state.selection.main.head;
        }
        let composition = readCompositionAt > -1 ? findCompositionRange(this.view, update.changes, readCompositionAt) : null;
        this.domChanged = null;
        if (this.hasComposition) {
          this.markedForComposition.clear();
          let { from, to } = this.hasComposition;
          changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1)).addToSet(changedRanges.slice());
        }
        this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
        if ((browser.ie || browser.chrome) && !composition && update && update.state.doc.lines != update.startState.doc.lines)
          this.forceSelection = true;
        let prevDeco = this.decorations, deco = this.updateDeco();
        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
        if (!(this.flags & 7) && changedRanges.length == 0) {
          return false;
        } else {
          this.updateInner(changedRanges, update.startState.doc.length, composition);
          if (update.transactions.length)
            this.lastUpdate = Date.now();
          return true;
        }
      }
      // Used by update and the constructor do perform the actual DOM
      // update
      updateInner(changes, oldLength, composition) {
        this.view.viewState.mustMeasureContent = true;
        this.updateChildren(changes, oldLength, composition);
        let { observer } = this.view;
        observer.ignore(() => {
          this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
          this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
          let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : void 0;
          this.sync(this.view, track);
          this.flags &= ~7;
          if (track && (track.written || observer.selectionRange.focusNode != track.node))
            this.forceSelection = true;
          this.dom.style.height = "";
        });
        this.markedForComposition.forEach(
          (cView) => cView.flags &= ~8
          /* ViewFlag.Composition */
        );
        let gaps = [];
        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length) {
          for (let child of this.children)
            if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
              gaps.push(child.dom);
        }
        observer.updateGaps(gaps);
      }
      updateChildren(changes, oldLength, composition) {
        let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
        let cursor = this.childCursor(oldLength);
        for (let i2 = ranges.length - 1; ; i2--) {
          let next = i2 >= 0 ? ranges[i2] : null;
          if (!next)
            break;
          let { fromA, toA, fromB, toB } = next, content2, breakAtStart, openStart, openEnd;
          if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
            let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
            let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
            breakAtStart = before.breakAtStart;
            openStart = before.openStart;
            openEnd = after.openEnd;
            let compLine = this.compositionView(composition);
            if (after.breakAtStart) {
              compLine.breakAfter = 1;
            } else if (after.content.length && compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
              compLine.breakAfter = after.content[0].breakAfter;
              after.content.shift();
            }
            if (before.content.length && compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
              before.content.pop();
            }
            content2 = before.content.concat(compLine).concat(after.content);
          } else {
            ({ content: content2, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
          }
          let { i: toI, off: toOff } = cursor.findPos(toA, 1);
          let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
          replaceRange(this, fromI, fromOff, toI, toOff, content2, breakAtStart, openStart, openEnd);
        }
        if (composition)
          this.fixCompositionDOM(composition);
      }
      updateEditContextFormatting(update) {
        this.editContextFormatting = this.editContextFormatting.map(update.changes);
        for (let tr of update.transactions)
          for (let effect2 of tr.effects)
            if (effect2.is(setEditContextFormatting)) {
              this.editContextFormatting = effect2.value;
            }
      }
      compositionView(composition) {
        let cur2 = new TextView(composition.text.nodeValue);
        cur2.flags |= 8;
        for (let { deco } of composition.marks)
          cur2 = new MarkView(deco, [cur2], cur2.length);
        let line2 = new LineView();
        line2.append(cur2, 0);
        return line2;
      }
      fixCompositionDOM(composition) {
        let fix = (dom, cView2) => {
          cView2.flags |= 8 | (cView2.children.some(
            (c2) => c2.flags & 7
            /* ViewFlag.Dirty */
          ) ? 1 : 0);
          this.markedForComposition.add(cView2);
          let prev = ContentView.get(dom);
          if (prev && prev != cView2)
            prev.dom = null;
          cView2.setDOM(dom);
        };
        let pos2 = this.childPos(composition.range.fromB, 1);
        let cView = this.children[pos2.i];
        fix(composition.line, cView);
        for (let i2 = composition.marks.length - 1; i2 >= -1; i2--) {
          pos2 = cView.childPos(pos2.off, 1);
          cView = cView.children[pos2.i];
          fix(i2 >= 0 ? composition.marks[i2].node : composition.text, cView);
        }
      }
      // Sync the DOM selection to this.state.selection
      updateSelection(mustRead = false, fromPointer = false) {
        if (mustRead || !this.view.observer.selectionRange.focusNode)
          this.view.observer.readSelectionRange();
        let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
        let selectionNotFocus = !focused && hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
        if (!(focused || fromPointer || selectionNotFocus))
          return;
        let force = this.forceSelection;
        this.forceSelection = false;
        let main2 = this.view.state.selection.main;
        let anchor = this.moveToLine(this.domAtPos(main2.anchor));
        let head = main2.empty ? anchor : this.moveToLine(this.domAtPos(main2.head));
        if (browser.gecko && main2.empty && !this.hasComposition && betweenUneditable(anchor)) {
          let dummy = document.createTextNode("");
          this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
          anchor = head = new DOMPos(dummy, 0);
          force = true;
        }
        let domSel = this.view.observer.selectionRange;
        if (force || !domSel.focusNode || (!isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) && !this.suppressWidgetCursorChange(domSel, main2)) {
          this.view.observer.ignore(() => {
            if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) && inUneditable(domSel.focusNode, this.dom)) {
              this.dom.blur();
              this.dom.focus({ preventScroll: true });
            }
            let rawSel = getSelection(this.view.root);
            if (!rawSel) ;
            else if (main2.empty) {
              if (browser.gecko) {
                let nextTo = nextToUneditable(anchor.node, anchor.offset);
                if (nextTo && nextTo != (1 | 2)) {
                  let text2 = (nextTo == 1 ? textNodeBefore : textNodeAfter)(anchor.node, anchor.offset);
                  if (text2)
                    anchor = new DOMPos(text2.node, text2.offset);
                }
              }
              rawSel.collapse(anchor.node, anchor.offset);
              if (main2.bidiLevel != null && rawSel.caretBidiLevel !== void 0)
                rawSel.caretBidiLevel = main2.bidiLevel;
            } else if (rawSel.extend) {
              rawSel.collapse(anchor.node, anchor.offset);
              try {
                rawSel.extend(head.node, head.offset);
              } catch (_2) {
              }
            } else {
              let range = document.createRange();
              if (main2.anchor > main2.head)
                [anchor, head] = [head, anchor];
              range.setEnd(head.node, head.offset);
              range.setStart(anchor.node, anchor.offset);
              rawSel.removeAllRanges();
              rawSel.addRange(range);
            }
            if (selectionNotFocus && this.view.root.activeElement == this.dom) {
              this.dom.blur();
              if (activeElt)
                activeElt.focus();
            }
          });
          this.view.observer.setSelectionRange(anchor, head);
        }
        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
      }
      // If a zero-length widget is inserted next to the cursor during
      // composition, avoid moving it across it and disrupting the
      // composition.
      suppressWidgetCursorChange(sel, cursor) {
        return this.hasComposition && cursor.empty && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset) && this.posFromDOM(sel.focusNode, sel.focusOffset) == cursor.head;
      }
      enforceCursorAssoc() {
        if (this.hasComposition)
          return;
        let { view } = this, cursor = view.state.selection.main;
        let sel = getSelection(view.root);
        let { anchorNode, anchorOffset } = view.observer.selectionRange;
        if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
          return;
        let line2 = LineView.find(this, cursor.head);
        if (!line2)
          return;
        let lineStart = line2.posAtStart;
        if (cursor.head == lineStart || cursor.head == lineStart + line2.length)
          return;
        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
        if (!before || !after || before.bottom > after.top)
          return;
        let dom = this.domAtPos(cursor.head + cursor.assoc);
        sel.collapse(dom.node, dom.offset);
        sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
        view.observer.readSelectionRange();
        let newRange = view.observer.selectionRange;
        if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
          sel.collapse(anchorNode, anchorOffset);
      }
      // If a position is in/near a block widget, move it to a nearby text
      // line, since we don't want the cursor inside a block widget.
      moveToLine(pos2) {
        let dom = this.dom, newPos;
        if (pos2.node != dom)
          return pos2;
        for (let i2 = pos2.offset; !newPos && i2 < dom.childNodes.length; i2++) {
          let view = ContentView.get(dom.childNodes[i2]);
          if (view instanceof LineView)
            newPos = view.domAtPos(0);
        }
        for (let i2 = pos2.offset - 1; !newPos && i2 >= 0; i2--) {
          let view = ContentView.get(dom.childNodes[i2]);
          if (view instanceof LineView)
            newPos = view.domAtPos(view.length);
        }
        return newPos ? new DOMPos(newPos.node, newPos.offset, true) : pos2;
      }
      nearest(dom) {
        for (let cur2 = dom; cur2; ) {
          let domView = ContentView.get(cur2);
          if (domView && domView.rootView == this)
            return domView;
          cur2 = cur2.parentNode;
        }
        return null;
      }
      posFromDOM(node, offset2) {
        let view = this.nearest(node);
        if (!view)
          throw new RangeError("Trying to find position for a DOM position outside of the document");
        return view.localPosFromDOM(node, offset2) + view.posAtStart;
      }
      domAtPos(pos2) {
        let { i: i2, off } = this.childCursor().findPos(pos2, -1);
        for (; i2 < this.children.length - 1; ) {
          let child = this.children[i2];
          if (off < child.length || child instanceof LineView)
            break;
          i2++;
          off = 0;
        }
        return this.children[i2].domAtPos(off);
      }
      coordsAt(pos2, side) {
        let best = null, bestPos = 0;
        for (let off = this.length, i2 = this.children.length - 1; i2 >= 0; i2--) {
          let child = this.children[i2], end2 = off - child.breakAfter, start2 = end2 - child.length;
          if (end2 < pos2)
            break;
          if (start2 <= pos2 && (start2 < pos2 || child.covers(-1)) && (end2 > pos2 || child.covers(1)) && (!best || child instanceof LineView && !(best instanceof LineView && side >= 0))) {
            best = child;
            bestPos = start2;
          } else if (best && start2 == pos2 && end2 == pos2 && child instanceof BlockWidgetView && Math.abs(side) < 2) {
            if (child.deco.startSide < 0)
              break;
            else if (i2)
              best = null;
          }
          off = start2;
        }
        return best ? best.coordsAt(pos2 - bestPos, side) : null;
      }
      coordsForChar(pos2) {
        let { i: i2, off } = this.childPos(pos2, 1), child = this.children[i2];
        if (!(child instanceof LineView))
          return null;
        while (child.children.length) {
          let { i: i3, off: childOff } = child.childPos(off, 1);
          for (; ; i3++) {
            if (i3 == child.children.length)
              return null;
            if ((child = child.children[i3]).length)
              break;
          }
          off = childOff;
        }
        if (!(child instanceof TextView))
          return null;
        let end2 = findClusterBreak(child.text, off);
        if (end2 == off)
          return null;
        let rects = textRange(child.dom, off, end2).getClientRects();
        for (let i3 = 0; i3 < rects.length; i3++) {
          let rect = rects[i3];
          if (i3 == rects.length - 1 || rect.top < rect.bottom && rect.left < rect.right)
            return rect;
        }
        return null;
      }
      measureVisibleLineHeights(viewport2) {
        let result = [], { from, to } = viewport2;
        let contentWidth = this.view.contentDOM.clientWidth;
        let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
        let widest = -1, ltr = this.view.textDirection == Direction.LTR;
        for (let pos2 = 0, i2 = 0; i2 < this.children.length; i2++) {
          let child = this.children[i2], end2 = pos2 + child.length;
          if (end2 > to)
            break;
          if (pos2 >= from) {
            let childRect = child.dom.getBoundingClientRect();
            result.push(childRect.height);
            if (isWider) {
              let last = child.dom.lastChild;
              let rects = last ? clientRectsFor(last) : [];
              if (rects.length) {
                let rect = rects[rects.length - 1];
                let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                if (width > widest) {
                  widest = width;
                  this.minWidth = contentWidth;
                  this.minWidthFrom = pos2;
                  this.minWidthTo = end2;
                }
              }
            }
          }
          pos2 = end2 + child.breakAfter;
        }
        return result;
      }
      textDirectionAt(pos2) {
        let { i: i2 } = this.childPos(pos2, 1);
        return getComputedStyle(this.children[i2].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
      }
      measureTextSize() {
        for (let child of this.children) {
          if (child instanceof LineView) {
            let measure = child.measureTextSize();
            if (measure)
              return measure;
          }
        }
        let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
        dummy.className = "cm-line";
        dummy.style.width = "99999px";
        dummy.style.position = "absolute";
        dummy.textContent = "abc def ghi jkl mno pqr stu";
        this.view.observer.ignore(() => {
          this.dom.appendChild(dummy);
          let rect = clientRectsFor(dummy.firstChild)[0];
          lineHeight = dummy.getBoundingClientRect().height;
          charWidth = rect ? rect.width / 27 : 7;
          textHeight = rect ? rect.height : lineHeight;
          dummy.remove();
        });
        return { lineHeight, charWidth, textHeight };
      }
      childCursor(pos2 = this.length) {
        let i2 = this.children.length;
        if (i2)
          pos2 -= this.children[--i2].length;
        return new ChildCursor(this.children, pos2, i2);
      }
      computeBlockGapDeco() {
        let deco = [], vs = this.view.viewState;
        for (let pos2 = 0, i2 = 0; ; i2++) {
          let next = i2 == vs.viewports.length ? null : vs.viewports[i2];
          let end2 = next ? next.from - 1 : this.length;
          if (end2 > pos2) {
            let height = (vs.lineBlockAt(end2).bottom - vs.lineBlockAt(pos2).top) / this.view.scaleY;
            deco.push(Decoration.replace({
              widget: new BlockGapWidget(height),
              block: true,
              inclusive: true,
              isBlockGap: true
            }).range(pos2, end2));
          }
          if (!next)
            break;
          pos2 = next.to + 1;
        }
        return Decoration.set(deco);
      }
      updateDeco() {
        let i2 = 1;
        let allDeco = this.view.state.facet(decorations).map((d2) => {
          let dynamic = this.dynamicDecorationMap[i2++] = typeof d2 == "function";
          return dynamic ? d2(this.view) : d2;
        });
        let dynamicOuter = false, outerDeco = this.view.state.facet(outerDecorations).map((d2, i3) => {
          let dynamic = typeof d2 == "function";
          if (dynamic)
            dynamicOuter = true;
          return dynamic ? d2(this.view) : d2;
        });
        if (outerDeco.length) {
          this.dynamicDecorationMap[i2++] = dynamicOuter;
          allDeco.push(RangeSet.join(outerDeco));
        }
        this.decorations = [
          this.editContextFormatting,
          ...allDeco,
          this.computeBlockGapDeco(),
          this.view.viewState.lineGapDeco
        ];
        while (i2 < this.decorations.length)
          this.dynamicDecorationMap[i2++] = false;
        return this.decorations;
      }
      scrollIntoView(target) {
        if (target.isSnapshot) {
          let ref = this.view.viewState.lineBlockAt(target.range.head);
          this.view.scrollDOM.scrollTop = ref.top - target.yMargin;
          this.view.scrollDOM.scrollLeft = target.xMargin;
          return;
        }
        for (let handler of this.view.state.facet(scrollHandler)) {
          try {
            if (handler(this.view, target.range, target))
              return true;
          } catch (e2) {
            logException(this.view.state, e2, "scroll handler");
          }
        }
        let { range } = target;
        let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
        if (!rect)
          return;
        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
          rect = {
            left: Math.min(rect.left, other.left),
            top: Math.min(rect.top, other.top),
            right: Math.max(rect.right, other.right),
            bottom: Math.max(rect.bottom, other.bottom)
          };
        let margins = getScrollMargins(this.view);
        let targetRect = {
          left: rect.left - margins.left,
          top: rect.top - margins.top,
          right: rect.right + margins.right,
          bottom: rect.bottom + margins.bottom
        };
        let { offsetWidth, offsetHeight } = this.view.scrollDOM;
        scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, Math.max(Math.min(target.xMargin, offsetWidth), -offsetWidth), Math.max(Math.min(target.yMargin, offsetHeight), -offsetHeight), this.view.textDirection == Direction.LTR);
      }
    }
    function betweenUneditable(pos2) {
      return pos2.node.nodeType == 1 && pos2.node.firstChild && (pos2.offset == 0 || pos2.node.childNodes[pos2.offset - 1].contentEditable == "false") && (pos2.offset == pos2.node.childNodes.length || pos2.node.childNodes[pos2.offset].contentEditable == "false");
    }
    function findCompositionNode(view, headPos) {
      let sel = view.observer.selectionRange;
      if (!sel.focusNode)
        return null;
      let textBefore = textNodeBefore(sel.focusNode, sel.focusOffset);
      let textAfter = textNodeAfter(sel.focusNode, sel.focusOffset);
      let textNode = textBefore || textAfter;
      if (textAfter && textBefore && textAfter.node != textBefore.node) {
        let descAfter = ContentView.get(textAfter.node);
        if (!descAfter || descAfter instanceof TextView && descAfter.text != textAfter.node.nodeValue) {
          textNode = textAfter;
        } else if (view.docView.lastCompositionAfterCursor) {
          let descBefore = ContentView.get(textBefore.node);
          if (!(!descBefore || descBefore instanceof TextView && descBefore.text != textBefore.node.nodeValue))
            textNode = textAfter;
        }
      }
      view.docView.lastCompositionAfterCursor = textNode != textBefore;
      if (!textNode)
        return null;
      let from = headPos - textNode.offset;
      return { from, to: from + textNode.node.nodeValue.length, node: textNode.node };
    }
    function findCompositionRange(view, changes, headPos) {
      let found = findCompositionNode(view, headPos);
      if (!found)
        return null;
      let { node: textNode, from, to } = found, text2 = textNode.nodeValue;
      if (/[\n\r]/.test(text2))
        return null;
      if (view.state.doc.sliceString(found.from, found.to) != text2)
        return null;
      let inv = changes.invertedDesc;
      let range = new ChangedRange(inv.mapPos(from), inv.mapPos(to), from, to);
      let marks = [];
      for (let parent = textNode.parentNode; ; parent = parent.parentNode) {
        let parentView = ContentView.get(parent);
        if (parentView instanceof MarkView)
          marks.push({ node: parent, deco: parentView.mark });
        else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
          return { range, text: textNode, marks, line: parent };
        else if (parent != view.contentDOM)
          marks.push({ node: parent, deco: new MarkDecoration({
            inclusive: true,
            attributes: getAttrs(parent),
            tagName: parent.tagName.toLowerCase()
          }) });
        else
          return null;
      }
    }
    function nextToUneditable(node, offset2) {
      if (node.nodeType != 1)
        return 0;
      return (offset2 && node.childNodes[offset2 - 1].contentEditable == "false" ? 1 : 0) | (offset2 < node.childNodes.length && node.childNodes[offset2].contentEditable == "false" ? 2 : 0);
    }
    let DecorationComparator$1 = class DecorationComparator {
      constructor() {
        this.changes = [];
      }
      compareRange(from, to) {
        addRange(from, to, this.changes);
      }
      comparePoint(from, to) {
        addRange(from, to, this.changes);
      }
    };
    function findChangedDeco(a2, b, diff2) {
      let comp = new DecorationComparator$1();
      RangeSet.compare(a2, b, diff2, comp);
      return comp.changes;
    }
    function inUneditable(node, inside2) {
      for (let cur2 = node; cur2 && cur2 != inside2; cur2 = cur2.assignedSlot || cur2.parentNode) {
        if (cur2.nodeType == 1 && cur2.contentEditable == "false") {
          return true;
        }
      }
      return false;
    }
    function touchesComposition(changes, composition) {
      let touched = false;
      if (composition)
        changes.iterChangedRanges((from, to) => {
          if (from < composition.to && to > composition.from)
            touched = true;
        });
      return touched;
    }
    function groupAt(state, pos2, bias = 1) {
      let categorize = state.charCategorizer(pos2);
      let line2 = state.doc.lineAt(pos2), linePos = pos2 - line2.from;
      if (line2.length == 0)
        return EditorSelection.cursor(pos2);
      if (linePos == 0)
        bias = 1;
      else if (linePos == line2.length)
        bias = -1;
      let from = linePos, to = linePos;
      if (bias < 0)
        from = findClusterBreak(line2.text, linePos, false);
      else
        to = findClusterBreak(line2.text, linePos);
      let cat = categorize(line2.text.slice(from, to));
      while (from > 0) {
        let prev = findClusterBreak(line2.text, from, false);
        if (categorize(line2.text.slice(prev, from)) != cat)
          break;
        from = prev;
      }
      while (to < line2.length) {
        let next = findClusterBreak(line2.text, to);
        if (categorize(line2.text.slice(to, next)) != cat)
          break;
        to = next;
      }
      return EditorSelection.range(from + line2.from, to + line2.from);
    }
    function getdx(x2, rect) {
      return rect.left > x2 ? rect.left - x2 : Math.max(0, x2 - rect.right);
    }
    function getdy(y2, rect) {
      return rect.top > y2 ? rect.top - y2 : Math.max(0, y2 - rect.bottom);
    }
    function yOverlap(a2, b) {
      return a2.top < b.bottom - 1 && a2.bottom > b.top + 1;
    }
    function upTop(rect, top2) {
      return top2 < rect.top ? { top: top2, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom2) {
      return bottom2 > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom: bottom2 } : rect;
    }
    function domPosAtCoords(parent, x2, y2) {
      let closest, closestRect, closestX, closestY, closestOverlap = false;
      let above, below, aboveRect, belowRect;
      for (let child = parent.firstChild; child; child = child.nextSibling) {
        let rects = clientRectsFor(child);
        for (let i2 = 0; i2 < rects.length; i2++) {
          let rect = rects[i2];
          if (closestRect && yOverlap(closestRect, rect))
            rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
          let dx = getdx(x2, rect), dy = getdy(y2, rect);
          if (dx == 0 && dy == 0)
            return child.nodeType == 3 ? domPosInText(child, x2, y2) : domPosAtCoords(child, x2, y2);
          if (!closest || closestY > dy || closestY == dy && closestX > dx) {
            closest = child;
            closestRect = rect;
            closestX = dx;
            closestY = dy;
            let side = dy ? y2 < rect.top ? -1 : 1 : dx ? x2 < rect.left ? -1 : 1 : 0;
            closestOverlap = !side || (side > 0 ? i2 < rects.length - 1 : i2 > 0);
          }
          if (dx == 0) {
            if (y2 > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
              above = child;
              aboveRect = rect;
            } else if (y2 < rect.top && (!belowRect || belowRect.top > rect.top)) {
              below = child;
              belowRect = rect;
            }
          } else if (aboveRect && yOverlap(aboveRect, rect)) {
            aboveRect = upBot(aboveRect, rect.bottom);
          } else if (belowRect && yOverlap(belowRect, rect)) {
            belowRect = upTop(belowRect, rect.top);
          }
        }
      }
      if (aboveRect && aboveRect.bottom >= y2) {
        closest = above;
        closestRect = aboveRect;
      } else if (belowRect && belowRect.top <= y2) {
        closest = below;
        closestRect = belowRect;
      }
      if (!closest)
        return { node: parent, offset: 0 };
      let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x2));
      if (closest.nodeType == 3)
        return domPosInText(closest, clipX, y2);
      if (closestOverlap && closest.contentEditable != "false")
        return domPosAtCoords(closest, clipX, y2);
      let offset2 = Array.prototype.indexOf.call(parent.childNodes, closest) + (x2 >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
      return { node: parent, offset: offset2 };
    }
    function domPosInText(node, x2, y2) {
      let len = node.nodeValue.length;
      let closestOffset = -1, closestDY = 1e9, generalSide = 0;
      for (let i2 = 0; i2 < len; i2++) {
        let rects = textRange(node, i2, i2 + 1).getClientRects();
        for (let j2 = 0; j2 < rects.length; j2++) {
          let rect = rects[j2];
          if (rect.top == rect.bottom)
            continue;
          if (!generalSide)
            generalSide = x2 - rect.left;
          let dy = (rect.top > y2 ? rect.top - y2 : y2 - rect.bottom) - 1;
          if (rect.left - 1 <= x2 && rect.right + 1 >= x2 && dy < closestDY) {
            let right2 = x2 >= (rect.left + rect.right) / 2, after = right2;
            if (browser.chrome || browser.gecko) {
              let rectBefore = textRange(node, i2).getBoundingClientRect();
              if (rectBefore.left == rect.right)
                after = !right2;
            }
            if (dy <= 0)
              return { node, offset: i2 + (after ? 1 : 0) };
            closestOffset = i2 + (after ? 1 : 0);
            closestDY = dy;
          }
        }
      }
      return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, coords, precise, bias = -1) {
      var _a2, _b2;
      let content2 = view.contentDOM.getBoundingClientRect(), docTop = content2.top + view.viewState.paddingTop;
      let block2, { docHeight } = view.viewState;
      let { x: x2, y: y2 } = coords, yOffset = y2 - docTop;
      if (yOffset < 0)
        return 0;
      if (yOffset > docHeight)
        return view.state.doc.length;
      for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false; ; ) {
        block2 = view.elementAtHeight(yOffset);
        if (block2.type == BlockType.Text)
          break;
        for (; ; ) {
          yOffset = bias > 0 ? block2.bottom + halfLine : block2.top - halfLine;
          if (yOffset >= 0 && yOffset <= docHeight)
            break;
          if (bounced)
            return precise ? null : 0;
          bounced = true;
          bias = -bias;
        }
      }
      y2 = docTop + yOffset;
      let lineStart = block2.from;
      if (lineStart < view.viewport.from)
        return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content2, block2, x2, y2);
      if (lineStart > view.viewport.to)
        return view.viewport.to == view.state.doc.length ? view.state.doc.length : precise ? null : posAtCoordsImprecise(view, content2, block2, x2, y2);
      let doc2 = view.dom.ownerDocument;
      let root2 = view.root.elementFromPoint ? view.root : doc2;
      let element = root2.elementFromPoint(x2, y2);
      if (element && !view.contentDOM.contains(element))
        element = null;
      if (!element) {
        x2 = Math.max(content2.left + 1, Math.min(content2.right - 1, x2));
        element = root2.elementFromPoint(x2, y2);
        if (element && !view.contentDOM.contains(element))
          element = null;
      }
      let node, offset2 = -1;
      if (element && ((_a2 = view.docView.nearest(element)) === null || _a2 === void 0 ? void 0 : _a2.isEditable) != false) {
        if (doc2.caretPositionFromPoint) {
          let pos2 = doc2.caretPositionFromPoint(x2, y2);
          if (pos2)
            ({ offsetNode: node, offset: offset2 } = pos2);
        } else if (doc2.caretRangeFromPoint) {
          let range = doc2.caretRangeFromPoint(x2, y2);
          if (range) {
            ({ startContainer: node, startOffset: offset2 } = range);
            if (!view.contentDOM.contains(node) || browser.safari && isSuspiciousSafariCaretResult(node, offset2, x2) || browser.chrome && isSuspiciousChromeCaretResult(node, offset2, x2))
              node = void 0;
          }
        }
        if (node)
          offset2 = Math.min(maxOffset(node), offset2);
      }
      if (!node || !view.docView.dom.contains(node)) {
        let line2 = LineView.find(view.docView, lineStart);
        if (!line2)
          return yOffset > block2.top + block2.height / 2 ? block2.to : block2.from;
        ({ node, offset: offset2 } = domPosAtCoords(line2.dom, x2, y2));
      }
      let nearest = view.docView.nearest(node);
      if (!nearest)
        return null;
      if (nearest.isWidget && ((_b2 = nearest.dom) === null || _b2 === void 0 ? void 0 : _b2.nodeType) == 1) {
        let rect = nearest.dom.getBoundingClientRect();
        return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2 ? nearest.posAtStart : nearest.posAtEnd;
      } else {
        return nearest.localPosFromDOM(node, offset2) + nearest.posAtStart;
      }
    }
    function posAtCoordsImprecise(view, contentRect, block2, x2, y2) {
      let into = Math.round((x2 - contentRect.left) * view.defaultCharacterWidth);
      if (view.lineWrapping && block2.height > view.defaultLineHeight * 1.5) {
        let textHeight = view.viewState.heightOracle.textHeight;
        let line2 = Math.floor((y2 - block2.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
        into += line2 * view.viewState.heightOracle.lineLength;
      }
      let content2 = view.state.sliceDoc(block2.from, block2.to);
      return block2.from + findColumn(content2, into, view.state.tabSize);
    }
    function isSuspiciousSafariCaretResult(node, offset2, x2) {
      let len;
      if (node.nodeType != 3 || offset2 != (len = node.nodeValue.length))
        return false;
      for (let next = node.nextSibling; next; next = next.nextSibling)
        if (next.nodeType != 1 || next.nodeName != "BR")
          return false;
      return textRange(node, len - 1, len).getBoundingClientRect().left > x2;
    }
    function isSuspiciousChromeCaretResult(node, offset2, x2) {
      if (offset2 != 0)
        return false;
      for (let cur2 = node; ; ) {
        let parent = cur2.parentNode;
        if (!parent || parent.nodeType != 1 || parent.firstChild != cur2)
          return false;
        if (parent.classList.contains("cm-line"))
          break;
        cur2 = parent;
      }
      let rect = node.nodeType == 1 ? node.getBoundingClientRect() : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
      return x2 - rect.left > 5;
    }
    function blockAt(view, pos2) {
      let line2 = view.lineBlockAt(pos2);
      if (Array.isArray(line2.type))
        for (let l2 of line2.type) {
          if (l2.to > pos2 || l2.to == pos2 && (l2.to == line2.to || l2.type == BlockType.Text))
            return l2;
        }
      return line2;
    }
    function moveToLineBoundary(view, start2, forward, includeWrap) {
      let line2 = blockAt(view, start2.head);
      let coords = !includeWrap || line2.type != BlockType.Text || !(view.lineWrapping || line2.widgetLineBreaks) ? null : view.coordsAtPos(start2.assoc < 0 && start2.head > line2.from ? start2.head - 1 : start2.head);
      if (coords) {
        let editorRect = view.dom.getBoundingClientRect();
        let direction = view.textDirectionAt(line2.from);
        let pos2 = view.posAtCoords({
          x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
          y: (coords.top + coords.bottom) / 2
        });
        if (pos2 != null)
          return EditorSelection.cursor(pos2, forward ? -1 : 1);
      }
      return EditorSelection.cursor(forward ? line2.to : line2.from, forward ? -1 : 1);
    }
    function moveByChar(view, start2, forward, by) {
      let line2 = view.state.doc.lineAt(start2.head), spans = view.bidiSpans(line2);
      let direction = view.textDirectionAt(line2.from);
      for (let cur2 = start2, check = null; ; ) {
        let next = moveVisually(line2, spans, direction, cur2, forward), char = movedOver;
        if (!next) {
          if (line2.number == (forward ? view.state.doc.lines : 1))
            return cur2;
          char = "\n";
          line2 = view.state.doc.line(line2.number + (forward ? 1 : -1));
          spans = view.bidiSpans(line2);
          next = view.visualLineSide(line2, !forward);
        }
        if (!check) {
          if (!by)
            return next;
          check = by(char);
        } else if (!check(char)) {
          return cur2;
        }
        cur2 = next;
      }
    }
    function byGroup(view, pos2, start2) {
      let categorize = view.state.charCategorizer(pos2);
      let cat = categorize(start2);
      return (next) => {
        let nextCat = categorize(next);
        if (cat == CharCategory.Space)
          cat = nextCat;
        return cat == nextCat;
      };
    }
    function moveVertically(view, start2, forward, distance) {
      let startPos = start2.head, dir = forward ? 1 : -1;
      if (startPos == (forward ? view.state.doc.length : 0))
        return EditorSelection.cursor(startPos, start2.assoc);
      let goal = start2.goalColumn, startY;
      let rect = view.contentDOM.getBoundingClientRect();
      let startCoords = view.coordsAtPos(startPos, start2.assoc || -1), docTop = view.documentTop;
      if (startCoords) {
        if (goal == null)
          goal = startCoords.left - rect.left;
        startY = dir < 0 ? startCoords.top : startCoords.bottom;
      } else {
        let line2 = view.viewState.lineBlockAt(startPos);
        if (goal == null)
          goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line2.from));
        startY = (dir < 0 ? line2.top : line2.bottom) + docTop;
      }
      let resolvedGoal = rect.left + goal;
      let dist2 = distance !== null && distance !== void 0 ? distance : view.viewState.heightOracle.textHeight >> 1;
      for (let extra = 0; ; extra += 10) {
        let curY = startY + (dist2 + extra) * dir;
        let pos2 = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
        if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos2 < startPos : pos2 > startPos)) {
          let charRect = view.docView.coordsForChar(pos2);
          let assoc = !charRect || curY < charRect.top ? -1 : 1;
          return EditorSelection.cursor(pos2, assoc, void 0, goal);
        }
      }
    }
    function skipAtomicRanges(atoms, pos2, bias) {
      for (; ; ) {
        let moved = 0;
        for (let set of atoms) {
          set.between(pos2 - 1, pos2 + 1, (from, to, value) => {
            if (pos2 > from && pos2 < to) {
              let side = moved || bias || (pos2 - from < to - pos2 ? -1 : 1);
              pos2 = side < 0 ? from : to;
              moved = side;
            }
          });
        }
        if (!moved)
          return pos2;
      }
    }
    function skipAtoms(view, oldPos, pos2) {
      let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map((f2) => f2(view)), pos2.from, oldPos.head > pos2.from ? -1 : 1);
      return newPos == pos2.from ? pos2 : EditorSelection.cursor(newPos, newPos < pos2.from ? 1 : -1);
    }
    const LineBreakPlaceholder = "￿";
    class DOMReader {
      constructor(points, state) {
        this.points = points;
        this.text = "";
        this.lineSeparator = state.facet(EditorState.lineSeparator);
      }
      append(text2) {
        this.text += text2;
      }
      lineBreak() {
        this.text += LineBreakPlaceholder;
      }
      readRange(start2, end2) {
        if (!start2)
          return this;
        let parent = start2.parentNode;
        for (let cur2 = start2; ; ) {
          this.findPointBefore(parent, cur2);
          let oldLen = this.text.length;
          this.readNode(cur2);
          let next = cur2.nextSibling;
          if (next == end2)
            break;
          let view = ContentView.get(cur2), nextView = ContentView.get(next);
          if (view && nextView ? view.breakAfter : (view ? view.breakAfter : isBlockElement(cur2)) || isBlockElement(next) && (cur2.nodeName != "BR" || cur2.cmIgnore) && this.text.length > oldLen)
            this.lineBreak();
          cur2 = next;
        }
        this.findPointBefore(parent, end2);
        return this;
      }
      readTextNode(node) {
        let text2 = node.nodeValue;
        for (let point of this.points)
          if (point.node == node)
            point.pos = this.text.length + Math.min(point.offset, text2.length);
        for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g; ; ) {
          let nextBreak = -1, breakSize = 1, m2;
          if (this.lineSeparator) {
            nextBreak = text2.indexOf(this.lineSeparator, off);
            breakSize = this.lineSeparator.length;
          } else if (m2 = re.exec(text2)) {
            nextBreak = m2.index;
            breakSize = m2[0].length;
          }
          this.append(text2.slice(off, nextBreak < 0 ? text2.length : nextBreak));
          if (nextBreak < 0)
            break;
          this.lineBreak();
          if (breakSize > 1) {
            for (let point of this.points)
              if (point.node == node && point.pos > this.text.length)
                point.pos -= breakSize - 1;
          }
          off = nextBreak + breakSize;
        }
      }
      readNode(node) {
        if (node.cmIgnore)
          return;
        let view = ContentView.get(node);
        let fromView = view && view.overrideDOMText;
        if (fromView != null) {
          this.findPointInside(node, fromView.length);
          for (let i2 = fromView.iter(); !i2.next().done; ) {
            if (i2.lineBreak)
              this.lineBreak();
            else
              this.append(i2.value);
          }
        } else if (node.nodeType == 3) {
          this.readTextNode(node);
        } else if (node.nodeName == "BR") {
          if (node.nextSibling)
            this.lineBreak();
        } else if (node.nodeType == 1) {
          this.readRange(node.firstChild, null);
        }
      }
      findPointBefore(node, next) {
        for (let point of this.points)
          if (point.node == node && node.childNodes[point.offset] == next)
            point.pos = this.text.length;
      }
      findPointInside(node, length) {
        for (let point of this.points)
          if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
            point.pos = this.text.length + (isAtEnd(node, point.node, point.offset) ? length : 0);
      }
    }
    function isAtEnd(parent, node, offset2) {
      for (; ; ) {
        if (!node || offset2 < maxOffset(node))
          return false;
        if (node == parent)
          return true;
        offset2 = domIndex(node) + 1;
        node = node.parentNode;
      }
    }
    class DOMPoint {
      constructor(node, offset2) {
        this.node = node;
        this.offset = offset2;
        this.pos = -1;
      }
    }
    class DOMChange {
      constructor(view, start2, end2, typeOver) {
        this.typeOver = typeOver;
        this.bounds = null;
        this.text = "";
        this.domChanged = start2 > -1;
        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
        if (view.state.readOnly && start2 > -1) {
          this.newSel = null;
        } else if (start2 > -1 && (this.bounds = view.docView.domBoundsAround(start2, end2, 0))) {
          let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
          let reader = new DOMReader(selPoints, view.state);
          reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
          this.text = reader.text;
          this.newSel = selectionFromPoints(selPoints, this.bounds.from);
        } else {
          let domSel = view.observer.selectionRange;
          let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
          let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
          let vp = view.viewport;
          if ((browser.ios || browser.chrome) && view.state.selection.main.empty && head != anchor && (vp.from > 0 || vp.to < view.state.doc.length)) {
            let from = Math.min(head, anchor), to = Math.max(head, anchor);
            let offFrom = vp.from - from, offTo = vp.to - to;
            if ((offFrom == 0 || offFrom == 1 || from == 0) && (offTo == 0 || offTo == -1 || to == view.state.doc.length)) {
              head = 0;
              anchor = view.state.doc.length;
            }
          }
          this.newSel = EditorSelection.single(anchor, head);
        }
      }
    }
    function applyDOMChange(view, domChange) {
      let change;
      let { newSel } = domChange, sel = view.state.selection.main;
      let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
      if (domChange.bounds) {
        let { from, to } = domChange.bounds;
        let preferredPos = sel.from, preferredSide = null;
        if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
          preferredPos = sel.to;
          preferredSide = "end";
        }
        let diff2 = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
        if (diff2) {
          if (browser.chrome && lastKey == 13 && diff2.toB == diff2.from + 2 && domChange.text.slice(diff2.from, diff2.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
            diff2.toB--;
          change = {
            from: from + diff2.from,
            to: from + diff2.toA,
            insert: Text.of(domChange.text.slice(diff2.from, diff2.toB).split(LineBreakPlaceholder))
          };
        }
      } else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
        newSel = null;
      }
      if (!change && !newSel)
        return false;
      if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
        change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
      } else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) {
        change = {
          from: sel.from,
          to: sel.to,
          insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
        };
      } else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 && /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
        if (newSel && change.insert.length == 2)
          newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
        change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
      } else if (browser.chrome && change && change.from == change.to && change.from == sel.head && change.insert.toString() == "\n " && view.lineWrapping) {
        if (newSel)
          newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
        change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
      }
      if (change) {
        return applyDOMChangeInner(view, change, newSel, lastKey);
      } else if (newSel && !newSel.main.eq(sel)) {
        let scrollIntoView2 = false, userEvent = "select";
        if (view.inputState.lastSelectionTime > Date.now() - 50) {
          if (view.inputState.lastSelectionOrigin == "select")
            scrollIntoView2 = true;
          userEvent = view.inputState.lastSelectionOrigin;
        }
        view.dispatch({ selection: newSel, scrollIntoView: scrollIntoView2, userEvent });
        return true;
      } else {
        return false;
      }
    }
    function applyDOMChangeInner(view, change, newSel, lastKey = -1) {
      if (browser.ios && view.inputState.flushIOSKey(change))
        return true;
      let sel = view.state.selection.main;
      if (browser.android && (change.to == sel.to && // GBoard will sometimes remove a space it just inserted
      // after a completion when you press enter
      (change.from == sel.from || change.from == sel.from - 1 && view.state.sliceDoc(change.from, sel.from) == " ") && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 || lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)))
        return true;
      let text2 = change.insert.toString();
      if (view.inputState.composing >= 0)
        view.inputState.composing++;
      let defaultTr;
      let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
      if (!view.state.facet(inputHandler).some((h2) => h2(view, change.from, change.to, text2, defaultInsert)))
        view.dispatch(defaultInsert());
      return true;
    }
    function applyDefaultInsert(view, change, newSel) {
      let tr, startState = view.state, sel = startState.selection.main;
      if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) && view.inputState.composing < 0) {
        let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
        let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
        tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, void 0, view.state.lineBreak) + after));
      } else {
        let changes = startState.changes(change);
        let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : void 0;
        if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 && change.to <= sel.to && change.to >= sel.to - 10) {
          let replaced = view.state.sliceDoc(change.from, change.to);
          let compositionRange, composition = newSel && findCompositionNode(view, newSel.main.head);
          if (composition) {
            let dLen = change.insert.length - (change.to - change.from);
            compositionRange = { from: composition.from, to: composition.to - dLen };
          } else {
            compositionRange = view.state.doc.lineAt(sel.head);
          }
          let offset2 = sel.to - change.to, size = sel.to - sel.from;
          tr = startState.changeByRange((range) => {
            if (range.from == sel.from && range.to == sel.to)
              return { changes, range: mainSel || range.map(changes) };
            let to = range.to - offset2, from = to - replaced.length;
            if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced || // Unfortunately, there's no way to make multiple
            // changes in the same node work without aborting
            // composition, so cursors in the composition range are
            // ignored.
            range.to >= compositionRange.from && range.from <= compositionRange.to)
              return { range };
            let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
            return {
              changes: rangeChanges,
              range: !mainSel ? range.map(rangeChanges) : EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
            };
          });
        } else {
          tr = {
            changes,
            selection: mainSel && startState.selection.replaceRange(mainSel)
          };
        }
      }
      let userEvent = "input.type";
      if (view.composing || view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
        view.inputState.compositionPendingChange = false;
        userEvent += ".compose";
        if (view.inputState.compositionFirstChange) {
          userEvent += ".start";
          view.inputState.compositionFirstChange = false;
        }
      }
      return startState.update(tr, { userEvent, scrollIntoView: true });
    }
    function findDiff(a2, b, preferredPos, preferredSide) {
      let minLen = Math.min(a2.length, b.length);
      let from = 0;
      while (from < minLen && a2.charCodeAt(from) == b.charCodeAt(from))
        from++;
      if (from == minLen && a2.length == b.length)
        return null;
      let toA = a2.length, toB = b.length;
      while (toA > 0 && toB > 0 && a2.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
        toA--;
        toB--;
      }
      if (preferredSide == "end") {
        let adjust = Math.max(0, from - Math.min(toA, toB));
        preferredPos -= toA + adjust - from;
      }
      if (toA < from && a2.length < b.length) {
        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
        from -= move;
        toB = from + (toB - toA);
        toA = from;
      } else if (toB < from) {
        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
        from -= move;
        toA = from + (toA - toB);
        toB = from;
      }
      return { from, toA, toB };
    }
    function selectionPoints(view) {
      let result = [];
      if (view.root.activeElement != view.contentDOM)
        return result;
      let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
      if (anchorNode) {
        result.push(new DOMPoint(anchorNode, anchorOffset));
        if (focusNode != anchorNode || focusOffset != anchorOffset)
          result.push(new DOMPoint(focusNode, focusOffset));
      }
      return result;
    }
    function selectionFromPoints(points, base2) {
      if (points.length == 0)
        return null;
      let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
      return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base2, head + base2) : null;
    }
    class InputState {
      setSelectionOrigin(origin) {
        this.lastSelectionOrigin = origin;
        this.lastSelectionTime = Date.now();
      }
      constructor(view) {
        this.view = view;
        this.lastKeyCode = 0;
        this.lastKeyTime = 0;
        this.lastTouchTime = 0;
        this.lastFocusTime = 0;
        this.lastScrollTop = 0;
        this.lastScrollLeft = 0;
        this.pendingIOSKey = void 0;
        this.tabFocusMode = -1;
        this.lastSelectionOrigin = null;
        this.lastSelectionTime = 0;
        this.lastContextMenu = 0;
        this.scrollHandlers = [];
        this.handlers = /* @__PURE__ */ Object.create(null);
        this.composing = -1;
        this.compositionFirstChange = null;
        this.compositionEndedAt = 0;
        this.compositionPendingKey = false;
        this.compositionPendingChange = false;
        this.mouseSelection = null;
        this.draggedContent = null;
        this.handleEvent = this.handleEvent.bind(this);
        this.notifiedFocused = view.hasFocus;
        if (browser.safari)
          view.contentDOM.addEventListener("input", () => null);
        if (browser.gecko)
          firefoxCopyCutHack(view.contentDOM.ownerDocument);
      }
      handleEvent(event) {
        if (!eventBelongsToEditor(this.view, event) || this.ignoreDuringComposition(event))
          return;
        if (event.type == "keydown" && this.keydown(event))
          return;
        this.runHandlers(event.type, event);
      }
      runHandlers(type, event) {
        let handlers2 = this.handlers[type];
        if (handlers2) {
          for (let observer of handlers2.observers)
            observer(this.view, event);
          for (let handler of handlers2.handlers) {
            if (event.defaultPrevented)
              break;
            if (handler(this.view, event)) {
              event.preventDefault();
              break;
            }
          }
        }
      }
      ensureHandlers(plugins) {
        let handlers2 = computeHandlers(plugins), prev = this.handlers, dom = this.view.contentDOM;
        for (let type in handlers2)
          if (type != "scroll") {
            let passive2 = !handlers2[type].handlers.length;
            let exists = prev[type];
            if (exists && passive2 != !exists.handlers.length) {
              dom.removeEventListener(type, this.handleEvent);
              exists = null;
            }
            if (!exists)
              dom.addEventListener(type, this.handleEvent, { passive: passive2 });
          }
        for (let type in prev)
          if (type != "scroll" && !handlers2[type])
            dom.removeEventListener(type, this.handleEvent);
        this.handlers = handlers2;
      }
      keydown(event) {
        this.lastKeyCode = event.keyCode;
        this.lastKeyTime = Date.now();
        if (event.keyCode == 9 && this.tabFocusMode > -1 && (!this.tabFocusMode || Date.now() <= this.tabFocusMode))
          return true;
        if (this.tabFocusMode > 0 && event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
          this.tabFocusMode = -1;
        if (browser.android && browser.chrome && !event.synthetic && (event.keyCode == 13 || event.keyCode == 8)) {
          this.view.observer.delayAndroidKey(event.key, event.keyCode);
          return true;
        }
        let pending;
        if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey && ((pending = PendingKeys.find((key2) => key2.keyCode == event.keyCode)) && !event.ctrlKey || EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
          this.pendingIOSKey = pending || event;
          setTimeout(() => this.flushIOSKey(), 250);
          return true;
        }
        if (event.keyCode != 229)
          this.view.observer.forceFlush();
        return false;
      }
      flushIOSKey(change) {
        let key2 = this.pendingIOSKey;
        if (!key2)
          return false;
        if (key2.key == "Enter" && change && change.from < change.to && /^\S+$/.test(change.insert.toString()))
          return false;
        this.pendingIOSKey = void 0;
        return dispatchKey(this.view.contentDOM, key2.key, key2.keyCode, key2 instanceof KeyboardEvent ? key2 : void 0);
      }
      ignoreDuringComposition(event) {
        if (!/^key/.test(event.type))
          return false;
        if (this.composing > 0)
          return true;
        if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
          this.compositionPendingKey = false;
          return true;
        }
        return false;
      }
      startMouseSelection(mouseSelection) {
        if (this.mouseSelection)
          this.mouseSelection.destroy();
        this.mouseSelection = mouseSelection;
      }
      update(update) {
        this.view.observer.update(update);
        if (this.mouseSelection)
          this.mouseSelection.update(update);
        if (this.draggedContent && update.docChanged)
          this.draggedContent = this.draggedContent.map(update.changes);
        if (update.transactions.length)
          this.lastKeyCode = this.lastSelectionTime = 0;
      }
      destroy() {
        if (this.mouseSelection)
          this.mouseSelection.destroy();
      }
    }
    function bindHandler(plugin, handler) {
      return (view, event) => {
        try {
          return handler.call(plugin, event, view);
        } catch (e2) {
          logException(view.state, e2);
        }
      };
    }
    function computeHandlers(plugins) {
      let result = /* @__PURE__ */ Object.create(null);
      function record(type) {
        return result[type] || (result[type] = { observers: [], handlers: [] });
      }
      for (let plugin of plugins) {
        let spec = plugin.spec;
        if (spec && spec.domEventHandlers)
          for (let type in spec.domEventHandlers) {
            let f2 = spec.domEventHandlers[type];
            if (f2)
              record(type).handlers.push(bindHandler(plugin.value, f2));
          }
        if (spec && spec.domEventObservers)
          for (let type in spec.domEventObservers) {
            let f2 = spec.domEventObservers[type];
            if (f2)
              record(type).observers.push(bindHandler(plugin.value, f2));
          }
      }
      for (let type in handlers)
        record(type).handlers.push(handlers[type]);
      for (let type in observers)
        record(type).observers.push(observers[type]);
      return result;
    }
    const PendingKeys = [
      { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
      { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
      { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
      { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    const EmacsyPendingKeys = "dthko";
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    const dragScrollMargin = 6;
    function dragScrollSpeed(dist2) {
      return Math.max(0, dist2) * 0.7 + 8;
    }
    function dist(a2, b) {
      return Math.max(Math.abs(a2.clientX - b.clientX), Math.abs(a2.clientY - b.clientY));
    }
    class MouseSelection {
      constructor(view, startEvent, style2, mustSelect) {
        this.view = view;
        this.startEvent = startEvent;
        this.style = style2;
        this.mustSelect = mustSelect;
        this.scrollSpeed = { x: 0, y: 0 };
        this.scrolling = -1;
        this.lastEvent = startEvent;
        this.scrollParents = scrollableParents(view.contentDOM);
        this.atoms = view.state.facet(atomicRanges).map((f2) => f2(view));
        let doc2 = view.contentDOM.ownerDocument;
        doc2.addEventListener("mousemove", this.move = this.move.bind(this));
        doc2.addEventListener("mouseup", this.up = this.up.bind(this));
        this.extend = startEvent.shiftKey;
        this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
        this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
      }
      start(event) {
        if (this.dragging === false)
          this.select(event);
      }
      move(event) {
        if (event.buttons == 0)
          return this.destroy();
        if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
          return;
        this.select(this.lastEvent = event);
        let sx = 0, sy = 0;
        let left2 = 0, top2 = 0, right2 = this.view.win.innerWidth, bottom2 = this.view.win.innerHeight;
        if (this.scrollParents.x)
          ({ left: left2, right: right2 } = this.scrollParents.x.getBoundingClientRect());
        if (this.scrollParents.y)
          ({ top: top2, bottom: bottom2 } = this.scrollParents.y.getBoundingClientRect());
        let margins = getScrollMargins(this.view);
        if (event.clientX - margins.left <= left2 + dragScrollMargin)
          sx = -dragScrollSpeed(left2 - event.clientX);
        else if (event.clientX + margins.right >= right2 - dragScrollMargin)
          sx = dragScrollSpeed(event.clientX - right2);
        if (event.clientY - margins.top <= top2 + dragScrollMargin)
          sy = -dragScrollSpeed(top2 - event.clientY);
        else if (event.clientY + margins.bottom >= bottom2 - dragScrollMargin)
          sy = dragScrollSpeed(event.clientY - bottom2);
        this.setScrollSpeed(sx, sy);
      }
      up(event) {
        if (this.dragging == null)
          this.select(this.lastEvent);
        if (!this.dragging)
          event.preventDefault();
        this.destroy();
      }
      destroy() {
        this.setScrollSpeed(0, 0);
        let doc2 = this.view.contentDOM.ownerDocument;
        doc2.removeEventListener("mousemove", this.move);
        doc2.removeEventListener("mouseup", this.up);
        this.view.inputState.mouseSelection = this.view.inputState.draggedContent = null;
      }
      setScrollSpeed(sx, sy) {
        this.scrollSpeed = { x: sx, y: sy };
        if (sx || sy) {
          if (this.scrolling < 0)
            this.scrolling = setInterval(() => this.scroll(), 50);
        } else if (this.scrolling > -1) {
          clearInterval(this.scrolling);
          this.scrolling = -1;
        }
      }
      scroll() {
        let { x: x2, y: y2 } = this.scrollSpeed;
        if (x2 && this.scrollParents.x) {
          this.scrollParents.x.scrollLeft += x2;
          x2 = 0;
        }
        if (y2 && this.scrollParents.y) {
          this.scrollParents.y.scrollTop += y2;
          y2 = 0;
        }
        if (x2 || y2)
          this.view.win.scrollBy(x2, y2);
        if (this.dragging === false)
          this.select(this.lastEvent);
      }
      skipAtoms(sel) {
        let ranges = null;
        for (let i2 = 0; i2 < sel.ranges.length; i2++) {
          let range = sel.ranges[i2], updated = null;
          if (range.empty) {
            let pos2 = skipAtomicRanges(this.atoms, range.from, 0);
            if (pos2 != range.from)
              updated = EditorSelection.cursor(pos2, -1);
          } else {
            let from = skipAtomicRanges(this.atoms, range.from, -1);
            let to = skipAtomicRanges(this.atoms, range.to, 1);
            if (from != range.from || to != range.to)
              updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
          }
          if (updated) {
            if (!ranges)
              ranges = sel.ranges.slice();
            ranges[i2] = updated;
          }
        }
        return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
      }
      select(event) {
        let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
        if (this.mustSelect || !selection.eq(view.state.selection, this.dragging === false))
          this.view.dispatch({
            selection,
            userEvent: "select.pointer"
          });
        this.mustSelect = false;
      }
      update(update) {
        if (update.transactions.some((tr) => tr.isUserEvent("input.type")))
          this.destroy();
        else if (this.style.update(update))
          setTimeout(() => this.select(this.lastEvent), 20);
      }
    }
    function addsSelectionRange(view, event) {
      let facet = view.state.facet(clickAddsSelectionRange);
      return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
      let facet = view.state.facet(dragMovesSelection$1);
      return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
      let { main: main2 } = view.state.selection;
      if (main2.empty)
        return false;
      let sel = getSelection(view.root);
      if (!sel || sel.rangeCount == 0)
        return true;
      let rects = sel.getRangeAt(0).getClientRects();
      for (let i2 = 0; i2 < rects.length; i2++) {
        let rect = rects[i2];
        if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY)
          return true;
      }
      return false;
    }
    function eventBelongsToEditor(view, event) {
      if (!event.bubbles)
        return true;
      if (event.defaultPrevented)
        return false;
      for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
        if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event))
          return false;
      return true;
    }
    const handlers = /* @__PURE__ */ Object.create(null);
    const observers = /* @__PURE__ */ Object.create(null);
    const brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
    function capturePaste(view) {
      let parent = view.dom.parentNode;
      if (!parent)
        return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.focus();
      setTimeout(() => {
        view.focus();
        target.remove();
        doPaste(view, target.value);
      }, 50);
    }
    function textFilter(state, facet, text2) {
      for (let filter of state.facet(facet))
        text2 = filter(text2, state);
      return text2;
    }
    function doPaste(view, input) {
      input = textFilter(view.state, clipboardInputFilter, input);
      let { state } = view, changes, i2 = 1, text2 = state.toText(input);
      let byLine = text2.lines == state.selection.ranges.length;
      let linewise = lastLinewiseCopy != null && state.selection.ranges.every((r2) => r2.empty) && lastLinewiseCopy == text2.toString();
      if (linewise) {
        let lastLine = -1;
        changes = state.changeByRange((range) => {
          let line2 = state.doc.lineAt(range.from);
          if (line2.from == lastLine)
            return { range };
          lastLine = line2.from;
          let insert2 = state.toText((byLine ? text2.line(i2++).text : input) + state.lineBreak);
          return {
            changes: { from: line2.from, insert: insert2 },
            range: EditorSelection.cursor(range.from + insert2.length)
          };
        });
      } else if (byLine) {
        changes = state.changeByRange((range) => {
          let line2 = text2.line(i2++);
          return {
            changes: { from: range.from, to: range.to, insert: line2.text },
            range: EditorSelection.cursor(range.from + line2.length)
          };
        });
      } else {
        changes = state.replaceSelection(text2);
      }
      view.dispatch(changes, {
        userEvent: "input.paste",
        scrollIntoView: true
      });
    }
    observers.scroll = (view) => {
      view.inputState.lastScrollTop = view.scrollDOM.scrollTop;
      view.inputState.lastScrollLeft = view.scrollDOM.scrollLeft;
    };
    handlers.keydown = (view, event) => {
      view.inputState.setSelectionOrigin("select");
      if (event.keyCode == 27 && view.inputState.tabFocusMode != 0)
        view.inputState.tabFocusMode = Date.now() + 2e3;
      return false;
    };
    observers.touchstart = (view, e2) => {
      view.inputState.lastTouchTime = Date.now();
      view.inputState.setSelectionOrigin("select.pointer");
    };
    observers.touchmove = (view) => {
      view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.mousedown = (view, event) => {
      view.observer.flush();
      if (view.inputState.lastTouchTime > Date.now() - 2e3)
        return false;
      let style2 = null;
      for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
        style2 = makeStyle(view, event);
        if (style2)
          break;
      }
      if (!style2 && event.button == 0)
        style2 = basicMouseSelection(view, event);
      if (style2) {
        let mustFocus = !view.hasFocus;
        view.inputState.startMouseSelection(new MouseSelection(view, event, style2, mustFocus));
        if (mustFocus)
          view.observer.ignore(() => {
            focusPreventScroll(view.contentDOM);
            let active = view.root.activeElement;
            if (active && !active.contains(view.contentDOM))
              active.blur();
          });
        let mouseSel = view.inputState.mouseSelection;
        if (mouseSel) {
          mouseSel.start(event);
          return mouseSel.dragging === false;
        }
      }
      return false;
    };
    function rangeForClick(view, pos2, bias, type) {
      if (type == 1) {
        return EditorSelection.cursor(pos2, bias);
      } else if (type == 2) {
        return groupAt(view.state, pos2, bias);
      } else {
        let visual = LineView.find(view.docView, pos2), line2 = view.state.doc.lineAt(visual ? visual.posAtEnd : pos2);
        let from = visual ? visual.posAtStart : line2.from, to = visual ? visual.posAtEnd : line2.to;
        if (to < view.state.doc.length && to == line2.to)
          to++;
        return EditorSelection.range(from, to);
      }
    }
    let inside = (x2, y2, rect) => y2 >= rect.top && y2 <= rect.bottom && x2 >= rect.left && x2 <= rect.right;
    function findPositionSide(view, pos2, x2, y2) {
      let line2 = LineView.find(view.docView, pos2);
      if (!line2)
        return 1;
      let off = pos2 - line2.posAtStart;
      if (off == 0)
        return 1;
      if (off == line2.length)
        return -1;
      let before = line2.coordsAt(off, -1);
      if (before && inside(x2, y2, before))
        return -1;
      let after = line2.coordsAt(off, 1);
      if (after && inside(x2, y2, after))
        return 1;
      return before && before.bottom >= y2 ? -1 : 1;
    }
    function queryPos(view, event) {
      let pos2 = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      return { pos: pos2, bias: findPositionSide(view, pos2, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
      if (!BadMouseDetail)
        return event.detail;
      let last = lastMouseDown, lastTime = lastMouseDownTime;
      lastMouseDown = event;
      lastMouseDownTime = Date.now();
      return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
      let start2 = queryPos(view, event), type = getClickType(event);
      let startSel = view.state.selection;
      return {
        update(update) {
          if (update.docChanged) {
            start2.pos = update.changes.mapPos(start2.pos);
            startSel = startSel.map(update.changes);
          }
        },
        get(event2, extend2, multiple) {
          let cur2 = queryPos(view, event2), removed;
          let range = rangeForClick(view, cur2.pos, cur2.bias, type);
          if (start2.pos != cur2.pos && !extend2) {
            let startRange = rangeForClick(view, start2.pos, start2.bias, type);
            let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
            range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
          }
          if (extend2)
            return startSel.replaceRange(startSel.main.extend(range.from, range.to));
          else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur2.pos)))
            return removed;
          else if (multiple)
            return startSel.addRange(range);
          else
            return EditorSelection.create([range]);
        }
      };
    }
    function removeRangeAround(sel, pos2) {
      for (let i2 = 0; i2 < sel.ranges.length; i2++) {
        let { from, to } = sel.ranges[i2];
        if (from <= pos2 && to >= pos2)
          return EditorSelection.create(sel.ranges.slice(0, i2).concat(sel.ranges.slice(i2 + 1)), sel.mainIndex == i2 ? 0 : sel.mainIndex - (sel.mainIndex > i2 ? 1 : 0));
      }
      return null;
    }
    handlers.dragstart = (view, event) => {
      let { selection: { main: range } } = view.state;
      if (event.target.draggable) {
        let cView = view.docView.nearest(event.target);
        if (cView && cView.isWidget) {
          let from = cView.posAtStart, to = from + cView.length;
          if (from >= range.to || to <= range.from)
            range = EditorSelection.range(from, to);
        }
      }
      let { inputState } = view;
      if (inputState.mouseSelection)
        inputState.mouseSelection.dragging = true;
      inputState.draggedContent = range;
      if (event.dataTransfer) {
        event.dataTransfer.setData("Text", textFilter(view.state, clipboardOutputFilter, view.state.sliceDoc(range.from, range.to)));
        event.dataTransfer.effectAllowed = "copyMove";
      }
      return false;
    };
    handlers.dragend = (view) => {
      view.inputState.draggedContent = null;
      return false;
    };
    function dropText(view, event, text2, direct) {
      text2 = textFilter(view.state, clipboardInputFilter, text2);
      if (!text2)
        return;
      let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
      let { draggedContent } = view.inputState;
      let del = direct && draggedContent && dragMovesSelection(view, event) ? { from: draggedContent.from, to: draggedContent.to } : null;
      let ins = { from: dropPos, insert: text2 };
      let changes = view.state.changes(del ? [del, ins] : ins);
      view.focus();
      view.dispatch({
        changes,
        selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
        userEvent: del ? "move.drop" : "input.drop"
      });
      view.inputState.draggedContent = null;
    }
    handlers.drop = (view, event) => {
      if (!event.dataTransfer)
        return false;
      if (view.state.readOnly)
        return true;
      let files = event.dataTransfer.files;
      if (files && files.length) {
        let text2 = Array(files.length), read2 = 0;
        let finishFile = () => {
          if (++read2 == files.length)
            dropText(view, event, text2.filter((s2) => s2 != null).join(view.state.lineBreak), false);
        };
        for (let i2 = 0; i2 < files.length; i2++) {
          let reader = new FileReader();
          reader.onerror = finishFile;
          reader.onload = () => {
            if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
              text2[i2] = reader.result;
            finishFile();
          };
          reader.readAsText(files[i2]);
        }
        return true;
      } else {
        let text2 = event.dataTransfer.getData("Text");
        if (text2) {
          dropText(view, event, text2, true);
          return true;
        }
      }
      return false;
    };
    handlers.paste = (view, event) => {
      if (view.state.readOnly)
        return true;
      view.observer.flush();
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
        doPaste(view, data.getData("text/plain") || data.getData("text/uri-list"));
        return true;
      } else {
        capturePaste(view);
        return false;
      }
    };
    function captureCopy(view, text2) {
      let parent = view.dom.parentNode;
      if (!parent)
        return;
      let target = parent.appendChild(document.createElement("textarea"));
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.value = text2;
      target.focus();
      target.selectionEnd = text2.length;
      target.selectionStart = 0;
      setTimeout(() => {
        target.remove();
        view.focus();
      }, 50);
    }
    function copiedRange(state) {
      let content2 = [], ranges = [], linewise = false;
      for (let range of state.selection.ranges)
        if (!range.empty) {
          content2.push(state.sliceDoc(range.from, range.to));
          ranges.push(range);
        }
      if (!content2.length) {
        let upto = -1;
        for (let { from } of state.selection.ranges) {
          let line2 = state.doc.lineAt(from);
          if (line2.number > upto) {
            content2.push(line2.text);
            ranges.push({ from: line2.from, to: Math.min(state.doc.length, line2.to + 1) });
          }
          upto = line2.number;
        }
        linewise = true;
      }
      return { text: textFilter(state, clipboardOutputFilter, content2.join(state.lineBreak)), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
      let { text: text2, ranges, linewise } = copiedRange(view.state);
      if (!text2 && !linewise)
        return false;
      lastLinewiseCopy = linewise ? text2 : null;
      if (event.type == "cut" && !view.state.readOnly)
        view.dispatch({
          changes: ranges,
          scrollIntoView: true,
          userEvent: "delete.cut"
        });
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data) {
        data.clearData();
        data.setData("text/plain", text2);
        return true;
      } else {
        captureCopy(view, text2);
        return false;
      }
    };
    const isFocusChange = /* @__PURE__ */ Annotation.define();
    function focusChangeTransaction(state, focus) {
      let effects = [];
      for (let getEffect of state.facet(focusChangeEffect)) {
        let effect2 = getEffect(state, focus);
        if (effect2)
          effects.push(effect2);
      }
      return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
    }
    function updateForFocusChange(view) {
      setTimeout(() => {
        let focus = view.hasFocus;
        if (focus != view.inputState.notifiedFocused) {
          let tr = focusChangeTransaction(view.state, focus);
          if (tr)
            view.dispatch(tr);
          else
            view.update([]);
        }
      }, 10);
    }
    observers.focus = (view) => {
      view.inputState.lastFocusTime = Date.now();
      if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
        view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
        view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
      }
      updateForFocusChange(view);
    };
    observers.blur = (view) => {
      view.observer.clearSelectionRange();
      updateForFocusChange(view);
    };
    observers.compositionstart = observers.compositionupdate = (view) => {
      if (view.observer.editContext)
        return;
      if (view.inputState.compositionFirstChange == null)
        view.inputState.compositionFirstChange = true;
      if (view.inputState.composing < 0) {
        view.inputState.composing = 0;
      }
    };
    observers.compositionend = (view) => {
      if (view.observer.editContext)
        return;
      view.inputState.composing = -1;
      view.inputState.compositionEndedAt = Date.now();
      view.inputState.compositionPendingKey = true;
      view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
      view.inputState.compositionFirstChange = null;
      if (browser.chrome && browser.android) {
        view.observer.flushSoon();
      } else if (view.inputState.compositionPendingChange) {
        Promise.resolve().then(() => view.observer.flush());
      } else {
        setTimeout(() => {
          if (view.inputState.composing < 0 && view.docView.hasComposition)
            view.update([]);
        }, 50);
      }
    };
    observers.contextmenu = (view) => {
      view.inputState.lastContextMenu = Date.now();
    };
    handlers.beforeinput = (view, event) => {
      var _a2, _b2;
      if (event.inputType == "insertReplacementText" && view.observer.editContext) {
        let text2 = (_a2 = event.dataTransfer) === null || _a2 === void 0 ? void 0 : _a2.getData("text/plain"), ranges = event.getTargetRanges();
        if (text2 && ranges.length) {
          let r2 = ranges[0];
          let from = view.posAtDOM(r2.startContainer, r2.startOffset), to = view.posAtDOM(r2.endContainer, r2.endOffset);
          applyDOMChangeInner(view, { from, to, insert: view.state.toText(text2) }, null);
          return true;
        }
      }
      let pending;
      if (browser.chrome && browser.android && (pending = PendingKeys.find((key2) => key2.inputType == event.inputType))) {
        view.observer.delayAndroidKey(pending.key, pending.keyCode);
        if (pending.key == "Backspace" || pending.key == "Delete") {
          let startViewHeight = ((_b2 = window.visualViewport) === null || _b2 === void 0 ? void 0 : _b2.height) || 0;
          setTimeout(() => {
            var _a3;
            if ((((_a3 = window.visualViewport) === null || _a3 === void 0 ? void 0 : _a3.height) || 0) > startViewHeight + 10 && view.hasFocus) {
              view.contentDOM.blur();
              view.focus();
            }
          }, 100);
        }
      }
      if (browser.ios && event.inputType == "deleteContentForward") {
        view.observer.flushSoon();
      }
      if (browser.safari && event.inputType == "insertText" && view.inputState.composing >= 0) {
        setTimeout(() => observers.compositionend(view, event), 20);
      }
      return false;
    };
    const appliedFirefoxHack = /* @__PURE__ */ new Set();
    function firefoxCopyCutHack(doc2) {
      if (!appliedFirefoxHack.has(doc2)) {
        appliedFirefoxHack.add(doc2);
        doc2.addEventListener("copy", () => {
        });
        doc2.addEventListener("cut", () => {
        });
      }
    }
    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    let heightChangeFlag = false;
    function clearHeightChangeFlag() {
      heightChangeFlag = false;
    }
    class HeightOracle {
      constructor(lineWrapping) {
        this.lineWrapping = lineWrapping;
        this.doc = Text.empty;
        this.heightSamples = {};
        this.lineHeight = 14;
        this.charWidth = 7;
        this.textHeight = 14;
        this.lineLength = 30;
      }
      heightForGap(from, to) {
        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
        if (this.lineWrapping)
          lines += Math.max(0, Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength));
        return this.lineHeight * lines;
      }
      heightForLine(length) {
        if (!this.lineWrapping)
          return this.lineHeight;
        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
        return lines * this.lineHeight;
      }
      setDoc(doc2) {
        this.doc = doc2;
        return this;
      }
      mustRefreshForWrapping(whiteSpace) {
        return wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping;
      }
      mustRefreshForHeights(lineHeights) {
        let newHeight = false;
        for (let i2 = 0; i2 < lineHeights.length; i2++) {
          let h2 = lineHeights[i2];
          if (h2 < 0) {
            i2++;
          } else if (!this.heightSamples[Math.floor(h2 * 10)]) {
            newHeight = true;
            this.heightSamples[Math.floor(h2 * 10)] = true;
          }
        }
        return newHeight;
      }
      refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
        this.lineWrapping = lineWrapping;
        this.lineHeight = lineHeight;
        this.charWidth = charWidth;
        this.textHeight = textHeight;
        this.lineLength = lineLength;
        if (changed) {
          this.heightSamples = {};
          for (let i2 = 0; i2 < knownHeights.length; i2++) {
            let h2 = knownHeights[i2];
            if (h2 < 0)
              i2++;
            else
              this.heightSamples[Math.floor(h2 * 10)] = true;
          }
        }
        return changed;
      }
    }
    class MeasuredHeights {
      constructor(from, heights) {
        this.from = from;
        this.heights = heights;
        this.index = 0;
      }
      get more() {
        return this.index < this.heights.length;
      }
    }
    class BlockInfo {
      /**
      @internal
      */
      constructor(from, length, top2, height, _content) {
        this.from = from;
        this.length = length;
        this.top = top2;
        this.height = height;
        this._content = _content;
      }
      /**
      The type of element this is. When querying lines, this may be
      an array of all the blocks that make up the line.
      */
      get type() {
        return typeof this._content == "number" ? BlockType.Text : Array.isArray(this._content) ? this._content : this._content.type;
      }
      /**
      The end of the element as a document position.
      */
      get to() {
        return this.from + this.length;
      }
      /**
      The bottom position of the element.
      */
      get bottom() {
        return this.top + this.height;
      }
      /**
      If this is a widget block, this will return the widget
      associated with it.
      */
      get widget() {
        return this._content instanceof PointDecoration ? this._content.widget : null;
      }
      /**
      If this is a textblock, this holds the number of line breaks
      that appear in widgets inside the block.
      */
      get widgetLineBreaks() {
        return typeof this._content == "number" ? this._content : 0;
      }
      /**
      @internal
      */
      join(other) {
        let content2 = (Array.isArray(this._content) ? this._content : [this]).concat(Array.isArray(other._content) ? other._content : [other]);
        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content2);
      }
    }
    var QueryType = /* @__PURE__ */ function(QueryType2) {
      QueryType2[QueryType2["ByPos"] = 0] = "ByPos";
      QueryType2[QueryType2["ByHeight"] = 1] = "ByHeight";
      QueryType2[QueryType2["ByPosNoHeight"] = 2] = "ByPosNoHeight";
      return QueryType2;
    }(QueryType || (QueryType = {}));
    const Epsilon = 1e-3;
    class HeightMap {
      constructor(length, height, flags = 2) {
        this.length = length;
        this.height = height;
        this.flags = flags;
      }
      get outdated() {
        return (this.flags & 2) > 0;
      }
      set outdated(value) {
        this.flags = (value ? 2 : 0) | this.flags & ~2;
      }
      setHeight(height) {
        if (this.height != height) {
          if (Math.abs(this.height - height) > Epsilon)
            heightChangeFlag = true;
          this.height = height;
        }
      }
      // Base case is to replace a leaf node, which simply builds a tree
      // from the new nodes and returns that (HeightMapBranch and
      // HeightMapGap override this to actually use from/to)
      replace(_from, _to, nodes) {
        return HeightMap.of(nodes);
      }
      // Again, these are base cases, and are overridden for branch and gap nodes.
      decomposeLeft(_to, result) {
        result.push(this);
      }
      decomposeRight(_from, result) {
        result.push(this);
      }
      applyChanges(decorations2, oldDoc, oracle, changes) {
        let me = this, doc2 = oracle.doc;
        for (let i2 = changes.length - 1; i2 >= 0; i2--) {
          let { fromA, toA, fromB, toB } = changes[i2];
          let start2 = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
          let end2 = start2.to >= toA ? start2 : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
          toB += end2.to - toA;
          toA = end2.to;
          while (i2 > 0 && start2.from <= changes[i2 - 1].toA) {
            fromA = changes[i2 - 1].fromA;
            fromB = changes[i2 - 1].fromB;
            i2--;
            if (fromA < start2.from)
              start2 = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
          }
          fromB += start2.from - fromA;
          fromA = start2.from;
          let nodes = NodeBuilder.build(oracle.setDoc(doc2), decorations2, fromB, toB);
          me = replace(me, me.replace(fromA, toA, nodes));
        }
        return me.updateHeight(oracle, 0);
      }
      static empty() {
        return new HeightMapText(0, 0);
      }
      // nodes uses null values to indicate the position of line breaks.
      // There are never line breaks at the start or end of the array, or
      // two line breaks next to each other, and the array isn't allowed
      // to be empty (same restrictions as return value from the builder).
      static of(nodes) {
        if (nodes.length == 1)
          return nodes[0];
        let i2 = 0, j2 = nodes.length, before = 0, after = 0;
        for (; ; ) {
          if (i2 == j2) {
            if (before > after * 2) {
              let split = nodes[i2 - 1];
              if (split.break)
                nodes.splice(--i2, 1, split.left, null, split.right);
              else
                nodes.splice(--i2, 1, split.left, split.right);
              j2 += 1 + split.break;
              before -= split.size;
            } else if (after > before * 2) {
              let split = nodes[j2];
              if (split.break)
                nodes.splice(j2, 1, split.left, null, split.right);
              else
                nodes.splice(j2, 1, split.left, split.right);
              j2 += 2 + split.break;
              after -= split.size;
            } else {
              break;
            }
          } else if (before < after) {
            let next = nodes[i2++];
            if (next)
              before += next.size;
          } else {
            let next = nodes[--j2];
            if (next)
              after += next.size;
          }
        }
        let brk = 0;
        if (nodes[i2 - 1] == null) {
          brk = 1;
          i2--;
        } else if (nodes[i2] == null) {
          brk = 1;
          j2++;
        }
        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i2)), brk, HeightMap.of(nodes.slice(j2)));
      }
    }
    function replace(old, val) {
      if (old == val)
        return old;
      if (old.constructor != val.constructor)
        heightChangeFlag = true;
      return val;
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
      constructor(length, height, deco) {
        super(length, height);
        this.deco = deco;
      }
      blockAt(_height, _oracle, top2, offset2) {
        return new BlockInfo(offset2, this.length, top2, this.height, this.deco || 0);
      }
      lineAt(_value, _type, oracle, top2, offset2) {
        return this.blockAt(0, oracle, top2, offset2);
      }
      forEachLine(from, to, oracle, top2, offset2, f2) {
        if (from <= offset2 + this.length && to >= offset2)
          f2(this.blockAt(0, oracle, top2, offset2));
      }
      updateHeight(oracle, offset2 = 0, _force = false, measured) {
        if (measured && measured.from <= offset2 && measured.more)
          this.setHeight(measured.heights[measured.index++]);
        this.outdated = false;
        return this;
      }
      toString() {
        return `block(${this.length})`;
      }
    }
    class HeightMapText extends HeightMapBlock {
      constructor(length, height) {
        super(length, height, null);
        this.collapsed = 0;
        this.widgetHeight = 0;
        this.breaks = 0;
      }
      blockAt(_height, _oracle, top2, offset2) {
        return new BlockInfo(offset2, this.length, top2, this.height, this.breaks);
      }
      replace(_from, _to, nodes) {
        let node = nodes[0];
        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4) && Math.abs(this.length - node.length) < 10) {
          if (node instanceof HeightMapGap)
            node = new HeightMapText(node.length, this.height);
          else
            node.height = this.height;
          if (!this.outdated)
            node.outdated = false;
          return node;
        } else {
          return HeightMap.of(nodes);
        }
      }
      updateHeight(oracle, offset2 = 0, force = false, measured) {
        if (measured && measured.from <= offset2 && measured.more)
          this.setHeight(measured.heights[measured.index++]);
        else if (force || this.outdated)
          this.setHeight(Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) + this.breaks * oracle.lineHeight);
        this.outdated = false;
        return this;
      }
      toString() {
        return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
      }
    }
    class HeightMapGap extends HeightMap {
      constructor(length) {
        super(length, 0);
      }
      heightMetrics(oracle, offset2) {
        let firstLine = oracle.doc.lineAt(offset2).number, lastLine = oracle.doc.lineAt(offset2 + this.length).number;
        let lines = lastLine - firstLine + 1;
        let perLine, perChar = 0;
        if (oracle.lineWrapping) {
          let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
          perLine = totalPerLine / lines;
          if (this.length > lines + 1)
            perChar = (this.height - totalPerLine) / (this.length - lines - 1);
        } else {
          perLine = this.height / lines;
        }
        return { firstLine, lastLine, perLine, perChar };
      }
      blockAt(height, oracle, top2, offset2) {
        let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset2);
        if (oracle.lineWrapping) {
          let guess = offset2 + (height < oracle.lineHeight ? 0 : Math.round(Math.max(0, Math.min(1, (height - top2) / this.height)) * this.length));
          let line2 = oracle.doc.lineAt(guess), lineHeight = perLine + line2.length * perChar;
          let lineTop = Math.max(top2, height - lineHeight / 2);
          return new BlockInfo(line2.from, line2.length, lineTop, lineHeight, 0);
        } else {
          let line2 = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top2) / perLine)));
          let { from, length } = oracle.doc.line(firstLine + line2);
          return new BlockInfo(from, length, top2 + perLine * line2, perLine, 0);
        }
      }
      lineAt(value, type, oracle, top2, offset2) {
        if (type == QueryType.ByHeight)
          return this.blockAt(value, oracle, top2, offset2);
        if (type == QueryType.ByPosNoHeight) {
          let { from, to } = oracle.doc.lineAt(value);
          return new BlockInfo(from, to - from, 0, 0, 0);
        }
        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset2);
        let line2 = oracle.doc.lineAt(value), lineHeight = perLine + line2.length * perChar;
        let linesAbove = line2.number - firstLine;
        let lineTop = top2 + perLine * linesAbove + perChar * (line2.from - offset2 - linesAbove);
        return new BlockInfo(line2.from, line2.length, Math.max(top2, Math.min(lineTop, top2 + this.height - lineHeight)), lineHeight, 0);
      }
      forEachLine(from, to, oracle, top2, offset2, f2) {
        from = Math.max(from, offset2);
        to = Math.min(to, offset2 + this.length);
        let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset2);
        for (let pos2 = from, lineTop = top2; pos2 <= to; ) {
          let line2 = oracle.doc.lineAt(pos2);
          if (pos2 == from) {
            let linesAbove = line2.number - firstLine;
            lineTop += perLine * linesAbove + perChar * (from - offset2 - linesAbove);
          }
          let lineHeight = perLine + perChar * line2.length;
          f2(new BlockInfo(line2.from, line2.length, lineTop, lineHeight, 0));
          lineTop += lineHeight;
          pos2 = line2.to + 1;
        }
      }
      replace(from, to, nodes) {
        let after = this.length - to;
        if (after > 0) {
          let last = nodes[nodes.length - 1];
          if (last instanceof HeightMapGap)
            nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
          else
            nodes.push(null, new HeightMapGap(after - 1));
        }
        if (from > 0) {
          let first = nodes[0];
          if (first instanceof HeightMapGap)
            nodes[0] = new HeightMapGap(from + first.length);
          else
            nodes.unshift(new HeightMapGap(from - 1), null);
        }
        return HeightMap.of(nodes);
      }
      decomposeLeft(to, result) {
        result.push(new HeightMapGap(to - 1), null);
      }
      decomposeRight(from, result) {
        result.push(null, new HeightMapGap(this.length - from - 1));
      }
      updateHeight(oracle, offset2 = 0, force = false, measured) {
        let end2 = offset2 + this.length;
        if (measured && measured.from <= offset2 + this.length && measured.more) {
          let nodes = [], pos2 = Math.max(offset2, measured.from), singleHeight = -1;
          if (measured.from > offset2)
            nodes.push(new HeightMapGap(measured.from - offset2 - 1).updateHeight(oracle, offset2));
          while (pos2 <= end2 && measured.more) {
            let len = oracle.doc.lineAt(pos2).length;
            if (nodes.length)
              nodes.push(null);
            let height = measured.heights[measured.index++];
            if (singleHeight == -1)
              singleHeight = height;
            else if (Math.abs(height - singleHeight) >= Epsilon)
              singleHeight = -2;
            let line2 = new HeightMapText(len, height);
            line2.outdated = false;
            nodes.push(line2);
            pos2 += len + 1;
          }
          if (pos2 <= end2)
            nodes.push(null, new HeightMapGap(end2 - pos2).updateHeight(oracle, pos2));
          let result = HeightMap.of(nodes);
          if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon || Math.abs(singleHeight - this.heightMetrics(oracle, offset2).perLine) >= Epsilon)
            heightChangeFlag = true;
          return replace(this, result);
        } else if (force || this.outdated) {
          this.setHeight(oracle.heightForGap(offset2, offset2 + this.length));
          this.outdated = false;
        }
        return this;
      }
      toString() {
        return `gap(${this.length})`;
      }
    }
    class HeightMapBranch extends HeightMap {
      constructor(left2, brk, right2) {
        super(left2.length + brk + right2.length, left2.height + right2.height, brk | (left2.outdated || right2.outdated ? 2 : 0));
        this.left = left2;
        this.right = right2;
        this.size = left2.size + right2.size;
      }
      get break() {
        return this.flags & 1;
      }
      blockAt(height, oracle, top2, offset2) {
        let mid = top2 + this.left.height;
        return height < mid ? this.left.blockAt(height, oracle, top2, offset2) : this.right.blockAt(height, oracle, mid, offset2 + this.left.length + this.break);
      }
      lineAt(value, type, oracle, top2, offset2) {
        let rightTop = top2 + this.left.height, rightOffset = offset2 + this.left.length + this.break;
        let left2 = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
        let base2 = left2 ? this.left.lineAt(value, type, oracle, top2, offset2) : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
        if (this.break || (left2 ? base2.to < rightOffset : base2.from > rightOffset))
          return base2;
        let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
        if (left2)
          return base2.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
        else
          return this.left.lineAt(rightOffset, subQuery, oracle, top2, offset2).join(base2);
      }
      forEachLine(from, to, oracle, top2, offset2, f2) {
        let rightTop = top2 + this.left.height, rightOffset = offset2 + this.left.length + this.break;
        if (this.break) {
          if (from < rightOffset)
            this.left.forEachLine(from, to, oracle, top2, offset2, f2);
          if (to >= rightOffset)
            this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f2);
        } else {
          let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top2, offset2);
          if (from < mid.from)
            this.left.forEachLine(from, mid.from - 1, oracle, top2, offset2, f2);
          if (mid.to >= from && mid.from <= to)
            f2(mid);
          if (to > mid.to)
            this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f2);
        }
      }
      replace(from, to, nodes) {
        let rightStart = this.left.length + this.break;
        if (to < rightStart)
          return this.balanced(this.left.replace(from, to, nodes), this.right);
        if (from > this.left.length)
          return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
        let result = [];
        if (from > 0)
          this.decomposeLeft(from, result);
        let left2 = result.length;
        for (let node of nodes)
          result.push(node);
        if (from > 0)
          mergeGaps(result, left2 - 1);
        if (to < this.length) {
          let right2 = result.length;
          this.decomposeRight(to, result);
          mergeGaps(result, right2);
        }
        return HeightMap.of(result);
      }
      decomposeLeft(to, result) {
        let left2 = this.left.length;
        if (to <= left2)
          return this.left.decomposeLeft(to, result);
        result.push(this.left);
        if (this.break) {
          left2++;
          if (to >= left2)
            result.push(null);
        }
        if (to > left2)
          this.right.decomposeLeft(to - left2, result);
      }
      decomposeRight(from, result) {
        let left2 = this.left.length, right2 = left2 + this.break;
        if (from >= right2)
          return this.right.decomposeRight(from - right2, result);
        if (from < left2)
          this.left.decomposeRight(from, result);
        if (this.break && from < right2)
          result.push(null);
        result.push(this.right);
      }
      balanced(left2, right2) {
        if (left2.size > 2 * right2.size || right2.size > 2 * left2.size)
          return HeightMap.of(this.break ? [left2, null, right2] : [left2, right2]);
        this.left = replace(this.left, left2);
        this.right = replace(this.right, right2);
        this.setHeight(left2.height + right2.height);
        this.outdated = left2.outdated || right2.outdated;
        this.size = left2.size + right2.size;
        this.length = left2.length + this.break + right2.length;
        return this;
      }
      updateHeight(oracle, offset2 = 0, force = false, measured) {
        let { left: left2, right: right2 } = this, rightStart = offset2 + left2.length + this.break, rebalance = null;
        if (measured && measured.from <= offset2 + left2.length && measured.more)
          rebalance = left2 = left2.updateHeight(oracle, offset2, force, measured);
        else
          left2.updateHeight(oracle, offset2, force);
        if (measured && measured.from <= rightStart + right2.length && measured.more)
          rebalance = right2 = right2.updateHeight(oracle, rightStart, force, measured);
        else
          right2.updateHeight(oracle, rightStart, force);
        if (rebalance)
          return this.balanced(left2, right2);
        this.height = this.left.height + this.right.height;
        this.outdated = false;
        return this;
      }
      toString() {
        return this.left + (this.break ? " " : "-") + this.right;
      }
    }
    function mergeGaps(nodes, around) {
      let before, after;
      if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap)
        nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
      constructor(pos2, oracle) {
        this.pos = pos2;
        this.oracle = oracle;
        this.nodes = [];
        this.lineStart = -1;
        this.lineEnd = -1;
        this.covering = null;
        this.writtenTo = pos2;
      }
      get isCovered() {
        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
      }
      span(_from, to) {
        if (this.lineStart > -1) {
          let end2 = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
          if (last instanceof HeightMapText)
            last.length += end2 - this.pos;
          else if (end2 > this.pos || !this.isCovered)
            this.nodes.push(new HeightMapText(end2 - this.pos, -1));
          this.writtenTo = end2;
          if (to > end2) {
            this.nodes.push(null);
            this.writtenTo++;
            this.lineStart = -1;
          }
        }
        this.pos = to;
      }
      point(from, to, deco) {
        if (from < to || deco.heightRelevant) {
          let height = deco.widget ? deco.widget.estimatedHeight : 0;
          let breaks = deco.widget ? deco.widget.lineBreaks : 0;
          if (height < 0)
            height = this.oracle.lineHeight;
          let len = to - from;
          if (deco.block) {
            this.addBlock(new HeightMapBlock(len, height, deco));
          } else if (len || breaks || height >= relevantWidgetHeight) {
            this.addLineDeco(height, breaks, len);
          }
        } else if (to > from) {
          this.span(from, to);
        }
        if (this.lineEnd > -1 && this.lineEnd < this.pos)
          this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
      }
      enterLine() {
        if (this.lineStart > -1)
          return;
        let { from, to } = this.oracle.doc.lineAt(this.pos);
        this.lineStart = from;
        this.lineEnd = to;
        if (this.writtenTo < from) {
          if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
            this.nodes.push(this.blankContent(this.writtenTo, from - 1));
          this.nodes.push(null);
        }
        if (this.pos > from)
          this.nodes.push(new HeightMapText(this.pos - from, -1));
        this.writtenTo = this.pos;
      }
      blankContent(from, to) {
        let gap = new HeightMapGap(to - from);
        if (this.oracle.doc.lineAt(from).to == to)
          gap.flags |= 4;
        return gap;
      }
      ensureLine() {
        this.enterLine();
        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
        if (last instanceof HeightMapText)
          return last;
        let line2 = new HeightMapText(0, -1);
        this.nodes.push(line2);
        return line2;
      }
      addBlock(block2) {
        this.enterLine();
        let deco = block2.deco;
        if (deco && deco.startSide > 0 && !this.isCovered)
          this.ensureLine();
        this.nodes.push(block2);
        this.writtenTo = this.pos = this.pos + block2.length;
        if (deco && deco.endSide > 0)
          this.covering = block2;
      }
      addLineDeco(height, breaks, length) {
        let line2 = this.ensureLine();
        line2.length += length;
        line2.collapsed += length;
        line2.widgetHeight = Math.max(line2.widgetHeight, height);
        line2.breaks += breaks;
        this.writtenTo = this.pos = this.pos + length;
      }
      finish(from) {
        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
          this.nodes.push(new HeightMapText(0, -1));
        else if (this.writtenTo < this.pos || last == null)
          this.nodes.push(this.blankContent(this.writtenTo, this.pos));
        let pos2 = from;
        for (let node of this.nodes) {
          if (node instanceof HeightMapText)
            node.updateHeight(this.oracle, pos2);
          pos2 += node ? node.length : 1;
        }
        return this.nodes;
      }
      // Always called with a region that on both sides either stretches
      // to a line break or the end of the document.
      // The returned array uses null to indicate line breaks, but never
      // starts or ends in a line break, or has multiple line breaks next
      // to each other.
      static build(oracle, decorations2, from, to) {
        let builder = new NodeBuilder(from, oracle);
        RangeSet.spans(decorations2, from, to, builder, 0);
        return builder.finish(from);
      }
    }
    function heightRelevantDecoChanges(a2, b, diff2) {
      let comp = new DecorationComparator();
      RangeSet.compare(a2, b, diff2, comp, 0);
      return comp.changes;
    }
    class DecorationComparator {
      constructor() {
        this.changes = [];
      }
      compareRange() {
      }
      comparePoint(from, to, a2, b) {
        if (from < to || a2 && a2.heightRelevant || b && b.heightRelevant)
          addRange(from, to, this.changes, 5);
      }
    }
    function visiblePixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      let doc2 = dom.ownerDocument, win = doc2.defaultView || window;
      let left2 = Math.max(0, rect.left), right2 = Math.min(win.innerWidth, rect.right);
      let top2 = Math.max(0, rect.top), bottom2 = Math.min(win.innerHeight, rect.bottom);
      for (let parent = dom.parentNode; parent && parent != doc2.body; ) {
        if (parent.nodeType == 1) {
          let elt = parent;
          let style2 = window.getComputedStyle(elt);
          if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) && style2.overflow != "visible") {
            let parentRect = elt.getBoundingClientRect();
            left2 = Math.max(left2, parentRect.left);
            right2 = Math.min(right2, parentRect.right);
            top2 = Math.max(top2, parentRect.top);
            bottom2 = Math.min(parent == dom.parentNode ? win.innerHeight : bottom2, parentRect.bottom);
          }
          parent = style2.position == "absolute" || style2.position == "fixed" ? elt.offsetParent : elt.parentNode;
        } else if (parent.nodeType == 11) {
          parent = parent.host;
        } else {
          break;
        }
      }
      return {
        left: left2 - rect.left,
        right: Math.max(left2, right2) - rect.left,
        top: top2 - (rect.top + paddingTop),
        bottom: Math.max(top2, bottom2) - (rect.top + paddingTop)
      };
    }
    function fullPixelRange(dom, paddingTop) {
      let rect = dom.getBoundingClientRect();
      return {
        left: 0,
        right: rect.right - rect.left,
        top: paddingTop,
        bottom: rect.bottom - (rect.top + paddingTop)
      };
    }
    class LineGap {
      constructor(from, to, size, displaySize) {
        this.from = from;
        this.to = to;
        this.size = size;
        this.displaySize = displaySize;
      }
      static same(a2, b) {
        if (a2.length != b.length)
          return false;
        for (let i2 = 0; i2 < a2.length; i2++) {
          let gA = a2[i2], gB = b[i2];
          if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
            return false;
        }
        return true;
      }
      draw(viewState, wrapping) {
        return Decoration.replace({
          widget: new LineGapWidget(this.displaySize * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
        }).range(this.from, this.to);
      }
    }
    class LineGapWidget extends WidgetType {
      constructor(size, vertical) {
        super();
        this.size = size;
        this.vertical = vertical;
      }
      eq(other) {
        return other.size == this.size && other.vertical == this.vertical;
      }
      toDOM() {
        let elt = document.createElement("div");
        if (this.vertical) {
          elt.style.height = this.size + "px";
        } else {
          elt.style.width = this.size + "px";
          elt.style.height = "2px";
          elt.style.display = "inline-block";
        }
        return elt;
      }
      get estimatedHeight() {
        return this.vertical ? this.size : -1;
      }
    }
    class ViewState {
      constructor(state) {
        this.state = state;
        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
        this.inView = true;
        this.paddingTop = 0;
        this.paddingBottom = 0;
        this.contentDOMWidth = 0;
        this.contentDOMHeight = 0;
        this.editorHeight = 0;
        this.editorWidth = 0;
        this.scrollTop = 0;
        this.scrolledToBottom = false;
        this.scaleX = 1;
        this.scaleY = 1;
        this.scrollAnchorPos = 0;
        this.scrollAnchorHeight = -1;
        this.scaler = IdScaler;
        this.scrollTarget = null;
        this.printing = false;
        this.mustMeasureContent = true;
        this.defaultTextDirection = Direction.LTR;
        this.visibleRanges = [];
        this.mustEnforceCursorAssoc = false;
        let guessWrapping = state.facet(contentAttributes).some((v2) => typeof v2 != "function" && v2.class == "cm-lineWrapping");
        this.heightOracle = new HeightOracle(guessWrapping);
        this.stateDeco = state.facet(decorations).filter((d2) => typeof d2 != "function");
        this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
        for (let i2 = 0; i2 < 2; i2++) {
          this.viewport = this.getViewport(0, null);
          if (!this.updateForViewport())
            break;
        }
        this.updateViewportLines();
        this.lineGaps = this.ensureLineGaps([]);
        this.lineGapDeco = Decoration.set(this.lineGaps.map((gap) => gap.draw(this, false)));
        this.computeVisibleRanges();
      }
      updateForViewport() {
        let viewports = [this.viewport], { main: main2 } = this.state.selection;
        for (let i2 = 0; i2 <= 1; i2++) {
          let pos2 = i2 ? main2.head : main2.anchor;
          if (!viewports.some(({ from, to }) => pos2 >= from && pos2 <= to)) {
            let { from, to } = this.lineBlockAt(pos2);
            viewports.push(new Viewport(from, to));
          }
        }
        this.viewports = viewports.sort((a2, b) => a2.from - b.from);
        return this.updateScaler();
      }
      updateScaler() {
        let scaler = this.scaler;
        this.scaler = this.heightMap.height <= 7e6 ? IdScaler : new BigScaler(this.heightOracle, this.heightMap, this.viewports);
        return scaler.eq(this.scaler) ? 0 : 2;
      }
      updateViewportLines() {
        this.viewportLines = [];
        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, (block2) => {
          this.viewportLines.push(scaleBlock(block2, this.scaler));
        });
      }
      update(update, scrollTarget = null) {
        this.state = update.state;
        let prevDeco = this.stateDeco;
        this.stateDeco = this.state.facet(decorations).filter((d2) => typeof d2 != "function");
        let contentChanges = update.changedRanges;
        let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
        let prevHeight = this.heightMap.height;
        let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
        clearHeightChangeFlag();
        this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
        if (this.heightMap.height != prevHeight || heightChangeFlag)
          update.flags |= 2;
        if (scrollAnchor) {
          this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
          this.scrollAnchorHeight = scrollAnchor.top;
        } else {
          this.scrollAnchorPos = -1;
          this.scrollAnchorHeight = this.heightMap.height;
        }
        let viewport2 = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
        if (scrollTarget && (scrollTarget.range.head < viewport2.from || scrollTarget.range.head > viewport2.to) || !this.viewportIsAppropriate(viewport2))
          viewport2 = this.getViewport(0, scrollTarget);
        let viewportChange = viewport2.from != this.viewport.from || viewport2.to != this.viewport.to;
        this.viewport = viewport2;
        update.flags |= this.updateForViewport();
        if (viewportChange || !update.changes.empty || update.flags & 2)
          this.updateViewportLines();
        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
          this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
        update.flags |= this.computeVisibleRanges();
        if (scrollTarget)
          this.scrollTarget = scrollTarget;
        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping && update.state.selection.main.empty && update.state.selection.main.assoc && !update.state.facet(nativeSelectionHidden))
          this.mustEnforceCursorAssoc = true;
      }
      measure(view) {
        let dom = view.contentDOM, style2 = window.getComputedStyle(dom);
        let oracle = this.heightOracle;
        let whiteSpace = style2.whiteSpace;
        this.defaultTextDirection = style2.direction == "rtl" ? Direction.RTL : Direction.LTR;
        let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
        let domRect = dom.getBoundingClientRect();
        let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
        this.contentDOMHeight = domRect.height;
        this.mustMeasureContent = false;
        let result = 0, bias = 0;
        if (domRect.width && domRect.height) {
          let { scaleX, scaleY } = getScale(dom, domRect);
          if (scaleX > 5e-3 && Math.abs(this.scaleX - scaleX) > 5e-3 || scaleY > 5e-3 && Math.abs(this.scaleY - scaleY) > 5e-3) {
            this.scaleX = scaleX;
            this.scaleY = scaleY;
            result |= 8;
            refresh = measureContent = true;
          }
        }
        let paddingTop = (parseInt(style2.paddingTop) || 0) * this.scaleY;
        let paddingBottom = (parseInt(style2.paddingBottom) || 0) * this.scaleY;
        if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
          this.paddingTop = paddingTop;
          this.paddingBottom = paddingBottom;
          result |= 8 | 2;
        }
        if (this.editorWidth != view.scrollDOM.clientWidth) {
          if (oracle.lineWrapping)
            measureContent = true;
          this.editorWidth = view.scrollDOM.clientWidth;
          result |= 8;
        }
        let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
        if (this.scrollTop != scrollTop) {
          this.scrollAnchorHeight = -1;
          this.scrollTop = scrollTop;
        }
        this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
        let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
        this.pixelViewport = pixelViewport;
        let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
        if (inView != this.inView) {
          this.inView = inView;
          if (inView)
            measureContent = true;
        }
        if (!this.inView && !this.scrollTarget)
          return 0;
        let contentWidth = domRect.width;
        if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
          this.contentDOMWidth = domRect.width;
          this.editorHeight = view.scrollDOM.clientHeight;
          result |= 8;
        }
        if (measureContent) {
          let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
          if (oracle.mustRefreshForHeights(lineHeights))
            refresh = true;
          if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
            let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
            refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
            if (refresh) {
              view.docView.minWidth = 0;
              result |= 8;
            }
          }
          if (dTop > 0 && dBottom > 0)
            bias = Math.max(dTop, dBottom);
          else if (dTop < 0 && dBottom < 0)
            bias = Math.min(dTop, dBottom);
          clearHeightChangeFlag();
          for (let vp of this.viewports) {
            let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
            this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
          }
          if (heightChangeFlag)
            result |= 2;
        }
        let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) || this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from || this.scrollTarget.range.head > this.viewport.to);
        if (viewportChange) {
          if (result & 2)
            result |= this.updateScaler();
          this.viewport = this.getViewport(bias, this.scrollTarget);
          result |= this.updateForViewport();
        }
        if (result & 2 || viewportChange)
          this.updateViewportLines();
        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 2e3 << 1)
          this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
        result |= this.computeVisibleRanges();
        if (this.mustEnforceCursorAssoc) {
          this.mustEnforceCursorAssoc = false;
          view.docView.enforceCursorAssoc();
        }
        return result;
      }
      get visibleTop() {
        return this.scaler.fromDOM(this.pixelViewport.top);
      }
      get visibleBottom() {
        return this.scaler.fromDOM(this.pixelViewport.bottom);
      }
      getViewport(bias, scrollTarget) {
        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1e3 / 2));
        let map2 = this.heightMap, oracle = this.heightOracle;
        let { visibleTop, visibleBottom } = this;
        let viewport2 = new Viewport(map2.lineAt(visibleTop - marginTop * 1e3, QueryType.ByHeight, oracle, 0, 0).from, map2.lineAt(visibleBottom + (1 - marginTop) * 1e3, QueryType.ByHeight, oracle, 0, 0).to);
        if (scrollTarget) {
          let { head } = scrollTarget.range;
          if (head < viewport2.from || head > viewport2.to) {
            let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
            let block2 = map2.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
            if (scrollTarget.y == "center")
              topPos = (block2.top + block2.bottom) / 2 - viewHeight / 2;
            else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport2.from)
              topPos = block2.top;
            else
              topPos = block2.bottom - viewHeight;
            viewport2 = new Viewport(map2.lineAt(topPos - 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).from, map2.lineAt(topPos + viewHeight + 1e3 / 2, QueryType.ByHeight, oracle, 0, 0).to);
          }
        }
        return viewport2;
      }
      mapViewport(viewport2, changes) {
        let from = changes.mapPos(viewport2.from, -1), to = changes.mapPos(viewport2.to, 1);
        return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
      }
      // Checks if a given viewport covers the visible part of the
      // document and not too much beyond that.
      viewportIsAppropriate({ from, to }, bias = 0) {
        if (!this.inView)
          return true;
        let { top: top2 } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
        let { bottom: bottom2 } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
        let { visibleTop, visibleBottom } = this;
        return (from == 0 || top2 <= visibleTop - Math.max(10, Math.min(
          -bias,
          250
          /* VP.MaxCoverMargin */
        ))) && (to == this.state.doc.length || bottom2 >= visibleBottom + Math.max(10, Math.min(
          bias,
          250
          /* VP.MaxCoverMargin */
        ))) && (top2 > visibleTop - 2 * 1e3 && bottom2 < visibleBottom + 2 * 1e3);
      }
      mapLineGaps(gaps, changes) {
        if (!gaps.length || changes.empty)
          return gaps;
        let mapped = [];
        for (let gap of gaps)
          if (!changes.touchesRange(gap.from, gap.to))
            mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size, gap.displaySize));
        return mapped;
      }
      // Computes positions in the viewport where the start or end of a
      // line should be hidden, trying to reuse existing line gaps when
      // appropriate to avoid unneccesary redraws.
      // Uses crude character-counting for the positioning and sizing,
      // since actual DOM coordinates aren't always available and
      // predictable. Relies on generous margins (see LG.Margin) to hide
      // the artifacts this might produce from the user.
      ensureLineGaps(current, mayMeasure) {
        let wrapping = this.heightOracle.lineWrapping;
        let margin = wrapping ? 1e4 : 2e3, halfMargin = margin >> 1, doubleMargin = margin << 1;
        if (this.defaultTextDirection != Direction.LTR && !wrapping)
          return [];
        let gaps = [];
        let addGap = (from, to, line2, structure) => {
          if (to - from < halfMargin)
            return;
          let sel = this.state.selection.main, avoid = [sel.from];
          if (!sel.empty)
            avoid.push(sel.to);
          for (let pos2 of avoid) {
            if (pos2 > from && pos2 < to) {
              addGap(from, pos2 - 10, line2, structure);
              addGap(pos2 + 10, to, line2, structure);
              return;
            }
          }
          let gap = find(current, (gap2) => gap2.from >= line2.from && gap2.to <= line2.to && Math.abs(gap2.from - from) < halfMargin && Math.abs(gap2.to - to) < halfMargin && !avoid.some((pos2) => gap2.from < pos2 && gap2.to > pos2));
          if (!gap) {
            if (to < line2.to && mayMeasure && wrapping && mayMeasure.visibleRanges.some((r2) => r2.from <= to && r2.to >= to)) {
              let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
              if (lineStart > from)
                to = lineStart;
            }
            let size = this.gapSize(line2, from, to, structure);
            let displaySize = wrapping || size < 2e6 ? size : 2e6;
            gap = new LineGap(from, to, size, displaySize);
          }
          gaps.push(gap);
        };
        let checkLine = (line2) => {
          if (line2.length < doubleMargin || line2.type != BlockType.Text)
            return;
          let structure = lineStructure(line2.from, line2.to, this.stateDeco);
          if (structure.total < doubleMargin)
            return;
          let target = this.scrollTarget ? this.scrollTarget.range.head : null;
          let viewFrom, viewTo;
          if (wrapping) {
            let marginHeight = margin / this.heightOracle.lineLength * this.heightOracle.lineHeight;
            let top2, bot;
            if (target != null) {
              let targetFrac = findFraction(structure, target);
              let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line2.height;
              top2 = targetFrac - spaceFrac;
              bot = targetFrac + spaceFrac;
            } else {
              top2 = (this.visibleTop - line2.top - marginHeight) / line2.height;
              bot = (this.visibleBottom - line2.top + marginHeight) / line2.height;
            }
            viewFrom = findPosition(structure, top2);
            viewTo = findPosition(structure, bot);
          } else {
            let totalWidth = structure.total * this.heightOracle.charWidth;
            let marginWidth = margin * this.heightOracle.charWidth;
            let horizOffset = 0;
            if (totalWidth > 2e6)
              for (let old of current) {
                if (old.from >= line2.from && old.from < line2.to && old.size != old.displaySize && old.from * this.heightOracle.charWidth + horizOffset < this.pixelViewport.left)
                  horizOffset = old.size - old.displaySize;
              }
            let pxLeft = this.pixelViewport.left + horizOffset, pxRight = this.pixelViewport.right + horizOffset;
            let left2, right2;
            if (target != null) {
              let targetFrac = findFraction(structure, target);
              let spaceFrac = ((pxRight - pxLeft) / 2 + marginWidth) / totalWidth;
              left2 = targetFrac - spaceFrac;
              right2 = targetFrac + spaceFrac;
            } else {
              left2 = (pxLeft - marginWidth) / totalWidth;
              right2 = (pxRight + marginWidth) / totalWidth;
            }
            viewFrom = findPosition(structure, left2);
            viewTo = findPosition(structure, right2);
          }
          if (viewFrom > line2.from)
            addGap(line2.from, viewFrom, line2, structure);
          if (viewTo < line2.to)
            addGap(viewTo, line2.to, line2, structure);
        };
        for (let line2 of this.viewportLines) {
          if (Array.isArray(line2.type))
            line2.type.forEach(checkLine);
          else
            checkLine(line2);
        }
        return gaps;
      }
      gapSize(line2, from, to, structure) {
        let fraction = findFraction(structure, to) - findFraction(structure, from);
        if (this.heightOracle.lineWrapping) {
          return line2.height * fraction;
        } else {
          return structure.total * this.heightOracle.charWidth * fraction;
        }
      }
      updateLineGaps(gaps) {
        if (!LineGap.same(gaps, this.lineGaps)) {
          this.lineGaps = gaps;
          this.lineGapDeco = Decoration.set(gaps.map((gap) => gap.draw(this, this.heightOracle.lineWrapping)));
        }
      }
      computeVisibleRanges() {
        let deco = this.stateDeco;
        if (this.lineGaps.length)
          deco = deco.concat(this.lineGapDeco);
        let ranges = [];
        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
          span(from, to) {
            ranges.push({ from, to });
          },
          point() {
          }
        }, 20);
        let changed = ranges.length != this.visibleRanges.length || this.visibleRanges.some((r2, i2) => r2.from != ranges[i2].from || r2.to != ranges[i2].to);
        this.visibleRanges = ranges;
        return changed ? 4 : 0;
      }
      lineBlockAt(pos2) {
        return pos2 >= this.viewport.from && pos2 <= this.viewport.to && this.viewportLines.find((b) => b.from <= pos2 && b.to >= pos2) || scaleBlock(this.heightMap.lineAt(pos2, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
      }
      lineBlockAtHeight(height) {
        return height >= this.viewportLines[0].top && height <= this.viewportLines[this.viewportLines.length - 1].bottom && this.viewportLines.find((l2) => l2.top <= height && l2.bottom >= height) || scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
      }
      scrollAnchorAt(scrollTop) {
        let block2 = this.lineBlockAtHeight(scrollTop + 8);
        return block2.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block2 : this.viewportLines[0];
      }
      elementAtHeight(height) {
        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
      }
      get docHeight() {
        return this.scaler.toDOM(this.heightMap.height);
      }
      get contentHeight() {
        return this.docHeight + this.paddingTop + this.paddingBottom;
      }
    }
    class Viewport {
      constructor(from, to) {
        this.from = from;
        this.to = to;
      }
    }
    function lineStructure(from, to, stateDeco) {
      let ranges = [], pos2 = from, total = 0;
      RangeSet.spans(stateDeco, from, to, {
        span() {
        },
        point(from2, to2) {
          if (from2 > pos2) {
            ranges.push({ from: pos2, to: from2 });
            total += from2 - pos2;
          }
          pos2 = to2;
        }
      }, 20);
      if (pos2 < to) {
        ranges.push({ from: pos2, to });
        total += to - pos2;
      }
      return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
      if (ratio <= 0)
        return ranges[0].from;
      if (ratio >= 1)
        return ranges[ranges.length - 1].to;
      let dist2 = Math.floor(total * ratio);
      for (let i2 = 0; ; i2++) {
        let { from, to } = ranges[i2], size = to - from;
        if (dist2 <= size)
          return from + dist2;
        dist2 -= size;
      }
    }
    function findFraction(structure, pos2) {
      let counted = 0;
      for (let { from, to } of structure.ranges) {
        if (pos2 <= to) {
          counted += pos2 - from;
          break;
        }
        counted += to - from;
      }
      return counted / structure.total;
    }
    function find(array, f2) {
      for (let val of array)
        if (f2(val))
          return val;
      return void 0;
    }
    const IdScaler = {
      toDOM(n2) {
        return n2;
      },
      fromDOM(n2) {
        return n2;
      },
      scale: 1,
      eq(other) {
        return other == this;
      }
    };
    class BigScaler {
      constructor(oracle, heightMap, viewports) {
        let vpHeight = 0, base2 = 0, domBase = 0;
        this.viewports = viewports.map(({ from, to }) => {
          let top2 = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
          let bottom2 = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
          vpHeight += bottom2 - top2;
          return { from, to, top: top2, bottom: bottom2, domTop: 0, domBottom: 0 };
        });
        this.scale = (7e6 - vpHeight) / (heightMap.height - vpHeight);
        for (let obj of this.viewports) {
          obj.domTop = domBase + (obj.top - base2) * this.scale;
          domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
          base2 = obj.bottom;
        }
      }
      toDOM(n2) {
        for (let i2 = 0, base2 = 0, domBase = 0; ; i2++) {
          let vp = i2 < this.viewports.length ? this.viewports[i2] : null;
          if (!vp || n2 < vp.top)
            return domBase + (n2 - base2) * this.scale;
          if (n2 <= vp.bottom)
            return vp.domTop + (n2 - vp.top);
          base2 = vp.bottom;
          domBase = vp.domBottom;
        }
      }
      fromDOM(n2) {
        for (let i2 = 0, base2 = 0, domBase = 0; ; i2++) {
          let vp = i2 < this.viewports.length ? this.viewports[i2] : null;
          if (!vp || n2 < vp.domTop)
            return base2 + (n2 - domBase) / this.scale;
          if (n2 <= vp.domBottom)
            return vp.top + (n2 - vp.domTop);
          base2 = vp.bottom;
          domBase = vp.domBottom;
        }
      }
      eq(other) {
        if (!(other instanceof BigScaler))
          return false;
        return this.scale == other.scale && this.viewports.length == other.viewports.length && this.viewports.every((vp, i2) => vp.from == other.viewports[i2].from && vp.to == other.viewports[i2].to);
      }
    }
    function scaleBlock(block2, scaler) {
      if (scaler.scale == 1)
        return block2;
      let bTop = scaler.toDOM(block2.top), bBottom = scaler.toDOM(block2.bottom);
      return new BlockInfo(block2.from, block2.length, bTop, bBottom - bTop, Array.isArray(block2._content) ? block2._content.map((b) => scaleBlock(b, scaler)) : block2._content);
    }
    const theme = /* @__PURE__ */ Facet.define({ combine: (strs) => strs.join(" ") });
    const darkTheme = /* @__PURE__ */ Facet.define({ combine: (values) => values.indexOf(true) > -1 });
    const baseThemeID = /* @__PURE__ */ StyleModule.newName(), baseLightID = /* @__PURE__ */ StyleModule.newName(), baseDarkID = /* @__PURE__ */ StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main2, spec, scopes) {
      return new StyleModule(spec, {
        finish(sel) {
          return /&/.test(sel) ? sel.replace(/&\w*/, (m2) => {
            if (m2 == "&")
              return main2;
            if (!scopes || !scopes[m2])
              throw new RangeError(`Unsupported selector: ${m2}`);
            return scopes[m2];
          }) : main2 + " " + sel;
        }
      });
    }
    const baseTheme$1$1 = /* @__PURE__ */ buildTheme("." + baseThemeID, {
      "&": {
        position: "relative !important",
        boxSizing: "border-box",
        "&.cm-focused": {
          // Provide a simple default outline to make sure a focused
          // editor is visually distinct. Can't leave the default behavior
          // because that will apply to the content element, which is
          // inside the scrollable container and doesn't include the
          // gutters. We also can't use an 'auto' outline, since those
          // are, for some reason, drawn behind the element content, which
          // will cause things like the active line background to cover
          // the outline (#297).
          outline: "1px dotted #212121"
        },
        display: "flex !important",
        flexDirection: "column"
      },
      ".cm-scroller": {
        display: "flex !important",
        alignItems: "flex-start !important",
        fontFamily: "monospace",
        lineHeight: 1.4,
        height: "100%",
        overflowX: "auto",
        position: "relative",
        zIndex: 0,
        overflowAnchor: "none"
      },
      ".cm-content": {
        margin: 0,
        flexGrow: 2,
        flexShrink: 0,
        display: "block",
        whiteSpace: "pre",
        wordWrap: "normal",
        // https://github.com/codemirror/dev/issues/456
        boxSizing: "border-box",
        minHeight: "100%",
        padding: "4px 0",
        outline: "none",
        "&[contenteditable=true]": {
          WebkitUserModify: "read-write-plaintext-only"
        }
      },
      ".cm-lineWrapping": {
        whiteSpace_fallback: "pre-wrap",
        // For IE
        whiteSpace: "break-spaces",
        wordBreak: "break-word",
        // For Safari, which doesn't support overflow-wrap: anywhere
        overflowWrap: "anywhere",
        flexShrink: 1
      },
      "&light .cm-content": { caretColor: "black" },
      "&dark .cm-content": { caretColor: "white" },
      ".cm-line": {
        display: "block",
        padding: "0 2px 0 6px"
      },
      ".cm-layer": {
        position: "absolute",
        left: 0,
        top: 0,
        contain: "size style",
        "& > *": {
          position: "absolute"
        }
      },
      "&light .cm-selectionBackground": {
        background: "#d9d9d9"
      },
      "&dark .cm-selectionBackground": {
        background: "#222"
      },
      "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
        background: "#d7d4f0"
      },
      "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
        background: "#233"
      },
      ".cm-cursorLayer": {
        pointerEvents: "none"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
        animation: "steps(1) cm-blink 1.2s infinite"
      },
      // Two animations defined so that we can switch between them to
      // restart the animation without forcing another style
      // recomputation.
      "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
      ".cm-cursor, .cm-dropCursor": {
        borderLeft: "1.2px solid black",
        marginLeft: "-0.6px",
        pointerEvents: "none"
      },
      ".cm-cursor": {
        display: "none"
      },
      "&dark .cm-cursor": {
        borderLeftColor: "#ddd"
      },
      ".cm-dropCursor": {
        position: "absolute"
      },
      "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
        display: "block"
      },
      ".cm-iso": {
        unicodeBidi: "isolate"
      },
      ".cm-announced": {
        position: "fixed",
        top: "-10000px"
      },
      "@media print": {
        ".cm-announced": { display: "none" }
      },
      "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
      "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
      "&light .cm-specialChar": { color: "red" },
      "&dark .cm-specialChar": { color: "#f78" },
      ".cm-gutters": {
        flexShrink: 0,
        display: "flex",
        height: "100%",
        boxSizing: "border-box",
        insetInlineStart: 0,
        zIndex: 200
      },
      "&light .cm-gutters": {
        backgroundColor: "#f5f5f5",
        color: "#6c6c6c",
        borderRight: "1px solid #ddd"
      },
      "&dark .cm-gutters": {
        backgroundColor: "#333338",
        color: "#ccc"
      },
      ".cm-gutter": {
        display: "flex !important",
        // Necessary -- prevents margin collapsing
        flexDirection: "column",
        flexShrink: 0,
        boxSizing: "border-box",
        minHeight: "100%",
        overflow: "hidden"
      },
      ".cm-gutterElement": {
        boxSizing: "border-box"
      },
      ".cm-lineNumbers .cm-gutterElement": {
        padding: "0 3px 0 5px",
        minWidth: "20px",
        textAlign: "right",
        whiteSpace: "nowrap"
      },
      "&light .cm-activeLineGutter": {
        backgroundColor: "#e2f2ff"
      },
      "&dark .cm-activeLineGutter": {
        backgroundColor: "#222227"
      },
      ".cm-panels": {
        boxSizing: "border-box",
        position: "sticky",
        left: 0,
        right: 0,
        zIndex: 300
      },
      "&light .cm-panels": {
        backgroundColor: "#f5f5f5",
        color: "black"
      },
      "&light .cm-panels-top": {
        borderBottom: "1px solid #ddd"
      },
      "&light .cm-panels-bottom": {
        borderTop: "1px solid #ddd"
      },
      "&dark .cm-panels": {
        backgroundColor: "#333338",
        color: "white"
      },
      ".cm-tab": {
        display: "inline-block",
        overflow: "hidden",
        verticalAlign: "bottom"
      },
      ".cm-widgetBuffer": {
        verticalAlign: "text-top",
        height: "1em",
        width: 0,
        display: "inline"
      },
      ".cm-placeholder": {
        color: "#888",
        display: "inline-block",
        verticalAlign: "top"
      },
      ".cm-highlightSpace": {
        backgroundImage: "radial-gradient(circle at 50% 55%, #aaa 20%, transparent 5%)",
        backgroundPosition: "center"
      },
      ".cm-highlightTab": {
        backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
        backgroundSize: "auto 100%",
        backgroundPosition: "right 90%",
        backgroundRepeat: "no-repeat"
      },
      ".cm-trailingSpace": {
        backgroundColor: "#ff332255"
      },
      ".cm-button": {
        verticalAlign: "middle",
        color: "inherit",
        fontSize: "70%",
        padding: ".2em 1em",
        borderRadius: "1px"
      },
      "&light .cm-button": {
        backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
        border: "1px solid #888",
        "&:active": {
          backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
        }
      },
      "&dark .cm-button": {
        backgroundImage: "linear-gradient(#393939, #111)",
        border: "1px solid #888",
        "&:active": {
          backgroundImage: "linear-gradient(#111, #333)"
        }
      },
      ".cm-textfield": {
        verticalAlign: "middle",
        color: "inherit",
        fontSize: "70%",
        border: "1px solid silver",
        padding: ".2em .5em"
      },
      "&light .cm-textfield": {
        backgroundColor: "white"
      },
      "&dark .cm-textfield": {
        border: "1px solid #555",
        backgroundColor: "inherit"
      }
    }, lightDarkIDs);
    const observeOptions = {
      childList: true,
      characterData: true,
      subtree: true,
      attributes: true,
      characterDataOldValue: true
    };
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
      constructor(view) {
        this.view = view;
        this.active = false;
        this.editContext = null;
        this.selectionRange = new DOMSelectionState();
        this.selectionChanged = false;
        this.delayedFlush = -1;
        this.resizeTimeout = -1;
        this.queue = [];
        this.delayedAndroidKey = null;
        this.flushingAndroidKey = -1;
        this.lastChange = 0;
        this.scrollTargets = [];
        this.intersection = null;
        this.resizeScroll = null;
        this.intersecting = false;
        this.gapIntersection = null;
        this.gaps = [];
        this.printQuery = null;
        this.parentCheck = -1;
        this.dom = view.contentDOM;
        this.observer = new MutationObserver((mutations) => {
          for (let mut of mutations)
            this.queue.push(mut);
          if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some((m2) => m2.type == "childList" && m2.removedNodes.length || m2.type == "characterData" && m2.oldValue.length > m2.target.nodeValue.length))
            this.flushSoon();
          else
            this.flush();
        });
        if (window.EditContext && view.constructor.EDIT_CONTEXT !== false && // Chrome <126 doesn't support inverted selections in edit context (#1392)
        !(browser.chrome && browser.chrome_version < 126)) {
          this.editContext = new EditContextManager(view);
          if (view.state.facet(editable))
            view.contentDOM.editContext = this.editContext.editContext;
        }
        if (useCharData)
          this.onCharData = (event) => {
            this.queue.push({
              target: event.target,
              type: "characterData",
              oldValue: event.prevValue
            });
            this.flushSoon();
          };
        this.onSelectionChange = this.onSelectionChange.bind(this);
        this.onResize = this.onResize.bind(this);
        this.onPrint = this.onPrint.bind(this);
        this.onScroll = this.onScroll.bind(this);
        if (window.matchMedia)
          this.printQuery = window.matchMedia("print");
        if (typeof ResizeObserver == "function") {
          this.resizeScroll = new ResizeObserver(() => {
            var _a2;
            if (((_a2 = this.view.docView) === null || _a2 === void 0 ? void 0 : _a2.lastUpdate) < Date.now() - 75)
              this.onResize();
          });
          this.resizeScroll.observe(view.scrollDOM);
        }
        this.addWindowListeners(this.win = view.win);
        this.start();
        if (typeof IntersectionObserver == "function") {
          this.intersection = new IntersectionObserver((entries) => {
            if (this.parentCheck < 0)
              this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1e3);
            if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
              this.intersecting = !this.intersecting;
              if (this.intersecting != this.view.inView)
                this.onScrollChanged(document.createEvent("Event"));
            }
          }, { threshold: [0, 1e-3] });
          this.intersection.observe(this.dom);
          this.gapIntersection = new IntersectionObserver((entries) => {
            if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
              this.onScrollChanged(document.createEvent("Event"));
          }, {});
        }
        this.listenForScroll();
        this.readSelectionRange();
      }
      onScrollChanged(e2) {
        this.view.inputState.runHandlers("scroll", e2);
        if (this.intersecting)
          this.view.measure();
      }
      onScroll(e2) {
        if (this.intersecting)
          this.flush(false);
        if (this.editContext)
          this.view.requestMeasure(this.editContext.measureReq);
        this.onScrollChanged(e2);
      }
      onResize() {
        if (this.resizeTimeout < 0)
          this.resizeTimeout = setTimeout(() => {
            this.resizeTimeout = -1;
            this.view.requestMeasure();
          }, 50);
      }
      onPrint(event) {
        if ((event.type == "change" || !event.type) && !event.matches)
          return;
        this.view.viewState.printing = true;
        this.view.measure();
        setTimeout(() => {
          this.view.viewState.printing = false;
          this.view.requestMeasure();
        }, 500);
      }
      updateGaps(gaps) {
        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g2, i2) => g2 != gaps[i2]))) {
          this.gapIntersection.disconnect();
          for (let gap of gaps)
            this.gapIntersection.observe(gap);
          this.gaps = gaps;
        }
      }
      onSelectionChange(event) {
        let wasChanged = this.selectionChanged;
        if (!this.readSelectionRange() || this.delayedAndroidKey)
          return;
        let { view } = this, sel = this.selectionRange;
        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(this.dom, sel))
          return;
        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
        if (context && context.ignoreEvent(event)) {
          if (!wasChanged)
            this.selectionChanged = false;
          return;
        }
        if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty && // (Selection.isCollapsed isn't reliable on IE)
        sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
          this.flushSoon();
        else
          this.flush(false);
      }
      readSelectionRange() {
        let { view } = this;
        let selection = getSelection(view.root);
        if (!selection)
          return false;
        let range = browser.safari && view.root.nodeType == 11 && view.root.activeElement == this.dom && safariSelectionRangeHack(this.view, selection) || selection;
        if (!range || this.selectionRange.eq(range))
          return false;
        let local = hasSelection(this.dom, range);
        if (local && !this.selectionChanged && view.inputState.lastFocusTime > Date.now() - 200 && view.inputState.lastTouchTime < Date.now() - 300 && atElementStart(this.dom, range)) {
          this.view.inputState.lastFocusTime = 0;
          view.docView.updateSelection();
          return false;
        }
        this.selectionRange.setRange(range);
        if (local)
          this.selectionChanged = true;
        return true;
      }
      setSelectionRange(anchor, head) {
        this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
        this.selectionChanged = false;
      }
      clearSelectionRange() {
        this.selectionRange.set(null, 0, null, 0);
      }
      listenForScroll() {
        this.parentCheck = -1;
        let i2 = 0, changed = null;
        for (let dom = this.dom; dom; ) {
          if (dom.nodeType == 1) {
            if (!changed && i2 < this.scrollTargets.length && this.scrollTargets[i2] == dom)
              i2++;
            else if (!changed)
              changed = this.scrollTargets.slice(0, i2);
            if (changed)
              changed.push(dom);
            dom = dom.assignedSlot || dom.parentNode;
          } else if (dom.nodeType == 11) {
            dom = dom.host;
          } else {
            break;
          }
        }
        if (i2 < this.scrollTargets.length && !changed)
          changed = this.scrollTargets.slice(0, i2);
        if (changed) {
          for (let dom of this.scrollTargets)
            dom.removeEventListener("scroll", this.onScroll);
          for (let dom of this.scrollTargets = changed)
            dom.addEventListener("scroll", this.onScroll);
        }
      }
      ignore(f2) {
        if (!this.active)
          return f2();
        try {
          this.stop();
          return f2();
        } finally {
          this.start();
          this.clear();
        }
      }
      start() {
        if (this.active)
          return;
        this.observer.observe(this.dom, observeOptions);
        if (useCharData)
          this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
        this.active = true;
      }
      stop() {
        if (!this.active)
          return;
        this.active = false;
        this.observer.disconnect();
        if (useCharData)
          this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
      }
      // Throw away any pending changes
      clear() {
        this.processRecords();
        this.queue.length = 0;
        this.selectionChanged = false;
      }
      // Chrome Android, especially in combination with GBoard, not only
      // doesn't reliably fire regular key events, but also often
      // surrounds the effect of enter or backspace with a bunch of
      // composition events that, when interrupted, cause text duplication
      // or other kinds of corruption. This hack makes the editor back off
      // from handling DOM changes for a moment when such a key is
      // detected (via beforeinput or keydown), and then tries to flush
      // them or, if that has no effect, dispatches the given key.
      delayAndroidKey(key2, keyCode) {
        var _a2;
        if (!this.delayedAndroidKey) {
          let flush = () => {
            let key3 = this.delayedAndroidKey;
            if (key3) {
              this.clearDelayedAndroidKey();
              this.view.inputState.lastKeyCode = key3.keyCode;
              this.view.inputState.lastKeyTime = Date.now();
              let flushed = this.flush();
              if (!flushed && key3.force)
                dispatchKey(this.dom, key3.key, key3.keyCode);
            }
          };
          this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
        }
        if (!this.delayedAndroidKey || key2 == "Enter")
          this.delayedAndroidKey = {
            key: key2,
            keyCode,
            // Only run the key handler when no changes are detected if
            // this isn't coming right after another change, in which case
            // it is probably part of a weird chain of updates, and should
            // be ignored if it returns the DOM to its previous state.
            force: this.lastChange < Date.now() - 50 || !!((_a2 = this.delayedAndroidKey) === null || _a2 === void 0 ? void 0 : _a2.force)
          };
      }
      clearDelayedAndroidKey() {
        this.win.cancelAnimationFrame(this.flushingAndroidKey);
        this.delayedAndroidKey = null;
        this.flushingAndroidKey = -1;
      }
      flushSoon() {
        if (this.delayedFlush < 0)
          this.delayedFlush = this.view.win.requestAnimationFrame(() => {
            this.delayedFlush = -1;
            this.flush();
          });
      }
      forceFlush() {
        if (this.delayedFlush >= 0) {
          this.view.win.cancelAnimationFrame(this.delayedFlush);
          this.delayedFlush = -1;
        }
        this.flush();
      }
      pendingRecords() {
        for (let mut of this.observer.takeRecords())
          this.queue.push(mut);
        return this.queue;
      }
      processRecords() {
        let records = this.pendingRecords();
        if (records.length)
          this.queue = [];
        let from = -1, to = -1, typeOver = false;
        for (let record of records) {
          let range = this.readMutation(record);
          if (!range)
            continue;
          if (range.typeOver)
            typeOver = true;
          if (from == -1) {
            ({ from, to } = range);
          } else {
            from = Math.min(range.from, from);
            to = Math.max(range.to, to);
          }
        }
        return { from, to, typeOver };
      }
      readChange() {
        let { from, to, typeOver } = this.processRecords();
        let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
        if (from < 0 && !newSel)
          return null;
        if (from > -1)
          this.lastChange = Date.now();
        this.view.inputState.lastFocusTime = 0;
        this.selectionChanged = false;
        let change = new DOMChange(this.view, from, to, typeOver);
        this.view.docView.domChanged = { newSel: change.newSel ? change.newSel.main : null };
        return change;
      }
      // Apply pending changes, if any
      flush(readSelection = true) {
        if (this.delayedFlush >= 0 || this.delayedAndroidKey)
          return false;
        if (readSelection)
          this.readSelectionRange();
        let domChange = this.readChange();
        if (!domChange) {
          this.view.requestMeasure();
          return false;
        }
        let startState = this.view.state;
        let handled = applyDOMChange(this.view, domChange);
        if (this.view.state == startState && (domChange.domChanged || domChange.newSel && !domChange.newSel.main.eq(this.view.state.selection.main)))
          this.view.update([]);
        return handled;
      }
      readMutation(rec) {
        let cView = this.view.docView.nearest(rec.target);
        if (!cView || cView.ignoreMutation(rec))
          return null;
        cView.markDirty(rec.type == "attributes");
        if (rec.type == "attributes")
          cView.flags |= 4;
        if (rec.type == "childList") {
          let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
          let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
          return {
            from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
            to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
            typeOver: false
          };
        } else if (rec.type == "characterData") {
          return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
        } else {
          return null;
        }
      }
      setWindow(win) {
        if (win != this.win) {
          this.removeWindowListeners(this.win);
          this.win = win;
          this.addWindowListeners(this.win);
        }
      }
      addWindowListeners(win) {
        win.addEventListener("resize", this.onResize);
        if (this.printQuery) {
          if (this.printQuery.addEventListener)
            this.printQuery.addEventListener("change", this.onPrint);
          else
            this.printQuery.addListener(this.onPrint);
        } else
          win.addEventListener("beforeprint", this.onPrint);
        win.addEventListener("scroll", this.onScroll);
        win.document.addEventListener("selectionchange", this.onSelectionChange);
      }
      removeWindowListeners(win) {
        win.removeEventListener("scroll", this.onScroll);
        win.removeEventListener("resize", this.onResize);
        if (this.printQuery) {
          if (this.printQuery.removeEventListener)
            this.printQuery.removeEventListener("change", this.onPrint);
          else
            this.printQuery.removeListener(this.onPrint);
        } else
          win.removeEventListener("beforeprint", this.onPrint);
        win.document.removeEventListener("selectionchange", this.onSelectionChange);
      }
      update(update) {
        if (this.editContext) {
          this.editContext.update(update);
          if (update.startState.facet(editable) != update.state.facet(editable))
            update.view.contentDOM.editContext = update.state.facet(editable) ? this.editContext.editContext : null;
        }
      }
      destroy() {
        var _a2, _b2, _c;
        this.stop();
        (_a2 = this.intersection) === null || _a2 === void 0 ? void 0 : _a2.disconnect();
        (_b2 = this.gapIntersection) === null || _b2 === void 0 ? void 0 : _b2.disconnect();
        (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
        for (let dom of this.scrollTargets)
          dom.removeEventListener("scroll", this.onScroll);
        this.removeWindowListeners(this.win);
        clearTimeout(this.parentCheck);
        clearTimeout(this.resizeTimeout);
        this.win.cancelAnimationFrame(this.delayedFlush);
        this.win.cancelAnimationFrame(this.flushingAndroidKey);
        if (this.editContext) {
          this.view.contentDOM.editContext = null;
          this.editContext.destroy();
        }
      }
    }
    function findChild(cView, dom, dir) {
      while (dom) {
        let curView = ContentView.get(dom);
        if (curView && curView.parent == cView)
          return curView;
        let parent = dom.parentNode;
        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
      }
      return null;
    }
    function buildSelectionRangeFromRange(view, range) {
      let anchorNode = range.startContainer, anchorOffset = range.startOffset;
      let focusNode = range.endContainer, focusOffset = range.endOffset;
      let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
      if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
        [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
      return { anchorNode, anchorOffset, focusNode, focusOffset };
    }
    function safariSelectionRangeHack(view, selection) {
      if (selection.getComposedRanges) {
        let range = selection.getComposedRanges(view.root)[0];
        if (range)
          return buildSelectionRangeFromRange(view, range);
      }
      let found = null;
      function read2(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        found = event.getTargetRanges()[0];
      }
      view.contentDOM.addEventListener("beforeinput", read2, true);
      view.dom.ownerDocument.execCommand("indent");
      view.contentDOM.removeEventListener("beforeinput", read2, true);
      return found ? buildSelectionRangeFromRange(view, found) : null;
    }
    class EditContextManager {
      constructor(view) {
        this.from = 0;
        this.to = 0;
        this.pendingContextChange = null;
        this.handlers = /* @__PURE__ */ Object.create(null);
        this.composing = null;
        this.resetRange(view.state);
        let context = this.editContext = new window.EditContext({
          text: view.state.doc.sliceString(this.from, this.to),
          selectionStart: this.toContextPos(Math.max(this.from, Math.min(this.to, view.state.selection.main.anchor))),
          selectionEnd: this.toContextPos(view.state.selection.main.head)
        });
        this.handlers.textupdate = (e2) => {
          let { anchor } = view.state.selection.main;
          let from = this.toEditorPos(e2.updateRangeStart), to = this.toEditorPos(e2.updateRangeEnd);
          if (view.inputState.composing >= 0 && !this.composing)
            this.composing = { contextBase: e2.updateRangeStart, editorBase: from, drifted: false };
          let change = { from, to, insert: Text.of(e2.text.split("\n")) };
          if (change.from == this.from && anchor < this.from)
            change.from = anchor;
          else if (change.to == this.to && anchor > this.to)
            change.to = anchor;
          if (change.from == change.to && !change.insert.length)
            return;
          this.pendingContextChange = change;
          if (!view.state.readOnly)
            applyDOMChangeInner(view, change, EditorSelection.single(this.toEditorPos(e2.selectionStart), this.toEditorPos(e2.selectionEnd)));
          if (this.pendingContextChange) {
            this.revertPending(view.state);
            this.setSelection(view.state);
          }
        };
        this.handlers.characterboundsupdate = (e2) => {
          let rects = [], prev = null;
          for (let i2 = this.toEditorPos(e2.rangeStart), end2 = this.toEditorPos(e2.rangeEnd); i2 < end2; i2++) {
            let rect = view.coordsForChar(i2);
            prev = rect && new DOMRect(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top) || prev || new DOMRect();
            rects.push(prev);
          }
          context.updateCharacterBounds(e2.rangeStart, rects);
        };
        this.handlers.textformatupdate = (e2) => {
          let deco = [];
          for (let format2 of e2.getTextFormats()) {
            let lineStyle = format2.underlineStyle, thickness = format2.underlineThickness;
            if (lineStyle != "None" && thickness != "None") {
              let style2 = `text-decoration: underline ${lineStyle == "Dashed" ? "dashed " : lineStyle == "Squiggle" ? "wavy " : ""}${thickness == "Thin" ? 1 : 2}px`;
              deco.push(Decoration.mark({ attributes: { style: style2 } }).range(this.toEditorPos(format2.rangeStart), this.toEditorPos(format2.rangeEnd)));
            }
          }
          view.dispatch({ effects: setEditContextFormatting.of(Decoration.set(deco)) });
        };
        this.handlers.compositionstart = () => {
          if (view.inputState.composing < 0) {
            view.inputState.composing = 0;
            view.inputState.compositionFirstChange = true;
          }
        };
        this.handlers.compositionend = () => {
          view.inputState.composing = -1;
          view.inputState.compositionFirstChange = null;
          if (this.composing) {
            let { drifted } = this.composing;
            this.composing = null;
            if (drifted)
              this.reset(view.state);
          }
        };
        for (let event in this.handlers)
          context.addEventListener(event, this.handlers[event]);
        this.measureReq = { read: (view2) => {
          this.editContext.updateControlBounds(view2.contentDOM.getBoundingClientRect());
          let sel = getSelection(view2.root);
          if (sel && sel.rangeCount)
            this.editContext.updateSelectionBounds(sel.getRangeAt(0).getBoundingClientRect());
        } };
      }
      applyEdits(update) {
        let off = 0, abort = false, pending = this.pendingContextChange;
        update.changes.iterChanges((fromA, toA, _fromB, _toB, insert2) => {
          if (abort)
            return;
          let dLen = insert2.length - (toA - fromA);
          if (pending && toA >= pending.to) {
            if (pending.from == fromA && pending.to == toA && pending.insert.eq(insert2)) {
              pending = this.pendingContextChange = null;
              off += dLen;
              this.to += dLen;
              return;
            } else {
              pending = null;
              this.revertPending(update.state);
            }
          }
          fromA += off;
          toA += off;
          if (toA <= this.from) {
            this.from += dLen;
            this.to += dLen;
          } else if (fromA < this.to) {
            if (fromA < this.from || toA > this.to || this.to - this.from + insert2.length > 3e4) {
              abort = true;
              return;
            }
            this.editContext.updateText(this.toContextPos(fromA), this.toContextPos(toA), insert2.toString());
            this.to += dLen;
          }
          off += dLen;
        });
        if (pending && !abort)
          this.revertPending(update.state);
        return !abort;
      }
      update(update) {
        let reverted = this.pendingContextChange;
        if (this.composing && (this.composing.drifted || update.transactions.some((tr) => !tr.isUserEvent("input.type") && tr.changes.touchesRange(this.from, this.to)))) {
          this.composing.drifted = true;
          this.composing.editorBase = update.changes.mapPos(this.composing.editorBase);
        } else if (!this.applyEdits(update) || !this.rangeIsValid(update.state)) {
          this.pendingContextChange = null;
          this.reset(update.state);
        } else if (update.docChanged || update.selectionSet || reverted) {
          this.setSelection(update.state);
        }
        if (update.geometryChanged || update.docChanged || update.selectionSet)
          update.view.requestMeasure(this.measureReq);
      }
      resetRange(state) {
        let { head } = state.selection.main;
        this.from = Math.max(
          0,
          head - 1e4
          /* CxVp.Margin */
        );
        this.to = Math.min(
          state.doc.length,
          head + 1e4
          /* CxVp.Margin */
        );
      }
      reset(state) {
        this.resetRange(state);
        this.editContext.updateText(0, this.editContext.text.length, state.doc.sliceString(this.from, this.to));
        this.setSelection(state);
      }
      revertPending(state) {
        let pending = this.pendingContextChange;
        this.pendingContextChange = null;
        this.editContext.updateText(this.toContextPos(pending.from), this.toContextPos(pending.from + pending.insert.length), state.doc.sliceString(pending.from, pending.to));
      }
      setSelection(state) {
        let { main: main2 } = state.selection;
        let start2 = this.toContextPos(Math.max(this.from, Math.min(this.to, main2.anchor)));
        let end2 = this.toContextPos(main2.head);
        if (this.editContext.selectionStart != start2 || this.editContext.selectionEnd != end2)
          this.editContext.updateSelection(start2, end2);
      }
      rangeIsValid(state) {
        let { head } = state.selection.main;
        return !(this.from > 0 && head - this.from < 500 || this.to < state.doc.length && this.to - head < 500 || this.to - this.from > 1e4 * 3);
      }
      toEditorPos(contextPos) {
        let c2 = this.composing;
        return c2 && c2.drifted ? c2.editorBase + (contextPos - c2.contextBase) : contextPos + this.from;
      }
      toContextPos(editorPos) {
        let c2 = this.composing;
        return c2 && c2.drifted ? c2.contextBase + (editorPos - c2.editorBase) : editorPos - this.from;
      }
      destroy() {
        for (let event in this.handlers)
          this.editContext.removeEventListener(event, this.handlers[event]);
      }
    }
    class EditorView {
      /**
      The current editor state.
      */
      get state() {
        return this.viewState.state;
      }
      /**
      To be able to display large documents without consuming too much
      memory or overloading the browser, CodeMirror only draws the
      code that is visible (plus a margin around it) to the DOM. This
      property tells you the extent of the current drawn viewport, in
      document positions.
      */
      get viewport() {
        return this.viewState.viewport;
      }
      /**
      When there are, for example, large collapsed ranges in the
      viewport, its size can be a lot bigger than the actual visible
      content. Thus, if you are doing something like styling the
      content in the viewport, it is preferable to only do so for
      these ranges, which are the subset of the viewport that is
      actually drawn.
      */
      get visibleRanges() {
        return this.viewState.visibleRanges;
      }
      /**
      Returns false when the editor is entirely scrolled out of view
      or otherwise hidden.
      */
      get inView() {
        return this.viewState.inView;
      }
      /**
      Indicates whether the user is currently composing text via
      [IME](https://en.wikipedia.org/wiki/Input_method), and at least
      one change has been made in the current composition.
      */
      get composing() {
        return this.inputState.composing > 0;
      }
      /**
      Indicates whether the user is currently in composing state. Note
      that on some platforms, like Android, this will be the case a
      lot, since just putting the cursor on a word starts a
      composition there.
      */
      get compositionStarted() {
        return this.inputState.composing >= 0;
      }
      /**
      The document or shadow root that the view lives in.
      */
      get root() {
        return this._root;
      }
      /**
      @internal
      */
      get win() {
        return this.dom.ownerDocument.defaultView || window;
      }
      /**
      Construct a new view. You'll want to either provide a `parent`
      option, or put `view.dom` into your document after creating a
      view, so that the user can see the editor.
      */
      constructor(config2 = {}) {
        var _a2;
        this.plugins = [];
        this.pluginMap = /* @__PURE__ */ new Map();
        this.editorAttrs = {};
        this.contentAttrs = {};
        this.bidiCache = [];
        this.destroyed = false;
        this.updateState = 2;
        this.measureScheduled = -1;
        this.measureRequests = [];
        this.contentDOM = document.createElement("div");
        this.scrollDOM = document.createElement("div");
        this.scrollDOM.tabIndex = -1;
        this.scrollDOM.className = "cm-scroller";
        this.scrollDOM.appendChild(this.contentDOM);
        this.announceDOM = document.createElement("div");
        this.announceDOM.className = "cm-announced";
        this.announceDOM.setAttribute("aria-live", "polite");
        this.dom = document.createElement("div");
        this.dom.appendChild(this.announceDOM);
        this.dom.appendChild(this.scrollDOM);
        if (config2.parent)
          config2.parent.appendChild(this.dom);
        let { dispatch } = config2;
        this.dispatchTransactions = config2.dispatchTransactions || dispatch && ((trs) => trs.forEach((tr) => dispatch(tr, this))) || ((trs) => this.update(trs));
        this.dispatch = this.dispatch.bind(this);
        this._root = config2.root || getRoot(config2.parent) || document;
        this.viewState = new ViewState(config2.state || EditorState.create(config2));
        if (config2.scrollTo && config2.scrollTo.is(scrollIntoView$1))
          this.viewState.scrollTarget = config2.scrollTo.value.clip(this.viewState.state);
        this.plugins = this.state.facet(viewPlugin).map((spec) => new PluginInstance(spec));
        for (let plugin of this.plugins)
          plugin.update(this);
        this.observer = new DOMObserver(this);
        this.inputState = new InputState(this);
        this.inputState.ensureHandlers(this.plugins);
        this.docView = new DocView(this);
        this.mountStyles();
        this.updateAttrs();
        this.updateState = 0;
        this.requestMeasure();
        if ((_a2 = document.fonts) === null || _a2 === void 0 ? void 0 : _a2.ready)
          document.fonts.ready.then(() => this.requestMeasure());
      }
      dispatch(...input) {
        let trs = input.length == 1 && input[0] instanceof Transaction ? input : input.length == 1 && Array.isArray(input[0]) ? input[0] : [this.state.update(...input)];
        this.dispatchTransactions(trs, this);
      }
      /**
      Update the view for the given array of transactions. This will
      update the visible document and selection to match the state
      produced by the transactions, and notify view plugins of the
      change. You should usually call
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
      as a primitive.
      */
      update(transactions) {
        if (this.updateState != 0)
          throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
        let redrawn = false, attrsChanged = false, update;
        let state = this.state;
        for (let tr of transactions) {
          if (tr.startState != state)
            throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
          state = tr.state;
        }
        if (this.destroyed) {
          this.viewState.state = state;
          return;
        }
        let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
        if (transactions.some((tr) => tr.annotation(isFocusChange))) {
          this.inputState.notifiedFocused = focus;
          focusFlag = 1;
        } else if (focus != this.inputState.notifiedFocused) {
          this.inputState.notifiedFocused = focus;
          dispatchFocus = focusChangeTransaction(state, focus);
          if (!dispatchFocus)
            focusFlag = 1;
        }
        let pendingKey = this.observer.delayedAndroidKey, domChange = null;
        if (pendingKey) {
          this.observer.clearDelayedAndroidKey();
          domChange = this.observer.readChange();
          if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
            domChange = null;
        } else {
          this.observer.clear();
        }
        if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
          return this.setState(state);
        update = ViewUpdate.create(this, state, transactions);
        update.flags |= focusFlag;
        let scrollTarget = this.viewState.scrollTarget;
        try {
          this.updateState = 2;
          for (let tr of transactions) {
            if (scrollTarget)
              scrollTarget = scrollTarget.map(tr.changes);
            if (tr.scrollIntoView) {
              let { main: main2 } = tr.state.selection;
              scrollTarget = new ScrollTarget(main2.empty ? main2 : EditorSelection.cursor(main2.head, main2.head > main2.anchor ? -1 : 1));
            }
            for (let e2 of tr.effects)
              if (e2.is(scrollIntoView$1))
                scrollTarget = e2.value.clip(this.state);
          }
          this.viewState.update(update, scrollTarget);
          this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
          }
          redrawn = this.docView.update(update);
          if (this.state.facet(styleModule) != this.styleModules)
            this.mountStyles();
          attrsChanged = this.updateAttrs();
          this.showAnnouncements(transactions);
          this.docView.updateSelection(redrawn, transactions.some((tr) => tr.isUserEvent("select.pointer")));
        } finally {
          this.updateState = 0;
        }
        if (update.startState.facet(theme) != update.state.facet(theme))
          this.viewState.mustMeasureContent = true;
        if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
          this.requestMeasure();
        if (redrawn)
          this.docViewUpdate();
        if (!update.empty)
          for (let listener of this.state.facet(updateListener)) {
            try {
              listener(update);
            } catch (e2) {
              logException(this.state, e2, "update listener");
            }
          }
        if (dispatchFocus || domChange)
          Promise.resolve().then(() => {
            if (dispatchFocus && this.state == dispatchFocus.startState)
              this.dispatch(dispatchFocus);
            if (domChange) {
              if (!applyDOMChange(this, domChange) && pendingKey.force)
                dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
            }
          });
      }
      /**
      Reset the view to the given state. (This will cause the entire
      document to be redrawn and all view plugins to be reinitialized,
      so you should probably only use it when the new state isn't
      derived from the old state. Otherwise, use
      [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
      */
      setState(newState) {
        if (this.updateState != 0)
          throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
        if (this.destroyed) {
          this.viewState.state = newState;
          return;
        }
        this.updateState = 2;
        let hadFocus = this.hasFocus;
        try {
          for (let plugin of this.plugins)
            plugin.destroy(this);
          this.viewState = new ViewState(newState);
          this.plugins = newState.facet(viewPlugin).map((spec) => new PluginInstance(spec));
          this.pluginMap.clear();
          for (let plugin of this.plugins)
            plugin.update(this);
          this.docView.destroy();
          this.docView = new DocView(this);
          this.inputState.ensureHandlers(this.plugins);
          this.mountStyles();
          this.updateAttrs();
          this.bidiCache = [];
        } finally {
          this.updateState = 0;
        }
        if (hadFocus)
          this.focus();
        this.requestMeasure();
      }
      updatePlugins(update) {
        let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
        if (prevSpecs != specs) {
          let newPlugins = [];
          for (let spec of specs) {
            let found = prevSpecs.indexOf(spec);
            if (found < 0) {
              newPlugins.push(new PluginInstance(spec));
            } else {
              let plugin = this.plugins[found];
              plugin.mustUpdate = update;
              newPlugins.push(plugin);
            }
          }
          for (let plugin of this.plugins)
            if (plugin.mustUpdate != update)
              plugin.destroy(this);
          this.plugins = newPlugins;
          this.pluginMap.clear();
        } else {
          for (let p2 of this.plugins)
            p2.mustUpdate = update;
        }
        for (let i2 = 0; i2 < this.plugins.length; i2++)
          this.plugins[i2].update(this);
        if (prevSpecs != specs)
          this.inputState.ensureHandlers(this.plugins);
      }
      docViewUpdate() {
        for (let plugin of this.plugins) {
          let val = plugin.value;
          if (val && val.docViewUpdate) {
            try {
              val.docViewUpdate(this);
            } catch (e2) {
              logException(this.state, e2, "doc view update listener");
            }
          }
        }
      }
      /**
      @internal
      */
      measure(flush = true) {
        if (this.destroyed)
          return;
        if (this.measureScheduled > -1)
          this.win.cancelAnimationFrame(this.measureScheduled);
        if (this.observer.delayedAndroidKey) {
          this.measureScheduled = -1;
          this.requestMeasure();
          return;
        }
        this.measureScheduled = 0;
        if (flush)
          this.observer.forceFlush();
        let updated = null;
        let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
        let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
        if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
          scrollAnchorHeight = -1;
        this.viewState.scrollAnchorHeight = -1;
        try {
          for (let i2 = 0; ; i2++) {
            if (scrollAnchorHeight < 0) {
              if (isScrolledToBottom(sDOM)) {
                scrollAnchorPos = -1;
                scrollAnchorHeight = this.viewState.heightMap.height;
              } else {
                let block2 = this.viewState.scrollAnchorAt(scrollTop);
                scrollAnchorPos = block2.from;
                scrollAnchorHeight = block2.top;
              }
            }
            this.updateState = 1;
            let changed = this.viewState.measure(this);
            if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
              break;
            if (i2 > 5) {
              console.warn(this.measureRequests.length ? "Measure loop restarted more than 5 times" : "Viewport failed to stabilize");
              break;
            }
            let measuring = [];
            if (!(changed & 4))
              [this.measureRequests, measuring] = [measuring, this.measureRequests];
            let measured = measuring.map((m2) => {
              try {
                return m2.read(this);
              } catch (e2) {
                logException(this.state, e2);
                return BadMeasure;
              }
            });
            let update = ViewUpdate.create(this, this.state, []), redrawn = false;
            update.flags |= changed;
            if (!updated)
              updated = update;
            else
              updated.flags |= changed;
            this.updateState = 2;
            if (!update.empty) {
              this.updatePlugins(update);
              this.inputState.update(update);
              this.updateAttrs();
              redrawn = this.docView.update(update);
              if (redrawn)
                this.docViewUpdate();
            }
            for (let i3 = 0; i3 < measuring.length; i3++)
              if (measured[i3] != BadMeasure) {
                try {
                  let m2 = measuring[i3];
                  if (m2.write)
                    m2.write(measured[i3], this);
                } catch (e2) {
                  logException(this.state, e2);
                }
              }
            if (redrawn)
              this.docView.updateSelection(true);
            if (!update.viewportChanged && this.measureRequests.length == 0) {
              if (this.viewState.editorHeight) {
                if (this.viewState.scrollTarget) {
                  this.docView.scrollIntoView(this.viewState.scrollTarget);
                  this.viewState.scrollTarget = null;
                  scrollAnchorHeight = -1;
                  continue;
                } else {
                  let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height : this.viewState.lineBlockAt(scrollAnchorPos).top;
                  let diff2 = newAnchorHeight - scrollAnchorHeight;
                  if (diff2 > 1 || diff2 < -1) {
                    scrollTop = scrollTop + diff2;
                    sDOM.scrollTop = scrollTop / this.scaleY;
                    scrollAnchorHeight = -1;
                    continue;
                  }
                }
              }
              break;
            }
          }
        } finally {
          this.updateState = 0;
          this.measureScheduled = -1;
        }
        if (updated && !updated.empty)
          for (let listener of this.state.facet(updateListener))
            listener(updated);
      }
      /**
      Get the CSS classes for the currently active editor themes.
      */
      get themeClasses() {
        return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(theme);
      }
      updateAttrs() {
        let editorAttrs = attrsFromFacet(this, editorAttributes, {
          class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
        });
        let contentAttrs = {
          spellcheck: "false",
          autocorrect: "off",
          autocapitalize: "off",
          translate: "no",
          contenteditable: !this.state.facet(editable) ? "false" : "true",
          class: "cm-content",
          style: `${browser.tabSize}: ${this.state.tabSize}`,
          role: "textbox",
          "aria-multiline": "true"
        };
        if (this.state.readOnly)
          contentAttrs["aria-readonly"] = "true";
        attrsFromFacet(this, contentAttributes, contentAttrs);
        let changed = this.observer.ignore(() => {
          let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
          let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
          return changedContent || changedEditor;
        });
        this.editorAttrs = editorAttrs;
        this.contentAttrs = contentAttrs;
        return changed;
      }
      showAnnouncements(trs) {
        let first = true;
        for (let tr of trs)
          for (let effect2 of tr.effects)
            if (effect2.is(EditorView.announce)) {
              if (first)
                this.announceDOM.textContent = "";
              first = false;
              let div = this.announceDOM.appendChild(document.createElement("div"));
              div.textContent = effect2.value;
            }
      }
      mountStyles() {
        this.styleModules = this.state.facet(styleModule);
        let nonce = this.state.facet(EditorView.cspNonce);
        StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1$1).reverse(), nonce ? { nonce } : void 0);
      }
      readMeasured() {
        if (this.updateState == 2)
          throw new Error("Reading the editor layout isn't allowed during an update");
        if (this.updateState == 0 && this.measureScheduled > -1)
          this.measure(false);
      }
      /**
      Schedule a layout measurement, optionally providing callbacks to
      do custom DOM measuring followed by a DOM write phase. Using
      this is preferable reading DOM layout directly from, for
      example, an event handler, because it'll make sure measuring and
      drawing done by other components is synchronized, avoiding
      unnecessary DOM layout computations.
      */
      requestMeasure(request) {
        if (this.measureScheduled < 0)
          this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
        if (request) {
          if (this.measureRequests.indexOf(request) > -1)
            return;
          if (request.key != null)
            for (let i2 = 0; i2 < this.measureRequests.length; i2++) {
              if (this.measureRequests[i2].key === request.key) {
                this.measureRequests[i2] = request;
                return;
              }
            }
          this.measureRequests.push(request);
        }
      }
      /**
      Get the value of a specific plugin, if present. Note that
      plugins that crash can be dropped from a view, so even when you
      know you registered a given plugin, it is recommended to check
      the return value of this method.
      */
      plugin(plugin) {
        let known = this.pluginMap.get(plugin);
        if (known === void 0 || known && known.spec != plugin)
          this.pluginMap.set(plugin, known = this.plugins.find((p2) => p2.spec == plugin) || null);
        return known && known.update(this).value;
      }
      /**
      The top position of the document, in screen coordinates. This
      may be negative when the editor is scrolled down. Points
      directly to the top of the first line, not above the padding.
      */
      get documentTop() {
        return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
      }
      /**
      Reports the padding above and below the document.
      */
      get documentPadding() {
        return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
      }
      /**
      If the editor is transformed with CSS, this provides the scale
      along the X axis. Otherwise, it will just be 1. Note that
      transforms other than translation and scaling are not supported.
      */
      get scaleX() {
        return this.viewState.scaleX;
      }
      /**
      Provide the CSS transformed scale along the Y axis.
      */
      get scaleY() {
        return this.viewState.scaleY;
      }
      /**
      Find the text line or block widget at the given vertical
      position (which is interpreted as relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
      */
      elementAtHeight(height) {
        this.readMeasured();
        return this.viewState.elementAtHeight(height);
      }
      /**
      Find the line block (see
      [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
      height, again interpreted relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
      */
      lineBlockAtHeight(height) {
        this.readMeasured();
        return this.viewState.lineBlockAtHeight(height);
      }
      /**
      Get the extent and vertical position of all [line
      blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
      are relative to the [top of the
      document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
      */
      get viewportLineBlocks() {
        return this.viewState.viewportLines;
      }
      /**
      Find the line block around the given document position. A line
      block is a range delimited on both sides by either a
      non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line break, or the
      start/end of the document. It will usually just hold a line of
      text, but may be broken into multiple textblocks by block
      widgets.
      */
      lineBlockAt(pos2) {
        return this.viewState.lineBlockAt(pos2);
      }
      /**
      The editor's total content height.
      */
      get contentHeight() {
        return this.viewState.contentHeight;
      }
      /**
      Move a cursor position by [grapheme
      cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
      the motion is away from the line start, or towards it. In
      bidirectional text, the line is traversed in visual order, using
      the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
      When the start position was the last one on the line, the
      returned position will be across the line break. If there is no
      further line, the original position is returned.
      
      By default, this method moves over a single cluster. The
      optional `by` argument can be used to move across more. It will
      be called with the first cluster as argument, and should return
      a predicate that determines, for each subsequent cluster,
      whether it should also be moved over.
      */
      moveByChar(start2, forward, by) {
        return skipAtoms(this, start2, moveByChar(this, start2, forward, by));
      }
      /**
      Move a cursor position across the next group of either
      [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
      non-whitespace characters.
      */
      moveByGroup(start2, forward) {
        return skipAtoms(this, start2, moveByChar(this, start2, forward, (initial) => byGroup(this, start2.head, initial)));
      }
      /**
      Get the cursor position visually at the start or end of a line.
      Note that this may differ from the _logical_ position at its
      start or end (which is simply at `line.from`/`line.to`) if text
      at the start or end goes against the line's base text direction.
      */
      visualLineSide(line2, end2) {
        let order2 = this.bidiSpans(line2), dir = this.textDirectionAt(line2.from);
        let span = order2[end2 ? order2.length - 1 : 0];
        return EditorSelection.cursor(span.side(end2, dir) + line2.from, span.forward(!end2, dir) ? 1 : -1);
      }
      /**
      Move to the next line boundary in the given direction. If
      `includeWrap` is true, line wrapping is on, and there is a
      further wrap point on the current line, the wrap point will be
      returned. Otherwise this function will return the start or end
      of the line.
      */
      moveToLineBoundary(start2, forward, includeWrap = true) {
        return moveToLineBoundary(this, start2, forward, includeWrap);
      }
      /**
      Move a cursor position vertically. When `distance` isn't given,
      it defaults to moving to the next line (including wrapped
      lines). Otherwise, `distance` should provide a positive distance
      in pixels.
      
      When `start` has a
      [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
      motion will use that as a target horizontal position. Otherwise,
      the cursor's own horizontal position is used. The returned
      cursor will have its goal column set to whichever column was
      used.
      */
      moveVertically(start2, forward, distance) {
        return skipAtoms(this, start2, moveVertically(this, start2, forward, distance));
      }
      /**
      Find the DOM parent node and offset (child offset if `node` is
      an element, character offset when it is a text node) at the
      given document position.
      
      Note that for positions that aren't currently in
      `visibleRanges`, the resulting DOM position isn't necessarily
      meaningful (it may just point before or after a placeholder
      element).
      */
      domAtPos(pos2) {
        return this.docView.domAtPos(pos2);
      }
      /**
      Find the document position at the given DOM node. Can be useful
      for associating positions with DOM events. Will raise an error
      when `node` isn't part of the editor content.
      */
      posAtDOM(node, offset2 = 0) {
        return this.docView.posFromDOM(node, offset2);
      }
      posAtCoords(coords, precise = true) {
        this.readMeasured();
        return posAtCoords(this, coords, precise);
      }
      /**
      Get the screen coordinates at the given document position.
      `side` determines whether the coordinates are based on the
      element before (-1) or after (1) the position (if no element is
      available on the given side, the method will transparently use
      another strategy to get reasonable coordinates).
      */
      coordsAtPos(pos2, side = 1) {
        this.readMeasured();
        let rect = this.docView.coordsAt(pos2, side);
        if (!rect || rect.left == rect.right)
          return rect;
        let line2 = this.state.doc.lineAt(pos2), order2 = this.bidiSpans(line2);
        let span = order2[BidiSpan.find(order2, pos2 - line2.from, -1, side)];
        return flattenRect(rect, span.dir == Direction.LTR == side > 0);
      }
      /**
      Return the rectangle around a given character. If `pos` does not
      point in front of a character that is in the viewport and
      rendered (i.e. not replaced, not a line break), this will return
      null. For space characters that are a line wrap point, this will
      return the position before the line break.
      */
      coordsForChar(pos2) {
        this.readMeasured();
        return this.docView.coordsForChar(pos2);
      }
      /**
      The default width of a character in the editor. May not
      accurately reflect the width of all characters (given variable
      width fonts or styling of invididual ranges).
      */
      get defaultCharacterWidth() {
        return this.viewState.heightOracle.charWidth;
      }
      /**
      The default height of a line in the editor. May not be accurate
      for all lines.
      */
      get defaultLineHeight() {
        return this.viewState.heightOracle.lineHeight;
      }
      /**
      The text direction
      ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
      CSS property) of the editor's content element.
      */
      get textDirection() {
        return this.viewState.defaultTextDirection;
      }
      /**
      Find the text direction of the block at the given position, as
      assigned by CSS. If
      [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
      isn't enabled, or the given position is outside of the viewport,
      this will always return the same as
      [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
      this may trigger a DOM layout.
      */
      textDirectionAt(pos2) {
        let perLine = this.state.facet(perLineTextDirection);
        if (!perLine || pos2 < this.viewport.from || pos2 > this.viewport.to)
          return this.textDirection;
        this.readMeasured();
        return this.docView.textDirectionAt(pos2);
      }
      /**
      Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
      (as determined by the
      [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
      CSS property of its content element).
      */
      get lineWrapping() {
        return this.viewState.heightOracle.lineWrapping;
      }
      /**
      Returns the bidirectional text structure of the given line
      (which should be in the current document) as an array of span
      objects. The order of these spans matches the [text
      direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
      left-to-right, the leftmost spans come first, otherwise the
      rightmost spans come first.
      */
      bidiSpans(line2) {
        if (line2.length > MaxBidiLine)
          return trivialOrder(line2.length);
        let dir = this.textDirectionAt(line2.from), isolates;
        for (let entry of this.bidiCache) {
          if (entry.from == line2.from && entry.dir == dir && (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line2))))
            return entry.order;
        }
        if (!isolates)
          isolates = getIsolatedRanges(this, line2);
        let order2 = computeOrder(line2.text, dir, isolates);
        this.bidiCache.push(new CachedOrder(line2.from, line2.to, dir, isolates, true, order2));
        return order2;
      }
      /**
      Check whether the editor has focus.
      */
      get hasFocus() {
        var _a2;
        return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a2 = this.inputState) === null || _a2 === void 0 ? void 0 : _a2.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
      }
      /**
      Put focus on the editor.
      */
      focus() {
        this.observer.ignore(() => {
          focusPreventScroll(this.contentDOM);
          this.docView.updateSelection();
        });
      }
      /**
      Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
      necessary when moving the editor's existing DOM to a new window or shadow root.
      */
      setRoot(root2) {
        if (this._root != root2) {
          this._root = root2;
          this.observer.setWindow((root2.nodeType == 9 ? root2 : root2.ownerDocument).defaultView || window);
          this.mountStyles();
        }
      }
      /**
      Clean up this editor view, removing its element from the
      document, unregistering event handlers, and notifying
      plugins. The view instance can no longer be used after
      calling this.
      */
      destroy() {
        if (this.root.activeElement == this.contentDOM)
          this.contentDOM.blur();
        for (let plugin of this.plugins)
          plugin.destroy(this);
        this.plugins = [];
        this.inputState.destroy();
        this.docView.destroy();
        this.dom.remove();
        this.observer.destroy();
        if (this.measureScheduled > -1)
          this.win.cancelAnimationFrame(this.measureScheduled);
        this.destroyed = true;
      }
      /**
      Returns an effect that can be
      [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
      cause it to scroll the given position or range into view.
      */
      static scrollIntoView(pos2, options = {}) {
        return scrollIntoView$1.of(new ScrollTarget(typeof pos2 == "number" ? EditorSelection.cursor(pos2) : pos2, options.y, options.x, options.yMargin, options.xMargin));
      }
      /**
      Return an effect that resets the editor to its current (at the
      time this method was called) scroll position. Note that this
      only affects the editor's own scrollable element, not parents.
      See also
      [`EditorViewConfig.scrollTo`](https://codemirror.net/6/docs/ref/#view.EditorViewConfig.scrollTo).
      
      The effect should be used with a document identical to the one
      it was created for. Failing to do so is not an error, but may
      not scroll to the expected position. You can
      [map](https://codemirror.net/6/docs/ref/#state.StateEffect.map) the effect to account for changes.
      */
      scrollSnapshot() {
        let { scrollTop, scrollLeft } = this.scrollDOM;
        let ref = this.viewState.scrollAnchorAt(scrollTop);
        return scrollIntoView$1.of(new ScrollTarget(EditorSelection.cursor(ref.from), "start", "start", ref.top - scrollTop, scrollLeft, true));
      }
      /**
      Enable or disable tab-focus mode, which disables key bindings
      for Tab and Shift-Tab, letting the browser's default
      focus-changing behavior go through instead. This is useful to
      prevent trapping keyboard users in your editor.
      
      Without argument, this toggles the mode. With a boolean, it
      enables (true) or disables it (false). Given a number, it
      temporarily enables the mode until that number of milliseconds
      have passed or another non-Tab key is pressed.
      */
      setTabFocusMode(to) {
        if (to == null)
          this.inputState.tabFocusMode = this.inputState.tabFocusMode < 0 ? 0 : -1;
        else if (typeof to == "boolean")
          this.inputState.tabFocusMode = to ? 0 : -1;
        else if (this.inputState.tabFocusMode != 0)
          this.inputState.tabFocusMode = Date.now() + to;
      }
      /**
      Returns an extension that can be used to add DOM event handlers.
      The value should be an object mapping event names to handler
      functions. For any given event, such functions are ordered by
      extension precedence, and the first handler to return true will
      be assumed to have handled that event, and no other handlers or
      built-in behavior will be activated for it. These are registered
      on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
      for `scroll` handlers, which will be called any time the
      editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
      its parent nodes is scrolled.
      */
      static domEventHandlers(handlers2) {
        return ViewPlugin.define(() => ({}), { eventHandlers: handlers2 });
      }
      /**
      Create an extension that registers DOM event observers. Contrary
      to event [handlers](https://codemirror.net/6/docs/ref/#view.EditorView^domEventHandlers),
      observers can't be prevented from running by a higher-precedence
      handler returning true. They also don't prevent other handlers
      and observers from running when they return true, and should not
      call `preventDefault`.
      */
      static domEventObservers(observers2) {
        return ViewPlugin.define(() => ({}), { eventObservers: observers2 });
      }
      /**
      Create a theme extension. The first argument can be a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)
      style spec providing the styles for the theme. These will be
      prefixed with a generated class for the style.
      
      Because the selectors will be prefixed with a scope class, rule
      that directly match the editor's [wrapper
      element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
      added—need to be explicitly differentiated by adding an `&` to
      the selector for that element—for example
      `&.cm-focused`.
      
      When `dark` is set to true, the theme will be marked as dark,
      which will cause the `&dark` rules from [base
      themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
      `&light` when a light theme is active).
      */
      static theme(spec, options) {
        let prefix = StyleModule.newName();
        let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
        if (options && options.dark)
          result.push(darkTheme.of(true));
        return result;
      }
      /**
      Create an extension that adds styles to the base theme. Like
      with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
      place of the editor wrapper element when directly targeting
      that. You can also use `&dark` or `&light` instead to only
      target editors with a dark or light theme.
      */
      static baseTheme(spec) {
        return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
      }
      /**
      Retrieve an editor view instance from the view's DOM
      representation.
      */
      static findFromDOM(dom) {
        var _a2;
        let content2 = dom.querySelector(".cm-content");
        let cView = content2 && ContentView.get(content2) || ContentView.get(dom);
        return ((_a2 = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a2 === void 0 ? void 0 : _a2.view) || null;
      }
    }
    EditorView.styleModule = styleModule;
    EditorView.inputHandler = inputHandler;
    EditorView.clipboardInputFilter = clipboardInputFilter;
    EditorView.clipboardOutputFilter = clipboardOutputFilter;
    EditorView.scrollHandler = scrollHandler;
    EditorView.focusChangeEffect = focusChangeEffect;
    EditorView.perLineTextDirection = perLineTextDirection;
    EditorView.exceptionSink = exceptionSink;
    EditorView.updateListener = updateListener;
    EditorView.editable = editable;
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    EditorView.dragMovesSelection = dragMovesSelection$1;
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    EditorView.decorations = decorations;
    EditorView.outerDecorations = outerDecorations;
    EditorView.atomicRanges = atomicRanges;
    EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
    EditorView.scrollMargins = scrollMargins;
    EditorView.darkTheme = darkTheme;
    EditorView.cspNonce = /* @__PURE__ */ Facet.define({ combine: (values) => values.length ? values[0] : "" });
    EditorView.contentAttributes = contentAttributes;
    EditorView.editorAttributes = editorAttributes;
    EditorView.lineWrapping = /* @__PURE__ */ EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    EditorView.announce = /* @__PURE__ */ StateEffect.define();
    const MaxBidiLine = 4096;
    const BadMeasure = {};
    class CachedOrder {
      constructor(from, to, dir, isolates, fresh, order2) {
        this.from = from;
        this.to = to;
        this.dir = dir;
        this.isolates = isolates;
        this.fresh = fresh;
        this.order = order2;
      }
      static update(cache, changes) {
        if (changes.empty && !cache.some((c2) => c2.fresh))
          return cache;
        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
        for (let i2 = Math.max(0, cache.length - 10); i2 < cache.length; i2++) {
          let entry = cache[i2];
          if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
            result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
        }
        return result;
      }
    }
    function attrsFromFacet(view, facet, base2) {
      for (let sources = view.state.facet(facet), i2 = sources.length - 1; i2 >= 0; i2--) {
        let source2 = sources[i2], value = typeof source2 == "function" ? source2(view) : source2;
        if (value)
          combineAttrs(value, base2);
      }
      return base2;
    }
    const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
    function normalizeKeyName(name2, platform) {
      const parts = name2.split(/-(?!$)/);
      let result = parts[parts.length - 1];
      if (result == "Space")
        result = " ";
      let alt, ctrl, shift2, meta2;
      for (let i2 = 0; i2 < parts.length - 1; ++i2) {
        const mod2 = parts[i2];
        if (/^(cmd|meta|m)$/i.test(mod2))
          meta2 = true;
        else if (/^a(lt)?$/i.test(mod2))
          alt = true;
        else if (/^(c|ctrl|control)$/i.test(mod2))
          ctrl = true;
        else if (/^s(hift)?$/i.test(mod2))
          shift2 = true;
        else if (/^mod$/i.test(mod2)) {
          if (platform == "mac")
            meta2 = true;
          else
            ctrl = true;
        } else
          throw new Error("Unrecognized modifier name: " + mod2);
      }
      if (alt)
        result = "Alt-" + result;
      if (ctrl)
        result = "Ctrl-" + result;
      if (meta2)
        result = "Meta-" + result;
      if (shift2)
        result = "Shift-" + result;
      return result;
    }
    function modifiers(name2, event, shift2) {
      if (event.altKey)
        name2 = "Alt-" + name2;
      if (event.ctrlKey)
        name2 = "Ctrl-" + name2;
      if (event.metaKey)
        name2 = "Meta-" + name2;
      if (shift2 !== false && event.shiftKey)
        name2 = "Shift-" + name2;
      return name2;
    }
    const handleKeyEvents = /* @__PURE__ */ Prec.default(/* @__PURE__ */ EditorView.domEventHandlers({
      keydown(event, view) {
        return runHandlers(getKeymap(view.state), event, view, "editor");
      }
    }));
    const keymap = /* @__PURE__ */ Facet.define({ enables: handleKeyEvents });
    const Keymaps = /* @__PURE__ */ new WeakMap();
    function getKeymap(state) {
      let bindings = state.facet(keymap);
      let map2 = Keymaps.get(bindings);
      if (!map2)
        Keymaps.set(bindings, map2 = buildKeymap(bindings.reduce((a2, b) => a2.concat(b), [])));
      return map2;
    }
    let storedPrefix = null;
    const PrefixTimeout = 4e3;
    function buildKeymap(bindings, platform = currentPlatform) {
      let bound = /* @__PURE__ */ Object.create(null);
      let isPrefix = /* @__PURE__ */ Object.create(null);
      let checkPrefix = (name2, is) => {
        let current = isPrefix[name2];
        if (current == null)
          isPrefix[name2] = is;
        else if (current != is)
          throw new Error("Key binding " + name2 + " is used both as a regular binding and as a multi-stroke prefix");
      };
      let add2 = (scope, key2, command2, preventDefault, stopPropagation) => {
        var _a2, _b2;
        let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
        let parts = key2.split(/ (?!$)/).map((k2) => normalizeKeyName(k2, platform));
        for (let i2 = 1; i2 < parts.length; i2++) {
          let prefix = parts.slice(0, i2).join(" ");
          checkPrefix(prefix, true);
          if (!scopeObj[prefix])
            scopeObj[prefix] = {
              preventDefault: true,
              stopPropagation: false,
              run: [(view) => {
                let ourObj = storedPrefix = { view, prefix, scope };
                setTimeout(() => {
                  if (storedPrefix == ourObj)
                    storedPrefix = null;
                }, PrefixTimeout);
                return true;
              }]
            };
        }
        let full = parts.join(" ");
        checkPrefix(full, false);
        let binding = scopeObj[full] || (scopeObj[full] = {
          preventDefault: false,
          stopPropagation: false,
          run: ((_b2 = (_a2 = scopeObj._any) === null || _a2 === void 0 ? void 0 : _a2.run) === null || _b2 === void 0 ? void 0 : _b2.slice()) || []
        });
        if (command2)
          binding.run.push(command2);
        if (preventDefault)
          binding.preventDefault = true;
        if (stopPropagation)
          binding.stopPropagation = true;
      };
      for (let b of bindings) {
        let scopes = b.scope ? b.scope.split(" ") : ["editor"];
        if (b.any)
          for (let scope of scopes) {
            let scopeObj = bound[scope] || (bound[scope] = /* @__PURE__ */ Object.create(null));
            if (!scopeObj._any)
              scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
            let { any } = b;
            for (let key2 in scopeObj)
              scopeObj[key2].run.push((view) => any(view, currentKeyEvent));
          }
        let name2 = b[platform] || b.key;
        if (!name2)
          continue;
        for (let scope of scopes) {
          add2(scope, name2, b.run, b.preventDefault, b.stopPropagation);
          if (b.shift)
            add2(scope, "Shift-" + name2, b.shift, b.preventDefault, b.stopPropagation);
        }
      }
      return bound;
    }
    let currentKeyEvent = null;
    function runHandlers(map2, event, view, scope) {
      currentKeyEvent = event;
      let name2 = keyName(event);
      let charCode = codePointAt(name2, 0), isChar = codePointSize(charCode) == name2.length && name2 != " ";
      let prefix = "", handled = false, prevented = false, stopPropagation = false;
      if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
        prefix = storedPrefix.prefix + " ";
        if (modifierCodes.indexOf(event.keyCode) < 0) {
          prevented = true;
          storedPrefix = null;
        }
      }
      let ran = /* @__PURE__ */ new Set();
      let runFor = (binding) => {
        if (binding) {
          for (let cmd2 of binding.run)
            if (!ran.has(cmd2)) {
              ran.add(cmd2);
              if (cmd2(view)) {
                if (binding.stopPropagation)
                  stopPropagation = true;
                return true;
              }
            }
          if (binding.preventDefault) {
            if (binding.stopPropagation)
              stopPropagation = true;
            prevented = true;
          }
        }
        return false;
      };
      let scopeObj = map2[scope], baseName, shiftName;
      if (scopeObj) {
        if (runFor(scopeObj[prefix + modifiers(name2, event, !isChar)])) {
          handled = true;
        } else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) && // Ctrl-Alt may be used for AltGr on Windows
        !(browser.windows && event.ctrlKey && event.altKey) && (baseName = base[event.keyCode]) && baseName != name2) {
          if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
            handled = true;
          } else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name2 && shiftName != baseName && runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
            handled = true;
          }
        } else if (isChar && event.shiftKey && runFor(scopeObj[prefix + modifiers(name2, event, true)])) {
          handled = true;
        }
        if (!handled && runFor(scopeObj._any))
          handled = true;
      }
      if (prevented)
        handled = true;
      if (handled && stopPropagation)
        event.stopPropagation();
      currentKeyEvent = null;
      return handled;
    }
    class RectangleMarker {
      /**
      Create a marker with the given class and dimensions. If `width`
      is null, the DOM element will get no width style.
      */
      constructor(className2, left2, top2, width, height) {
        this.className = className2;
        this.left = left2;
        this.top = top2;
        this.width = width;
        this.height = height;
      }
      draw() {
        let elt = document.createElement("div");
        elt.className = this.className;
        this.adjust(elt);
        return elt;
      }
      update(elt, prev) {
        if (prev.className != this.className)
          return false;
        this.adjust(elt);
        return true;
      }
      adjust(elt) {
        elt.style.left = this.left + "px";
        elt.style.top = this.top + "px";
        if (this.width != null)
          elt.style.width = this.width + "px";
        elt.style.height = this.height + "px";
      }
      eq(p2) {
        return this.left == p2.left && this.top == p2.top && this.width == p2.width && this.height == p2.height && this.className == p2.className;
      }
      /**
      Create a set of rectangles for the given selection range,
      assigning them theclass`className`. Will create a single
      rectangle for empty ranges, and a set of selection-style
      rectangles covering the range's content (in a bidi-aware
      way) for non-empty ones.
      */
      static forRange(view, className2, range) {
        if (range.empty) {
          let pos2 = view.coordsAtPos(range.head, range.assoc || 1);
          if (!pos2)
            return [];
          let base2 = getBase(view);
          return [new RectangleMarker(className2, pos2.left - base2.left, pos2.top - base2.top, null, pos2.bottom - pos2.top)];
        } else {
          return rectanglesForRange(view, className2, range);
        }
      }
    }
    function getBase(view) {
      let rect = view.scrollDOM.getBoundingClientRect();
      let left2 = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth * view.scaleX;
      return { left: left2 - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };
    }
    function wrappedLine(view, pos2, side, inside2) {
      let coords = view.coordsAtPos(pos2, side * 2);
      if (!coords)
        return inside2;
      let editorRect = view.dom.getBoundingClientRect();
      let y2 = (coords.top + coords.bottom) / 2;
      let left2 = view.posAtCoords({ x: editorRect.left + 1, y: y2 });
      let right2 = view.posAtCoords({ x: editorRect.right - 1, y: y2 });
      if (left2 == null || right2 == null)
        return inside2;
      return { from: Math.max(inside2.from, Math.min(left2, right2)), to: Math.min(inside2.to, Math.max(left2, right2)) };
    }
    function rectanglesForRange(view, className2, range) {
      if (range.to <= view.viewport.from || range.from >= view.viewport.to)
        return [];
      let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
      let ltr = view.textDirection == Direction.LTR;
      let content2 = view.contentDOM, contentRect = content2.getBoundingClientRect(), base2 = getBase(view);
      let lineElt = content2.querySelector(".cm-line"), lineStyle = lineElt && window.getComputedStyle(lineElt);
      let leftSide = contentRect.left + (lineStyle ? parseInt(lineStyle.paddingLeft) + Math.min(0, parseInt(lineStyle.textIndent)) : 0);
      let rightSide = contentRect.right - (lineStyle ? parseInt(lineStyle.paddingRight) : 0);
      let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
      let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
      let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
      if (visualStart && (view.lineWrapping || startBlock.widgetLineBreaks))
        visualStart = wrappedLine(view, from, 1, visualStart);
      if (visualEnd && (view.lineWrapping || endBlock.widgetLineBreaks))
        visualEnd = wrappedLine(view, to, -1, visualEnd);
      if (visualStart && visualEnd && visualStart.from == visualEnd.from && visualStart.to == visualEnd.to) {
        return pieces(drawForLine(range.from, range.to, visualStart));
      } else {
        let top2 = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
        let bottom2 = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
        let between = [];
        if ((visualStart || startBlock).to < (visualEnd || endBlock).from - (visualStart && visualEnd ? 1 : 0) || startBlock.widgetLineBreaks > 1 && top2.bottom + view.defaultLineHeight / 2 < bottom2.top)
          between.push(piece(leftSide, top2.bottom, rightSide, bottom2.top));
        else if (top2.bottom < bottom2.top && view.elementAtHeight((top2.bottom + bottom2.top) / 2).type == BlockType.Text)
          top2.bottom = bottom2.top = (top2.bottom + bottom2.top) / 2;
        return pieces(top2).concat(between).concat(pieces(bottom2));
      }
      function piece(left2, top2, right2, bottom2) {
        return new RectangleMarker(
          className2,
          left2 - base2.left,
          top2 - base2.top - 0.01,
          right2 - left2,
          bottom2 - top2 + 0.01
          /* C.Epsilon */
        );
      }
      function pieces({ top: top2, bottom: bottom2, horizontal }) {
        let pieces2 = [];
        for (let i2 = 0; i2 < horizontal.length; i2 += 2)
          pieces2.push(piece(horizontal[i2], top2, horizontal[i2 + 1], bottom2));
        return pieces2;
      }
      function drawForLine(from2, to2, line2) {
        let top2 = 1e9, bottom2 = -1e9, horizontal = [];
        function addSpan(from3, fromOpen, to3, toOpen, dir) {
          let fromCoords = view.coordsAtPos(from3, from3 == line2.to ? -2 : 2);
          let toCoords = view.coordsAtPos(to3, to3 == line2.from ? 2 : -2);
          if (!fromCoords || !toCoords)
            return;
          top2 = Math.min(fromCoords.top, toCoords.top, top2);
          bottom2 = Math.max(fromCoords.bottom, toCoords.bottom, bottom2);
          if (dir == Direction.LTR)
            horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
          else
            horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
        }
        let start2 = from2 !== null && from2 !== void 0 ? from2 : line2.from, end2 = to2 !== null && to2 !== void 0 ? to2 : line2.to;
        for (let r2 of view.visibleRanges)
          if (r2.to > start2 && r2.from < end2) {
            for (let pos2 = Math.max(r2.from, start2), endPos = Math.min(r2.to, end2); ; ) {
              let docLine = view.state.doc.lineAt(pos2);
              for (let span of view.bidiSpans(docLine)) {
                let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
                if (spanFrom >= endPos)
                  break;
                if (spanTo > pos2)
                  addSpan(Math.max(spanFrom, pos2), from2 == null && spanFrom <= start2, Math.min(spanTo, endPos), to2 == null && spanTo >= end2, span.dir);
              }
              pos2 = docLine.to + 1;
              if (pos2 >= endPos)
                break;
            }
          }
        if (horizontal.length == 0)
          addSpan(start2, from2 == null, end2, to2 == null, view.textDirection);
        return { top: top2, bottom: bottom2, horizontal };
      }
      function drawForWidget(block2, top2) {
        let y2 = contentRect.top + (top2 ? block2.top : block2.bottom);
        return { top: y2, bottom: y2, horizontal: [] };
      }
    }
    function sameMarker(a2, b) {
      return a2.constructor == b.constructor && a2.eq(b);
    }
    class LayerView {
      constructor(view, layer2) {
        this.view = view;
        this.layer = layer2;
        this.drawn = [];
        this.scaleX = 1;
        this.scaleY = 1;
        this.measureReq = { read: this.measure.bind(this), write: this.draw.bind(this) };
        this.dom = view.scrollDOM.appendChild(document.createElement("div"));
        this.dom.classList.add("cm-layer");
        if (layer2.above)
          this.dom.classList.add("cm-layer-above");
        if (layer2.class)
          this.dom.classList.add(layer2.class);
        this.scale();
        this.dom.setAttribute("aria-hidden", "true");
        this.setOrder(view.state);
        view.requestMeasure(this.measureReq);
        if (layer2.mount)
          layer2.mount(this.dom, view);
      }
      update(update) {
        if (update.startState.facet(layerOrder) != update.state.facet(layerOrder))
          this.setOrder(update.state);
        if (this.layer.update(update, this.dom) || update.geometryChanged) {
          this.scale();
          update.view.requestMeasure(this.measureReq);
        }
      }
      docViewUpdate(view) {
        if (this.layer.updateOnDocViewUpdate !== false)
          view.requestMeasure(this.measureReq);
      }
      setOrder(state) {
        let pos2 = 0, order2 = state.facet(layerOrder);
        while (pos2 < order2.length && order2[pos2] != this.layer)
          pos2++;
        this.dom.style.zIndex = String((this.layer.above ? 150 : -1) - pos2);
      }
      measure() {
        return this.layer.markers(this.view);
      }
      scale() {
        let { scaleX, scaleY } = this.view;
        if (scaleX != this.scaleX || scaleY != this.scaleY) {
          this.scaleX = scaleX;
          this.scaleY = scaleY;
          this.dom.style.transform = `scale(${1 / scaleX}, ${1 / scaleY})`;
        }
      }
      draw(markers) {
        if (markers.length != this.drawn.length || markers.some((p2, i2) => !sameMarker(p2, this.drawn[i2]))) {
          let old = this.dom.firstChild, oldI = 0;
          for (let marker of markers) {
            if (marker.update && old && marker.constructor && this.drawn[oldI].constructor && marker.update(old, this.drawn[oldI])) {
              old = old.nextSibling;
              oldI++;
            } else {
              this.dom.insertBefore(marker.draw(), old);
            }
          }
          while (old) {
            let next = old.nextSibling;
            old.remove();
            old = next;
          }
          this.drawn = markers;
        }
      }
      destroy() {
        if (this.layer.destroy)
          this.layer.destroy(this.dom, this.view);
        this.dom.remove();
      }
    }
    const layerOrder = /* @__PURE__ */ Facet.define();
    function layer(config2) {
      return [
        ViewPlugin.define((v2) => new LayerView(v2, config2)),
        layerOrder.of(config2)
      ];
    }
    const CanHidePrimary = !browser.ios;
    const selectionConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        return combineConfig(configs, {
          cursorBlinkRate: 1200,
          drawRangeCursor: true
        }, {
          cursorBlinkRate: (a2, b) => Math.min(a2, b),
          drawRangeCursor: (a2, b) => a2 || b
        });
      }
    });
    function drawSelection(config2 = {}) {
      return [
        selectionConfig.of(config2),
        cursorLayer,
        selectionLayer,
        hideNativeSelection,
        nativeSelectionHidden.of(true)
      ];
    }
    function configChanged(update) {
      return update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
    }
    const cursorLayer = /* @__PURE__ */ layer({
      above: true,
      markers(view) {
        let { state } = view, conf = state.facet(selectionConfig);
        let cursors = [];
        for (let r2 of state.selection.ranges) {
          let prim = r2 == state.selection.main;
          if (r2.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
            let className2 = prim ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary";
            let cursor = r2.empty ? r2 : EditorSelection.cursor(r2.head, r2.head > r2.anchor ? -1 : 1);
            for (let piece of RectangleMarker.forRange(view, className2, cursor))
              cursors.push(piece);
          }
        }
        return cursors;
      },
      update(update, dom) {
        if (update.transactions.some((tr) => tr.selection))
          dom.style.animationName = dom.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
        let confChange = configChanged(update);
        if (confChange)
          setBlinkRate(update.state, dom);
        return update.docChanged || update.selectionSet || confChange;
      },
      mount(dom, view) {
        setBlinkRate(view.state, dom);
      },
      class: "cm-cursorLayer"
    });
    function setBlinkRate(state, dom) {
      dom.style.animationDuration = state.facet(selectionConfig).cursorBlinkRate + "ms";
    }
    const selectionLayer = /* @__PURE__ */ layer({
      above: false,
      markers(view) {
        return view.state.selection.ranges.map((r2) => r2.empty ? [] : RectangleMarker.forRange(view, "cm-selectionBackground", r2)).reduce((a2, b) => a2.concat(b));
      },
      update(update, dom) {
        return update.docChanged || update.selectionSet || update.viewportChanged || configChanged(update);
      },
      class: "cm-selectionLayer"
    });
    const themeSpec = {
      ".cm-line": {
        "& ::selection, &::selection": { backgroundColor: "transparent !important" }
      },
      ".cm-content": {
        "& :focus": {
          caretColor: "initial !important",
          "&::selection, & ::selection": {
            backgroundColor: "Highlight !important"
          }
        }
      }
    };
    if (CanHidePrimary)
      themeSpec[".cm-line"].caretColor = themeSpec[".cm-content"].caretColor = "transparent !important";
    const hideNativeSelection = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.theme(themeSpec));
    function iterMatches(doc2, re, from, to, f2) {
      re.lastIndex = 0;
      for (let cursor = doc2.iterRange(from, to), pos2 = from, m2; !cursor.next().done; pos2 += cursor.value.length) {
        if (!cursor.lineBreak)
          while (m2 = re.exec(cursor.value))
            f2(pos2 + m2.index, m2);
      }
    }
    function matchRanges(view, maxLength) {
      let visible = view.visibleRanges;
      if (visible.length == 1 && visible[0].from == view.viewport.from && visible[0].to == view.viewport.to)
        return visible;
      let result = [];
      for (let { from, to } of visible) {
        from = Math.max(view.state.doc.lineAt(from).from, from - maxLength);
        to = Math.min(view.state.doc.lineAt(to).to, to + maxLength);
        if (result.length && result[result.length - 1].to >= from)
          result[result.length - 1].to = to;
        else
          result.push({ from, to });
      }
      return result;
    }
    class MatchDecorator {
      /**
      Create a decorator.
      */
      constructor(config2) {
        const { regexp, decoration, decorate, boundary, maxLength = 1e3 } = config2;
        if (!regexp.global)
          throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
        this.regexp = regexp;
        if (decorate) {
          this.addMatch = (match, view, from, add2) => decorate(add2, from, from + match[0].length, match, view);
        } else if (typeof decoration == "function") {
          this.addMatch = (match, view, from, add2) => {
            let deco = decoration(match, view, from);
            if (deco)
              add2(from, from + match[0].length, deco);
          };
        } else if (decoration) {
          this.addMatch = (match, _view, from, add2) => add2(from, from + match[0].length, decoration);
        } else {
          throw new RangeError("Either 'decorate' or 'decoration' should be provided to MatchDecorator");
        }
        this.boundary = boundary;
        this.maxLength = maxLength;
      }
      /**
      Compute the full set of decorations for matches in the given
      view's viewport. You'll want to call this when initializing your
      plugin.
      */
      createDeco(view) {
        let build = new RangeSetBuilder(), add2 = build.add.bind(build);
        for (let { from, to } of matchRanges(view, this.maxLength))
          iterMatches(view.state.doc, this.regexp, from, to, (from2, m2) => this.addMatch(m2, view, from2, add2));
        return build.finish();
      }
      /**
      Update a set of decorations for a view update. `deco` _must_ be
      the set of decorations produced by _this_ `MatchDecorator` for
      the view state before the update.
      */
      updateDeco(update, deco) {
        let changeFrom = 1e9, changeTo = -1;
        if (update.docChanged)
          update.changes.iterChanges((_f, _t, from, to) => {
            if (to > update.view.viewport.from && from < update.view.viewport.to) {
              changeFrom = Math.min(from, changeFrom);
              changeTo = Math.max(to, changeTo);
            }
          });
        if (update.viewportChanged || changeTo - changeFrom > 1e3)
          return this.createDeco(update.view);
        if (changeTo > -1)
          return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
        return deco;
      }
      updateRange(view, deco, updateFrom, updateTo) {
        for (let r2 of view.visibleRanges) {
          let from = Math.max(r2.from, updateFrom), to = Math.min(r2.to, updateTo);
          if (to > from) {
            let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
            let start2 = Math.max(r2.from, fromLine.from), end2 = Math.min(r2.to, toLine.to);
            if (this.boundary) {
              for (; from > fromLine.from; from--)
                if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                  start2 = from;
                  break;
                }
              for (; to < toLine.to; to++)
                if (this.boundary.test(toLine.text[to - toLine.from])) {
                  end2 = to;
                  break;
                }
            }
            let ranges = [], m2;
            let add2 = (from2, to2, deco2) => ranges.push(deco2.range(from2, to2));
            if (fromLine == toLine) {
              this.regexp.lastIndex = start2 - fromLine.from;
              while ((m2 = this.regexp.exec(fromLine.text)) && m2.index < end2 - fromLine.from)
                this.addMatch(m2, view, m2.index + fromLine.from, add2);
            } else {
              iterMatches(view.state.doc, this.regexp, start2, end2, (from2, m3) => this.addMatch(m3, view, from2, add2));
            }
            deco = deco.update({ filterFrom: start2, filterTo: end2, filter: (from2, to2) => from2 < start2 || to2 > end2, add: ranges });
          }
        }
        return deco;
      }
    }
    const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
    const Specials = /* @__PURE__ */ new RegExp("[\0-\b\n--­؜​‎‏\u2028\u2029‭‮⁦⁧⁩\uFEFF￹-￼]", UnicodeRegexpSupport);
    const Names = {
      0: "null",
      7: "bell",
      8: "backspace",
      10: "newline",
      11: "vertical tab",
      13: "carriage return",
      27: "escape",
      8203: "zero width space",
      8204: "zero width non-joiner",
      8205: "zero width joiner",
      8206: "left-to-right mark",
      8207: "right-to-left mark",
      8232: "line separator",
      8237: "left-to-right override",
      8238: "right-to-left override",
      8294: "left-to-right isolate",
      8295: "right-to-left isolate",
      8297: "pop directional isolate",
      8233: "paragraph separator",
      65279: "zero width no-break space",
      65532: "object replacement"
    };
    let _supportsTabSize = null;
    function supportsTabSize() {
      var _a2;
      if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
        let styles = document.body.style;
        _supportsTabSize = ((_a2 = styles.tabSize) !== null && _a2 !== void 0 ? _a2 : styles.MozTabSize) != null;
      }
      return _supportsTabSize || false;
    }
    const specialCharConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        let config2 = combineConfig(configs, {
          render: null,
          specialChars: Specials,
          addSpecialChars: null
        });
        if (config2.replaceTabs = !supportsTabSize())
          config2.specialChars = new RegExp("	|" + config2.specialChars.source, UnicodeRegexpSupport);
        if (config2.addSpecialChars)
          config2.specialChars = new RegExp(config2.specialChars.source + "|" + config2.addSpecialChars.source, UnicodeRegexpSupport);
        return config2;
      }
    });
    function highlightSpecialChars(config2 = {}) {
      return [specialCharConfig.of(config2), specialCharPlugin()];
    }
    let _plugin = null;
    function specialCharPlugin() {
      return _plugin || (_plugin = ViewPlugin.fromClass(class {
        constructor(view) {
          this.view = view;
          this.decorations = Decoration.none;
          this.decorationCache = /* @__PURE__ */ Object.create(null);
          this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
          this.decorations = this.decorator.createDeco(view);
        }
        makeDecorator(conf) {
          return new MatchDecorator({
            regexp: conf.specialChars,
            decoration: (m2, view, pos2) => {
              let { doc: doc2 } = view.state;
              let code2 = codePointAt(m2[0], 0);
              if (code2 == 9) {
                let line2 = doc2.lineAt(pos2);
                let size = view.state.tabSize, col = countColumn(line2.text, size, pos2 - line2.from);
                return Decoration.replace({
                  widget: new TabWidget((size - col % size) * this.view.defaultCharacterWidth / this.view.scaleX)
                });
              }
              return this.decorationCache[code2] || (this.decorationCache[code2] = Decoration.replace({ widget: new SpecialCharWidget(conf, code2) }));
            },
            boundary: conf.replaceTabs ? void 0 : /[^]/
          });
        }
        update(update) {
          let conf = update.state.facet(specialCharConfig);
          if (update.startState.facet(specialCharConfig) != conf) {
            this.decorator = this.makeDecorator(conf);
            this.decorations = this.decorator.createDeco(update.view);
          } else {
            this.decorations = this.decorator.updateDeco(update, this.decorations);
          }
        }
      }, {
        decorations: (v2) => v2.decorations
      }));
    }
    const DefaultPlaceholder = "•";
    function placeholder$1(code2) {
      if (code2 >= 32)
        return DefaultPlaceholder;
      if (code2 == 10)
        return "␤";
      return String.fromCharCode(9216 + code2);
    }
    class SpecialCharWidget extends WidgetType {
      constructor(options, code2) {
        super();
        this.options = options;
        this.code = code2;
      }
      eq(other) {
        return other.code == this.code;
      }
      toDOM(view) {
        let ph = placeholder$1(this.code);
        let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
        let custom = this.options.render && this.options.render(this.code, desc, ph);
        if (custom)
          return custom;
        let span = document.createElement("span");
        span.textContent = ph;
        span.title = desc;
        span.setAttribute("aria-label", desc);
        span.className = "cm-specialChar";
        return span;
      }
      ignoreEvent() {
        return false;
      }
    }
    class TabWidget extends WidgetType {
      constructor(width) {
        super();
        this.width = width;
      }
      eq(other) {
        return other.width == this.width;
      }
      toDOM() {
        let span = document.createElement("span");
        span.textContent = "	";
        span.className = "cm-tab";
        span.style.width = this.width + "px";
        return span;
      }
      ignoreEvent() {
        return false;
      }
    }
    const Outside = "-10000px";
    class TooltipViewManager {
      constructor(view, facet, createTooltipView, removeTooltipView) {
        this.facet = facet;
        this.createTooltipView = createTooltipView;
        this.removeTooltipView = removeTooltipView;
        this.input = view.state.facet(facet);
        this.tooltips = this.input.filter((t2) => t2);
        let prev = null;
        this.tooltipViews = this.tooltips.map((t2) => prev = createTooltipView(t2, prev));
      }
      update(update, above) {
        var _a2;
        let input = update.state.facet(this.facet);
        let tooltips = input.filter((x2) => x2);
        if (input === this.input) {
          for (let t2 of this.tooltipViews)
            if (t2.update)
              t2.update(update);
          return false;
        }
        let tooltipViews = [], newAbove = above ? [] : null;
        for (let i2 = 0; i2 < tooltips.length; i2++) {
          let tip = tooltips[i2], known = -1;
          if (!tip)
            continue;
          for (let i3 = 0; i3 < this.tooltips.length; i3++) {
            let other = this.tooltips[i3];
            if (other && other.create == tip.create)
              known = i3;
          }
          if (known < 0) {
            tooltipViews[i2] = this.createTooltipView(tip, i2 ? tooltipViews[i2 - 1] : null);
            if (newAbove)
              newAbove[i2] = !!tip.above;
          } else {
            let tooltipView = tooltipViews[i2] = this.tooltipViews[known];
            if (newAbove)
              newAbove[i2] = above[known];
            if (tooltipView.update)
              tooltipView.update(update);
          }
        }
        for (let t2 of this.tooltipViews)
          if (tooltipViews.indexOf(t2) < 0) {
            this.removeTooltipView(t2);
            (_a2 = t2.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t2);
          }
        if (above) {
          newAbove.forEach((val, i2) => above[i2] = val);
          above.length = newAbove.length;
        }
        this.input = input;
        this.tooltips = tooltips;
        this.tooltipViews = tooltipViews;
        return true;
      }
    }
    function windowSpace(view) {
      let { win } = view;
      return { top: 0, left: 0, bottom: win.innerHeight, right: win.innerWidth };
    }
    const tooltipConfig = /* @__PURE__ */ Facet.define({
      combine: (values) => {
        var _a2, _b2, _c;
        return {
          position: browser.ios ? "absolute" : ((_a2 = values.find((conf) => conf.position)) === null || _a2 === void 0 ? void 0 : _a2.position) || "fixed",
          parent: ((_b2 = values.find((conf) => conf.parent)) === null || _b2 === void 0 ? void 0 : _b2.parent) || null,
          tooltipSpace: ((_c = values.find((conf) => conf.tooltipSpace)) === null || _c === void 0 ? void 0 : _c.tooltipSpace) || windowSpace
        };
      }
    });
    const knownHeight = /* @__PURE__ */ new WeakMap();
    const tooltipPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.above = [];
        this.inView = true;
        this.madeAbsolute = false;
        this.lastTransaction = 0;
        this.measureTimeout = -1;
        let config2 = view.state.facet(tooltipConfig);
        this.position = config2.position;
        this.parent = config2.parent;
        this.classes = view.themeClasses;
        this.createContainer();
        this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
        this.resizeObserver = typeof ResizeObserver == "function" ? new ResizeObserver(() => this.measureSoon()) : null;
        this.manager = new TooltipViewManager(view, showTooltip, (t2, p2) => this.createTooltip(t2, p2), (t2) => {
          if (this.resizeObserver)
            this.resizeObserver.unobserve(t2.dom);
          t2.dom.remove();
        });
        this.above = this.manager.tooltips.map((t2) => !!t2.above);
        this.intersectionObserver = typeof IntersectionObserver == "function" ? new IntersectionObserver((entries) => {
          if (Date.now() > this.lastTransaction - 50 && entries.length > 0 && entries[entries.length - 1].intersectionRatio < 1)
            this.measureSoon();
        }, { threshold: [1] }) : null;
        this.observeIntersection();
        view.win.addEventListener("resize", this.measureSoon = this.measureSoon.bind(this));
        this.maybeMeasure();
      }
      createContainer() {
        if (this.parent) {
          this.container = document.createElement("div");
          this.container.style.position = "relative";
          this.container.className = this.view.themeClasses;
          this.parent.appendChild(this.container);
        } else {
          this.container = this.view.dom;
        }
      }
      observeIntersection() {
        if (this.intersectionObserver) {
          this.intersectionObserver.disconnect();
          for (let tooltip of this.manager.tooltipViews)
            this.intersectionObserver.observe(tooltip.dom);
        }
      }
      measureSoon() {
        if (this.measureTimeout < 0)
          this.measureTimeout = setTimeout(() => {
            this.measureTimeout = -1;
            this.maybeMeasure();
          }, 50);
      }
      update(update) {
        if (update.transactions.length)
          this.lastTransaction = Date.now();
        let updated = this.manager.update(update, this.above);
        if (updated)
          this.observeIntersection();
        let shouldMeasure = updated || update.geometryChanged;
        let newConfig = update.state.facet(tooltipConfig);
        if (newConfig.position != this.position && !this.madeAbsolute) {
          this.position = newConfig.position;
          for (let t2 of this.manager.tooltipViews)
            t2.dom.style.position = this.position;
          shouldMeasure = true;
        }
        if (newConfig.parent != this.parent) {
          if (this.parent)
            this.container.remove();
          this.parent = newConfig.parent;
          this.createContainer();
          for (let t2 of this.manager.tooltipViews)
            this.container.appendChild(t2.dom);
          shouldMeasure = true;
        } else if (this.parent && this.view.themeClasses != this.classes) {
          this.classes = this.container.className = this.view.themeClasses;
        }
        if (shouldMeasure)
          this.maybeMeasure();
      }
      createTooltip(tooltip, prev) {
        let tooltipView = tooltip.create(this.view);
        let before = prev ? prev.dom : null;
        tooltipView.dom.classList.add("cm-tooltip");
        if (tooltip.arrow && !tooltipView.dom.querySelector(".cm-tooltip > .cm-tooltip-arrow")) {
          let arrow2 = document.createElement("div");
          arrow2.className = "cm-tooltip-arrow";
          tooltipView.dom.appendChild(arrow2);
        }
        tooltipView.dom.style.position = this.position;
        tooltipView.dom.style.top = Outside;
        tooltipView.dom.style.left = "0px";
        this.container.insertBefore(tooltipView.dom, before);
        if (tooltipView.mount)
          tooltipView.mount(this.view);
        if (this.resizeObserver)
          this.resizeObserver.observe(tooltipView.dom);
        return tooltipView;
      }
      destroy() {
        var _a2, _b2, _c;
        this.view.win.removeEventListener("resize", this.measureSoon);
        for (let tooltipView of this.manager.tooltipViews) {
          tooltipView.dom.remove();
          (_a2 = tooltipView.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(tooltipView);
        }
        if (this.parent)
          this.container.remove();
        (_b2 = this.resizeObserver) === null || _b2 === void 0 ? void 0 : _b2.disconnect();
        (_c = this.intersectionObserver) === null || _c === void 0 ? void 0 : _c.disconnect();
        clearTimeout(this.measureTimeout);
      }
      readMeasure() {
        let scaleX = 1, scaleY = 1, makeAbsolute = false;
        if (this.position == "fixed" && this.manager.tooltipViews.length) {
          let { dom } = this.manager.tooltipViews[0];
          if (browser.gecko) {
            makeAbsolute = dom.offsetParent != this.container.ownerDocument.body;
          } else if (dom.style.top == Outside && dom.style.left == "0px") {
            let rect = dom.getBoundingClientRect();
            makeAbsolute = Math.abs(rect.top + 1e4) > 1 || Math.abs(rect.left) > 1;
          }
        }
        if (makeAbsolute || this.position == "absolute") {
          if (this.parent) {
            let rect = this.parent.getBoundingClientRect();
            if (rect.width && rect.height) {
              scaleX = rect.width / this.parent.offsetWidth;
              scaleY = rect.height / this.parent.offsetHeight;
            }
          } else {
            ({ scaleX, scaleY } = this.view.viewState);
          }
        }
        let visible = this.view.scrollDOM.getBoundingClientRect(), margins = getScrollMargins(this.view);
        return {
          visible: {
            left: visible.left + margins.left,
            top: visible.top + margins.top,
            right: visible.right - margins.right,
            bottom: visible.bottom - margins.bottom
          },
          parent: this.parent ? this.container.getBoundingClientRect() : this.view.dom.getBoundingClientRect(),
          pos: this.manager.tooltips.map((t2, i2) => {
            let tv = this.manager.tooltipViews[i2];
            return tv.getCoords ? tv.getCoords(t2.pos) : this.view.coordsAtPos(t2.pos);
          }),
          size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
          space: this.view.state.facet(tooltipConfig).tooltipSpace(this.view),
          scaleX,
          scaleY,
          makeAbsolute
        };
      }
      writeMeasure(measured) {
        var _a2;
        if (measured.makeAbsolute) {
          this.madeAbsolute = true;
          this.position = "absolute";
          for (let t2 of this.manager.tooltipViews)
            t2.dom.style.position = "absolute";
        }
        let { visible, space, scaleX, scaleY } = measured;
        let others = [];
        for (let i2 = 0; i2 < this.manager.tooltips.length; i2++) {
          let tooltip = this.manager.tooltips[i2], tView = this.manager.tooltipViews[i2], { dom } = tView;
          let pos2 = measured.pos[i2], size = measured.size[i2];
          if (!pos2 || tooltip.clip !== false && (pos2.bottom <= Math.max(visible.top, space.top) || pos2.top >= Math.min(visible.bottom, space.bottom) || pos2.right < Math.max(visible.left, space.left) - 0.1 || pos2.left > Math.min(visible.right, space.right) + 0.1)) {
            dom.style.top = Outside;
            continue;
          }
          let arrow2 = tooltip.arrow ? tView.dom.querySelector(".cm-tooltip-arrow") : null;
          let arrowHeight = arrow2 ? 7 : 0;
          let width = size.right - size.left, height = (_a2 = knownHeight.get(tView)) !== null && _a2 !== void 0 ? _a2 : size.bottom - size.top;
          let offset2 = tView.offset || noOffset, ltr = this.view.textDirection == Direction.LTR;
          let left2 = size.width > space.right - space.left ? ltr ? space.left : space.right - size.width : ltr ? Math.max(space.left, Math.min(pos2.left - (arrow2 ? 14 : 0) + offset2.x, space.right - width)) : Math.min(Math.max(space.left, pos2.left - width + (arrow2 ? 14 : 0) - offset2.x), space.right - width);
          let above = this.above[i2];
          if (!tooltip.strictSide && (above ? pos2.top - height - arrowHeight - offset2.y < space.top : pos2.bottom + height + arrowHeight + offset2.y > space.bottom) && above == space.bottom - pos2.bottom > pos2.top - space.top)
            above = this.above[i2] = !above;
          let spaceVert = (above ? pos2.top - space.top : space.bottom - pos2.bottom) - arrowHeight;
          if (spaceVert < height && tView.resize !== false) {
            if (spaceVert < this.view.defaultLineHeight) {
              dom.style.top = Outside;
              continue;
            }
            knownHeight.set(tView, height);
            dom.style.height = (height = spaceVert) / scaleY + "px";
          } else if (dom.style.height) {
            dom.style.height = "";
          }
          let top2 = above ? pos2.top - height - arrowHeight - offset2.y : pos2.bottom + arrowHeight + offset2.y;
          let right2 = left2 + width;
          if (tView.overlap !== true) {
            for (let r2 of others)
              if (r2.left < right2 && r2.right > left2 && r2.top < top2 + height && r2.bottom > top2)
                top2 = above ? r2.top - height - 2 - arrowHeight : r2.bottom + arrowHeight + 2;
          }
          if (this.position == "absolute") {
            dom.style.top = (top2 - measured.parent.top) / scaleY + "px";
            dom.style.left = (left2 - measured.parent.left) / scaleX + "px";
          } else {
            dom.style.top = top2 / scaleY + "px";
            dom.style.left = left2 / scaleX + "px";
          }
          if (arrow2) {
            let arrowLeft = pos2.left + (ltr ? offset2.x : -offset2.x) - (left2 + 14 - 7);
            arrow2.style.left = arrowLeft / scaleX + "px";
          }
          if (tView.overlap !== true)
            others.push({ left: left2, top: top2, right: right2, bottom: top2 + height });
          dom.classList.toggle("cm-tooltip-above", above);
          dom.classList.toggle("cm-tooltip-below", !above);
          if (tView.positioned)
            tView.positioned(measured.space);
        }
      }
      maybeMeasure() {
        if (this.manager.tooltips.length) {
          if (this.view.inView)
            this.view.requestMeasure(this.measureReq);
          if (this.inView != this.view.inView) {
            this.inView = this.view.inView;
            if (!this.inView)
              for (let tv of this.manager.tooltipViews)
                tv.dom.style.top = Outside;
          }
        }
      }
    }, {
      eventObservers: {
        scroll() {
          this.maybeMeasure();
        }
      }
    });
    const baseTheme$3 = /* @__PURE__ */ EditorView.baseTheme({
      ".cm-tooltip": {
        zIndex: 500,
        boxSizing: "border-box"
      },
      "&light .cm-tooltip": {
        border: "1px solid #bbb",
        backgroundColor: "#f5f5f5"
      },
      "&light .cm-tooltip-section:not(:first-child)": {
        borderTop: "1px solid #bbb"
      },
      "&dark .cm-tooltip": {
        backgroundColor: "#333338",
        color: "white"
      },
      ".cm-tooltip-arrow": {
        height: `${7}px`,
        width: `${7 * 2}px`,
        position: "absolute",
        zIndex: -1,
        overflow: "hidden",
        "&:before, &:after": {
          content: "''",
          position: "absolute",
          width: 0,
          height: 0,
          borderLeft: `${7}px solid transparent`,
          borderRight: `${7}px solid transparent`
        },
        ".cm-tooltip-above &": {
          bottom: `-${7}px`,
          "&:before": {
            borderTop: `${7}px solid #bbb`
          },
          "&:after": {
            borderTop: `${7}px solid #f5f5f5`,
            bottom: "1px"
          }
        },
        ".cm-tooltip-below &": {
          top: `-${7}px`,
          "&:before": {
            borderBottom: `${7}px solid #bbb`
          },
          "&:after": {
            borderBottom: `${7}px solid #f5f5f5`,
            top: "1px"
          }
        }
      },
      "&dark .cm-tooltip .cm-tooltip-arrow": {
        "&:before": {
          borderTopColor: "#333338",
          borderBottomColor: "#333338"
        },
        "&:after": {
          borderTopColor: "transparent",
          borderBottomColor: "transparent"
        }
      }
    });
    const noOffset = { x: 0, y: 0 };
    const showTooltip = /* @__PURE__ */ Facet.define({
      enables: [tooltipPlugin, baseTheme$3]
    });
    const showHoverTooltip = /* @__PURE__ */ Facet.define({
      combine: (inputs) => inputs.reduce((a2, i2) => a2.concat(i2), [])
    });
    class HoverTooltipHost {
      // Needs to be static so that host tooltip instances always match
      static create(view) {
        return new HoverTooltipHost(view);
      }
      constructor(view) {
        this.view = view;
        this.mounted = false;
        this.dom = document.createElement("div");
        this.dom.classList.add("cm-tooltip-hover");
        this.manager = new TooltipViewManager(view, showHoverTooltip, (t2, p2) => this.createHostedView(t2, p2), (t2) => t2.dom.remove());
      }
      createHostedView(tooltip, prev) {
        let hostedView = tooltip.create(this.view);
        hostedView.dom.classList.add("cm-tooltip-section");
        this.dom.insertBefore(hostedView.dom, prev ? prev.dom.nextSibling : this.dom.firstChild);
        if (this.mounted && hostedView.mount)
          hostedView.mount(this.view);
        return hostedView;
      }
      mount(view) {
        for (let hostedView of this.manager.tooltipViews) {
          if (hostedView.mount)
            hostedView.mount(view);
        }
        this.mounted = true;
      }
      positioned(space) {
        for (let hostedView of this.manager.tooltipViews) {
          if (hostedView.positioned)
            hostedView.positioned(space);
        }
      }
      update(update) {
        this.manager.update(update);
      }
      destroy() {
        var _a2;
        for (let t2 of this.manager.tooltipViews)
          (_a2 = t2.destroy) === null || _a2 === void 0 ? void 0 : _a2.call(t2);
      }
      passProp(name2) {
        let value = void 0;
        for (let view of this.manager.tooltipViews) {
          let given = view[name2];
          if (given !== void 0) {
            if (value === void 0)
              value = given;
            else if (value !== given)
              return void 0;
          }
        }
        return value;
      }
      get offset() {
        return this.passProp("offset");
      }
      get getCoords() {
        return this.passProp("getCoords");
      }
      get overlap() {
        return this.passProp("overlap");
      }
      get resize() {
        return this.passProp("resize");
      }
    }
    const showHoverTooltipHost = /* @__PURE__ */ showTooltip.compute([showHoverTooltip], (state) => {
      let tooltips = state.facet(showHoverTooltip);
      if (tooltips.length === 0)
        return null;
      return {
        pos: Math.min(...tooltips.map((t2) => t2.pos)),
        end: Math.max(...tooltips.map((t2) => {
          var _a2;
          return (_a2 = t2.end) !== null && _a2 !== void 0 ? _a2 : t2.pos;
        })),
        create: HoverTooltipHost.create,
        above: tooltips[0].above,
        arrow: tooltips.some((t2) => t2.arrow)
      };
    });
    class HoverPlugin {
      constructor(view, source2, field, setHover, hoverTime) {
        this.view = view;
        this.source = source2;
        this.field = field;
        this.setHover = setHover;
        this.hoverTime = hoverTime;
        this.hoverTimeout = -1;
        this.restartTimeout = -1;
        this.pending = null;
        this.lastMove = { x: 0, y: 0, target: view.dom, time: 0 };
        this.checkHover = this.checkHover.bind(this);
        view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
        view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
      }
      update() {
        if (this.pending) {
          this.pending = null;
          clearTimeout(this.restartTimeout);
          this.restartTimeout = setTimeout(() => this.startHover(), 20);
        }
      }
      get active() {
        return this.view.state.field(this.field);
      }
      checkHover() {
        this.hoverTimeout = -1;
        if (this.active.length)
          return;
        let hovered = Date.now() - this.lastMove.time;
        if (hovered < this.hoverTime)
          this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
        else
          this.startHover();
      }
      startHover() {
        clearTimeout(this.restartTimeout);
        let { view, lastMove } = this;
        let desc = view.docView.nearest(lastMove.target);
        if (!desc)
          return;
        let pos2, side = 1;
        if (desc instanceof WidgetView) {
          pos2 = desc.posAtStart;
        } else {
          pos2 = view.posAtCoords(lastMove);
          if (pos2 == null)
            return;
          let posCoords = view.coordsAtPos(pos2);
          if (!posCoords || lastMove.y < posCoords.top || lastMove.y > posCoords.bottom || lastMove.x < posCoords.left - view.defaultCharacterWidth || lastMove.x > posCoords.right + view.defaultCharacterWidth)
            return;
          let bidi = view.bidiSpans(view.state.doc.lineAt(pos2)).find((s2) => s2.from <= pos2 && s2.to >= pos2);
          let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
          side = lastMove.x < posCoords.left ? -rtl : rtl;
        }
        let open = this.source(view, pos2, side);
        if (open === null || open === void 0 ? void 0 : open.then) {
          let pending = this.pending = { pos: pos2 };
          open.then((result) => {
            if (this.pending == pending) {
              this.pending = null;
              if (result && !(Array.isArray(result) && !result.length))
                view.dispatch({ effects: this.setHover.of(Array.isArray(result) ? result : [result]) });
            }
          }, (e2) => logException(view.state, e2, "hover tooltip"));
        } else if (open && !(Array.isArray(open) && !open.length)) {
          view.dispatch({ effects: this.setHover.of(Array.isArray(open) ? open : [open]) });
        }
      }
      get tooltip() {
        let plugin = this.view.plugin(tooltipPlugin);
        let index = plugin ? plugin.manager.tooltips.findIndex((t2) => t2.create == HoverTooltipHost.create) : -1;
        return index > -1 ? plugin.manager.tooltipViews[index] : null;
      }
      mousemove(event) {
        var _a2, _b2;
        this.lastMove = { x: event.clientX, y: event.clientY, target: event.target, time: Date.now() };
        if (this.hoverTimeout < 0)
          this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
        let { active, tooltip } = this;
        if (active.length && tooltip && !isInTooltip(tooltip.dom, event) || this.pending) {
          let { pos: pos2 } = active[0] || this.pending, end2 = (_b2 = (_a2 = active[0]) === null || _a2 === void 0 ? void 0 : _a2.end) !== null && _b2 !== void 0 ? _b2 : pos2;
          if (pos2 == end2 ? this.view.posAtCoords(this.lastMove) != pos2 : !isOverRange(this.view, pos2, end2, event.clientX, event.clientY)) {
            this.view.dispatch({ effects: this.setHover.of([]) });
            this.pending = null;
          }
        }
      }
      mouseleave(event) {
        clearTimeout(this.hoverTimeout);
        this.hoverTimeout = -1;
        let { active } = this;
        if (active.length) {
          let { tooltip } = this;
          let inTooltip = tooltip && tooltip.dom.contains(event.relatedTarget);
          if (!inTooltip)
            this.view.dispatch({ effects: this.setHover.of([]) });
          else
            this.watchTooltipLeave(tooltip.dom);
        }
      }
      watchTooltipLeave(tooltip) {
        let watch = (event) => {
          tooltip.removeEventListener("mouseleave", watch);
          if (this.active.length && !this.view.dom.contains(event.relatedTarget))
            this.view.dispatch({ effects: this.setHover.of([]) });
        };
        tooltip.addEventListener("mouseleave", watch);
      }
      destroy() {
        clearTimeout(this.hoverTimeout);
        this.view.dom.removeEventListener("mouseleave", this.mouseleave);
        this.view.dom.removeEventListener("mousemove", this.mousemove);
      }
    }
    const tooltipMargin = 4;
    function isInTooltip(tooltip, event) {
      let { left: left2, right: right2, top: top2, bottom: bottom2 } = tooltip.getBoundingClientRect(), arrow2;
      if (arrow2 = tooltip.querySelector(".cm-tooltip-arrow")) {
        let arrowRect = arrow2.getBoundingClientRect();
        top2 = Math.min(arrowRect.top, top2);
        bottom2 = Math.max(arrowRect.bottom, bottom2);
      }
      return event.clientX >= left2 - tooltipMargin && event.clientX <= right2 + tooltipMargin && event.clientY >= top2 - tooltipMargin && event.clientY <= bottom2 + tooltipMargin;
    }
    function isOverRange(view, from, to, x2, y2, margin) {
      let rect = view.scrollDOM.getBoundingClientRect();
      let docBottom = view.documentTop + view.documentPadding.top + view.contentHeight;
      if (rect.left > x2 || rect.right < x2 || rect.top > y2 || Math.min(rect.bottom, docBottom) < y2)
        return false;
      let pos2 = view.posAtCoords({ x: x2, y: y2 }, false);
      return pos2 >= from && pos2 <= to;
    }
    function hoverTooltip(source2, options = {}) {
      let setHover = StateEffect.define();
      let hoverState = StateField.define({
        create() {
          return [];
        },
        update(value, tr) {
          if (value.length) {
            if (options.hideOnChange && (tr.docChanged || tr.selection))
              value = [];
            else if (options.hideOn)
              value = value.filter((v2) => !options.hideOn(tr, v2));
            if (tr.docChanged) {
              let mapped = [];
              for (let tooltip of value) {
                let newPos = tr.changes.mapPos(tooltip.pos, -1, MapMode.TrackDel);
                if (newPos != null) {
                  let copy = Object.assign(/* @__PURE__ */ Object.create(null), tooltip);
                  copy.pos = newPos;
                  if (copy.end != null)
                    copy.end = tr.changes.mapPos(copy.end);
                  mapped.push(copy);
                }
              }
              value = mapped;
            }
          }
          for (let effect2 of tr.effects) {
            if (effect2.is(setHover))
              value = effect2.value;
            if (effect2.is(closeHoverTooltipEffect))
              value = [];
          }
          return value;
        },
        provide: (f2) => showHoverTooltip.from(f2)
      });
      return {
        active: hoverState,
        extension: [
          hoverState,
          ViewPlugin.define((view) => new HoverPlugin(
            view,
            source2,
            hoverState,
            setHover,
            options.hoverTime || 300
            /* Hover.Time */
          )),
          showHoverTooltipHost
        ]
      };
    }
    function getTooltip(view, tooltip) {
      let plugin = view.plugin(tooltipPlugin);
      if (!plugin)
        return null;
      let found = plugin.manager.tooltips.indexOf(tooltip);
      return found < 0 ? null : plugin.manager.tooltipViews[found];
    }
    const closeHoverTooltipEffect = /* @__PURE__ */ StateEffect.define();
    const panelConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        let topContainer, bottomContainer;
        for (let c2 of configs) {
          topContainer = topContainer || c2.topContainer;
          bottomContainer = bottomContainer || c2.bottomContainer;
        }
        return { topContainer, bottomContainer };
      }
    });
    const panelPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.input = view.state.facet(showPanel);
        this.specs = this.input.filter((s2) => s2);
        this.panels = this.specs.map((spec) => spec(view));
        let conf = view.state.facet(panelConfig);
        this.top = new PanelGroup(view, true, conf.topContainer);
        this.bottom = new PanelGroup(view, false, conf.bottomContainer);
        this.top.sync(this.panels.filter((p2) => p2.top));
        this.bottom.sync(this.panels.filter((p2) => !p2.top));
        for (let p2 of this.panels) {
          p2.dom.classList.add("cm-panel");
          if (p2.mount)
            p2.mount();
        }
      }
      update(update) {
        let conf = update.state.facet(panelConfig);
        if (this.top.container != conf.topContainer) {
          this.top.sync([]);
          this.top = new PanelGroup(update.view, true, conf.topContainer);
        }
        if (this.bottom.container != conf.bottomContainer) {
          this.bottom.sync([]);
          this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
        }
        this.top.syncClasses();
        this.bottom.syncClasses();
        let input = update.state.facet(showPanel);
        if (input != this.input) {
          let specs = input.filter((x2) => x2);
          let panels = [], top2 = [], bottom2 = [], mount = [];
          for (let spec of specs) {
            let known = this.specs.indexOf(spec), panel;
            if (known < 0) {
              panel = spec(update.view);
              mount.push(panel);
            } else {
              panel = this.panels[known];
              if (panel.update)
                panel.update(update);
            }
            panels.push(panel);
            (panel.top ? top2 : bottom2).push(panel);
          }
          this.specs = specs;
          this.panels = panels;
          this.top.sync(top2);
          this.bottom.sync(bottom2);
          for (let p2 of mount) {
            p2.dom.classList.add("cm-panel");
            if (p2.mount)
              p2.mount();
          }
        } else {
          for (let p2 of this.panels)
            if (p2.update)
              p2.update(update);
        }
      }
      destroy() {
        this.top.sync([]);
        this.bottom.sync([]);
      }
    }, {
      provide: (plugin) => EditorView.scrollMargins.of((view) => {
        let value = view.plugin(plugin);
        return value && { top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() };
      })
    });
    class PanelGroup {
      constructor(view, top2, container) {
        this.view = view;
        this.top = top2;
        this.container = container;
        this.dom = void 0;
        this.classes = "";
        this.panels = [];
        this.syncClasses();
      }
      sync(panels) {
        for (let p2 of this.panels)
          if (p2.destroy && panels.indexOf(p2) < 0)
            p2.destroy();
        this.panels = panels;
        this.syncDOM();
      }
      syncDOM() {
        if (this.panels.length == 0) {
          if (this.dom) {
            this.dom.remove();
            this.dom = void 0;
          }
          return;
        }
        if (!this.dom) {
          this.dom = document.createElement("div");
          this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
          this.dom.style[this.top ? "top" : "bottom"] = "0";
          let parent = this.container || this.view.dom;
          parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
        }
        let curDOM = this.dom.firstChild;
        for (let panel of this.panels) {
          if (panel.dom.parentNode == this.dom) {
            while (curDOM != panel.dom)
              curDOM = rm(curDOM);
            curDOM = curDOM.nextSibling;
          } else {
            this.dom.insertBefore(panel.dom, curDOM);
          }
        }
        while (curDOM)
          curDOM = rm(curDOM);
      }
      scrollMargin() {
        return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
      }
      syncClasses() {
        if (!this.container || this.classes == this.view.themeClasses)
          return;
        for (let cls of this.classes.split(" "))
          if (cls)
            this.container.classList.remove(cls);
        for (let cls of (this.classes = this.view.themeClasses).split(" "))
          if (cls)
            this.container.classList.add(cls);
      }
    }
    function rm(node) {
      let next = node.nextSibling;
      node.remove();
      return next;
    }
    const showPanel = /* @__PURE__ */ Facet.define({
      enables: panelPlugin
    });
    class GutterMarker extends RangeValue {
      /**
      @internal
      */
      compare(other) {
        return this == other || this.constructor == other.constructor && this.eq(other);
      }
      /**
      Compare this marker to another marker of the same type.
      */
      eq(other) {
        return false;
      }
      /**
      Called if the marker has a `toDOM` method and its representation
      was removed from a gutter.
      */
      destroy(dom) {
      }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = void 0;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    class Range {
      constructor(from, to) {
        this.from = from;
        this.to = to;
      }
    }
    class NodeProp {
      /**
      Create a new node prop type.
      */
      constructor(config2 = {}) {
        this.id = nextPropID++;
        this.perNode = !!config2.perNode;
        this.deserialize = config2.deserialize || (() => {
          throw new Error("This node type doesn't define a deserialize function");
        });
      }
      /**
      This is meant to be used with
      [`NodeSet.extend`](#common.NodeSet.extend) or
      [`LRParser.configure`](#lr.ParserConfig.props) to compute
      prop values for each node type in the set. Takes a [match
      object](#common.NodeType^match) or function that returns undefined
      if the node type doesn't get this prop, and the prop's value if
      it does.
      */
      add(match) {
        if (this.perNode)
          throw new RangeError("Can't add per-node props to node types");
        if (typeof match != "function")
          match = NodeType.match(match);
        return (type) => {
          let result = match(type);
          return result === void 0 ? null : [this, result];
        };
      }
    }
    NodeProp.closedBy = new NodeProp({ deserialize: (str2) => str2.split(" ") });
    NodeProp.openedBy = new NodeProp({ deserialize: (str2) => str2.split(" ") });
    NodeProp.group = new NodeProp({ deserialize: (str2) => str2.split(" ") });
    NodeProp.isolate = new NodeProp({ deserialize: (value) => {
      if (value && value != "rtl" && value != "ltr" && value != "auto")
        throw new RangeError("Invalid value for isolate: " + value);
      return value || "auto";
    } });
    NodeProp.contextHash = new NodeProp({ perNode: true });
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    NodeProp.mounted = new NodeProp({ perNode: true });
    class MountedTree {
      constructor(tree, overlay, parser2) {
        this.tree = tree;
        this.overlay = overlay;
        this.parser = parser2;
      }
      /**
      @internal
      */
      static get(tree) {
        return tree && tree.props && tree.props[NodeProp.mounted.id];
      }
    }
    const noProps = /* @__PURE__ */ Object.create(null);
    class NodeType {
      /**
      @internal
      */
      constructor(name2, props, id, flags = 0) {
        this.name = name2;
        this.props = props;
        this.id = id;
        this.flags = flags;
      }
      /**
      Define a node type.
      */
      static define(spec) {
        let props = spec.props && spec.props.length ? /* @__PURE__ */ Object.create(null) : noProps;
        let flags = (spec.top ? 1 : 0) | (spec.skipped ? 2 : 0) | (spec.error ? 4 : 0) | (spec.name == null ? 8 : 0);
        let type = new NodeType(spec.name || "", props, spec.id, flags);
        if (spec.props)
          for (let src of spec.props) {
            if (!Array.isArray(src))
              src = src(type);
            if (src) {
              if (src[0].perNode)
                throw new RangeError("Can't store a per-node prop on a node type");
              props[src[0].id] = src[1];
            }
          }
        return type;
      }
      /**
      Retrieves a node prop for this type. Will return `undefined` if
      the prop isn't present on this node.
      */
      prop(prop) {
        return this.props[prop.id];
      }
      /**
      True when this is the top node of a grammar.
      */
      get isTop() {
        return (this.flags & 1) > 0;
      }
      /**
      True when this node is produced by a skip rule.
      */
      get isSkipped() {
        return (this.flags & 2) > 0;
      }
      /**
      Indicates whether this is an error node.
      */
      get isError() {
        return (this.flags & 4) > 0;
      }
      /**
      When true, this node type doesn't correspond to a user-declared
      named node, for example because it is used to cache repetition.
      */
      get isAnonymous() {
        return (this.flags & 8) > 0;
      }
      /**
      Returns true when this node's name or one of its
      [groups](#common.NodeProp^group) matches the given string.
      */
      is(name2) {
        if (typeof name2 == "string") {
          if (this.name == name2)
            return true;
          let group = this.prop(NodeProp.group);
          return group ? group.indexOf(name2) > -1 : false;
        }
        return this.id == name2;
      }
      /**
      Create a function from node types to arbitrary values by
      specifying an object whose property names are node or
      [group](#common.NodeProp^group) names. Often useful with
      [`NodeProp.add`](#common.NodeProp.add). You can put multiple
      names, separated by spaces, in a single property name to map
      multiple node names to a single value.
      */
      static match(map2) {
        let direct = /* @__PURE__ */ Object.create(null);
        for (let prop in map2)
          for (let name2 of prop.split(" "))
            direct[name2] = map2[prop];
        return (node) => {
          for (let groups = node.prop(NodeProp.group), i2 = -1; i2 < (groups ? groups.length : 0); i2++) {
            let found = direct[i2 < 0 ? node.name : groups[i2]];
            if (found)
              return found;
          }
        };
      }
    }
    NodeType.none = new NodeType(
      "",
      /* @__PURE__ */ Object.create(null),
      0,
      8
      /* NodeFlag.Anonymous */
    );
    class NodeSet {
      /**
      Create a set with the given types. The `id` property of each
      type should correspond to its position within the array.
      */
      constructor(types2) {
        this.types = types2;
        for (let i2 = 0; i2 < types2.length; i2++)
          if (types2[i2].id != i2)
            throw new RangeError("Node type ids should correspond to array positions when creating a node set");
      }
      /**
      Create a copy of this set with some node properties added. The
      arguments to this method can be created with
      [`NodeProp.add`](#common.NodeProp.add).
      */
      extend(...props) {
        let newTypes = [];
        for (let type of this.types) {
          let newProps = null;
          for (let source2 of props) {
            let add2 = source2(type);
            if (add2) {
              if (!newProps)
                newProps = Object.assign({}, type.props);
              newProps[add2[0].id] = add2[1];
            }
          }
          newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
        }
        return new NodeSet(newTypes);
      }
    }
    const CachedNode = /* @__PURE__ */ new WeakMap(), CachedInnerNode = /* @__PURE__ */ new WeakMap();
    var IterMode;
    (function(IterMode2) {
      IterMode2[IterMode2["ExcludeBuffers"] = 1] = "ExcludeBuffers";
      IterMode2[IterMode2["IncludeAnonymous"] = 2] = "IncludeAnonymous";
      IterMode2[IterMode2["IgnoreMounts"] = 4] = "IgnoreMounts";
      IterMode2[IterMode2["IgnoreOverlays"] = 8] = "IgnoreOverlays";
    })(IterMode || (IterMode = {}));
    class Tree {
      /**
      Construct a new tree. See also [`Tree.build`](#common.Tree^build).
      */
      constructor(type, children2, positions, length, props) {
        this.type = type;
        this.children = children2;
        this.positions = positions;
        this.length = length;
        this.props = null;
        if (props && props.length) {
          this.props = /* @__PURE__ */ Object.create(null);
          for (let [prop, value] of props)
            this.props[typeof prop == "number" ? prop : prop.id] = value;
        }
      }
      /**
      @internal
      */
      toString() {
        let mounted = MountedTree.get(this);
        if (mounted && !mounted.overlay)
          return mounted.tree.toString();
        let children2 = "";
        for (let ch3 of this.children) {
          let str2 = ch3.toString();
          if (str2) {
            if (children2)
              children2 += ",";
            children2 += str2;
          }
        }
        return !this.type.name ? children2 : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children2.length ? "(" + children2 + ")" : "");
      }
      /**
      Get a [tree cursor](#common.TreeCursor) positioned at the top of
      the tree. Mode can be used to [control](#common.IterMode) which
      nodes the cursor visits.
      */
      cursor(mode = 0) {
        return new TreeCursor(this.topNode, mode);
      }
      /**
      Get a [tree cursor](#common.TreeCursor) pointing into this tree
      at the given position and side (see
      [`moveTo`](#common.TreeCursor.moveTo).
      */
      cursorAt(pos2, side = 0, mode = 0) {
        let scope = CachedNode.get(this) || this.topNode;
        let cursor = new TreeCursor(scope);
        cursor.moveTo(pos2, side);
        CachedNode.set(this, cursor._tree);
        return cursor;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) object for the top of the
      tree.
      */
      get topNode() {
        return new TreeNode(this, 0, 0, null);
      }
      /**
      Get the [syntax node](#common.SyntaxNode) at the given position.
      If `side` is -1, this will move into nodes that end at the
      position. If 1, it'll move into nodes that start at the
      position. With 0, it'll only enter nodes that cover the position
      from both sides.
      
      Note that this will not enter
      [overlays](#common.MountedTree.overlay), and you often want
      [`resolveInner`](#common.Tree.resolveInner) instead.
      */
      resolve(pos2, side = 0) {
        let node = resolveNode(CachedNode.get(this) || this.topNode, pos2, side, false);
        CachedNode.set(this, node);
        return node;
      }
      /**
      Like [`resolve`](#common.Tree.resolve), but will enter
      [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
      pointing into the innermost overlaid tree at the given position
      (with parent links going through all parent structure, including
      the host trees).
      */
      resolveInner(pos2, side = 0) {
        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos2, side, true);
        CachedInnerNode.set(this, node);
        return node;
      }
      /**
      In some situations, it can be useful to iterate through all
      nodes around a position, including those in overlays that don't
      directly cover the position. This method gives you an iterator
      that will produce all nodes, from small to big, around the given
      position.
      */
      resolveStack(pos2, side = 0) {
        return stackIterator(this, pos2, side);
      }
      /**
      Iterate over the tree and its children, calling `enter` for any
      node that touches the `from`/`to` region (if given) before
      running over such a node's children, and `leave` (if given) when
      leaving the node. When `enter` returns `false`, that node will
      not have its children iterated over (or `leave` called).
      */
      iterate(spec) {
        let { enter, leave, from = 0, to = this.length } = spec;
        let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
        for (let c2 = this.cursor(mode | IterMode.IncludeAnonymous); ; ) {
          let entered = false;
          if (c2.from <= to && c2.to >= from && (!anon && c2.type.isAnonymous || enter(c2) !== false)) {
            if (c2.firstChild())
              continue;
            entered = true;
          }
          for (; ; ) {
            if (entered && leave && (anon || !c2.type.isAnonymous))
              leave(c2);
            if (c2.nextSibling())
              break;
            if (!c2.parent())
              return;
            entered = true;
          }
        }
      }
      /**
      Get the value of the given [node prop](#common.NodeProp) for this
      node. Works with both per-node and per-type props.
      */
      prop(prop) {
        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : void 0;
      }
      /**
      Returns the node's [per-node props](#common.NodeProp.perNode) in a
      format that can be passed to the [`Tree`](#common.Tree)
      constructor.
      */
      get propValues() {
        let result = [];
        if (this.props)
          for (let id in this.props)
            result.push([+id, this.props[id]]);
        return result;
      }
      /**
      Balance the direct children of this tree, producing a copy of
      which may have children grouped into subtrees with type
      [`NodeType.none`](#common.NodeType^none).
      */
      balance(config2 = {}) {
        return this.children.length <= 8 ? this : balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children2, positions, length) => new Tree(this.type, children2, positions, length, this.propValues), config2.makeTree || ((children2, positions, length) => new Tree(NodeType.none, children2, positions, length)));
      }
      /**
      Build a tree from a postfix-ordered buffer of node information,
      or a cursor over such a buffer.
      */
      static build(data) {
        return buildTree(data);
      }
    }
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    class FlatBufferCursor {
      constructor(buffer2, index) {
        this.buffer = buffer2;
        this.index = index;
      }
      get id() {
        return this.buffer[this.index - 4];
      }
      get start() {
        return this.buffer[this.index - 3];
      }
      get end() {
        return this.buffer[this.index - 2];
      }
      get size() {
        return this.buffer[this.index - 1];
      }
      get pos() {
        return this.index;
      }
      next() {
        this.index -= 4;
      }
      fork() {
        return new FlatBufferCursor(this.buffer, this.index);
      }
    }
    class TreeBuffer {
      /**
      Create a tree buffer.
      */
      constructor(buffer2, length, set) {
        this.buffer = buffer2;
        this.length = length;
        this.set = set;
      }
      /**
      @internal
      */
      get type() {
        return NodeType.none;
      }
      /**
      @internal
      */
      toString() {
        let result = [];
        for (let index = 0; index < this.buffer.length; ) {
          result.push(this.childString(index));
          index = this.buffer[index + 3];
        }
        return result.join(",");
      }
      /**
      @internal
      */
      childString(index) {
        let id = this.buffer[index], endIndex = this.buffer[index + 3];
        let type = this.set.types[id], result = type.name;
        if (/\W/.test(result) && !type.isError)
          result = JSON.stringify(result);
        index += 4;
        if (endIndex == index)
          return result;
        let children2 = [];
        while (index < endIndex) {
          children2.push(this.childString(index));
          index = this.buffer[index + 3];
        }
        return result + "(" + children2.join(",") + ")";
      }
      /**
      @internal
      */
      findChild(startIndex, endIndex, dir, pos2, side) {
        let { buffer: buffer2 } = this, pick = -1;
        for (let i2 = startIndex; i2 != endIndex; i2 = buffer2[i2 + 3]) {
          if (checkSide(side, pos2, buffer2[i2 + 1], buffer2[i2 + 2])) {
            pick = i2;
            if (dir > 0)
              break;
          }
        }
        return pick;
      }
      /**
      @internal
      */
      slice(startI, endI, from) {
        let b = this.buffer;
        let copy = new Uint16Array(endI - startI), len = 0;
        for (let i2 = startI, j2 = 0; i2 < endI; ) {
          copy[j2++] = b[i2++];
          copy[j2++] = b[i2++] - from;
          let to = copy[j2++] = b[i2++] - from;
          copy[j2++] = b[i2++] - startI;
          len = Math.max(len, to);
        }
        return new TreeBuffer(copy, len, this.set);
      }
    }
    function checkSide(side, pos2, from, to) {
      switch (side) {
        case -2:
          return from < pos2;
        case -1:
          return to >= pos2 && from < pos2;
        case 0:
          return from < pos2 && to > pos2;
        case 1:
          return from <= pos2 && to > pos2;
        case 2:
          return to > pos2;
        case 4:
          return true;
      }
    }
    function resolveNode(node, pos2, side, overlays) {
      var _a2;
      while (node.from == node.to || (side < 1 ? node.from >= pos2 : node.from > pos2) || (side > -1 ? node.to <= pos2 : node.to < pos2)) {
        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
        if (!parent)
          return node;
        node = parent;
      }
      let mode = overlays ? 0 : IterMode.IgnoreOverlays;
      if (overlays)
        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
          if (scan instanceof TreeNode && scan.index < 0 && ((_a2 = parent.enter(pos2, side, mode)) === null || _a2 === void 0 ? void 0 : _a2.from) != scan.from)
            node = parent;
        }
      for (; ; ) {
        let inner = node.enter(pos2, side, mode);
        if (!inner)
          return node;
        node = inner;
      }
    }
    class BaseNode {
      cursor(mode = 0) {
        return new TreeCursor(this, mode);
      }
      getChild(type, before = null, after = null) {
        let r2 = getChildren(this, type, before, after);
        return r2.length ? r2[0] : null;
      }
      getChildren(type, before = null, after = null) {
        return getChildren(this, type, before, after);
      }
      resolve(pos2, side = 0) {
        return resolveNode(this, pos2, side, false);
      }
      resolveInner(pos2, side = 0) {
        return resolveNode(this, pos2, side, true);
      }
      matchContext(context) {
        return matchNodeContext(this.parent, context);
      }
      enterUnfinishedNodesBefore(pos2) {
        let scan = this.childBefore(pos2), node = this;
        while (scan) {
          let last = scan.lastChild;
          if (!last || last.to != scan.to)
            break;
          if (last.type.isError && last.from == last.to) {
            node = scan;
            scan = last.prevSibling;
          } else {
            scan = last;
          }
        }
        return node;
      }
      get node() {
        return this;
      }
      get next() {
        return this.parent;
      }
    }
    class TreeNode extends BaseNode {
      constructor(_tree, from, index, _parent) {
        super();
        this._tree = _tree;
        this.from = from;
        this.index = index;
        this._parent = _parent;
      }
      get type() {
        return this._tree.type;
      }
      get name() {
        return this._tree.type.name;
      }
      get to() {
        return this.from + this._tree.length;
      }
      nextChild(i2, dir, pos2, side, mode = 0) {
        for (let parent = this; ; ) {
          for (let { children: children2, positions } = parent._tree, e2 = dir > 0 ? children2.length : -1; i2 != e2; i2 += dir) {
            let next = children2[i2], start2 = positions[i2] + parent.from;
            if (!checkSide(side, pos2, start2, start2 + next.length))
              continue;
            if (next instanceof TreeBuffer) {
              if (mode & IterMode.ExcludeBuffers)
                continue;
              let index = next.findChild(0, next.buffer.length, dir, pos2 - start2, side);
              if (index > -1)
                return new BufferNode(new BufferContext(parent, next, i2, start2), null, index);
            } else if (mode & IterMode.IncludeAnonymous || (!next.type.isAnonymous || hasChild(next))) {
              let mounted;
              if (!(mode & IterMode.IgnoreMounts) && (mounted = MountedTree.get(next)) && !mounted.overlay)
                return new TreeNode(mounted.tree, start2, i2, parent);
              let inner = new TreeNode(next, start2, i2, parent);
              return mode & IterMode.IncludeAnonymous || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos2, side);
            }
          }
          if (mode & IterMode.IncludeAnonymous || !parent.type.isAnonymous)
            return null;
          if (parent.index >= 0)
            i2 = parent.index + dir;
          else
            i2 = dir < 0 ? -1 : parent._parent._tree.children.length;
          parent = parent._parent;
          if (!parent)
            return null;
        }
      }
      get firstChild() {
        return this.nextChild(
          0,
          1,
          0,
          4
          /* Side.DontCare */
        );
      }
      get lastChild() {
        return this.nextChild(
          this._tree.children.length - 1,
          -1,
          0,
          4
          /* Side.DontCare */
        );
      }
      childAfter(pos2) {
        return this.nextChild(
          0,
          1,
          pos2,
          2
          /* Side.After */
        );
      }
      childBefore(pos2) {
        return this.nextChild(
          this._tree.children.length - 1,
          -1,
          pos2,
          -2
          /* Side.Before */
        );
      }
      enter(pos2, side, mode = 0) {
        let mounted;
        if (!(mode & IterMode.IgnoreOverlays) && (mounted = MountedTree.get(this._tree)) && mounted.overlay) {
          let rPos = pos2 - this.from;
          for (let { from, to } of mounted.overlay) {
            if ((side > 0 ? from <= rPos : from < rPos) && (side < 0 ? to >= rPos : to > rPos))
              return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
          }
        }
        return this.nextChild(0, 1, pos2, side, mode);
      }
      nextSignificantParent() {
        let val = this;
        while (val.type.isAnonymous && val._parent)
          val = val._parent;
        return val;
      }
      get parent() {
        return this._parent ? this._parent.nextSignificantParent() : null;
      }
      get nextSibling() {
        return this._parent && this.index >= 0 ? this._parent.nextChild(
          this.index + 1,
          1,
          0,
          4
          /* Side.DontCare */
        ) : null;
      }
      get prevSibling() {
        return this._parent && this.index >= 0 ? this._parent.nextChild(
          this.index - 1,
          -1,
          0,
          4
          /* Side.DontCare */
        ) : null;
      }
      get tree() {
        return this._tree;
      }
      toTree() {
        return this._tree;
      }
      /**
      @internal
      */
      toString() {
        return this._tree.toString();
      }
    }
    function getChildren(node, type, before, after) {
      let cur2 = node.cursor(), result = [];
      if (!cur2.firstChild())
        return result;
      if (before != null)
        for (let found = false; !found; ) {
          found = cur2.type.is(before);
          if (!cur2.nextSibling())
            return result;
        }
      for (; ; ) {
        if (after != null && cur2.type.is(after))
          return result;
        if (cur2.type.is(type))
          result.push(cur2.node);
        if (!cur2.nextSibling())
          return after == null ? result : [];
      }
    }
    function matchNodeContext(node, context, i2 = context.length - 1) {
      for (let p2 = node; i2 >= 0; p2 = p2.parent) {
        if (!p2)
          return false;
        if (!p2.type.isAnonymous) {
          if (context[i2] && context[i2] != p2.name)
            return false;
          i2--;
        }
      }
      return true;
    }
    class BufferContext {
      constructor(parent, buffer2, index, start2) {
        this.parent = parent;
        this.buffer = buffer2;
        this.index = index;
        this.start = start2;
      }
    }
    class BufferNode extends BaseNode {
      get name() {
        return this.type.name;
      }
      get from() {
        return this.context.start + this.context.buffer.buffer[this.index + 1];
      }
      get to() {
        return this.context.start + this.context.buffer.buffer[this.index + 2];
      }
      constructor(context, _parent, index) {
        super();
        this.context = context;
        this._parent = _parent;
        this.index = index;
        this.type = context.buffer.set.types[context.buffer.buffer[index]];
      }
      child(dir, pos2, side) {
        let { buffer: buffer2 } = this.context;
        let index = buffer2.findChild(this.index + 4, buffer2.buffer[this.index + 3], dir, pos2 - this.context.start, side);
        return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get firstChild() {
        return this.child(
          1,
          0,
          4
          /* Side.DontCare */
        );
      }
      get lastChild() {
        return this.child(
          -1,
          0,
          4
          /* Side.DontCare */
        );
      }
      childAfter(pos2) {
        return this.child(
          1,
          pos2,
          2
          /* Side.After */
        );
      }
      childBefore(pos2) {
        return this.child(
          -1,
          pos2,
          -2
          /* Side.Before */
        );
      }
      enter(pos2, side, mode = 0) {
        if (mode & IterMode.ExcludeBuffers)
          return null;
        let { buffer: buffer2 } = this.context;
        let index = buffer2.findChild(this.index + 4, buffer2.buffer[this.index + 3], side > 0 ? 1 : -1, pos2 - this.context.start, side);
        return index < 0 ? null : new BufferNode(this.context, this, index);
      }
      get parent() {
        return this._parent || this.context.parent.nextSignificantParent();
      }
      externalSibling(dir) {
        return this._parent ? null : this.context.parent.nextChild(
          this.context.index + dir,
          dir,
          0,
          4
          /* Side.DontCare */
        );
      }
      get nextSibling() {
        let { buffer: buffer2 } = this.context;
        let after = buffer2.buffer[this.index + 3];
        if (after < (this._parent ? buffer2.buffer[this._parent.index + 3] : buffer2.buffer.length))
          return new BufferNode(this.context, this._parent, after);
        return this.externalSibling(1);
      }
      get prevSibling() {
        let { buffer: buffer2 } = this.context;
        let parentStart = this._parent ? this._parent.index + 4 : 0;
        if (this.index == parentStart)
          return this.externalSibling(-1);
        return new BufferNode(this.context, this._parent, buffer2.findChild(
          parentStart,
          this.index,
          -1,
          0,
          4
          /* Side.DontCare */
        ));
      }
      get tree() {
        return null;
      }
      toTree() {
        let children2 = [], positions = [];
        let { buffer: buffer2 } = this.context;
        let startI = this.index + 4, endI = buffer2.buffer[this.index + 3];
        if (endI > startI) {
          let from = buffer2.buffer[this.index + 1];
          children2.push(buffer2.slice(startI, endI, from));
          positions.push(0);
        }
        return new Tree(this.type, children2, positions, this.to - this.from);
      }
      /**
      @internal
      */
      toString() {
        return this.context.buffer.childString(this.index);
      }
    }
    function iterStack(heads) {
      if (!heads.length)
        return null;
      let pick = 0, picked = heads[0];
      for (let i2 = 1; i2 < heads.length; i2++) {
        let node = heads[i2];
        if (node.from > picked.from || node.to < picked.to) {
          picked = node;
          pick = i2;
        }
      }
      let next = picked instanceof TreeNode && picked.index < 0 ? null : picked.parent;
      let newHeads = heads.slice();
      if (next)
        newHeads[pick] = next;
      else
        newHeads.splice(pick, 1);
      return new StackIterator(newHeads, picked);
    }
    class StackIterator {
      constructor(heads, node) {
        this.heads = heads;
        this.node = node;
      }
      get next() {
        return iterStack(this.heads);
      }
    }
    function stackIterator(tree, pos2, side) {
      let inner = tree.resolveInner(pos2, side), layers = null;
      for (let scan = inner instanceof TreeNode ? inner : inner.context.parent; scan; scan = scan.parent) {
        if (scan.index < 0) {
          let parent = scan.parent;
          (layers || (layers = [inner])).push(parent.resolve(pos2, side));
          scan = parent;
        } else {
          let mount = MountedTree.get(scan.tree);
          if (mount && mount.overlay && mount.overlay[0].from <= pos2 && mount.overlay[mount.overlay.length - 1].to >= pos2) {
            let root2 = new TreeNode(mount.tree, mount.overlay[0].from + scan.from, -1, scan);
            (layers || (layers = [inner])).push(resolveNode(root2, pos2, side, false));
          }
        }
      }
      return layers ? iterStack(layers) : inner;
    }
    class TreeCursor {
      /**
      Shorthand for `.type.name`.
      */
      get name() {
        return this.type.name;
      }
      /**
      @internal
      */
      constructor(node, mode = 0) {
        this.mode = mode;
        this.buffer = null;
        this.stack = [];
        this.index = 0;
        this.bufferNode = null;
        if (node instanceof TreeNode) {
          this.yieldNode(node);
        } else {
          this._tree = node.context.parent;
          this.buffer = node.context;
          for (let n2 = node._parent; n2; n2 = n2._parent)
            this.stack.unshift(n2.index);
          this.bufferNode = node;
          this.yieldBuf(node.index);
        }
      }
      yieldNode(node) {
        if (!node)
          return false;
        this._tree = node;
        this.type = node.type;
        this.from = node.from;
        this.to = node.to;
        return true;
      }
      yieldBuf(index, type) {
        this.index = index;
        let { start: start2, buffer: buffer2 } = this.buffer;
        this.type = type || buffer2.set.types[buffer2.buffer[index]];
        this.from = start2 + buffer2.buffer[index + 1];
        this.to = start2 + buffer2.buffer[index + 2];
        return true;
      }
      /**
      @internal
      */
      yield(node) {
        if (!node)
          return false;
        if (node instanceof TreeNode) {
          this.buffer = null;
          return this.yieldNode(node);
        }
        this.buffer = node.context;
        return this.yieldBuf(node.index, node.type);
      }
      /**
      @internal
      */
      toString() {
        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
      }
      /**
      @internal
      */
      enterChild(dir, pos2, side) {
        if (!this.buffer)
          return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos2, side, this.mode));
        let { buffer: buffer2 } = this.buffer;
        let index = buffer2.findChild(this.index + 4, buffer2.buffer[this.index + 3], dir, pos2 - this.buffer.start, side);
        if (index < 0)
          return false;
        this.stack.push(this.index);
        return this.yieldBuf(index);
      }
      /**
      Move the cursor to this node's first child. When this returns
      false, the node has no child, and the cursor has not been moved.
      */
      firstChild() {
        return this.enterChild(
          1,
          0,
          4
          /* Side.DontCare */
        );
      }
      /**
      Move the cursor to this node's last child.
      */
      lastChild() {
        return this.enterChild(
          -1,
          0,
          4
          /* Side.DontCare */
        );
      }
      /**
      Move the cursor to the first child that ends after `pos`.
      */
      childAfter(pos2) {
        return this.enterChild(
          1,
          pos2,
          2
          /* Side.After */
        );
      }
      /**
      Move to the last child that starts before `pos`.
      */
      childBefore(pos2) {
        return this.enterChild(
          -1,
          pos2,
          -2
          /* Side.Before */
        );
      }
      /**
      Move the cursor to the child around `pos`. If side is -1 the
      child may end at that position, when 1 it may start there. This
      will also enter [overlaid](#common.MountedTree.overlay)
      [mounted](#common.NodeProp^mounted) trees unless `overlays` is
      set to false.
      */
      enter(pos2, side, mode = this.mode) {
        if (!this.buffer)
          return this.yield(this._tree.enter(pos2, side, mode));
        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos2, side);
      }
      /**
      Move to the node's parent node, if this isn't the top node.
      */
      parent() {
        if (!this.buffer)
          return this.yieldNode(this.mode & IterMode.IncludeAnonymous ? this._tree._parent : this._tree.parent);
        if (this.stack.length)
          return this.yieldBuf(this.stack.pop());
        let parent = this.mode & IterMode.IncludeAnonymous ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
        this.buffer = null;
        return this.yieldNode(parent);
      }
      /**
      @internal
      */
      sibling(dir) {
        if (!this.buffer)
          return !this._tree._parent ? false : this.yield(this._tree.index < 0 ? null : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4, this.mode));
        let { buffer: buffer2 } = this.buffer, d2 = this.stack.length - 1;
        if (dir < 0) {
          let parentStart = d2 < 0 ? 0 : this.stack[d2] + 4;
          if (this.index != parentStart)
            return this.yieldBuf(buffer2.findChild(
              parentStart,
              this.index,
              -1,
              0,
              4
              /* Side.DontCare */
            ));
        } else {
          let after = buffer2.buffer[this.index + 3];
          if (after < (d2 < 0 ? buffer2.buffer.length : buffer2.buffer[this.stack[d2] + 3]))
            return this.yieldBuf(after);
        }
        return d2 < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4, this.mode)) : false;
      }
      /**
      Move to this node's next sibling, if any.
      */
      nextSibling() {
        return this.sibling(1);
      }
      /**
      Move to this node's previous sibling, if any.
      */
      prevSibling() {
        return this.sibling(-1);
      }
      atLastNode(dir) {
        let index, parent, { buffer: buffer2 } = this;
        if (buffer2) {
          if (dir > 0) {
            if (this.index < buffer2.buffer.buffer.length)
              return false;
          } else {
            for (let i2 = 0; i2 < this.index; i2++)
              if (buffer2.buffer.buffer[i2 + 3] < this.index)
                return false;
          }
          ({ index, parent } = buffer2);
        } else {
          ({ index, _parent: parent } = this._tree);
        }
        for (; parent; { index, _parent: parent } = parent) {
          if (index > -1)
            for (let i2 = index + dir, e2 = dir < 0 ? -1 : parent._tree.children.length; i2 != e2; i2 += dir) {
              let child = parent._tree.children[i2];
              if (this.mode & IterMode.IncludeAnonymous || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
                return false;
            }
        }
        return true;
      }
      move(dir, enter) {
        if (enter && this.enterChild(
          dir,
          0,
          4
          /* Side.DontCare */
        ))
          return true;
        for (; ; ) {
          if (this.sibling(dir))
            return true;
          if (this.atLastNode(dir) || !this.parent())
            return false;
        }
      }
      /**
      Move to the next node in a
      [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
      traversal, going from a node to its first child or, if the
      current node is empty or `enter` is false, its next sibling or
      the next sibling of the first parent node that has one.
      */
      next(enter = true) {
        return this.move(1, enter);
      }
      /**
      Move to the next node in a last-to-first pre-order traversal. A
      node is followed by its last child or, if it has none, its
      previous sibling or the previous sibling of the first parent
      node that has one.
      */
      prev(enter = true) {
        return this.move(-1, enter);
      }
      /**
      Move the cursor to the innermost node that covers `pos`. If
      `side` is -1, it will enter nodes that end at `pos`. If it is 1,
      it will enter nodes that start at `pos`.
      */
      moveTo(pos2, side = 0) {
        while (this.from == this.to || (side < 1 ? this.from >= pos2 : this.from > pos2) || (side > -1 ? this.to <= pos2 : this.to < pos2))
          if (!this.parent())
            break;
        while (this.enterChild(1, pos2, side)) {
        }
        return this;
      }
      /**
      Get a [syntax node](#common.SyntaxNode) at the cursor's current
      position.
      */
      get node() {
        if (!this.buffer)
          return this._tree;
        let cache = this.bufferNode, result = null, depth = 0;
        if (cache && cache.context == this.buffer) {
          scan: for (let index = this.index, d2 = this.stack.length; d2 >= 0; ) {
            for (let c2 = cache; c2; c2 = c2._parent)
              if (c2.index == index) {
                if (index == this.index)
                  return c2;
                result = c2;
                depth = d2 + 1;
                break scan;
              }
            index = this.stack[--d2];
          }
        }
        for (let i2 = depth; i2 < this.stack.length; i2++)
          result = new BufferNode(this.buffer, result, this.stack[i2]);
        return this.bufferNode = new BufferNode(this.buffer, result, this.index);
      }
      /**
      Get the [tree](#common.Tree) that represents the current node, if
      any. Will return null when the node is in a [tree
      buffer](#common.TreeBuffer).
      */
      get tree() {
        return this.buffer ? null : this._tree._tree;
      }
      /**
      Iterate over the current node and all its descendants, calling
      `enter` when entering a node and `leave`, if given, when leaving
      one. When `enter` returns `false`, any children of that node are
      skipped, and `leave` isn't called for it.
      */
      iterate(enter, leave) {
        for (let depth = 0; ; ) {
          let mustLeave = false;
          if (this.type.isAnonymous || enter(this) !== false) {
            if (this.firstChild()) {
              depth++;
              continue;
            }
            if (!this.type.isAnonymous)
              mustLeave = true;
          }
          for (; ; ) {
            if (mustLeave && leave)
              leave(this);
            mustLeave = this.type.isAnonymous;
            if (!depth)
              return;
            if (this.nextSibling())
              break;
            this.parent();
            depth--;
            mustLeave = true;
          }
        }
      }
      /**
      Test whether the current node matches a given context—a sequence
      of direct parent node names. Empty strings in the context array
      are treated as wildcards.
      */
      matchContext(context) {
        if (!this.buffer)
          return matchNodeContext(this.node.parent, context);
        let { buffer: buffer2 } = this.buffer, { types: types2 } = buffer2.set;
        for (let i2 = context.length - 1, d2 = this.stack.length - 1; i2 >= 0; d2--) {
          if (d2 < 0)
            return matchNodeContext(this._tree, context, i2);
          let type = types2[buffer2.buffer[this.stack[d2]]];
          if (!type.isAnonymous) {
            if (context[i2] && context[i2] != type.name)
              return false;
            i2--;
          }
        }
        return true;
      }
    }
    function hasChild(tree) {
      return tree.children.some((ch3) => ch3 instanceof TreeBuffer || !ch3.type.isAnonymous || hasChild(ch3));
    }
    function buildTree(data) {
      var _a2;
      let { buffer: buffer2, nodeSet: nodeSet2, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet2.types.length } = data;
      let cursor = Array.isArray(buffer2) ? new FlatBufferCursor(buffer2, buffer2.length) : buffer2;
      let types2 = nodeSet2.types;
      let contextHash = 0, lookAhead = 0;
      function takeNode(parentStart, minPos, children3, positions2, inRepeat, depth) {
        let { id, start: start2, end: end2, size } = cursor;
        let lookAheadAtStart = lookAhead, contextAtStart = contextHash;
        while (size < 0) {
          cursor.next();
          if (size == -1) {
            let node2 = reused[id];
            children3.push(node2);
            positions2.push(start2 - parentStart);
            return;
          } else if (size == -3) {
            contextHash = id;
            return;
          } else if (size == -4) {
            lookAhead = id;
            return;
          } else {
            throw new RangeError(`Unrecognized record size: ${size}`);
          }
        }
        let type = types2[id], node, buffer3;
        let startPos = start2 - parentStart;
        if (end2 - start2 <= maxBufferLength && (buffer3 = findBufferSize(cursor.pos - minPos, inRepeat))) {
          let data2 = new Uint16Array(buffer3.size - buffer3.skip);
          let endPos = cursor.pos - buffer3.size, index = data2.length;
          while (cursor.pos > endPos)
            index = copyToBuffer(buffer3.start, data2, index);
          node = new TreeBuffer(data2, end2 - buffer3.start, nodeSet2);
          startPos = buffer3.start - parentStart;
        } else {
          let endPos = cursor.pos - size;
          cursor.next();
          let localChildren = [], localPositions = [];
          let localInRepeat = id >= minRepeatType ? id : -1;
          let lastGroup = 0, lastEnd = end2;
          while (cursor.pos > endPos) {
            if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
              if (cursor.end <= lastEnd - maxBufferLength) {
                makeRepeatLeaf(localChildren, localPositions, start2, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
                lastGroup = localChildren.length;
                lastEnd = cursor.end;
              }
              cursor.next();
            } else if (depth > 2500) {
              takeFlatNode(start2, endPos, localChildren, localPositions);
            } else {
              takeNode(start2, endPos, localChildren, localPositions, localInRepeat, depth + 1);
            }
          }
          if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
            makeRepeatLeaf(localChildren, localPositions, start2, lastGroup, start2, lastEnd, localInRepeat, lookAheadAtStart, contextAtStart);
          localChildren.reverse();
          localPositions.reverse();
          if (localInRepeat > -1 && lastGroup > 0) {
            let make = makeBalanced(type, contextAtStart);
            node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end2 - start2, make, make);
          } else {
            node = makeTree(type, localChildren, localPositions, end2 - start2, lookAheadAtStart - end2, contextAtStart);
          }
        }
        children3.push(node);
        positions2.push(startPos);
      }
      function takeFlatNode(parentStart, minPos, children3, positions2) {
        let nodes = [];
        let nodeCount = 0, stopAt = -1;
        while (cursor.pos > minPos) {
          let { id, start: start2, end: end2, size } = cursor;
          if (size > 4) {
            cursor.next();
          } else if (stopAt > -1 && start2 < stopAt) {
            break;
          } else {
            if (stopAt < 0)
              stopAt = end2 - maxBufferLength;
            nodes.push(id, start2, end2);
            nodeCount++;
            cursor.next();
          }
        }
        if (nodeCount) {
          let buffer3 = new Uint16Array(nodeCount * 4);
          let start2 = nodes[nodes.length - 2];
          for (let i2 = nodes.length - 3, j2 = 0; i2 >= 0; i2 -= 3) {
            buffer3[j2++] = nodes[i2];
            buffer3[j2++] = nodes[i2 + 1] - start2;
            buffer3[j2++] = nodes[i2 + 2] - start2;
            buffer3[j2++] = j2;
          }
          children3.push(new TreeBuffer(buffer3, nodes[2] - start2, nodeSet2));
          positions2.push(start2 - parentStart);
        }
      }
      function makeBalanced(type, contextHash2) {
        return (children3, positions2, length2) => {
          let lookAhead2 = 0, lastI = children3.length - 1, last, lookAheadProp;
          if (lastI >= 0 && (last = children3[lastI]) instanceof Tree) {
            if (!lastI && last.type == type && last.length == length2)
              return last;
            if (lookAheadProp = last.prop(NodeProp.lookAhead))
              lookAhead2 = positions2[lastI] + last.length + lookAheadProp;
          }
          return makeTree(type, children3, positions2, length2, lookAhead2, contextHash2);
        };
      }
      function makeRepeatLeaf(children3, positions2, base2, i2, from, to, type, lookAhead2, contextHash2) {
        let localChildren = [], localPositions = [];
        while (children3.length > i2) {
          localChildren.push(children3.pop());
          localPositions.push(positions2.pop() + base2 - from);
        }
        children3.push(makeTree(nodeSet2.types[type], localChildren, localPositions, to - from, lookAhead2 - to, contextHash2));
        positions2.push(from - base2);
      }
      function makeTree(type, children3, positions2, length2, lookAhead2, contextHash2, props) {
        if (contextHash2) {
          let pair = [NodeProp.contextHash, contextHash2];
          props = props ? [pair].concat(props) : [pair];
        }
        if (lookAhead2 > 25) {
          let pair = [NodeProp.lookAhead, lookAhead2];
          props = props ? [pair].concat(props) : [pair];
        }
        return new Tree(type, children3, positions2, length2, props);
      }
      function findBufferSize(maxSize, inRepeat) {
        let fork = cursor.fork();
        let size = 0, start2 = 0, skip = 0, minStart = fork.end - maxBufferLength;
        let result = { size: 0, start: 0, skip: 0 };
        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos; ) {
          let nodeSize2 = fork.size;
          if (fork.id == inRepeat && nodeSize2 >= 0) {
            result.size = size;
            result.start = start2;
            result.skip = skip;
            skip += 4;
            size += 4;
            fork.next();
            continue;
          }
          let startPos = fork.pos - nodeSize2;
          if (nodeSize2 < 0 || startPos < minPos || fork.start < minStart)
            break;
          let localSkipped = fork.id >= minRepeatType ? 4 : 0;
          let nodeStart = fork.start;
          fork.next();
          while (fork.pos > startPos) {
            if (fork.size < 0) {
              if (fork.size == -3)
                localSkipped += 4;
              else
                break scan;
            } else if (fork.id >= minRepeatType) {
              localSkipped += 4;
            }
            fork.next();
          }
          start2 = nodeStart;
          size += nodeSize2;
          skip += localSkipped;
        }
        if (inRepeat < 0 || size == maxSize) {
          result.size = size;
          result.start = start2;
          result.skip = skip;
        }
        return result.size > 4 ? result : void 0;
      }
      function copyToBuffer(bufferStart, buffer3, index) {
        let { id, start: start2, end: end2, size } = cursor;
        cursor.next();
        if (size >= 0 && id < minRepeatType) {
          let startIndex = index;
          if (size > 4) {
            let endPos = cursor.pos - (size - 4);
            while (cursor.pos > endPos)
              index = copyToBuffer(bufferStart, buffer3, index);
          }
          buffer3[--index] = startIndex;
          buffer3[--index] = end2 - bufferStart;
          buffer3[--index] = start2 - bufferStart;
          buffer3[--index] = id;
        } else if (size == -3) {
          contextHash = id;
        } else if (size == -4) {
          lookAhead = id;
        }
        return index;
      }
      let children2 = [], positions = [];
      while (cursor.pos > 0)
        takeNode(data.start || 0, data.bufferStart || 0, children2, positions, -1, 0);
      let length = (_a2 = data.length) !== null && _a2 !== void 0 ? _a2 : children2.length ? positions[0] + children2[0].length : 0;
      return new Tree(types2[data.topID], children2.reverse(), positions.reverse(), length);
    }
    const nodeSizeCache = /* @__PURE__ */ new WeakMap();
    function nodeSize(balanceType, node) {
      if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
        return 1;
      let size = nodeSizeCache.get(node);
      if (size == null) {
        size = 1;
        for (let child of node.children) {
          if (child.type != balanceType || !(child instanceof Tree)) {
            size = 1;
            break;
          }
          size += nodeSize(balanceType, child);
        }
        nodeSizeCache.set(node, size);
      }
      return size;
    }
    function balanceRange(balanceType, children2, positions, from, to, start2, length, mkTop, mkTree) {
      let total = 0;
      for (let i2 = from; i2 < to; i2++)
        total += nodeSize(balanceType, children2[i2]);
      let maxChild = Math.ceil(
        total * 1.5 / 8
        /* Balance.BranchFactor */
      );
      let localChildren = [], localPositions = [];
      function divide(children3, positions2, from2, to2, offset2) {
        for (let i2 = from2; i2 < to2; ) {
          let groupFrom = i2, groupStart = positions2[i2], groupSize = nodeSize(balanceType, children3[i2]);
          i2++;
          for (; i2 < to2; i2++) {
            let nextSize = nodeSize(balanceType, children3[i2]);
            if (groupSize + nextSize >= maxChild)
              break;
            groupSize += nextSize;
          }
          if (i2 == groupFrom + 1) {
            if (groupSize > maxChild) {
              let only = children3[groupFrom];
              divide(only.children, only.positions, 0, only.children.length, positions2[groupFrom] + offset2);
              continue;
            }
            localChildren.push(children3[groupFrom]);
          } else {
            let length2 = positions2[i2 - 1] + children3[i2 - 1].length - groupStart;
            localChildren.push(balanceRange(balanceType, children3, positions2, groupFrom, i2, groupStart, length2, null, mkTree));
          }
          localPositions.push(groupStart + offset2 - start2);
        }
      }
      divide(children2, positions, from, to, 0);
      return (mkTop || mkTree)(localChildren, localPositions, length);
    }
    class TreeFragment {
      /**
      Construct a tree fragment. You'll usually want to use
      [`addTree`](#common.TreeFragment^addTree) and
      [`applyChanges`](#common.TreeFragment^applyChanges) instead of
      calling this directly.
      */
      constructor(from, to, tree, offset2, openStart = false, openEnd = false) {
        this.from = from;
        this.to = to;
        this.tree = tree;
        this.offset = offset2;
        this.open = (openStart ? 1 : 0) | (openEnd ? 2 : 0);
      }
      /**
      Whether the start of the fragment represents the start of a
      parse, or the end of a change. (In the second case, it may not
      be safe to reuse some nodes at the start, depending on the
      parsing algorithm.)
      */
      get openStart() {
        return (this.open & 1) > 0;
      }
      /**
      Whether the end of the fragment represents the end of a
      full-document parse, or the start of a change.
      */
      get openEnd() {
        return (this.open & 2) > 0;
      }
      /**
      Create a set of fragments from a freshly parsed tree, or update
      an existing set of fragments by replacing the ones that overlap
      with a tree with content from the new tree. When `partial` is
      true, the parse is treated as incomplete, and the resulting
      fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
      true.
      */
      static addTree(tree, fragments = [], partial = false) {
        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
        for (let f2 of fragments)
          if (f2.to > tree.length)
            result.push(f2);
        return result;
      }
      /**
      Apply a set of edits to an array of fragments, removing or
      splitting fragments as necessary to remove edited ranges, and
      adjusting offsets for fragments that moved.
      */
      static applyChanges(fragments, changes, minGap = 128) {
        if (!changes.length)
          return fragments;
        let result = [];
        let fI = 1, nextF = fragments.length ? fragments[0] : null;
        for (let cI = 0, pos2 = 0, off = 0; ; cI++) {
          let nextC = cI < changes.length ? changes[cI] : null;
          let nextPos = nextC ? nextC.fromA : 1e9;
          if (nextPos - pos2 >= minGap)
            while (nextF && nextF.from < nextPos) {
              let cut = nextF;
              if (pos2 >= cut.from || nextPos <= cut.to || off) {
                let fFrom = Math.max(cut.from, pos2) - off, fTo = Math.min(cut.to, nextPos) - off;
                cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
              }
              if (cut)
                result.push(cut);
              if (nextF.to > nextPos)
                break;
              nextF = fI < fragments.length ? fragments[fI++] : null;
            }
          if (!nextC)
            break;
          pos2 = nextC.toA;
          off = nextC.toA - nextC.toB;
        }
        return result;
      }
    }
    class Parser {
      /**
      Start a parse, returning a [partial parse](#common.PartialParse)
      object. [`fragments`](#common.TreeFragment) can be passed in to
      make the parse incremental.
      
      By default, the entire input is parsed. You can pass `ranges`,
      which should be a sorted array of non-empty, non-overlapping
      ranges, to parse only those ranges. The tree returned in that
      case will start at `ranges[0].from`.
      */
      startParse(input, fragments, ranges) {
        if (typeof input == "string")
          input = new StringInput(input);
        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map((r2) => new Range(r2.from, r2.to)) : [new Range(0, 0)];
        return this.createParse(input, fragments || [], ranges);
      }
      /**
      Run a full parse, returning the resulting tree.
      */
      parse(input, fragments, ranges) {
        let parse2 = this.startParse(input, fragments, ranges);
        for (; ; ) {
          let done = parse2.advance();
          if (done)
            return done;
        }
      }
    }
    class StringInput {
      constructor(string2) {
        this.string = string2;
      }
      get length() {
        return this.string.length;
      }
      chunk(from) {
        return this.string.slice(from);
      }
      get lineChunks() {
        return false;
      }
      read(from, to) {
        return this.string.slice(from, to);
      }
    }
    new NodeProp({ perNode: true });
    let nextTagID = 0;
    class Tag {
      /**
      @internal
      */
      constructor(name2, set, base2, modified) {
        this.name = name2;
        this.set = set;
        this.base = base2;
        this.modified = modified;
        this.id = nextTagID++;
      }
      toString() {
        let { name: name2 } = this;
        for (let mod2 of this.modified)
          if (mod2.name)
            name2 = `${mod2.name}(${name2})`;
        return name2;
      }
      static define(nameOrParent, parent) {
        let name2 = typeof nameOrParent == "string" ? nameOrParent : "?";
        if (nameOrParent instanceof Tag)
          parent = nameOrParent;
        if (parent === null || parent === void 0 ? void 0 : parent.base)
          throw new Error("Can not derive from a modified tag");
        let tag = new Tag(name2, [], null, []);
        tag.set.push(tag);
        if (parent)
          for (let t2 of parent.set)
            tag.set.push(t2);
        return tag;
      }
      /**
      Define a tag _modifier_, which is a function that, given a tag,
      will return a tag that is a subtag of the original. Applying the
      same modifier to a twice tag will return the same value (`m1(t1)
      == m1(t1)`) and applying multiple modifiers will, regardless or
      order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
      
      When multiple modifiers are applied to a given base tag, each
      smaller set of modifiers is registered as a parent, so that for
      example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
      `m1(m3(t1)`, and so on.
      */
      static defineModifier(name2) {
        let mod2 = new Modifier(name2);
        return (tag) => {
          if (tag.modified.indexOf(mod2) > -1)
            return tag;
          return Modifier.get(tag.base || tag, tag.modified.concat(mod2).sort((a2, b) => a2.id - b.id));
        };
      }
    }
    let nextModifierID = 0;
    class Modifier {
      constructor(name2) {
        this.name = name2;
        this.instances = [];
        this.id = nextModifierID++;
      }
      static get(base2, mods) {
        if (!mods.length)
          return base2;
        let exists = mods[0].instances.find((t2) => t2.base == base2 && sameArray(mods, t2.modified));
        if (exists)
          return exists;
        let set = [], tag = new Tag(base2.name, set, base2, mods);
        for (let m2 of mods)
          m2.instances.push(tag);
        let configs = powerSet(mods);
        for (let parent of base2.set)
          if (!parent.modified.length)
            for (let config2 of configs)
              set.push(Modifier.get(parent, config2));
        return tag;
      }
    }
    function sameArray(a2, b) {
      return a2.length == b.length && a2.every((x2, i2) => x2 == b[i2]);
    }
    function powerSet(array) {
      let sets = [[]];
      for (let i2 = 0; i2 < array.length; i2++) {
        for (let j2 = 0, e2 = sets.length; j2 < e2; j2++) {
          sets.push(sets[j2].concat(array[i2]));
        }
      }
      return sets.sort((a2, b) => b.length - a2.length);
    }
    function styleTags(spec) {
      let byName = /* @__PURE__ */ Object.create(null);
      for (let prop in spec) {
        let tags2 = spec[prop];
        if (!Array.isArray(tags2))
          tags2 = [tags2];
        for (let part of prop.split(" "))
          if (part) {
            let pieces = [], mode = 2, rest = part;
            for (let pos2 = 0; ; ) {
              if (rest == "..." && pos2 > 0 && pos2 + 3 == part.length) {
                mode = 1;
                break;
              }
              let m2 = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
              if (!m2)
                throw new RangeError("Invalid path: " + part);
              pieces.push(m2[0] == "*" ? "" : m2[0][0] == '"' ? JSON.parse(m2[0]) : m2[0]);
              pos2 += m2[0].length;
              if (pos2 == part.length)
                break;
              let next = part[pos2++];
              if (pos2 == part.length && next == "!") {
                mode = 0;
                break;
              }
              if (next != "/")
                throw new RangeError("Invalid path: " + part);
              rest = part.slice(pos2);
            }
            let last = pieces.length - 1, inner = pieces[last];
            if (!inner)
              throw new RangeError("Invalid path: " + part);
            let rule = new Rule(tags2, mode, last > 0 ? pieces.slice(0, last) : null);
            byName[inner] = rule.sort(byName[inner]);
          }
      }
      return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = new NodeProp();
    class Rule {
      constructor(tags2, mode, context, next) {
        this.tags = tags2;
        this.mode = mode;
        this.context = context;
        this.next = next;
      }
      get opaque() {
        return this.mode == 0;
      }
      get inherit() {
        return this.mode == 1;
      }
      sort(other) {
        if (!other || other.depth < this.depth) {
          this.next = other;
          return this;
        }
        other.next = this.sort(other.next);
        return other;
      }
      get depth() {
        return this.context ? this.context.length : 0;
      }
    }
    Rule.empty = new Rule([], 2, null);
    function tagHighlighter(tags2, options) {
      let map2 = /* @__PURE__ */ Object.create(null);
      for (let style2 of tags2) {
        if (!Array.isArray(style2.tag))
          map2[style2.tag.id] = style2.class;
        else
          for (let tag of style2.tag)
            map2[tag.id] = style2.class;
      }
      let { scope, all = null } = options || {};
      return {
        style: (tags3) => {
          let cls = all;
          for (let tag of tags3) {
            for (let sub of tag.set) {
              let tagClass = map2[sub.id];
              if (tagClass) {
                cls = cls ? cls + " " + tagClass : tagClass;
                break;
              }
            }
          }
          return cls;
        },
        scope
      };
    }
    function highlightTags(highlighters, tags2) {
      let result = null;
      for (let highlighter of highlighters) {
        let value = highlighter.style(tags2);
        if (value)
          result = result ? result + " " + value : value;
      }
      return result;
    }
    function highlightTree(tree, highlighter, putStyle, from = 0, to = tree.length) {
      let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);
      builder.highlightRange(tree.cursor(), from, to, "", builder.highlighters);
      builder.flush(to);
    }
    class HighlightBuilder {
      constructor(at, highlighters, span) {
        this.at = at;
        this.highlighters = highlighters;
        this.span = span;
        this.class = "";
      }
      startSpan(at, cls) {
        if (cls != this.class) {
          this.flush(at);
          if (at > this.at)
            this.at = at;
          this.class = cls;
        }
      }
      flush(to) {
        if (to > this.at && this.class)
          this.span(this.at, to, this.class);
      }
      highlightRange(cursor, from, to, inheritedClass, highlighters) {
        let { type, from: start2, to: end2 } = cursor;
        if (start2 >= to || end2 <= from)
          return;
        if (type.isTop)
          highlighters = this.highlighters.filter((h2) => !h2.scope || h2.scope(type));
        let cls = inheritedClass;
        let rule = getStyleTags(cursor) || Rule.empty;
        let tagCls = highlightTags(highlighters, rule.tags);
        if (tagCls) {
          if (cls)
            cls += " ";
          cls += tagCls;
          if (rule.mode == 1)
            inheritedClass += (inheritedClass ? " " : "") + tagCls;
        }
        this.startSpan(Math.max(from, start2), cls);
        if (rule.opaque)
          return;
        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
        if (mounted && mounted.overlay) {
          let inner = cursor.node.enter(mounted.overlay[0].from + start2, 1);
          let innerHighlighters = this.highlighters.filter((h2) => !h2.scope || h2.scope(mounted.tree.type));
          let hasChild2 = cursor.firstChild();
          for (let i2 = 0, pos2 = start2; ; i2++) {
            let next = i2 < mounted.overlay.length ? mounted.overlay[i2] : null;
            let nextPos = next ? next.from + start2 : end2;
            let rangeFrom = Math.max(from, pos2), rangeTo = Math.min(to, nextPos);
            if (rangeFrom < rangeTo && hasChild2) {
              while (cursor.from < rangeTo) {
                this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);
                this.startSpan(Math.min(rangeTo, cursor.to), cls);
                if (cursor.to >= nextPos || !cursor.nextSibling())
                  break;
              }
            }
            if (!next || nextPos > to)
              break;
            pos2 = next.to + start2;
            if (pos2 > from) {
              this.highlightRange(inner.cursor(), Math.max(from, next.from + start2), Math.min(to, pos2), "", innerHighlighters);
              this.startSpan(Math.min(to, pos2), cls);
            }
          }
          if (hasChild2)
            cursor.parent();
        } else if (cursor.firstChild()) {
          if (mounted)
            inheritedClass = "";
          do {
            if (cursor.to <= from)
              continue;
            if (cursor.from >= to)
              break;
            this.highlightRange(cursor, from, to, inheritedClass, highlighters);
            this.startSpan(Math.min(to, cursor.to), cls);
          } while (cursor.nextSibling());
          cursor.parent();
        }
      }
    }
    function getStyleTags(node) {
      let rule = node.type.prop(ruleNodeProp);
      while (rule && rule.context && !node.matchContext(rule.context))
        rule = rule.next;
      return rule || null;
    }
    const t = Tag.define;
    const comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
    const tags = {
      /**
      A comment.
      */
      comment,
      /**
      A line [comment](#highlight.tags.comment).
      */
      lineComment: t(comment),
      /**
      A block [comment](#highlight.tags.comment).
      */
      blockComment: t(comment),
      /**
      A documentation [comment](#highlight.tags.comment).
      */
      docComment: t(comment),
      /**
      Any kind of identifier.
      */
      name,
      /**
      The [name](#highlight.tags.name) of a variable.
      */
      variableName: t(name),
      /**
      A type [name](#highlight.tags.name).
      */
      typeName,
      /**
      A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
      */
      tagName: t(typeName),
      /**
      A property or field [name](#highlight.tags.name).
      */
      propertyName,
      /**
      An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
      */
      attributeName: t(propertyName),
      /**
      The [name](#highlight.tags.name) of a class.
      */
      className: t(name),
      /**
      A label [name](#highlight.tags.name).
      */
      labelName: t(name),
      /**
      A namespace [name](#highlight.tags.name).
      */
      namespace: t(name),
      /**
      The [name](#highlight.tags.name) of a macro.
      */
      macroName: t(name),
      /**
      A literal value.
      */
      literal,
      /**
      A string [literal](#highlight.tags.literal).
      */
      string,
      /**
      A documentation [string](#highlight.tags.string).
      */
      docString: t(string),
      /**
      A character literal (subtag of [string](#highlight.tags.string)).
      */
      character: t(string),
      /**
      An attribute value (subtag of [string](#highlight.tags.string)).
      */
      attributeValue: t(string),
      /**
      A number [literal](#highlight.tags.literal).
      */
      number,
      /**
      An integer [number](#highlight.tags.number) literal.
      */
      integer: t(number),
      /**
      A floating-point [number](#highlight.tags.number) literal.
      */
      float: t(number),
      /**
      A boolean [literal](#highlight.tags.literal).
      */
      bool: t(literal),
      /**
      Regular expression [literal](#highlight.tags.literal).
      */
      regexp: t(literal),
      /**
      An escape [literal](#highlight.tags.literal), for example a
      backslash escape in a string.
      */
      escape: t(literal),
      /**
      A color [literal](#highlight.tags.literal).
      */
      color: t(literal),
      /**
      A URL [literal](#highlight.tags.literal).
      */
      url: t(literal),
      /**
      A language keyword.
      */
      keyword,
      /**
      The [keyword](#highlight.tags.keyword) for the self or this
      object.
      */
      self: t(keyword),
      /**
      The [keyword](#highlight.tags.keyword) for null.
      */
      null: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) denoting some atomic value.
      */
      atom: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that represents a unit.
      */
      unit: t(keyword),
      /**
      A modifier [keyword](#highlight.tags.keyword).
      */
      modifier: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that acts as an operator.
      */
      operatorKeyword: t(keyword),
      /**
      A control-flow related [keyword](#highlight.tags.keyword).
      */
      controlKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) that defines something.
      */
      definitionKeyword: t(keyword),
      /**
      A [keyword](#highlight.tags.keyword) related to defining or
      interfacing with modules.
      */
      moduleKeyword: t(keyword),
      /**
      An operator.
      */
      operator,
      /**
      An [operator](#highlight.tags.operator) that dereferences something.
      */
      derefOperator: t(operator),
      /**
      Arithmetic-related [operator](#highlight.tags.operator).
      */
      arithmeticOperator: t(operator),
      /**
      Logical [operator](#highlight.tags.operator).
      */
      logicOperator: t(operator),
      /**
      Bit [operator](#highlight.tags.operator).
      */
      bitwiseOperator: t(operator),
      /**
      Comparison [operator](#highlight.tags.operator).
      */
      compareOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that updates its operand.
      */
      updateOperator: t(operator),
      /**
      [Operator](#highlight.tags.operator) that defines something.
      */
      definitionOperator: t(operator),
      /**
      Type-related [operator](#highlight.tags.operator).
      */
      typeOperator: t(operator),
      /**
      Control-flow [operator](#highlight.tags.operator).
      */
      controlOperator: t(operator),
      /**
      Program or markup punctuation.
      */
      punctuation,
      /**
      [Punctuation](#highlight.tags.punctuation) that separates
      things.
      */
      separator: t(punctuation),
      /**
      Bracket-style [punctuation](#highlight.tags.punctuation).
      */
      bracket,
      /**
      Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
      tokens).
      */
      angleBracket: t(bracket),
      /**
      Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
      tokens).
      */
      squareBracket: t(bracket),
      /**
      Parentheses (usually `(` and `)` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      paren: t(bracket),
      /**
      Braces (usually `{` and `}` tokens). Subtag of
      [bracket](#highlight.tags.bracket).
      */
      brace: t(bracket),
      /**
      Content, for example plain text in XML or markup documents.
      */
      content,
      /**
      [Content](#highlight.tags.content) that represents a heading.
      */
      heading,
      /**
      A level 1 [heading](#highlight.tags.heading).
      */
      heading1: t(heading),
      /**
      A level 2 [heading](#highlight.tags.heading).
      */
      heading2: t(heading),
      /**
      A level 3 [heading](#highlight.tags.heading).
      */
      heading3: t(heading),
      /**
      A level 4 [heading](#highlight.tags.heading).
      */
      heading4: t(heading),
      /**
      A level 5 [heading](#highlight.tags.heading).
      */
      heading5: t(heading),
      /**
      A level 6 [heading](#highlight.tags.heading).
      */
      heading6: t(heading),
      /**
      A prose [content](#highlight.tags.content) separator (such as a horizontal rule).
      */
      contentSeparator: t(content),
      /**
      [Content](#highlight.tags.content) that represents a list.
      */
      list: t(content),
      /**
      [Content](#highlight.tags.content) that represents a quote.
      */
      quote: t(content),
      /**
      [Content](#highlight.tags.content) that is emphasized.
      */
      emphasis: t(content),
      /**
      [Content](#highlight.tags.content) that is styled strong.
      */
      strong: t(content),
      /**
      [Content](#highlight.tags.content) that is part of a link.
      */
      link: t(content),
      /**
      [Content](#highlight.tags.content) that is styled as code or
      monospace.
      */
      monospace: t(content),
      /**
      [Content](#highlight.tags.content) that has a strike-through
      style.
      */
      strikethrough: t(content),
      /**
      Inserted text in a change-tracking format.
      */
      inserted: t(),
      /**
      Deleted text.
      */
      deleted: t(),
      /**
      Changed text.
      */
      changed: t(),
      /**
      An invalid or unsyntactic element.
      */
      invalid: t(),
      /**
      Metadata or meta-instruction.
      */
      meta,
      /**
      [Metadata](#highlight.tags.meta) that applies to the entire
      document.
      */
      documentMeta: t(meta),
      /**
      [Metadata](#highlight.tags.meta) that annotates or adds
      attributes to a given syntactic element.
      */
      annotation: t(meta),
      /**
      Processing instruction or preprocessor directive. Subtag of
      [meta](#highlight.tags.meta).
      */
      processingInstruction: t(meta),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that a
      given element is being defined. Expected to be used with the
      various [name](#highlight.tags.name) tags.
      */
      definition: Tag.defineModifier("definition"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates that
      something is constant. Mostly expected to be used with
      [variable names](#highlight.tags.variableName).
      */
      constant: Tag.defineModifier("constant"),
      /**
      [Modifier](#highlight.Tag^defineModifier) used to indicate that
      a [variable](#highlight.tags.variableName) or [property
      name](#highlight.tags.propertyName) is being called or defined
      as a function.
      */
      function: Tag.defineModifier("function"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that can be applied to
      [names](#highlight.tags.name) to indicate that they belong to
      the language's standard environment.
      */
      standard: Tag.defineModifier("standard"),
      /**
      [Modifier](#highlight.Tag^defineModifier) that indicates a given
      [names](#highlight.tags.name) is local to some scope.
      */
      local: Tag.defineModifier("local"),
      /**
      A generic variant [modifier](#highlight.Tag^defineModifier) that
      can be used to tag language-specific alternative variants of
      some common tag. It is recommended for themes to define special
      forms of at least the [string](#highlight.tags.string) and
      [variable name](#highlight.tags.variableName) tags, since those
      come up a lot.
      */
      special: Tag.defineModifier("special")
    };
    for (let name2 in tags) {
      let val = tags[name2];
      if (val instanceof Tag)
        val.name = name2;
    }
    tagHighlighter([
      { tag: tags.link, class: "tok-link" },
      { tag: tags.heading, class: "tok-heading" },
      { tag: tags.emphasis, class: "tok-emphasis" },
      { tag: tags.strong, class: "tok-strong" },
      { tag: tags.keyword, class: "tok-keyword" },
      { tag: tags.atom, class: "tok-atom" },
      { tag: tags.bool, class: "tok-bool" },
      { tag: tags.url, class: "tok-url" },
      { tag: tags.labelName, class: "tok-labelName" },
      { tag: tags.inserted, class: "tok-inserted" },
      { tag: tags.deleted, class: "tok-deleted" },
      { tag: tags.literal, class: "tok-literal" },
      { tag: tags.string, class: "tok-string" },
      { tag: tags.number, class: "tok-number" },
      { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
      { tag: tags.variableName, class: "tok-variableName" },
      { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
      { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
      { tag: tags.special(tags.variableName), class: "tok-variableName2" },
      { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
      { tag: tags.typeName, class: "tok-typeName" },
      { tag: tags.namespace, class: "tok-namespace" },
      { tag: tags.className, class: "tok-className" },
      { tag: tags.macroName, class: "tok-macroName" },
      { tag: tags.propertyName, class: "tok-propertyName" },
      { tag: tags.operator, class: "tok-operator" },
      { tag: tags.comment, class: "tok-comment" },
      { tag: tags.meta, class: "tok-meta" },
      { tag: tags.invalid, class: "tok-invalid" },
      { tag: tags.punctuation, class: "tok-punctuation" }
    ]);
    var _a;
    const languageDataProp = /* @__PURE__ */ new NodeProp();
    function defineLanguageFacet(baseData) {
      return Facet.define({
        combine: baseData ? (values) => values.concat(baseData) : void 0
      });
    }
    const sublanguageProp = /* @__PURE__ */ new NodeProp();
    class Language {
      /**
      Construct a language object. If you need to invoke this
      directly, first define a data facet with
      [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
      configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
      to the language's outer syntax node.
      */
      constructor(data, parser2, extraExtensions = [], name2 = "") {
        this.data = data;
        this.name = name2;
        if (!EditorState.prototype.hasOwnProperty("tree"))
          Object.defineProperty(EditorState.prototype, "tree", { get() {
            return syntaxTree(this);
          } });
        this.parser = parser2;
        this.extension = [
          language$1.of(this),
          EditorState.languageData.of((state, pos2, side) => {
            let top2 = topNodeAt(state, pos2, side), data2 = top2.type.prop(languageDataProp);
            if (!data2)
              return [];
            let base2 = state.facet(data2), sub = top2.type.prop(sublanguageProp);
            if (sub) {
              let innerNode = top2.resolve(pos2 - top2.from, side);
              for (let sublang of sub)
                if (sublang.test(innerNode, state)) {
                  let data3 = state.facet(sublang.facet);
                  return sublang.type == "replace" ? data3 : data3.concat(base2);
                }
            }
            return base2;
          })
        ].concat(extraExtensions);
      }
      /**
      Query whether this language is active at the given position.
      */
      isActiveAt(state, pos2, side = -1) {
        return topNodeAt(state, pos2, side).type.prop(languageDataProp) == this.data;
      }
      /**
      Find the document regions that were parsed using this language.
      The returned regions will _include_ any nested languages rooted
      in this language, when those exist.
      */
      findRegions(state) {
        let lang = state.facet(language$1);
        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
          return [{ from: 0, to: state.doc.length }];
        if (!lang || !lang.allowsNesting)
          return [];
        let result = [];
        let explore = (tree, from) => {
          if (tree.prop(languageDataProp) == this.data) {
            result.push({ from, to: from + tree.length });
            return;
          }
          let mount = tree.prop(NodeProp.mounted);
          if (mount) {
            if (mount.tree.prop(languageDataProp) == this.data) {
              if (mount.overlay)
                for (let r2 of mount.overlay)
                  result.push({ from: r2.from + from, to: r2.to + from });
              else
                result.push({ from, to: from + tree.length });
              return;
            } else if (mount.overlay) {
              let size = result.length;
              explore(mount.tree, mount.overlay[0].from + from);
              if (result.length > size)
                return;
            }
          }
          for (let i2 = 0; i2 < tree.children.length; i2++) {
            let ch3 = tree.children[i2];
            if (ch3 instanceof Tree)
              explore(ch3, tree.positions[i2] + from);
          }
        };
        explore(syntaxTree(state), 0);
        return result;
      }
      /**
      Indicates whether this language allows nested languages. The
      default implementation returns true.
      */
      get allowsNesting() {
        return true;
      }
    }
    Language.setState = /* @__PURE__ */ StateEffect.define();
    function topNodeAt(state, pos2, side) {
      let topLang = state.facet(language$1), tree = syntaxTree(state).topNode;
      if (!topLang || topLang.allowsNesting) {
        for (let node = tree; node; node = node.enter(pos2, side, IterMode.ExcludeBuffers))
          if (node.type.isTop)
            tree = node;
      }
      return tree;
    }
    function syntaxTree(state) {
      let field = state.field(Language.state, false);
      return field ? field.tree : Tree.empty;
    }
    class DocInput {
      /**
      Create an input object for the given document.
      */
      constructor(doc2) {
        this.doc = doc2;
        this.cursorPos = 0;
        this.string = "";
        this.cursor = doc2.iter();
      }
      get length() {
        return this.doc.length;
      }
      syncTo(pos2) {
        this.string = this.cursor.next(pos2 - this.cursorPos).value;
        this.cursorPos = pos2 + this.string.length;
        return this.cursorPos - this.string.length;
      }
      chunk(pos2) {
        this.syncTo(pos2);
        return this.string;
      }
      get lineChunks() {
        return true;
      }
      read(from, to) {
        let stringStart = this.cursorPos - this.string.length;
        if (from < stringStart || to >= this.cursorPos)
          return this.doc.sliceString(from, to);
        else
          return this.string.slice(from - stringStart, to - stringStart);
      }
    }
    let currentContext = null;
    class ParseContext {
      constructor(parser2, state, fragments = [], tree, treeLen, viewport2, skipped, scheduleOn) {
        this.parser = parser2;
        this.state = state;
        this.fragments = fragments;
        this.tree = tree;
        this.treeLen = treeLen;
        this.viewport = viewport2;
        this.skipped = skipped;
        this.scheduleOn = scheduleOn;
        this.parse = null;
        this.tempSkipped = [];
      }
      /**
      @internal
      */
      static create(parser2, state, viewport2) {
        return new ParseContext(parser2, state, [], Tree.empty, 0, viewport2, [], null);
      }
      startParse() {
        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
      }
      /**
      @internal
      */
      work(until, upto) {
        if (upto != null && upto >= this.state.doc.length)
          upto = void 0;
        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
          this.takeTree();
          return true;
        }
        return this.withContext(() => {
          var _a2;
          if (typeof until == "number") {
            let endTime = Date.now() + until;
            until = () => Date.now() > endTime;
          }
          if (!this.parse)
            this.parse = this.startParse();
          if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) && upto < this.state.doc.length)
            this.parse.stopAt(upto);
          for (; ; ) {
            let done = this.parse.advance();
            if (done) {
              this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
              this.treeLen = (_a2 = this.parse.stoppedAt) !== null && _a2 !== void 0 ? _a2 : this.state.doc.length;
              this.tree = done;
              this.parse = null;
              if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                this.parse = this.startParse();
              else
                return true;
            }
            if (until())
              return false;
          }
        });
      }
      /**
      @internal
      */
      takeTree() {
        let pos2, tree;
        if (this.parse && (pos2 = this.parse.parsedPos) >= this.treeLen) {
          if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos2)
            this.parse.stopAt(pos2);
          this.withContext(() => {
            while (!(tree = this.parse.advance())) {
            }
          });
          this.treeLen = pos2;
          this.tree = tree;
          this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
          this.parse = null;
        }
      }
      withContext(f2) {
        let prev = currentContext;
        currentContext = this;
        try {
          return f2();
        } finally {
          currentContext = prev;
        }
      }
      withoutTempSkipped(fragments) {
        for (let r2; r2 = this.tempSkipped.pop(); )
          fragments = cutFragments(fragments, r2.from, r2.to);
        return fragments;
      }
      /**
      @internal
      */
      changes(changes, newState) {
        let { fragments, tree, treeLen, viewport: viewport2, skipped } = this;
        this.takeTree();
        if (!changes.empty) {
          let ranges = [];
          changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
          fragments = TreeFragment.applyChanges(fragments, ranges);
          tree = Tree.empty;
          treeLen = 0;
          viewport2 = { from: changes.mapPos(viewport2.from, -1), to: changes.mapPos(viewport2.to, 1) };
          if (this.skipped.length) {
            skipped = [];
            for (let r2 of this.skipped) {
              let from = changes.mapPos(r2.from, 1), to = changes.mapPos(r2.to, -1);
              if (from < to)
                skipped.push({ from, to });
            }
          }
        }
        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport2, skipped, this.scheduleOn);
      }
      /**
      @internal
      */
      updateViewport(viewport2) {
        if (this.viewport.from == viewport2.from && this.viewport.to == viewport2.to)
          return false;
        this.viewport = viewport2;
        let startLen = this.skipped.length;
        for (let i2 = 0; i2 < this.skipped.length; i2++) {
          let { from, to } = this.skipped[i2];
          if (from < viewport2.to && to > viewport2.from) {
            this.fragments = cutFragments(this.fragments, from, to);
            this.skipped.splice(i2--, 1);
          }
        }
        if (this.skipped.length >= startLen)
          return false;
        this.reset();
        return true;
      }
      /**
      @internal
      */
      reset() {
        if (this.parse) {
          this.takeTree();
          this.parse = null;
        }
      }
      /**
      Notify the parse scheduler that the given region was skipped
      because it wasn't in view, and the parse should be restarted
      when it comes into view.
      */
      skipUntilInView(from, to) {
        this.skipped.push({ from, to });
      }
      /**
      Returns a parser intended to be used as placeholder when
      asynchronously loading a nested parser. It'll skip its input and
      mark it as not-really-parsed, so that the next update will parse
      it again.
      
      When `until` is given, a reparse will be scheduled when that
      promise resolves.
      */
      static getSkippingParser(until) {
        return new class extends Parser {
          createParse(input, fragments, ranges) {
            let from = ranges[0].from, to = ranges[ranges.length - 1].to;
            let parser2 = {
              parsedPos: from,
              advance() {
                let cx = currentContext;
                if (cx) {
                  for (let r2 of ranges)
                    cx.tempSkipped.push(r2);
                  if (until)
                    cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                }
                this.parsedPos = to;
                return new Tree(NodeType.none, [], [], to - from);
              },
              stoppedAt: null,
              stopAt() {
              }
            };
            return parser2;
          }
        }();
      }
      /**
      @internal
      */
      isDone(upto) {
        upto = Math.min(upto, this.state.doc.length);
        let frags = this.fragments;
        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
      }
      /**
      Get the context for the current parse, or `null` if no editor
      parse is in progress.
      */
      static get() {
        return currentContext;
      }
    }
    function cutFragments(fragments, from, to) {
      return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
      constructor(context) {
        this.context = context;
        this.tree = context.tree;
      }
      apply(tr) {
        if (!tr.docChanged && this.tree == this.context.tree)
          return this;
        let newCx = this.context.changes(tr.changes, tr.state);
        let upto = this.context.treeLen == tr.startState.doc.length ? void 0 : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
        if (!newCx.work(20, upto))
          newCx.takeTree();
        return new LanguageState(newCx);
      }
      static init(state) {
        let vpTo = Math.min(3e3, state.doc.length);
        let parseState2 = ParseContext.create(state.facet(language$1).parser, state, { from: 0, to: vpTo });
        if (!parseState2.work(20, vpTo))
          parseState2.takeTree();
        return new LanguageState(parseState2);
      }
    }
    Language.state = /* @__PURE__ */ StateField.define({
      create: LanguageState.init,
      update(value, tr) {
        for (let e2 of tr.effects)
          if (e2.is(Language.setState))
            return e2.value;
        if (tr.startState.facet(language$1) != tr.state.facet(language$1))
          return LanguageState.init(tr.state);
        return value.apply(tr);
      }
    });
    let requestIdle = (callback) => {
      let timeout = setTimeout(
        () => callback(),
        500
        /* Work.MaxPause */
      );
      return () => clearTimeout(timeout);
    };
    if (typeof requestIdleCallback != "undefined")
      requestIdle = (callback) => {
        let idle = -1, timeout = setTimeout(
          () => {
            idle = requestIdleCallback(callback, {
              timeout: 500 - 100
              /* Work.MinPause */
            });
          },
          100
          /* Work.MinPause */
        );
        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
      };
    const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? () => navigator.scheduling.isInputPending() : null;
    const parseWorker = /* @__PURE__ */ ViewPlugin.fromClass(class ParseWorker {
      constructor(view) {
        this.view = view;
        this.working = null;
        this.workScheduled = 0;
        this.chunkEnd = -1;
        this.chunkBudget = -1;
        this.work = this.work.bind(this);
        this.scheduleWork();
      }
      update(update) {
        let cx = this.view.state.field(Language.state).context;
        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
          this.scheduleWork();
        if (update.docChanged || update.selectionSet) {
          if (this.view.hasFocus)
            this.chunkBudget += 50;
          this.scheduleWork();
        }
        this.checkAsyncSchedule(cx);
      }
      scheduleWork() {
        if (this.working)
          return;
        let { state } = this.view, field = state.field(Language.state);
        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
          this.working = requestIdle(this.work);
      }
      work(deadline) {
        this.working = null;
        let now = Date.now();
        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
          this.chunkEnd = now + 3e4;
          this.chunkBudget = 3e3;
        }
        if (this.chunkBudget <= 0)
          return;
        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
        if (field.tree == field.context.tree && field.context.isDone(
          vpTo + 1e5
          /* Work.MaxParseAhead */
        ))
          return;
        let endTime = Date.now() + Math.min(this.chunkBudget, 100, deadline && !isInputPending ? Math.max(25, deadline.timeRemaining() - 5) : 1e9);
        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1e3;
        let done = field.context.work(() => {
          return isInputPending && isInputPending() || Date.now() > endTime;
        }, vpTo + (viewportFirst ? 0 : 1e5));
        this.chunkBudget -= Date.now() - now;
        if (done || this.chunkBudget <= 0) {
          field.context.takeTree();
          this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
        }
        if (this.chunkBudget > 0 && !(done && !viewportFirst))
          this.scheduleWork();
        this.checkAsyncSchedule(field.context);
      }
      checkAsyncSchedule(cx) {
        if (cx.scheduleOn) {
          this.workScheduled++;
          cx.scheduleOn.then(() => this.scheduleWork()).catch((err2) => logException(this.view.state, err2)).then(() => this.workScheduled--);
          cx.scheduleOn = null;
        }
      }
      destroy() {
        if (this.working)
          this.working();
      }
      isWorking() {
        return !!(this.working || this.workScheduled > 0);
      }
    }, {
      eventHandlers: { focus() {
        this.scheduleWork();
      } }
    });
    const language$1 = /* @__PURE__ */ Facet.define({
      combine(languages) {
        return languages.length ? languages[0] : null;
      },
      enables: (language2) => [
        Language.state,
        parseWorker,
        EditorView.contentAttributes.compute([language2], (state) => {
          let lang = state.facet(language2);
          return lang && lang.name ? { "data-language": lang.name } : {};
        })
      ]
    });
    const indentService = /* @__PURE__ */ Facet.define();
    const indentUnit = /* @__PURE__ */ Facet.define({
      combine: (values) => {
        if (!values.length)
          return "  ";
        let unit = values[0];
        if (!unit || /\S/.test(unit) || Array.from(unit).some((e2) => e2 != unit[0]))
          throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
        return unit;
      }
    });
    function getIndentUnit(state) {
      let unit = state.facet(indentUnit);
      return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
    }
    function indentString(state, cols) {
      let result = "", ts = state.tabSize, ch3 = state.facet(indentUnit)[0];
      if (ch3 == "	") {
        while (cols >= ts) {
          result += "	";
          cols -= ts;
        }
        ch3 = " ";
      }
      for (let i2 = 0; i2 < cols; i2++)
        result += ch3;
      return result;
    }
    function getIndentation(context, pos2) {
      if (context instanceof EditorState)
        context = new IndentContext(context);
      for (let service of context.state.facet(indentService)) {
        let result = service(context, pos2);
        if (result !== void 0)
          return result;
      }
      let tree = syntaxTree(context.state);
      return tree.length >= pos2 ? syntaxIndentation(context, tree, pos2) : null;
    }
    class IndentContext {
      /**
      Create an indent context.
      */
      constructor(state, options = {}) {
        this.state = state;
        this.options = options;
        this.unit = getIndentUnit(state);
      }
      /**
      Get a description of the line at the given position, taking
      [simulated line
      breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      into account. If there is such a break at `pos`, the `bias`
      argument determines whether the part of the line line before or
      after the break is used.
      */
      lineAt(pos2, bias = 1) {
        let line2 = this.state.doc.lineAt(pos2);
        let { simulateBreak, simulateDoubleBreak } = this.options;
        if (simulateBreak != null && simulateBreak >= line2.from && simulateBreak <= line2.to) {
          if (simulateDoubleBreak && simulateBreak == pos2)
            return { text: "", from: pos2 };
          else if (bias < 0 ? simulateBreak < pos2 : simulateBreak <= pos2)
            return { text: line2.text.slice(simulateBreak - line2.from), from: simulateBreak };
          else
            return { text: line2.text.slice(0, simulateBreak - line2.from), from: line2.from };
        }
        return line2;
      }
      /**
      Get the text directly after `pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      textAfterPos(pos2, bias = 1) {
        if (this.options.simulateDoubleBreak && pos2 == this.options.simulateBreak)
          return "";
        let { text: text2, from } = this.lineAt(pos2, bias);
        return text2.slice(pos2 - from, Math.min(text2.length, pos2 + 100 - from));
      }
      /**
      Find the column for the given position.
      */
      column(pos2, bias = 1) {
        let { text: text2, from } = this.lineAt(pos2, bias);
        let result = this.countColumn(text2, pos2 - from);
        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
        if (override > -1)
          result += override - this.countColumn(text2, text2.search(/\S|$/));
        return result;
      }
      /**
      Find the column position (taking tabs into account) of the given
      position in the given string.
      */
      countColumn(line2, pos2 = line2.length) {
        return countColumn(line2, this.state.tabSize, pos2);
      }
      /**
      Find the indentation column of the line at the given point.
      */
      lineIndent(pos2, bias = 1) {
        let { text: text2, from } = this.lineAt(pos2, bias);
        let override = this.options.overrideIndentation;
        if (override) {
          let overriden = override(from);
          if (overriden > -1)
            return overriden;
        }
        return this.countColumn(text2, text2.search(/\S|$/));
      }
      /**
      Returns the [simulated line
      break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
      for this context, if any.
      */
      get simulatedBreak() {
        return this.options.simulateBreak || null;
      }
    }
    const indentNodeProp = /* @__PURE__ */ new NodeProp();
    function syntaxIndentation(cx, ast, pos2) {
      let stack2 = ast.resolveStack(pos2);
      let inner = stack2.node.enterUnfinishedNodesBefore(pos2);
      if (inner != stack2.node) {
        let add2 = [];
        for (let cur2 = inner; cur2 != stack2.node; cur2 = cur2.parent)
          add2.push(cur2);
        for (let i2 = add2.length - 1; i2 >= 0; i2--)
          stack2 = { node: add2[i2], next: stack2 };
      }
      return indentFor(stack2, cx, pos2);
    }
    function indentFor(stack2, cx, pos2) {
      for (let cur2 = stack2; cur2; cur2 = cur2.next) {
        let strategy = indentStrategy(cur2.node);
        if (strategy)
          return strategy(TreeIndentContext.create(cx, pos2, cur2));
      }
      return 0;
    }
    function ignoreClosed(cx) {
      return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
    }
    function indentStrategy(tree) {
      let strategy = tree.type.prop(indentNodeProp);
      if (strategy)
        return strategy;
      let first = tree.firstChild, close;
      if (first && (close = first.type.prop(NodeProp.closedBy))) {
        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
        return (cx) => delimitedStrategy(cx, true, 1, void 0, closed && !ignoreClosed(cx) ? last.from : void 0);
      }
      return tree.parent == null ? topIndent : null;
    }
    function topIndent() {
      return 0;
    }
    class TreeIndentContext extends IndentContext {
      constructor(base2, pos2, context) {
        super(base2.state, base2.options);
        this.base = base2;
        this.pos = pos2;
        this.context = context;
      }
      /**
      The syntax tree node to which the indentation strategy
      applies.
      */
      get node() {
        return this.context.node;
      }
      /**
      @internal
      */
      static create(base2, pos2, context) {
        return new TreeIndentContext(base2, pos2, context);
      }
      /**
      Get the text directly after `this.pos`, either the entire line
      or the next 100 characters, whichever is shorter.
      */
      get textAfter() {
        return this.textAfterPos(this.pos);
      }
      /**
      Get the indentation at the reference line for `this.node`, which
      is the line on which it starts, unless there is a node that is
      _not_ a parent of this node covering the start of that line. If
      so, the line at the start of that node is tried, again skipping
      on if it is covered by another such node.
      */
      get baseIndent() {
        return this.baseIndentFor(this.node);
      }
      /**
      Get the indentation for the reference line of the given node
      (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
      */
      baseIndentFor(node) {
        let line2 = this.state.doc.lineAt(node.from);
        for (; ; ) {
          let atBreak = node.resolve(line2.from);
          while (atBreak.parent && atBreak.parent.from == atBreak.from)
            atBreak = atBreak.parent;
          if (isParent(atBreak, node))
            break;
          line2 = this.state.doc.lineAt(atBreak.from);
        }
        return this.lineIndent(line2.from);
      }
      /**
      Continue looking for indentations in the node's parent nodes,
      and return the result of that.
      */
      continue() {
        return indentFor(this.context.next, this.base, this.pos);
      }
    }
    function isParent(parent, of) {
      for (let cur2 = of; cur2; cur2 = cur2.parent)
        if (parent == cur2)
          return true;
      return false;
    }
    function bracketedAligned(context) {
      let tree = context.node;
      let openToken = tree.childAfter(tree.from), last = tree.lastChild;
      if (!openToken)
        return null;
      let sim = context.options.simulateBreak;
      let openLine = context.state.doc.lineAt(openToken.from);
      let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
      for (let pos2 = openToken.to; ; ) {
        let next = tree.childAfter(pos2);
        if (!next || next == last)
          return null;
        if (!next.type.isSkipped) {
          if (next.from >= lineEnd)
            return null;
          let space = /^ */.exec(openLine.text.slice(openToken.to - openLine.from))[0].length;
          return { from: openToken.from, to: openToken.to + space };
        }
        pos2 = next.to;
      }
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
      let after = context.textAfter, space = after.match(/^\s*/)[0].length;
      let closed = closedAt == context.pos + space;
      let aligned = bracketedAligned(context);
      if (aligned)
        return closed ? context.column(aligned.from) : context.column(aligned.to);
      return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    class HighlightStyle {
      constructor(specs, options) {
        this.specs = specs;
        let modSpec;
        function def(spec) {
          let cls = StyleModule.newName();
          (modSpec || (modSpec = /* @__PURE__ */ Object.create(null)))["." + cls] = spec;
          return cls;
        }
        const all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : void 0;
        const scopeOpt = options.scope;
        this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data : scopeOpt ? (type) => type == scopeOpt : void 0;
        this.style = tagHighlighter(specs.map((style2) => ({
          tag: style2.tag,
          class: style2.class || def(Object.assign({}, style2, { tag: null }))
        })), {
          all
        }).style;
        this.module = modSpec ? new StyleModule(modSpec) : null;
        this.themeType = options.themeType;
      }
      /**
      Create a highlighter style that associates the given styles to
      the given tags. The specs must be objects that hold a style tag
      or array of tags in their `tag` property, and either a single
      `class` property providing a static CSS class (for highlighter
      that rely on external styling), or a
      [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
      set of CSS properties (which define the styling for those tags).
      
      The CSS rules created for a highlighter will be emitted in the
      order of the spec's properties. That means that for elements that
      have multiple tags associated with them, styles defined further
      down in the list will have a higher CSS precedence than styles
      defined earlier.
      */
      static define(specs, options) {
        return new HighlightStyle(specs, options || {});
      }
    }
    const highlighterFacet = /* @__PURE__ */ Facet.define();
    const fallbackHighlighter = /* @__PURE__ */ Facet.define({
      combine(values) {
        return values.length ? [values[0]] : null;
      }
    });
    function getHighlighters(state) {
      let main2 = state.facet(highlighterFacet);
      return main2.length ? main2 : state.facet(fallbackHighlighter);
    }
    function syntaxHighlighting(highlighter, options) {
      let ext = [treeHighlighter], themeType;
      if (highlighter instanceof HighlightStyle) {
        if (highlighter.module)
          ext.push(EditorView.styleModule.of(highlighter.module));
        themeType = highlighter.themeType;
      }
      if (options === null || options === void 0 ? void 0 : options.fallback)
        ext.push(fallbackHighlighter.of(highlighter));
      else if (themeType)
        ext.push(highlighterFacet.computeN([EditorView.darkTheme], (state) => {
          return state.facet(EditorView.darkTheme) == (themeType == "dark") ? [highlighter] : [];
        }));
      else
        ext.push(highlighterFacet.of(highlighter));
      return ext;
    }
    class TreeHighlighter {
      constructor(view) {
        this.markCache = /* @__PURE__ */ Object.create(null);
        this.tree = syntaxTree(view.state);
        this.decorations = this.buildDeco(view, getHighlighters(view.state));
        this.decoratedTo = view.viewport.to;
      }
      update(update) {
        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);
        let styleChange = highlighters != getHighlighters(update.startState);
        let { viewport: viewport2 } = update.view, decoratedToMapped = update.changes.mapPos(this.decoratedTo, 1);
        if (tree.length < viewport2.to && !styleChange && tree.type == this.tree.type && decoratedToMapped >= viewport2.to) {
          this.decorations = this.decorations.map(update.changes);
          this.decoratedTo = decoratedToMapped;
        } else if (tree != this.tree || update.viewportChanged || styleChange) {
          this.tree = tree;
          this.decorations = this.buildDeco(update.view, highlighters);
          this.decoratedTo = viewport2.to;
        }
      }
      buildDeco(view, highlighters) {
        if (!highlighters || !this.tree.length)
          return Decoration.none;
        let builder = new RangeSetBuilder();
        for (let { from, to } of view.visibleRanges) {
          highlightTree(this.tree, highlighters, (from2, to2, style2) => {
            builder.add(from2, to2, this.markCache[style2] || (this.markCache[style2] = Decoration.mark({ class: style2 })));
          }, from, to);
        }
        return builder.finish();
      }
    }
    const treeHighlighter = /* @__PURE__ */ Prec.high(/* @__PURE__ */ ViewPlugin.fromClass(TreeHighlighter, {
      decorations: (v2) => v2.decorations
    }));
    const defaultHighlightStyle = /* @__PURE__ */ HighlightStyle.define([
      {
        tag: tags.meta,
        color: "#404740"
      },
      {
        tag: tags.link,
        textDecoration: "underline"
      },
      {
        tag: tags.heading,
        textDecoration: "underline",
        fontWeight: "bold"
      },
      {
        tag: tags.emphasis,
        fontStyle: "italic"
      },
      {
        tag: tags.strong,
        fontWeight: "bold"
      },
      {
        tag: tags.strikethrough,
        textDecoration: "line-through"
      },
      {
        tag: tags.keyword,
        color: "#708"
      },
      {
        tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
        color: "#219"
      },
      {
        tag: [tags.literal, tags.inserted],
        color: "#164"
      },
      {
        tag: [tags.string, tags.deleted],
        color: "#a11"
      },
      {
        tag: [tags.regexp, tags.escape, /* @__PURE__ */ tags.special(tags.string)],
        color: "#e40"
      },
      {
        tag: /* @__PURE__ */ tags.definition(tags.variableName),
        color: "#00f"
      },
      {
        tag: /* @__PURE__ */ tags.local(tags.variableName),
        color: "#30a"
      },
      {
        tag: [tags.typeName, tags.namespace],
        color: "#085"
      },
      {
        tag: tags.className,
        color: "#167"
      },
      {
        tag: [/* @__PURE__ */ tags.special(tags.variableName), tags.macroName],
        color: "#256"
      },
      {
        tag: /* @__PURE__ */ tags.definition(tags.propertyName),
        color: "#00c"
      },
      {
        tag: tags.comment,
        color: "#940"
      },
      {
        tag: tags.invalid,
        color: "#f00"
      }
    ]);
    const baseTheme$2 = /* @__PURE__ */ EditorView.baseTheme({
      "&.cm-focused .cm-matchingBracket": { backgroundColor: "#328c8252" },
      "&.cm-focused .cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
    });
    const DefaultScanDist = 1e4, DefaultBrackets = "()[]{}";
    const bracketMatchingConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        return combineConfig(configs, {
          afterCursor: true,
          brackets: DefaultBrackets,
          maxScanDistance: DefaultScanDist,
          renderMatch: defaultRenderMatch
        });
      }
    });
    const matchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /* @__PURE__ */ Decoration.mark({ class: "cm-nonmatchingBracket" });
    function defaultRenderMatch(match) {
      let decorations2 = [];
      let mark = match.matched ? matchingMark : nonmatchingMark;
      decorations2.push(mark.range(match.start.from, match.start.to));
      if (match.end)
        decorations2.push(mark.range(match.end.from, match.end.to));
      return decorations2;
    }
    const bracketMatchingState = /* @__PURE__ */ StateField.define({
      create() {
        return Decoration.none;
      },
      update(deco, tr) {
        if (!tr.docChanged && !tr.selection)
          return deco;
        let decorations2 = [];
        let config2 = tr.state.facet(bracketMatchingConfig);
        for (let range of tr.state.selection.ranges) {
          if (!range.empty)
            continue;
          let match = matchBrackets(tr.state, range.head, -1, config2) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config2) || config2.afterCursor && (matchBrackets(tr.state, range.head, 1, config2) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config2));
          if (match)
            decorations2 = decorations2.concat(config2.renderMatch(match, tr.state));
        }
        return Decoration.set(decorations2, true);
      },
      provide: (f2) => EditorView.decorations.from(f2)
    });
    const bracketMatchingUnique = [
      bracketMatchingState,
      baseTheme$2
    ];
    function bracketMatching(config2 = {}) {
      return [bracketMatchingConfig.of(config2), bracketMatchingUnique];
    }
    const bracketMatchingHandle = /* @__PURE__ */ new NodeProp();
    function matchingNodes(node, dir, brackets) {
      let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
      if (byProp)
        return byProp;
      if (node.name.length == 1) {
        let index = brackets.indexOf(node.name);
        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
          return [brackets[index + dir]];
      }
      return null;
    }
    function findHandle(node) {
      let hasHandle = node.type.prop(bracketMatchingHandle);
      return hasHandle ? hasHandle(node.node) : node;
    }
    function matchBrackets(state, pos2, dir, config2 = {}) {
      let maxScanDistance = config2.maxScanDistance || DefaultScanDist, brackets = config2.brackets || DefaultBrackets;
      let tree = syntaxTree(state), node = tree.resolveInner(pos2, dir);
      for (let cur2 = node; cur2; cur2 = cur2.parent) {
        let matches = matchingNodes(cur2.type, dir, brackets);
        if (matches && cur2.from < cur2.to) {
          let handle = findHandle(cur2);
          if (handle && (dir > 0 ? pos2 >= handle.from && pos2 < handle.to : pos2 > handle.from && pos2 <= handle.to))
            return matchMarkedBrackets(state, pos2, dir, cur2, handle, matches, brackets);
        }
      }
      return matchPlainBrackets(state, pos2, dir, tree, node.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token2, handle, matching, brackets) {
      let parent = token2.parent, firstToken = { from: handle.from, to: handle.to };
      let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
      if (cursor && (dir < 0 ? cursor.childBefore(token2.from) : cursor.childAfter(token2.to)))
        do {
          if (dir < 0 ? cursor.to <= token2.from : cursor.from >= token2.to) {
            if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
              let endHandle = findHandle(cursor);
              return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : void 0, matched: true };
            } else if (matchingNodes(cursor.type, dir, brackets)) {
              depth++;
            } else if (matchingNodes(cursor.type, -dir, brackets)) {
              if (depth == 0) {
                let endHandle = findHandle(cursor);
                return {
                  start: firstToken,
                  end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : void 0,
                  matched: false
                };
              }
              depth--;
            }
          }
        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
      return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos2, dir, tree, tokenType, maxScanDistance, brackets) {
      let startCh = dir < 0 ? state.sliceDoc(pos2 - 1, pos2) : state.sliceDoc(pos2, pos2 + 1);
      let bracket2 = brackets.indexOf(startCh);
      if (bracket2 < 0 || bracket2 % 2 == 0 != dir > 0)
        return null;
      let startToken = { from: dir < 0 ? pos2 - 1 : pos2, to: dir > 0 ? pos2 + 1 : pos2 };
      let iter = state.doc.iterRange(pos2, dir > 0 ? state.doc.length : 0), depth = 0;
      for (let distance = 0; !iter.next().done && distance <= maxScanDistance; ) {
        let text2 = iter.value;
        if (dir < 0)
          distance += text2.length;
        let basePos = pos2 + distance * dir;
        for (let pos3 = dir > 0 ? 0 : text2.length - 1, end2 = dir > 0 ? text2.length : -1; pos3 != end2; pos3 += dir) {
          let found = brackets.indexOf(text2[pos3]);
          if (found < 0 || tree.resolveInner(basePos + pos3, 1).type != tokenType)
            continue;
          if (found % 2 == 0 == dir > 0) {
            depth++;
          } else if (depth == 1) {
            return { start: startToken, end: { from: basePos + pos3, to: basePos + pos3 + 1 }, matched: found >> 1 == bracket2 >> 1 };
          } else {
            depth--;
          }
        }
        if (dir > 0)
          distance += text2.length;
      }
      return iter.done ? { start: startToken, matched: false } : null;
    }
    function countCol(string2, end2, tabSize, startIndex = 0, startValue = 0) {
      if (end2 == null) {
        end2 = string2.search(/[^\s\u00a0]/);
        if (end2 == -1)
          end2 = string2.length;
      }
      let n2 = startValue;
      for (let i2 = startIndex; i2 < end2; i2++) {
        if (string2.charCodeAt(i2) == 9)
          n2 += tabSize - n2 % tabSize;
        else
          n2++;
      }
      return n2;
    }
    class StringStream {
      /**
      Create a stream.
      */
      constructor(string2, tabSize, indentUnit2, overrideIndent) {
        this.string = string2;
        this.tabSize = tabSize;
        this.indentUnit = indentUnit2;
        this.overrideIndent = overrideIndent;
        this.pos = 0;
        this.start = 0;
        this.lastColumnPos = 0;
        this.lastColumnValue = 0;
      }
      /**
      True if we are at the end of the line.
      */
      eol() {
        return this.pos >= this.string.length;
      }
      /**
      True if we are at the start of the line.
      */
      sol() {
        return this.pos == 0;
      }
      /**
      Get the next code unit after the current position, or undefined
      if we're at the end of the line.
      */
      peek() {
        return this.string.charAt(this.pos) || void 0;
      }
      /**
      Read the next code unit and advance `this.pos`.
      */
      next() {
        if (this.pos < this.string.length)
          return this.string.charAt(this.pos++);
      }
      /**
      Match the next character against the given string, regular
      expression, or predicate. Consume and return it if it matches.
      */
      eat(match) {
        let ch3 = this.string.charAt(this.pos);
        let ok;
        if (typeof match == "string")
          ok = ch3 == match;
        else
          ok = ch3 && (match instanceof RegExp ? match.test(ch3) : match(ch3));
        if (ok) {
          ++this.pos;
          return ch3;
        }
      }
      /**
      Continue matching characters that match the given string,
      regular expression, or predicate function. Return true if any
      characters were consumed.
      */
      eatWhile(match) {
        let start2 = this.pos;
        while (this.eat(match)) {
        }
        return this.pos > start2;
      }
      /**
      Consume whitespace ahead of `this.pos`. Return true if any was
      found.
      */
      eatSpace() {
        let start2 = this.pos;
        while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
          ++this.pos;
        return this.pos > start2;
      }
      /**
      Move to the end of the line.
      */
      skipToEnd() {
        this.pos = this.string.length;
      }
      /**
      Move to directly before the given character, if found on the
      current line.
      */
      skipTo(ch3) {
        let found = this.string.indexOf(ch3, this.pos);
        if (found > -1) {
          this.pos = found;
          return true;
        }
      }
      /**
      Move back `n` characters.
      */
      backUp(n2) {
        this.pos -= n2;
      }
      /**
      Get the column position at `this.pos`.
      */
      column() {
        if (this.lastColumnPos < this.start) {
          this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
          this.lastColumnPos = this.start;
        }
        return this.lastColumnValue;
      }
      /**
      Get the indentation column of the current line.
      */
      indentation() {
        var _a2;
        return (_a2 = this.overrideIndent) !== null && _a2 !== void 0 ? _a2 : countCol(this.string, null, this.tabSize);
      }
      /**
      Match the input against the given string or regular expression
      (which should start with a `^`). Return true or the regexp match
      if it matches.
      
      Unless `consume` is set to `false`, this will move `this.pos`
      past the matched text.
      
      When matching a string `caseInsensitive` can be set to true to
      make the match case-insensitive.
      */
      match(pattern, consume, caseInsensitive) {
        if (typeof pattern == "string") {
          let cased = (str2) => caseInsensitive ? str2.toLowerCase() : str2;
          let substr = this.string.substr(this.pos, pattern.length);
          if (cased(substr) == cased(pattern)) {
            if (consume !== false)
              this.pos += pattern.length;
            return true;
          } else
            return null;
        } else {
          let match = this.string.slice(this.pos).match(pattern);
          if (match && match.index > 0)
            return null;
          if (match && consume !== false)
            this.pos += match[0].length;
          return match;
        }
      }
      /**
      Get the current token.
      */
      current() {
        return this.string.slice(this.start, this.pos);
      }
    }
    function fullParser(spec) {
      return {
        name: spec.name || "",
        token: spec.token,
        blankLine: spec.blankLine || (() => {
        }),
        startState: spec.startState || (() => true),
        copyState: spec.copyState || defaultCopyState,
        indent: spec.indent || (() => null),
        languageData: spec.languageData || {},
        tokenTable: spec.tokenTable || noTokens
      };
    }
    function defaultCopyState(state) {
      if (typeof state != "object")
        return state;
      let newState = {};
      for (let prop in state) {
        let val = state[prop];
        newState[prop] = val instanceof Array ? val.slice() : val;
      }
      return newState;
    }
    const IndentedFrom = /* @__PURE__ */ new WeakMap();
    class StreamLanguage extends Language {
      constructor(parser2) {
        let data = defineLanguageFacet(parser2.languageData);
        let p2 = fullParser(parser2), self2;
        let impl = new class extends Parser {
          createParse(input, fragments, ranges) {
            return new Parse(self2, input, fragments, ranges);
          }
        }();
        super(data, impl, [], parser2.name);
        this.topNode = docID(data, this);
        self2 = this;
        this.streamParser = p2;
        this.stateAfter = new NodeProp({ perNode: true });
        this.tokenTable = parser2.tokenTable ? new TokenTable(p2.tokenTable) : defaultTokenTable;
      }
      /**
      Define a stream language.
      */
      static define(spec) {
        return new StreamLanguage(spec);
      }
      /**
      @internal
      */
      getIndent(cx) {
        let from = void 0;
        let { overrideIndentation } = cx.options;
        if (overrideIndentation) {
          from = IndentedFrom.get(cx.state);
          if (from != null && from < cx.pos - 1e4)
            from = void 0;
        }
        let start2 = findState(this, cx.node.tree, 0, cx.node.from, from !== null && from !== void 0 ? from : cx.pos), statePos, state;
        if (start2) {
          state = start2.state;
          statePos = start2.pos + 1;
        } else {
          state = this.streamParser.startState(cx.unit);
          statePos = 0;
        }
        if (cx.pos - statePos > 1e4)
          return null;
        while (statePos < cx.pos) {
          let line3 = cx.state.doc.lineAt(statePos), end2 = Math.min(cx.pos, line3.to);
          if (line3.length) {
            let indentation = overrideIndentation ? overrideIndentation(line3.from) : -1;
            let stream = new StringStream(line3.text, cx.state.tabSize, cx.unit, indentation < 0 ? void 0 : indentation);
            while (stream.pos < end2 - line3.from)
              readToken(this.streamParser.token, stream, state);
          } else {
            this.streamParser.blankLine(state, cx.unit);
          }
          if (end2 == cx.pos)
            break;
          statePos = line3.to + 1;
        }
        let line2 = cx.lineAt(cx.pos);
        if (overrideIndentation && from == null)
          IndentedFrom.set(cx.state, line2.from);
        return this.streamParser.indent(state, /^\s*(.*)/.exec(line2.text)[1], cx);
      }
      get allowsNesting() {
        return false;
      }
    }
    function findState(lang, tree, off, startPos, before) {
      let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
      if (state)
        return { state: lang.streamParser.copyState(state), pos: off + tree.length };
      for (let i2 = tree.children.length - 1; i2 >= 0; i2--) {
        let child = tree.children[i2], pos2 = off + tree.positions[i2];
        let found = child instanceof Tree && pos2 < before && findState(lang, child, pos2, startPos, before);
        if (found)
          return found;
      }
      return null;
    }
    function cutTree(lang, tree, from, to, inside2) {
      if (inside2 && from <= 0 && to >= tree.length)
        return tree;
      if (!inside2 && from == 0 && tree.type == lang.topNode)
        inside2 = true;
      for (let i2 = tree.children.length - 1; i2 >= 0; i2--) {
        let pos2 = tree.positions[i2], child = tree.children[i2], inner;
        if (pos2 < to && child instanceof Tree) {
          if (!(inner = cutTree(lang, child, from - pos2, to - pos2, inside2)))
            break;
          return !inside2 ? inner : new Tree(tree.type, tree.children.slice(0, i2).concat(inner), tree.positions.slice(0, i2 + 1), pos2 + inner.length);
        }
      }
      return null;
    }
    function findStartInFragments(lang, fragments, startPos, endPos, editorState) {
      for (let f2 of fragments) {
        let from = f2.from + (f2.openStart ? 25 : 0), to = f2.to - (f2.openEnd ? 25 : 0);
        let found = from <= startPos && to > startPos && findState(lang, f2.tree, 0 - f2.offset, startPos, to), tree;
        if (found && found.pos <= endPos && (tree = cutTree(lang, f2.tree, startPos + f2.offset, found.pos + f2.offset, false)))
          return { state: found.state, tree };
      }
      return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };
    }
    class Parse {
      constructor(lang, input, fragments, ranges) {
        this.lang = lang;
        this.input = input;
        this.fragments = fragments;
        this.ranges = ranges;
        this.stoppedAt = null;
        this.chunks = [];
        this.chunkPos = [];
        this.chunk = [];
        this.chunkReused = void 0;
        this.rangeIndex = 0;
        this.to = ranges[ranges.length - 1].to;
        let context = ParseContext.get(), from = ranges[0].from;
        let { state, tree } = findStartInFragments(lang, fragments, from, this.to, context === null || context === void 0 ? void 0 : context.state);
        this.state = state;
        this.parsedPos = this.chunkStart = from + tree.length;
        for (let i2 = 0; i2 < tree.children.length; i2++) {
          this.chunks.push(tree.children[i2]);
          this.chunkPos.push(tree.positions[i2]);
        }
        if (context && this.parsedPos < context.viewport.from - 1e5 && ranges.some((r2) => r2.from <= context.viewport.from && r2.to >= context.viewport.from)) {
          this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
          context.skipUntilInView(this.parsedPos, context.viewport.from);
          this.parsedPos = context.viewport.from;
        }
        this.moveRangeIndex();
      }
      advance() {
        let context = ParseContext.get();
        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);
        let end2 = Math.min(
          parseEnd,
          this.chunkStart + 2048
          /* C.ChunkSize */
        );
        if (context)
          end2 = Math.min(end2, context.viewport.to);
        while (this.parsedPos < end2)
          this.parseLine(context);
        if (this.chunkStart < this.parsedPos)
          this.finishChunk();
        if (this.parsedPos >= parseEnd)
          return this.finish();
        if (context && this.parsedPos >= context.viewport.to) {
          context.skipUntilInView(this.parsedPos, parseEnd);
          return this.finish();
        }
        return null;
      }
      stopAt(pos2) {
        this.stoppedAt = pos2;
      }
      lineAfter(pos2) {
        let chunk = this.input.chunk(pos2);
        if (!this.input.lineChunks) {
          let eol = chunk.indexOf("\n");
          if (eol > -1)
            chunk = chunk.slice(0, eol);
        } else if (chunk == "\n") {
          chunk = "";
        }
        return pos2 + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos2);
      }
      nextLine() {
        let from = this.parsedPos, line2 = this.lineAfter(from), end2 = from + line2.length;
        for (let index = this.rangeIndex; ; ) {
          let rangeEnd2 = this.ranges[index].to;
          if (rangeEnd2 >= end2)
            break;
          line2 = line2.slice(0, rangeEnd2 - (end2 - line2.length));
          index++;
          if (index == this.ranges.length)
            break;
          let rangeStart = this.ranges[index].from;
          let after = this.lineAfter(rangeStart);
          line2 += after;
          end2 = rangeStart + after.length;
        }
        return { line: line2, end: end2 };
      }
      skipGapsTo(pos2, offset2, side) {
        for (; ; ) {
          let end2 = this.ranges[this.rangeIndex].to, offPos = pos2 + offset2;
          if (side > 0 ? end2 > offPos : end2 >= offPos)
            break;
          let start2 = this.ranges[++this.rangeIndex].from;
          offset2 += start2 - end2;
        }
        return offset2;
      }
      moveRangeIndex() {
        while (this.ranges[this.rangeIndex].to < this.parsedPos)
          this.rangeIndex++;
      }
      emitToken(id, from, to, offset2) {
        let size = 4;
        if (this.ranges.length > 1) {
          offset2 = this.skipGapsTo(from, offset2, 1);
          from += offset2;
          let len0 = this.chunk.length;
          offset2 = this.skipGapsTo(to, offset2, -1);
          to += offset2;
          size += this.chunk.length - len0;
        }
        let last = this.chunk.length - 4;
        if (size == 4 && last >= 0 && this.chunk[last] == id && this.chunk[last + 2] == from)
          this.chunk[last + 2] = to;
        else
          this.chunk.push(id, from, to, size);
        return offset2;
      }
      parseLine(context) {
        let { line: line2, end: end2 } = this.nextLine(), offset2 = 0, { streamParser } = this.lang;
        let stream = new StringStream(line2, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
        if (stream.eol()) {
          streamParser.blankLine(this.state, stream.indentUnit);
        } else {
          while (!stream.eol()) {
            let token2 = readToken(streamParser.token, stream, this.state);
            if (token2)
              offset2 = this.emitToken(this.lang.tokenTable.resolve(token2), this.parsedPos + stream.start, this.parsedPos + stream.pos, offset2);
            if (stream.start > 1e4)
              break;
          }
        }
        this.parsedPos = end2;
        this.moveRangeIndex();
        if (this.parsedPos < this.to)
          this.parsedPos++;
      }
      finishChunk() {
        let tree = Tree.build({
          buffer: this.chunk,
          start: this.chunkStart,
          length: this.parsedPos - this.chunkStart,
          nodeSet,
          topID: 0,
          maxBufferLength: 2048,
          reused: this.chunkReused
        });
        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
        this.chunks.push(tree);
        this.chunkPos.push(this.chunkStart - this.ranges[0].from);
        this.chunk = [];
        this.chunkReused = void 0;
        this.chunkStart = this.parsedPos;
      }
      finish() {
        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
      }
    }
    function readToken(token2, stream, state) {
      stream.start = stream.pos;
      for (let i2 = 0; i2 < 10; i2++) {
        let result = token2(stream, state);
        if (stream.pos > stream.start)
          return result;
      }
      throw new Error("Stream parser failed to advance stream.");
    }
    const noTokens = /* @__PURE__ */ Object.create(null);
    const typeArray = [NodeType.none];
    const nodeSet = /* @__PURE__ */ new NodeSet(typeArray);
    const warned = [];
    const byTag = /* @__PURE__ */ Object.create(null);
    const defaultTable = /* @__PURE__ */ Object.create(null);
    for (let [legacyName, name2] of [
      ["variable", "variableName"],
      ["variable-2", "variableName.special"],
      ["string-2", "string.special"],
      ["def", "variableName.definition"],
      ["tag", "tagName"],
      ["attribute", "attributeName"],
      ["type", "typeName"],
      ["builtin", "variableName.standard"],
      ["qualifier", "modifier"],
      ["error", "invalid"],
      ["header", "heading"],
      ["property", "propertyName"]
    ])
      defaultTable[legacyName] = /* @__PURE__ */ createTokenType(noTokens, name2);
    class TokenTable {
      constructor(extra) {
        this.extra = extra;
        this.table = Object.assign(/* @__PURE__ */ Object.create(null), defaultTable);
      }
      resolve(tag) {
        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));
      }
    }
    const defaultTokenTable = /* @__PURE__ */ new TokenTable(noTokens);
    function warnForPart(part, msg) {
      if (warned.indexOf(part) > -1)
        return;
      warned.push(part);
      console.warn(msg);
    }
    function createTokenType(extra, tagStr) {
      let tags$1 = [];
      for (let name3 of tagStr.split(" ")) {
        let found = [];
        for (let part of name3.split(".")) {
          let value = extra[part] || tags[part];
          if (!value) {
            warnForPart(part, `Unknown highlighting tag ${part}`);
          } else if (typeof value == "function") {
            if (!found.length)
              warnForPart(part, `Modifier ${part} used at start of tag`);
            else
              found = found.map(value);
          } else {
            if (found.length)
              warnForPart(part, `Tag ${part} used as modifier`);
            else
              found = Array.isArray(value) ? value : [value];
          }
        }
        for (let tag of found)
          tags$1.push(tag);
      }
      if (!tags$1.length)
        return 0;
      let name2 = tagStr.replace(/ /g, "_"), key2 = name2 + " " + tags$1.map((t2) => t2.id);
      let known = byTag[key2];
      if (known)
        return known.id;
      let type = byTag[key2] = NodeType.define({
        id: typeArray.length,
        name: name2,
        props: [styleTags({ [name2]: tags$1 })]
      });
      typeArray.push(type);
      return type.id;
    }
    function docID(data, lang) {
      let type = NodeType.define({ id: typeArray.length, name: "Document", props: [
        languageDataProp.add(() => data),
        indentNodeProp.add(() => (cx) => lang.getIndent(cx))
      ], top: true });
      typeArray.push(type);
      return type;
    }
    ({
      rtl: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "rtl" }, bidiIsolate: Direction.RTL }),
      ltr: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "ltr" }, bidiIsolate: Direction.LTR }),
      auto: /* @__PURE__ */ Decoration.mark({ class: "cm-iso", inclusive: true, attributes: { dir: "auto" }, bidiIsolate: null })
    });
    class CompletionContext {
      /**
      Create a new completion context. (Mostly useful for testing
      completion sources—in the editor, the extension will create
      these for you.)
      */
      constructor(state, pos2, explicit, view) {
        this.state = state;
        this.pos = pos2;
        this.explicit = explicit;
        this.view = view;
        this.abortListeners = [];
        this.abortOnDocChange = false;
      }
      /**
      Get the extent, content, and (if there is a token) type of the
      token before `this.pos`.
      */
      tokenBefore(types2) {
        let token2 = syntaxTree(this.state).resolveInner(this.pos, -1);
        while (token2 && types2.indexOf(token2.name) < 0)
          token2 = token2.parent;
        return token2 ? {
          from: token2.from,
          to: this.pos,
          text: this.state.sliceDoc(token2.from, this.pos),
          type: token2.type
        } : null;
      }
      /**
      Get the match of the given expression directly before the
      cursor.
      */
      matchBefore(expr) {
        let line2 = this.state.doc.lineAt(this.pos);
        let start2 = Math.max(line2.from, this.pos - 250);
        let str2 = line2.text.slice(start2 - line2.from, this.pos - line2.from);
        let found = str2.search(ensureAnchor(expr, false));
        return found < 0 ? null : { from: start2 + found, to: this.pos, text: str2.slice(found) };
      }
      /**
      Yields true when the query has been aborted. Can be useful in
      asynchronous queries to avoid doing work that will be ignored.
      */
      get aborted() {
        return this.abortListeners == null;
      }
      /**
      Allows you to register abort handlers, which will be called when
      the query is
      [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
      
      By default, running queries will not be aborted for regular
      typing or backspacing, on the assumption that they are likely to
      return a result with a
      [`validFor`](https://codemirror.net/6/docs/ref/#autocomplete.CompletionResult.validFor) field that
      allows the result to be used after all. Passing `onDocChange:
      true` will cause this query to be aborted for any document
      change.
      */
      addEventListener(type, listener, options) {
        if (type == "abort" && this.abortListeners) {
          this.abortListeners.push(listener);
          if (options && options.onDocChange)
            this.abortOnDocChange = true;
        }
      }
    }
    function toSet(chars) {
      let flat = Object.keys(chars).join("");
      let words = /\w/.test(flat);
      if (words)
        flat = flat.replace(/\w/g, "");
      return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
    }
    function prefixMatch(options) {
      let first = /* @__PURE__ */ Object.create(null), rest = /* @__PURE__ */ Object.create(null);
      for (let { label } of options) {
        first[label[0]] = true;
        for (let i2 = 1; i2 < label.length; i2++)
          rest[label[i2]] = true;
      }
      let source2 = toSet(first) + toSet(rest) + "*$";
      return [new RegExp("^" + source2), new RegExp(source2)];
    }
    function completeFromList(list2) {
      let options = list2.map((o2) => typeof o2 == "string" ? { label: o2 } : o2);
      let [validFor, match] = options.every((o2) => /^\w+$/.test(o2.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
      return (context) => {
        let token2 = context.matchBefore(match);
        return token2 || context.explicit ? { from: token2 ? token2.from : context.pos, options, validFor } : null;
      };
    }
    class Option {
      constructor(completion, source2, match, score2) {
        this.completion = completion;
        this.source = source2;
        this.match = match;
        this.score = score2;
      }
    }
    function cur(state) {
      return state.selection.main.from;
    }
    function ensureAnchor(expr, start2) {
      var _a2;
      let { source: source2 } = expr;
      let addStart = start2 && source2[0] != "^", addEnd = source2[source2.length - 1] != "$";
      if (!addStart && !addEnd)
        return expr;
      return new RegExp(`${addStart ? "^" : ""}(?:${source2})${addEnd ? "$" : ""}`, (_a2 = expr.flags) !== null && _a2 !== void 0 ? _a2 : expr.ignoreCase ? "i" : "");
    }
    const pickedCompletion = /* @__PURE__ */ Annotation.define();
    function insertCompletionText(state, text2, from, to) {
      let { main: main2 } = state.selection, fromOff = from - main2.from, toOff = to - main2.from;
      return Object.assign(Object.assign({}, state.changeByRange((range) => {
        if (range != main2 && from != to && state.sliceDoc(range.from + fromOff, range.from + toOff) != state.sliceDoc(from, to))
          return { range };
        let lines = state.toText(text2);
        return {
          changes: { from: range.from + fromOff, to: to == main2.from ? range.to : range.from + toOff, insert: lines },
          range: EditorSelection.cursor(range.from + fromOff + lines.length)
        };
      })), { scrollIntoView: true, userEvent: "input.complete" });
    }
    const SourceCache = /* @__PURE__ */ new WeakMap();
    function asSource(source2) {
      if (!Array.isArray(source2))
        return source2;
      let known = SourceCache.get(source2);
      if (!known)
        SourceCache.set(source2, known = completeFromList(source2));
      return known;
    }
    const startCompletionEffect = /* @__PURE__ */ StateEffect.define();
    const closeCompletionEffect = /* @__PURE__ */ StateEffect.define();
    class FuzzyMatcher {
      constructor(pattern) {
        this.pattern = pattern;
        this.chars = [];
        this.folded = [];
        this.any = [];
        this.precise = [];
        this.byWord = [];
        this.score = 0;
        this.matched = [];
        for (let p2 = 0; p2 < pattern.length; ) {
          let char = codePointAt(pattern, p2), size = codePointSize(char);
          this.chars.push(char);
          let part = pattern.slice(p2, p2 + size), upper = part.toUpperCase();
          this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
          p2 += size;
        }
        this.astral = pattern.length != this.chars.length;
      }
      ret(score2, matched) {
        this.score = score2;
        this.matched = matched;
        return this;
      }
      // Matches a given word (completion) against the pattern (input).
      // Will return a boolean indicating whether there was a match and,
      // on success, set `this.score` to the score, `this.matched` to an
      // array of `from, to` pairs indicating the matched parts of `word`.
      //
      // The score is a number that is more negative the worse the match
      // is. See `Penalty` above.
      match(word) {
        if (this.pattern.length == 0)
          return this.ret(-100, []);
        if (word.length < this.pattern.length)
          return null;
        let { chars, folded, any, precise, byWord } = this;
        if (chars.length == 1) {
          let first = codePointAt(word, 0), firstSize = codePointSize(first);
          let score2 = firstSize == word.length ? 0 : -100;
          if (first == chars[0]) ;
          else if (first == folded[0])
            score2 += -200;
          else
            return null;
          return this.ret(score2, [0, firstSize]);
        }
        let direct = word.indexOf(this.pattern);
        if (direct == 0)
          return this.ret(word.length == this.pattern.length ? 0 : -100, [0, this.pattern.length]);
        let len = chars.length, anyTo = 0;
        if (direct < 0) {
          for (let i2 = 0, e2 = Math.min(word.length, 200); i2 < e2 && anyTo < len; ) {
            let next = codePointAt(word, i2);
            if (next == chars[anyTo] || next == folded[anyTo])
              any[anyTo++] = i2;
            i2 += codePointSize(next);
          }
          if (anyTo < len)
            return null;
        }
        let preciseTo = 0;
        let byWordTo = 0, byWordFolded = false;
        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
        let hasLower = /[a-z]/.test(word), wordAdjacent = true;
        for (let i2 = 0, e2 = Math.min(word.length, 200), prevType = 0; i2 < e2 && byWordTo < len; ) {
          let next = codePointAt(word, i2);
          if (direct < 0) {
            if (preciseTo < len && next == chars[preciseTo])
              precise[preciseTo++] = i2;
            if (adjacentTo < len) {
              if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
                if (adjacentTo == 0)
                  adjacentStart = i2;
                adjacentEnd = i2 + 1;
                adjacentTo++;
              } else {
                adjacentTo = 0;
              }
            }
          }
          let ch3, type = next < 255 ? next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 : next >= 65 && next <= 90 ? 1 : 0 : (ch3 = fromCodePoint(next)) != ch3.toLowerCase() ? 1 : ch3 != ch3.toUpperCase() ? 2 : 0;
          if (!i2 || type == 1 && hasLower || prevType == 0 && type != 0) {
            if (chars[byWordTo] == next || folded[byWordTo] == next && (byWordFolded = true))
              byWord[byWordTo++] = i2;
            else if (byWord.length)
              wordAdjacent = false;
          }
          prevType = type;
          i2 += codePointSize(next);
        }
        if (byWordTo == len && byWord[0] == 0 && wordAdjacent)
          return this.result(-100 + (byWordFolded ? -200 : 0), byWord, word);
        if (adjacentTo == len && adjacentStart == 0)
          return this.ret(-200 - word.length + (adjacentEnd == word.length ? 0 : -100), [0, adjacentEnd]);
        if (direct > -1)
          return this.ret(-700 - word.length, [direct, direct + this.pattern.length]);
        if (adjacentTo == len)
          return this.ret(-200 + -700 - word.length, [adjacentStart, adjacentEnd]);
        if (byWordTo == len)
          return this.result(-100 + (byWordFolded ? -200 : 0) + -700 + (wordAdjacent ? 0 : -1100), byWord, word);
        return chars.length == 2 ? null : this.result((any[0] ? -700 : 0) + -200 + -1100, any, word);
      }
      result(score2, positions, word) {
        let result = [], i2 = 0;
        for (let pos2 of positions) {
          let to = pos2 + (this.astral ? codePointSize(codePointAt(word, pos2)) : 1);
          if (i2 && result[i2 - 1] == pos2)
            result[i2 - 1] = to;
          else {
            result[i2++] = pos2;
            result[i2++] = to;
          }
        }
        return this.ret(score2 - word.length, result);
      }
    }
    class StrictMatcher {
      constructor(pattern) {
        this.pattern = pattern;
        this.matched = [];
        this.score = 0;
        this.folded = pattern.toLowerCase();
      }
      match(word) {
        if (word.length < this.pattern.length)
          return null;
        let start2 = word.slice(0, this.pattern.length);
        let match = start2 == this.pattern ? 0 : start2.toLowerCase() == this.folded ? -200 : null;
        if (match == null)
          return null;
        this.matched = [0, start2.length];
        this.score = match + (word.length == this.pattern.length ? 0 : -100);
        return this;
      }
    }
    const completionConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        return combineConfig(configs, {
          activateOnTyping: true,
          activateOnCompletion: () => false,
          activateOnTypingDelay: 100,
          selectOnOpen: true,
          override: null,
          closeOnBlur: true,
          maxRenderedOptions: 100,
          defaultKeymap: true,
          tooltipClass: () => "",
          optionClass: () => "",
          aboveCursor: false,
          icons: true,
          addToOptions: [],
          positionInfo: defaultPositionInfo,
          filterStrict: false,
          compareCompletions: (a2, b) => a2.label.localeCompare(b.label),
          interactionDelay: 75,
          updateSyncTime: 100
        }, {
          defaultKeymap: (a2, b) => a2 && b,
          closeOnBlur: (a2, b) => a2 && b,
          icons: (a2, b) => a2 && b,
          tooltipClass: (a2, b) => (c2) => joinClass(a2(c2), b(c2)),
          optionClass: (a2, b) => (c2) => joinClass(a2(c2), b(c2)),
          addToOptions: (a2, b) => a2.concat(b),
          filterStrict: (a2, b) => a2 || b
        });
      }
    });
    function joinClass(a2, b) {
      return a2 ? b ? a2 + " " + b : a2 : b;
    }
    function defaultPositionInfo(view, list2, option, info, space, tooltip) {
      let rtl = view.textDirection == Direction.RTL, left2 = rtl, narrow = false;
      let side = "top", offset2, maxWidth;
      let spaceLeft = list2.left - space.left, spaceRight = space.right - list2.right;
      let infoWidth = info.right - info.left, infoHeight = info.bottom - info.top;
      if (left2 && spaceLeft < Math.min(infoWidth, spaceRight))
        left2 = false;
      else if (!left2 && spaceRight < Math.min(infoWidth, spaceLeft))
        left2 = true;
      if (infoWidth <= (left2 ? spaceLeft : spaceRight)) {
        offset2 = Math.max(space.top, Math.min(option.top, space.bottom - infoHeight)) - list2.top;
        maxWidth = Math.min(400, left2 ? spaceLeft : spaceRight);
      } else {
        narrow = true;
        maxWidth = Math.min(
          400,
          (rtl ? list2.right : space.right - list2.left) - 30
          /* Info.Margin */
        );
        let spaceBelow = space.bottom - list2.bottom;
        if (spaceBelow >= infoHeight || spaceBelow > list2.top) {
          offset2 = option.bottom - list2.top;
        } else {
          side = "bottom";
          offset2 = list2.bottom - option.top;
        }
      }
      let scaleY = (list2.bottom - list2.top) / tooltip.offsetHeight;
      let scaleX = (list2.right - list2.left) / tooltip.offsetWidth;
      return {
        style: `${side}: ${offset2 / scaleY}px; max-width: ${maxWidth / scaleX}px`,
        class: "cm-completionInfo-" + (narrow ? rtl ? "left-narrow" : "right-narrow" : left2 ? "left" : "right")
      };
    }
    function optionContent(config2) {
      let content2 = config2.addToOptions.slice();
      if (config2.icons)
        content2.push({
          render(completion) {
            let icon = document.createElement("div");
            icon.classList.add("cm-completionIcon");
            if (completion.type)
              icon.classList.add(...completion.type.split(/\s+/g).map((cls) => "cm-completionIcon-" + cls));
            icon.setAttribute("aria-hidden", "true");
            return icon;
          },
          position: 20
        });
      content2.push({
        render(completion, _s, _v, match) {
          let labelElt = document.createElement("span");
          labelElt.className = "cm-completionLabel";
          let label = completion.displayLabel || completion.label, off = 0;
          for (let j2 = 0; j2 < match.length; ) {
            let from = match[j2++], to = match[j2++];
            if (from > off)
              labelElt.appendChild(document.createTextNode(label.slice(off, from)));
            let span = labelElt.appendChild(document.createElement("span"));
            span.appendChild(document.createTextNode(label.slice(from, to)));
            span.className = "cm-completionMatchedText";
            off = to;
          }
          if (off < label.length)
            labelElt.appendChild(document.createTextNode(label.slice(off)));
          return labelElt;
        },
        position: 50
      }, {
        render(completion) {
          if (!completion.detail)
            return null;
          let detailElt = document.createElement("span");
          detailElt.className = "cm-completionDetail";
          detailElt.textContent = completion.detail;
          return detailElt;
        },
        position: 80
      });
      return content2.sort((a2, b) => a2.position - b.position).map((a2) => a2.render);
    }
    function rangeAroundSelected(total, selected, max2) {
      if (total <= max2)
        return { from: 0, to: total };
      if (selected < 0)
        selected = 0;
      if (selected <= total >> 1) {
        let off2 = Math.floor(selected / max2);
        return { from: off2 * max2, to: (off2 + 1) * max2 };
      }
      let off = Math.floor((total - selected) / max2);
      return { from: total - (off + 1) * max2, to: total - off * max2 };
    }
    class CompletionTooltip {
      constructor(view, stateField, applyCompletion2) {
        this.view = view;
        this.stateField = stateField;
        this.applyCompletion = applyCompletion2;
        this.info = null;
        this.infoDestroy = null;
        this.placeInfoReq = {
          read: () => this.measureInfo(),
          write: (pos2) => this.placeInfo(pos2),
          key: this
        };
        this.space = null;
        this.currentClass = "";
        let cState = view.state.field(stateField);
        let { options, selected } = cState.open;
        let config2 = view.state.facet(completionConfig);
        this.optionContent = optionContent(config2);
        this.optionClass = config2.optionClass;
        this.tooltipClass = config2.tooltipClass;
        this.range = rangeAroundSelected(options.length, selected, config2.maxRenderedOptions);
        this.dom = document.createElement("div");
        this.dom.className = "cm-tooltip-autocomplete";
        this.updateTooltipClass(view.state);
        this.dom.addEventListener("mousedown", (e2) => {
          let { options: options2 } = view.state.field(stateField).open;
          for (let dom = e2.target, match; dom && dom != this.dom; dom = dom.parentNode) {
            if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options2.length) {
              this.applyCompletion(view, options2[+match[1]]);
              e2.preventDefault();
              return;
            }
          }
        });
        this.dom.addEventListener("focusout", (e2) => {
          let state = view.state.field(this.stateField, false);
          if (state && state.tooltip && view.state.facet(completionConfig).closeOnBlur && e2.relatedTarget != view.contentDOM)
            view.dispatch({ effects: closeCompletionEffect.of(null) });
        });
        this.showOptions(options, cState.id);
      }
      mount() {
        this.updateSel();
      }
      showOptions(options, id) {
        if (this.list)
          this.list.remove();
        this.list = this.dom.appendChild(this.createListBox(options, id, this.range));
        this.list.addEventListener("scroll", () => {
          if (this.info)
            this.view.requestMeasure(this.placeInfoReq);
        });
      }
      update(update) {
        var _a2;
        let cState = update.state.field(this.stateField);
        let prevState = update.startState.field(this.stateField);
        this.updateTooltipClass(update.state);
        if (cState != prevState) {
          let { options, selected, disabled } = cState.open;
          if (!prevState.open || prevState.open.options != options) {
            this.range = rangeAroundSelected(options.length, selected, update.state.facet(completionConfig).maxRenderedOptions);
            this.showOptions(options, cState.id);
          }
          this.updateSel();
          if (disabled != ((_a2 = prevState.open) === null || _a2 === void 0 ? void 0 : _a2.disabled))
            this.dom.classList.toggle("cm-tooltip-autocomplete-disabled", !!disabled);
        }
      }
      updateTooltipClass(state) {
        let cls = this.tooltipClass(state);
        if (cls != this.currentClass) {
          for (let c2 of this.currentClass.split(" "))
            if (c2)
              this.dom.classList.remove(c2);
          for (let c2 of cls.split(" "))
            if (c2)
              this.dom.classList.add(c2);
          this.currentClass = cls;
        }
      }
      positioned(space) {
        this.space = space;
        if (this.info)
          this.view.requestMeasure(this.placeInfoReq);
      }
      updateSel() {
        let cState = this.view.state.field(this.stateField), open = cState.open;
        if (open.selected > -1 && open.selected < this.range.from || open.selected >= this.range.to) {
          this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
          this.showOptions(open.options, cState.id);
        }
        if (this.updateSelectedOption(open.selected)) {
          this.destroyInfo();
          let { completion } = open.options[open.selected];
          let { info } = completion;
          if (!info)
            return;
          let infoResult = typeof info === "string" ? document.createTextNode(info) : info(completion);
          if (!infoResult)
            return;
          if ("then" in infoResult) {
            infoResult.then((obj) => {
              if (obj && this.view.state.field(this.stateField, false) == cState)
                this.addInfoPane(obj, completion);
            }).catch((e2) => logException(this.view.state, e2, "completion info"));
          } else {
            this.addInfoPane(infoResult, completion);
          }
        }
      }
      addInfoPane(content2, completion) {
        this.destroyInfo();
        let wrap = this.info = document.createElement("div");
        wrap.className = "cm-tooltip cm-completionInfo";
        if (content2.nodeType != null) {
          wrap.appendChild(content2);
          this.infoDestroy = null;
        } else {
          let { dom, destroy } = content2;
          wrap.appendChild(dom);
          this.infoDestroy = destroy || null;
        }
        this.dom.appendChild(wrap);
        this.view.requestMeasure(this.placeInfoReq);
      }
      updateSelectedOption(selected) {
        let set = null;
        for (let opt = this.list.firstChild, i2 = this.range.from; opt; opt = opt.nextSibling, i2++) {
          if (opt.nodeName != "LI" || !opt.id) {
            i2--;
          } else if (i2 == selected) {
            if (!opt.hasAttribute("aria-selected")) {
              opt.setAttribute("aria-selected", "true");
              set = opt;
            }
          } else {
            if (opt.hasAttribute("aria-selected"))
              opt.removeAttribute("aria-selected");
          }
        }
        if (set)
          scrollIntoView(this.list, set);
        return set;
      }
      measureInfo() {
        let sel = this.dom.querySelector("[aria-selected]");
        if (!sel || !this.info)
          return null;
        let listRect = this.dom.getBoundingClientRect();
        let infoRect = this.info.getBoundingClientRect();
        let selRect = sel.getBoundingClientRect();
        let space = this.space;
        if (!space) {
          let win = this.dom.ownerDocument.defaultView || window;
          space = { left: 0, top: 0, right: win.innerWidth, bottom: win.innerHeight };
        }
        if (selRect.top > Math.min(space.bottom, listRect.bottom) - 10 || selRect.bottom < Math.max(space.top, listRect.top) + 10)
          return null;
        return this.view.state.facet(completionConfig).positionInfo(this.view, listRect, selRect, infoRect, space, this.dom);
      }
      placeInfo(pos2) {
        if (this.info) {
          if (pos2) {
            if (pos2.style)
              this.info.style.cssText = pos2.style;
            this.info.className = "cm-tooltip cm-completionInfo " + (pos2.class || "");
          } else {
            this.info.style.cssText = "top: -1e6px";
          }
        }
      }
      createListBox(options, id, range) {
        const ul = document.createElement("ul");
        ul.id = id;
        ul.setAttribute("role", "listbox");
        ul.setAttribute("aria-expanded", "true");
        ul.setAttribute("aria-label", this.view.state.phrase("Completions"));
        let curSection = null;
        for (let i2 = range.from; i2 < range.to; i2++) {
          let { completion, match } = options[i2], { section } = completion;
          if (section) {
            let name2 = typeof section == "string" ? section : section.name;
            if (name2 != curSection && (i2 > range.from || range.from == 0)) {
              curSection = name2;
              if (typeof section != "string" && section.header) {
                ul.appendChild(section.header(section));
              } else {
                let header = ul.appendChild(document.createElement("completion-section"));
                header.textContent = name2;
              }
            }
          }
          const li = ul.appendChild(document.createElement("li"));
          li.id = id + "-" + i2;
          li.setAttribute("role", "option");
          let cls = this.optionClass(completion);
          if (cls)
            li.className = cls;
          for (let source2 of this.optionContent) {
            let node = source2(completion, this.view.state, this.view, match);
            if (node)
              li.appendChild(node);
          }
        }
        if (range.from)
          ul.classList.add("cm-completionListIncompleteTop");
        if (range.to < options.length)
          ul.classList.add("cm-completionListIncompleteBottom");
        return ul;
      }
      destroyInfo() {
        if (this.info) {
          if (this.infoDestroy)
            this.infoDestroy();
          this.info.remove();
          this.info = null;
        }
      }
      destroy() {
        this.destroyInfo();
      }
    }
    function completionTooltip(stateField, applyCompletion2) {
      return (view) => new CompletionTooltip(view, stateField, applyCompletion2);
    }
    function scrollIntoView(container, element) {
      let parent = container.getBoundingClientRect();
      let self2 = element.getBoundingClientRect();
      let scaleY = parent.height / container.offsetHeight;
      if (self2.top < parent.top)
        container.scrollTop -= (parent.top - self2.top) / scaleY;
      else if (self2.bottom > parent.bottom)
        container.scrollTop += (self2.bottom - parent.bottom) / scaleY;
    }
    function score(option) {
      return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
    }
    function sortOptions(active, state) {
      let options = [];
      let sections = null;
      let addOption = (option) => {
        options.push(option);
        let { section } = option.completion;
        if (section) {
          if (!sections)
            sections = [];
          let name2 = typeof section == "string" ? section : section.name;
          if (!sections.some((s2) => s2.name == name2))
            sections.push(typeof section == "string" ? { name: name2 } : section);
        }
      };
      let conf = state.facet(completionConfig);
      for (let a2 of active)
        if (a2.hasResult()) {
          let getMatch = a2.result.getMatch;
          if (a2.result.filter === false) {
            for (let option of a2.result.options) {
              addOption(new Option(option, a2.source, getMatch ? getMatch(option) : [], 1e9 - options.length));
            }
          } else {
            let pattern = state.sliceDoc(a2.from, a2.to), match;
            let matcher = conf.filterStrict ? new StrictMatcher(pattern) : new FuzzyMatcher(pattern);
            for (let option of a2.result.options)
              if (match = matcher.match(option.label)) {
                let matched = !option.displayLabel ? match.matched : getMatch ? getMatch(option, match.matched) : [];
                addOption(new Option(option, a2.source, matched, match.score + (option.boost || 0)));
              }
          }
        }
      if (sections) {
        let sectionOrder = /* @__PURE__ */ Object.create(null), pos2 = 0;
        let cmp = (a2, b) => {
          var _a2, _b2;
          return ((_a2 = a2.rank) !== null && _a2 !== void 0 ? _a2 : 1e9) - ((_b2 = b.rank) !== null && _b2 !== void 0 ? _b2 : 1e9) || (a2.name < b.name ? -1 : 1);
        };
        for (let s2 of sections.sort(cmp)) {
          pos2 -= 1e5;
          sectionOrder[s2.name] = pos2;
        }
        for (let option of options) {
          let { section } = option.completion;
          if (section)
            option.score += sectionOrder[typeof section == "string" ? section : section.name];
        }
      }
      let result = [], prev = null;
      let compare2 = conf.compareCompletions;
      for (let opt of options.sort((a2, b) => b.score - a2.score || compare2(a2.completion, b.completion))) {
        let cur2 = opt.completion;
        if (!prev || prev.label != cur2.label || prev.detail != cur2.detail || prev.type != null && cur2.type != null && prev.type != cur2.type || prev.apply != cur2.apply || prev.boost != cur2.boost)
          result.push(opt);
        else if (score(opt.completion) > score(prev))
          result[result.length - 1] = opt;
        prev = opt.completion;
      }
      return result;
    }
    class CompletionDialog {
      constructor(options, attrs, tooltip, timestamp, selected, disabled) {
        this.options = options;
        this.attrs = attrs;
        this.tooltip = tooltip;
        this.timestamp = timestamp;
        this.selected = selected;
        this.disabled = disabled;
      }
      setSelected(selected, id) {
        return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected, this.disabled);
      }
      static build(active, state, id, prev, conf, didSetActive) {
        if (prev && !didSetActive && active.some((s2) => s2.isPending))
          return prev.setDisabled();
        let options = sortOptions(active, state);
        if (!options.length)
          return prev && active.some((a2) => a2.isPending) ? prev.setDisabled() : null;
        let selected = state.facet(completionConfig).selectOnOpen ? 0 : -1;
        if (prev && prev.selected != selected && prev.selected != -1) {
          let selectedValue = prev.options[prev.selected].completion;
          for (let i2 = 0; i2 < options.length; i2++)
            if (options[i2].completion == selectedValue) {
              selected = i2;
              break;
            }
        }
        return new CompletionDialog(options, makeAttrs(id, selected), {
          pos: active.reduce((a2, b) => b.hasResult() ? Math.min(a2, b.from) : a2, 1e8),
          create: createTooltip,
          above: conf.aboveCursor
        }, prev ? prev.timestamp : Date.now(), selected, false);
      }
      map(changes) {
        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected, this.disabled);
      }
      setDisabled() {
        return new CompletionDialog(this.options, this.attrs, this.tooltip, this.timestamp, this.selected, true);
      }
    }
    class CompletionState {
      constructor(active, id, open) {
        this.active = active;
        this.id = id;
        this.open = open;
      }
      static start() {
        return new CompletionState(none$1, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
      }
      update(tr) {
        let { state } = tr, conf = state.facet(completionConfig);
        let sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
        let active = sources.map((source2) => {
          let value = this.active.find((s2) => s2.source == source2) || new ActiveSource(
            source2,
            this.active.some(
              (a2) => a2.state != 0
              /* State.Inactive */
            ) ? 1 : 0
            /* State.Inactive */
          );
          return value.update(tr, conf);
        });
        if (active.length == this.active.length && active.every((a2, i2) => a2 == this.active[i2]))
          active = this.active;
        let open = this.open, didSet = tr.effects.some((e2) => e2.is(setActiveEffect));
        if (open && tr.docChanged)
          open = open.map(tr.changes);
        if (tr.selection || active.some((a2) => a2.hasResult() && tr.changes.touchesRange(a2.from, a2.to)) || !sameResults(active, this.active) || didSet)
          open = CompletionDialog.build(active, state, this.id, open, conf, didSet);
        else if (open && open.disabled && !active.some((a2) => a2.isPending))
          open = null;
        if (!open && active.every((a2) => !a2.isPending) && active.some((a2) => a2.hasResult()))
          active = active.map((a2) => a2.hasResult() ? new ActiveSource(
            a2.source,
            0
            /* State.Inactive */
          ) : a2);
        for (let effect2 of tr.effects)
          if (effect2.is(setSelectedEffect))
            open = open && open.setSelected(effect2.value, this.id);
        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
      }
      get tooltip() {
        return this.open ? this.open.tooltip : null;
      }
      get attrs() {
        return this.open ? this.open.attrs : this.active.length ? baseAttrs : noAttrs;
      }
    }
    function sameResults(a2, b) {
      if (a2 == b)
        return true;
      for (let iA = 0, iB = 0; ; ) {
        while (iA < a2.length && !a2[iA].hasResult())
          iA++;
        while (iB < b.length && !b[iB].hasResult())
          iB++;
        let endA = iA == a2.length, endB = iB == b.length;
        if (endA || endB)
          return endA == endB;
        if (a2[iA++].result != b[iB++].result)
          return false;
      }
    }
    const baseAttrs = {
      "aria-autocomplete": "list"
    };
    const noAttrs = {};
    function makeAttrs(id, selected) {
      let result = {
        "aria-autocomplete": "list",
        "aria-haspopup": "listbox",
        "aria-controls": id
      };
      if (selected > -1)
        result["aria-activedescendant"] = id + "-" + selected;
      return result;
    }
    const none$1 = [];
    function getUpdateType(tr, conf) {
      if (tr.isUserEvent("input.complete")) {
        let completion = tr.annotation(pickedCompletion);
        if (completion && conf.activateOnCompletion(completion))
          return 4 | 8;
      }
      let typing = tr.isUserEvent("input.type");
      return typing && conf.activateOnTyping ? 4 | 1 : typing ? 1 : tr.isUserEvent("delete.backward") ? 2 : tr.selection ? 8 : tr.docChanged ? 16 : 0;
    }
    class ActiveSource {
      constructor(source2, state, explicit = false) {
        this.source = source2;
        this.state = state;
        this.explicit = explicit;
      }
      hasResult() {
        return false;
      }
      get isPending() {
        return this.state == 1;
      }
      update(tr, conf) {
        let type = getUpdateType(tr, conf), value = this;
        if (type & 8 || type & 16 && this.touches(tr))
          value = new ActiveSource(
            value.source,
            0
            /* State.Inactive */
          );
        if (type & 4 && value.state == 0)
          value = new ActiveSource(
            this.source,
            1
            /* State.Pending */
          );
        value = value.updateFor(tr, type);
        for (let effect2 of tr.effects) {
          if (effect2.is(startCompletionEffect))
            value = new ActiveSource(value.source, 1, effect2.value);
          else if (effect2.is(closeCompletionEffect))
            value = new ActiveSource(
              value.source,
              0
              /* State.Inactive */
            );
          else if (effect2.is(setActiveEffect)) {
            for (let active of effect2.value)
              if (active.source == value.source)
                value = active;
          }
        }
        return value;
      }
      updateFor(tr, type) {
        return this.map(tr.changes);
      }
      map(changes) {
        return this;
      }
      touches(tr) {
        return tr.changes.touchesRange(cur(tr.state));
      }
    }
    class ActiveResult extends ActiveSource {
      constructor(source2, explicit, limit, result, from, to) {
        super(source2, 3, explicit);
        this.limit = limit;
        this.result = result;
        this.from = from;
        this.to = to;
      }
      hasResult() {
        return true;
      }
      updateFor(tr, type) {
        var _a2;
        if (!(type & 3))
          return this.map(tr.changes);
        let result = this.result;
        if (result.map && !tr.changes.empty)
          result = result.map(result, tr.changes);
        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
        let pos2 = cur(tr.state);
        if (pos2 > to || !result || type & 2 && (cur(tr.startState) == this.from || pos2 < this.limit))
          return new ActiveSource(
            this.source,
            type & 4 ? 1 : 0
            /* State.Inactive */
          );
        let limit = tr.changes.mapPos(this.limit);
        if (checkValid(result.validFor, tr.state, from, to))
          return new ActiveResult(this.source, this.explicit, limit, result, from, to);
        if (result.update && (result = result.update(result, from, to, new CompletionContext(tr.state, pos2, false))))
          return new ActiveResult(this.source, this.explicit, limit, result, result.from, (_a2 = result.to) !== null && _a2 !== void 0 ? _a2 : cur(tr.state));
        return new ActiveSource(this.source, 1, this.explicit);
      }
      map(mapping) {
        if (mapping.empty)
          return this;
        let result = this.result.map ? this.result.map(this.result, mapping) : this.result;
        if (!result)
          return new ActiveSource(
            this.source,
            0
            /* State.Inactive */
          );
        return new ActiveResult(this.source, this.explicit, mapping.mapPos(this.limit), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1));
      }
      touches(tr) {
        return tr.changes.touchesRange(this.from, this.to);
      }
    }
    function checkValid(validFor, state, from, to) {
      if (!validFor)
        return false;
      let text2 = state.sliceDoc(from, to);
      return typeof validFor == "function" ? validFor(text2, from, to, state) : ensureAnchor(validFor, true).test(text2);
    }
    const setActiveEffect = /* @__PURE__ */ StateEffect.define({
      map(sources, mapping) {
        return sources.map((s2) => s2.map(mapping));
      }
    });
    const setSelectedEffect = /* @__PURE__ */ StateEffect.define();
    const completionState = /* @__PURE__ */ StateField.define({
      create() {
        return CompletionState.start();
      },
      update(value, tr) {
        return value.update(tr);
      },
      provide: (f2) => [
        showTooltip.from(f2, (val) => val.tooltip),
        EditorView.contentAttributes.from(f2, (state) => state.attrs)
      ]
    });
    function applyCompletion(view, option) {
      const apply = option.completion.apply || option.completion.label;
      let result = view.state.field(completionState).active.find((a2) => a2.source == option.source);
      if (!(result instanceof ActiveResult))
        return false;
      if (typeof apply == "string")
        view.dispatch(Object.assign(Object.assign({}, insertCompletionText(view.state, apply, result.from, result.to)), { annotations: pickedCompletion.of(option.completion) }));
      else
        apply(view, option.completion, result.from, result.to);
      return true;
    }
    const createTooltip = /* @__PURE__ */ completionTooltip(completionState, applyCompletion);
    function moveCompletionSelection(forward, by = "option") {
      return (view) => {
        let cState = view.state.field(completionState, false);
        if (!cState || !cState.open || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
          return false;
        let step = 1, tooltip;
        if (by == "page" && (tooltip = getTooltip(view, cState.open.tooltip)))
          step = Math.max(2, Math.floor(tooltip.dom.offsetHeight / tooltip.dom.querySelector("li").offsetHeight) - 1);
        let { length } = cState.open.options;
        let selected = cState.open.selected > -1 ? cState.open.selected + step * (forward ? 1 : -1) : forward ? 0 : length - 1;
        if (selected < 0)
          selected = by == "page" ? 0 : length - 1;
        else if (selected >= length)
          selected = by == "page" ? length - 1 : 0;
        view.dispatch({ effects: setSelectedEffect.of(selected) });
        return true;
      };
    }
    const acceptCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (view.state.readOnly || !cState || !cState.open || cState.open.selected < 0 || cState.open.disabled || Date.now() - cState.open.timestamp < view.state.facet(completionConfig).interactionDelay)
        return false;
      return applyCompletion(view, cState.open.options[cState.open.selected]);
    };
    const startCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState)
        return false;
      view.dispatch({ effects: startCompletionEffect.of(true) });
      return true;
    };
    const closeCompletion = (view) => {
      let cState = view.state.field(completionState, false);
      if (!cState || !cState.active.some(
        (a2) => a2.state != 0
        /* State.Inactive */
      ))
        return false;
      view.dispatch({ effects: closeCompletionEffect.of(null) });
      return true;
    };
    class RunningQuery {
      constructor(active, context) {
        this.active = active;
        this.context = context;
        this.time = Date.now();
        this.updates = [];
        this.done = void 0;
      }
    }
    const MaxUpdateCount = 50, MinAbortTime = 1e3;
    const completionPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.debounceUpdate = -1;
        this.running = [];
        this.debounceAccept = -1;
        this.pendingStart = false;
        this.composing = 0;
        for (let active of view.state.field(completionState).active)
          if (active.isPending)
            this.startQuery(active);
      }
      update(update) {
        let cState = update.state.field(completionState);
        let conf = update.state.facet(completionConfig);
        if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
          return;
        let doesReset = update.transactions.some((tr) => {
          let type = getUpdateType(tr, conf);
          return type & 8 || (tr.selection || tr.docChanged) && !(type & 3);
        });
        for (let i2 = 0; i2 < this.running.length; i2++) {
          let query = this.running[i2];
          if (doesReset || query.context.abortOnDocChange && update.docChanged || query.updates.length + update.transactions.length > MaxUpdateCount && Date.now() - query.time > MinAbortTime) {
            for (let handler of query.context.abortListeners) {
              try {
                handler();
              } catch (e2) {
                logException(this.view.state, e2);
              }
            }
            query.context.abortListeners = null;
            this.running.splice(i2--, 1);
          } else {
            query.updates.push(...update.transactions);
          }
        }
        if (this.debounceUpdate > -1)
          clearTimeout(this.debounceUpdate);
        if (update.transactions.some((tr) => tr.effects.some((e2) => e2.is(startCompletionEffect))))
          this.pendingStart = true;
        let delay = this.pendingStart ? 50 : conf.activateOnTypingDelay;
        this.debounceUpdate = cState.active.some((a2) => a2.isPending && !this.running.some((q2) => q2.active.source == a2.source)) ? setTimeout(() => this.startUpdate(), delay) : -1;
        if (this.composing != 0)
          for (let tr of update.transactions) {
            if (tr.isUserEvent("input.type"))
              this.composing = 2;
            else if (this.composing == 2 && tr.selection)
              this.composing = 3;
          }
      }
      startUpdate() {
        this.debounceUpdate = -1;
        this.pendingStart = false;
        let { state } = this.view, cState = state.field(completionState);
        for (let active of cState.active) {
          if (active.isPending && !this.running.some((r2) => r2.active.source == active.source))
            this.startQuery(active);
        }
        if (this.running.length && cState.open && cState.open.disabled)
          this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
      }
      startQuery(active) {
        let { state } = this.view, pos2 = cur(state);
        let context = new CompletionContext(state, pos2, active.explicit, this.view);
        let pending = new RunningQuery(active, context);
        this.running.push(pending);
        Promise.resolve(active.source(context)).then((result) => {
          if (!pending.context.aborted) {
            pending.done = result || null;
            this.scheduleAccept();
          }
        }, (err2) => {
          this.view.dispatch({ effects: closeCompletionEffect.of(null) });
          logException(this.view.state, err2);
        });
      }
      scheduleAccept() {
        if (this.running.every((q2) => q2.done !== void 0))
          this.accept();
        else if (this.debounceAccept < 0)
          this.debounceAccept = setTimeout(() => this.accept(), this.view.state.facet(completionConfig).updateSyncTime);
      }
      // For each finished query in this.running, try to create a result
      // or, if appropriate, restart the query.
      accept() {
        var _a2;
        if (this.debounceAccept > -1)
          clearTimeout(this.debounceAccept);
        this.debounceAccept = -1;
        let updated = [];
        let conf = this.view.state.facet(completionConfig), cState = this.view.state.field(completionState);
        for (let i2 = 0; i2 < this.running.length; i2++) {
          let query = this.running[i2];
          if (query.done === void 0)
            continue;
          this.running.splice(i2--, 1);
          if (query.done) {
            let pos2 = cur(query.updates.length ? query.updates[0].startState : this.view.state);
            let limit = Math.min(pos2, query.done.from + (query.active.explicit ? 0 : 1));
            let active = new ActiveResult(query.active.source, query.active.explicit, limit, query.done, query.done.from, (_a2 = query.done.to) !== null && _a2 !== void 0 ? _a2 : pos2);
            for (let tr of query.updates)
              active = active.update(tr, conf);
            if (active.hasResult()) {
              updated.push(active);
              continue;
            }
          }
          let current = cState.active.find((a2) => a2.source == query.active.source);
          if (current && current.isPending) {
            if (query.done == null) {
              let active = new ActiveSource(
                query.active.source,
                0
                /* State.Inactive */
              );
              for (let tr of query.updates)
                active = active.update(tr, conf);
              if (!active.isPending)
                updated.push(active);
            } else {
              this.startQuery(current);
            }
          }
        }
        if (updated.length || cState.open && cState.open.disabled)
          this.view.dispatch({ effects: setActiveEffect.of(updated) });
      }
    }, {
      eventHandlers: {
        blur(event) {
          let state = this.view.state.field(completionState, false);
          if (state && state.tooltip && this.view.state.facet(completionConfig).closeOnBlur) {
            let dialog = state.open && getTooltip(this.view, state.open.tooltip);
            if (!dialog || !dialog.dom.contains(event.relatedTarget))
              setTimeout(() => this.view.dispatch({ effects: closeCompletionEffect.of(null) }), 10);
          }
        },
        compositionstart() {
          this.composing = 1;
        },
        compositionend() {
          if (this.composing == 3) {
            setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
          }
          this.composing = 0;
        }
      }
    });
    const windows = typeof navigator == "object" && /* @__PURE__ */ /Win/.test(navigator.platform);
    const commitCharacters = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ EditorView.domEventHandlers({
      keydown(event, view) {
        let field = view.state.field(completionState, false);
        if (!field || !field.open || field.open.disabled || field.open.selected < 0 || event.key.length > 1 || event.ctrlKey && !(windows && event.altKey) || event.metaKey)
          return false;
        let option = field.open.options[field.open.selected];
        let result = field.active.find((a2) => a2.source == option.source);
        let commitChars = option.completion.commitCharacters || result.result.commitCharacters;
        if (commitChars && commitChars.indexOf(event.key) > -1)
          applyCompletion(view, option);
        return false;
      }
    }));
    const baseTheme$1 = /* @__PURE__ */ EditorView.baseTheme({
      ".cm-tooltip.cm-tooltip-autocomplete": {
        "& > ul": {
          fontFamily: "monospace",
          whiteSpace: "nowrap",
          overflow: "hidden auto",
          maxWidth_fallback: "700px",
          maxWidth: "min(700px, 95vw)",
          minWidth: "250px",
          maxHeight: "10em",
          height: "100%",
          listStyle: "none",
          margin: 0,
          padding: 0,
          "& > li, & > completion-section": {
            padding: "1px 3px",
            lineHeight: 1.2
          },
          "& > li": {
            overflowX: "hidden",
            textOverflow: "ellipsis",
            cursor: "pointer"
          },
          "& > completion-section": {
            display: "list-item",
            borderBottom: "1px solid silver",
            paddingLeft: "0.5em",
            opacity: 0.7
          }
        }
      },
      "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
        background: "#17c",
        color: "white"
      },
      "&light .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
        background: "#777"
      },
      "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
        background: "#347",
        color: "white"
      },
      "&dark .cm-tooltip-autocomplete-disabled ul li[aria-selected]": {
        background: "#444"
      },
      ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
        content: '"···"',
        opacity: 0.5,
        display: "block",
        textAlign: "center"
      },
      ".cm-tooltip.cm-completionInfo": {
        position: "absolute",
        padding: "3px 9px",
        width: "max-content",
        maxWidth: `${400}px`,
        boxSizing: "border-box",
        whiteSpace: "pre-line"
      },
      ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
      ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
      ".cm-completionInfo.cm-completionInfo-left-narrow": { right: `${30}px` },
      ".cm-completionInfo.cm-completionInfo-right-narrow": { left: `${30}px` },
      "&light .cm-snippetField": { backgroundColor: "#00000022" },
      "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
      ".cm-snippetFieldPosition": {
        verticalAlign: "text-top",
        width: 0,
        height: "1.15em",
        display: "inline-block",
        margin: "0 -0.7px -.7em",
        borderLeft: "1.4px dotted #888"
      },
      ".cm-completionMatchedText": {
        textDecoration: "underline"
      },
      ".cm-completionDetail": {
        marginLeft: "0.5em",
        fontStyle: "italic"
      },
      ".cm-completionIcon": {
        fontSize: "90%",
        width: ".8em",
        display: "inline-block",
        textAlign: "center",
        paddingRight: ".6em",
        opacity: "0.6",
        boxSizing: "content-box"
      },
      ".cm-completionIcon-function, .cm-completionIcon-method": {
        "&:after": { content: "'ƒ'" }
      },
      ".cm-completionIcon-class": {
        "&:after": { content: "'○'" }
      },
      ".cm-completionIcon-interface": {
        "&:after": { content: "'◌'" }
      },
      ".cm-completionIcon-variable": {
        "&:after": { content: "'𝑥'" }
      },
      ".cm-completionIcon-constant": {
        "&:after": { content: "'𝐶'" }
      },
      ".cm-completionIcon-type": {
        "&:after": { content: "'𝑡'" }
      },
      ".cm-completionIcon-enum": {
        "&:after": { content: "'∪'" }
      },
      ".cm-completionIcon-property": {
        "&:after": { content: "'□'" }
      },
      ".cm-completionIcon-keyword": {
        "&:after": { content: "'🔑︎'" }
        // Disable emoji rendering
      },
      ".cm-completionIcon-namespace": {
        "&:after": { content: "'▢'" }
      },
      ".cm-completionIcon-text": {
        "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
      }
    });
    const closedBracket = /* @__PURE__ */ new class extends RangeValue {
    }();
    closedBracket.startSide = 1;
    closedBracket.endSide = -1;
    function autocompletion(config2 = {}) {
      return [
        commitCharacters,
        completionState,
        completionConfig.of(config2),
        completionPlugin,
        completionKeymapExt,
        baseTheme$1
      ];
    }
    const completionKeymap = [
      { key: "Ctrl-Space", run: startCompletion },
      { mac: "Alt-`", run: startCompletion },
      { key: "Escape", run: closeCompletion },
      { key: "ArrowDown", run: /* @__PURE__ */ moveCompletionSelection(true) },
      { key: "ArrowUp", run: /* @__PURE__ */ moveCompletionSelection(false) },
      { key: "PageDown", run: /* @__PURE__ */ moveCompletionSelection(true, "page") },
      { key: "PageUp", run: /* @__PURE__ */ moveCompletionSelection(false, "page") },
      { key: "Enter", run: acceptCompletion }
    ];
    const completionKeymapExt = /* @__PURE__ */ Prec.highest(/* @__PURE__ */ keymap.computeN([completionConfig], (state) => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));
    function crelt() {
      var elt = arguments[0];
      if (typeof elt == "string") elt = document.createElement(elt);
      var i2 = 1, next = arguments[1];
      if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
        for (var name2 in next) if (Object.prototype.hasOwnProperty.call(next, name2)) {
          var value = next[name2];
          if (typeof value == "string") elt.setAttribute(name2, value);
          else if (value != null) elt[name2] = value;
        }
        i2++;
      }
      for (; i2 < arguments.length; i2++) add(elt, arguments[i2]);
      return elt;
    }
    function add(elt, child) {
      if (typeof child == "string") {
        elt.appendChild(document.createTextNode(child));
      } else if (child == null) ;
      else if (child.nodeType != null) {
        elt.appendChild(child);
      } else if (Array.isArray(child)) {
        for (var i2 = 0; i2 < child.length; i2++) add(elt, child[i2]);
      } else {
        throw new RangeError("Unsupported child node: " + child);
      }
    }
    class SelectedDiagnostic {
      constructor(from, to, diagnostic) {
        this.from = from;
        this.to = to;
        this.diagnostic = diagnostic;
      }
    }
    class LintState {
      constructor(diagnostics, panel, selected) {
        this.diagnostics = diagnostics;
        this.panel = panel;
        this.selected = selected;
      }
      static init(diagnostics, panel, state) {
        let markedDiagnostics = diagnostics;
        let diagnosticFilter = state.facet(lintConfig).markerFilter;
        if (diagnosticFilter)
          markedDiagnostics = diagnosticFilter(markedDiagnostics, state);
        let sorted = diagnostics.slice().sort((a2, b) => a2.from - b.from || a2.to - b.to);
        let deco = new RangeSetBuilder(), active = [], pos2 = 0;
        for (let i2 = 0; ; ) {
          let next = i2 == sorted.length ? null : sorted[i2];
          if (!next && !active.length)
            break;
          let from, to;
          if (active.length) {
            from = pos2;
            to = active.reduce((p2, d2) => Math.min(p2, d2.to), next && next.from > from ? next.from : 1e8);
          } else {
            from = next.from;
            to = next.to;
            active.push(next);
            i2++;
          }
          while (i2 < sorted.length) {
            let next2 = sorted[i2];
            if (next2.from == from && (next2.to > next2.from || next2.to == from)) {
              active.push(next2);
              i2++;
              to = Math.min(next2.to, to);
            } else {
              to = Math.min(next2.from, to);
              break;
            }
          }
          let sev = maxSeverity(active);
          if (active.some((d2) => d2.from == d2.to || d2.from == d2.to - 1 && state.doc.lineAt(d2.from).to == d2.from)) {
            deco.add(from, from, Decoration.widget({
              widget: new DiagnosticWidget(sev),
              diagnostics: active.slice()
            }));
          } else {
            let markClass = active.reduce((c2, d2) => d2.markClass ? c2 + " " + d2.markClass : c2, "");
            deco.add(from, to, Decoration.mark({
              class: "cm-lintRange cm-lintRange-" + sev + markClass,
              diagnostics: active.slice(),
              inclusiveEnd: active.some((a2) => a2.to > to)
            }));
          }
          pos2 = to;
          for (let i3 = 0; i3 < active.length; i3++)
            if (active[i3].to <= pos2)
              active.splice(i3--, 1);
        }
        let set = deco.finish();
        return new LintState(set, panel, findDiagnostic(set));
      }
    }
    function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
      let found = null;
      diagnostics.between(after, 1e9, (from, to, { spec }) => {
        if (diagnostic && spec.diagnostics.indexOf(diagnostic) < 0)
          return;
        if (!found)
          found = new SelectedDiagnostic(from, to, diagnostic || spec.diagnostics[0]);
        else if (spec.diagnostics.indexOf(found.diagnostic) < 0)
          return false;
        else
          found = new SelectedDiagnostic(found.from, to, found.diagnostic);
      });
      return found;
    }
    function hideTooltip(tr, tooltip) {
      let from = tooltip.pos, to = tooltip.end || from;
      let result = tr.state.facet(lintConfig).hideOn(tr, from, to);
      if (result != null)
        return result;
      let line2 = tr.startState.doc.lineAt(tooltip.pos);
      return !!(tr.effects.some((e2) => e2.is(setDiagnosticsEffect)) || tr.changes.touchesRange(line2.from, Math.max(line2.to, to)));
    }
    function maybeEnableLint(state, effects) {
      return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of(lintExtensions));
    }
    function setDiagnostics(state, diagnostics) {
      return {
        effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)])
      };
    }
    const setDiagnosticsEffect = /* @__PURE__ */ StateEffect.define();
    const togglePanel = /* @__PURE__ */ StateEffect.define();
    const movePanelSelection = /* @__PURE__ */ StateEffect.define();
    const lintState = /* @__PURE__ */ StateField.define({
      create() {
        return new LintState(Decoration.none, null, null);
      },
      update(value, tr) {
        if (tr.docChanged && value.diagnostics.size) {
          let mapped = value.diagnostics.map(tr.changes), selected = null, panel = value.panel;
          if (value.selected) {
            let selPos = tr.changes.mapPos(value.selected.from, 1);
            selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
          }
          if (!mapped.size && panel && tr.state.facet(lintConfig).autoPanel)
            panel = null;
          value = new LintState(mapped, panel, selected);
        }
        for (let effect2 of tr.effects) {
          if (effect2.is(setDiagnosticsEffect)) {
            let panel = !tr.state.facet(lintConfig).autoPanel ? value.panel : effect2.value.length ? LintPanel.open : null;
            value = LintState.init(effect2.value, panel, tr.state);
          } else if (effect2.is(togglePanel)) {
            value = new LintState(value.diagnostics, effect2.value ? LintPanel.open : null, value.selected);
          } else if (effect2.is(movePanelSelection)) {
            value = new LintState(value.diagnostics, value.panel, effect2.value);
          }
        }
        return value;
      },
      provide: (f2) => [
        showPanel.from(f2, (val) => val.panel),
        EditorView.decorations.from(f2, (s2) => s2.diagnostics)
      ]
    });
    const activeMark = /* @__PURE__ */ Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
    function lintTooltip(view, pos2, side) {
      let { diagnostics } = view.state.field(lintState);
      let found, start2 = -1, end2 = -1;
      diagnostics.between(pos2 - (side < 0 ? 1 : 0), pos2 + (side > 0 ? 1 : 0), (from, to, { spec }) => {
        if (pos2 >= from && pos2 <= to && (from == to || (pos2 > from || side > 0) && (pos2 < to || side < 0))) {
          found = spec.diagnostics;
          start2 = from;
          end2 = to;
          return false;
        }
      });
      let diagnosticFilter = view.state.facet(lintConfig).tooltipFilter;
      if (found && diagnosticFilter)
        found = diagnosticFilter(found, view.state);
      if (!found)
        return null;
      return {
        pos: start2,
        end: end2,
        above: view.state.doc.lineAt(start2).to < end2,
        create() {
          return { dom: diagnosticsTooltip(view, found) };
        }
      };
    }
    function diagnosticsTooltip(view, diagnostics) {
      return crelt("ul", { class: "cm-tooltip-lint" }, diagnostics.map((d2) => renderDiagnostic(view, d2, false)));
    }
    const closeLintPanel = (view) => {
      let field = view.state.field(lintState, false);
      if (!field || !field.panel)
        return false;
      view.dispatch({ effects: togglePanel.of(false) });
      return true;
    };
    const lintPlugin = /* @__PURE__ */ ViewPlugin.fromClass(class {
      constructor(view) {
        this.view = view;
        this.timeout = -1;
        this.set = true;
        let { delay } = view.state.facet(lintConfig);
        this.lintTime = Date.now() + delay;
        this.run = this.run.bind(this);
        this.timeout = setTimeout(this.run, delay);
      }
      run() {
        clearTimeout(this.timeout);
        let now = Date.now();
        if (now < this.lintTime - 10) {
          this.timeout = setTimeout(this.run, this.lintTime - now);
        } else {
          this.set = false;
          let { state } = this.view, { sources } = state.facet(lintConfig);
          if (sources.length)
            batchResults(sources.map((s2) => Promise.resolve(s2(this.view))), (annotations) => {
              if (this.view.state.doc == state.doc)
                this.view.dispatch(setDiagnostics(this.view.state, annotations.reduce((a2, b) => a2.concat(b))));
            }, (error2) => {
              logException(this.view.state, error2);
            });
        }
      }
      update(update) {
        let config2 = update.state.facet(lintConfig);
        if (update.docChanged || config2 != update.startState.facet(lintConfig) || config2.needsRefresh && config2.needsRefresh(update)) {
          this.lintTime = Date.now() + config2.delay;
          if (!this.set) {
            this.set = true;
            this.timeout = setTimeout(this.run, config2.delay);
          }
        }
      }
      force() {
        if (this.set) {
          this.lintTime = Date.now();
          this.run();
        }
      }
      destroy() {
        clearTimeout(this.timeout);
      }
    });
    function batchResults(promises, sink, error2) {
      let collected = [], timeout = -1;
      for (let p2 of promises)
        p2.then((value) => {
          collected.push(value);
          clearTimeout(timeout);
          if (collected.length == promises.length)
            sink(collected);
          else
            timeout = setTimeout(() => sink(collected), 200);
        }, error2);
    }
    const lintConfig = /* @__PURE__ */ Facet.define({
      combine(input) {
        return Object.assign({ sources: input.map((i2) => i2.source).filter((x2) => x2 != null) }, combineConfig(input.map((i2) => i2.config), {
          delay: 750,
          markerFilter: null,
          tooltipFilter: null,
          needsRefresh: null,
          hideOn: () => null
        }, {
          needsRefresh: (a2, b) => !a2 ? b : !b ? a2 : (u2) => a2(u2) || b(u2)
        }));
      }
    });
    function linter(source2, config2 = {}) {
      return [
        lintConfig.of({ source: source2, config: config2 }),
        lintPlugin,
        lintExtensions
      ];
    }
    function assignKeys(actions) {
      let assigned = [];
      if (actions)
        actions: for (let { name: name2 } of actions) {
          for (let i2 = 0; i2 < name2.length; i2++) {
            let ch3 = name2[i2];
            if (/[a-zA-Z]/.test(ch3) && !assigned.some((c2) => c2.toLowerCase() == ch3.toLowerCase())) {
              assigned.push(ch3);
              continue actions;
            }
          }
          assigned.push("");
        }
      return assigned;
    }
    function renderDiagnostic(view, diagnostic, inPanel) {
      var _a2;
      let keys = inPanel ? assignKeys(diagnostic.actions) : [];
      return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.renderMessage ? diagnostic.renderMessage(view) : diagnostic.message), (_a2 = diagnostic.actions) === null || _a2 === void 0 ? void 0 : _a2.map((action, i2) => {
        let fired = false, click = (e2) => {
          e2.preventDefault();
          if (fired)
            return;
          fired = true;
          let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
          if (found)
            action.apply(view, found.from, found.to);
        };
        let { name: name2 } = action, keyIndex = keys[i2] ? name2.indexOf(keys[i2]) : -1;
        let nameElt = keyIndex < 0 ? name2 : [
          name2.slice(0, keyIndex),
          crelt("u", name2.slice(keyIndex, keyIndex + 1)),
          name2.slice(keyIndex + 1)
        ];
        return crelt("button", {
          type: "button",
          class: "cm-diagnosticAction",
          onclick: click,
          onmousedown: click,
          "aria-label": ` Action: ${name2}${keyIndex < 0 ? "" : ` (access key "${keys[i2]})"`}.`
        }, nameElt);
      }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
    }
    class DiagnosticWidget extends WidgetType {
      constructor(sev) {
        super();
        this.sev = sev;
      }
      eq(other) {
        return other.sev == this.sev;
      }
      toDOM() {
        return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.sev });
      }
    }
    class PanelItem {
      constructor(view, diagnostic) {
        this.diagnostic = diagnostic;
        this.id = "item_" + Math.floor(Math.random() * 4294967295).toString(16);
        this.dom = renderDiagnostic(view, diagnostic, true);
        this.dom.id = this.id;
        this.dom.setAttribute("role", "option");
      }
    }
    class LintPanel {
      constructor(view) {
        this.view = view;
        this.items = [];
        let onkeydown = (event) => {
          if (event.keyCode == 27) {
            closeLintPanel(this.view);
            this.view.focus();
          } else if (event.keyCode == 38 || event.keyCode == 33) {
            this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
          } else if (event.keyCode == 40 || event.keyCode == 34) {
            this.moveSelection((this.selectedIndex + 1) % this.items.length);
          } else if (event.keyCode == 36) {
            this.moveSelection(0);
          } else if (event.keyCode == 35) {
            this.moveSelection(this.items.length - 1);
          } else if (event.keyCode == 13) {
            this.view.focus();
          } else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) {
            let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
            for (let i2 = 0; i2 < keys.length; i2++)
              if (keys[i2].toUpperCase().charCodeAt(0) == event.keyCode) {
                let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
                if (found)
                  diagnostic.actions[i2].apply(view, found.from, found.to);
              }
          } else {
            return;
          }
          event.preventDefault();
        };
        let onclick = (event) => {
          for (let i2 = 0; i2 < this.items.length; i2++) {
            if (this.items[i2].dom.contains(event.target))
              this.moveSelection(i2);
          }
        };
        this.list = crelt("ul", {
          tabIndex: 0,
          role: "listbox",
          "aria-label": this.view.state.phrase("Diagnostics"),
          onkeydown,
          onclick
        });
        this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
          type: "button",
          name: "close",
          "aria-label": this.view.state.phrase("close"),
          onclick: () => closeLintPanel(this.view)
        }, "×"));
        this.update();
      }
      get selectedIndex() {
        let selected = this.view.state.field(lintState).selected;
        if (!selected)
          return -1;
        for (let i2 = 0; i2 < this.items.length; i2++)
          if (this.items[i2].diagnostic == selected.diagnostic)
            return i2;
        return -1;
      }
      update() {
        let { diagnostics, selected } = this.view.state.field(lintState);
        let i2 = 0, needsSync = false, newSelectedItem = null;
        let seen = /* @__PURE__ */ new Set();
        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
          for (let diagnostic of spec.diagnostics) {
            if (seen.has(diagnostic))
              continue;
            seen.add(diagnostic);
            let found = -1, item;
            for (let j2 = i2; j2 < this.items.length; j2++)
              if (this.items[j2].diagnostic == diagnostic) {
                found = j2;
                break;
              }
            if (found < 0) {
              item = new PanelItem(this.view, diagnostic);
              this.items.splice(i2, 0, item);
              needsSync = true;
            } else {
              item = this.items[found];
              if (found > i2) {
                this.items.splice(i2, found - i2);
                needsSync = true;
              }
            }
            if (selected && item.diagnostic == selected.diagnostic) {
              if (!item.dom.hasAttribute("aria-selected")) {
                item.dom.setAttribute("aria-selected", "true");
                newSelectedItem = item;
              }
            } else if (item.dom.hasAttribute("aria-selected")) {
              item.dom.removeAttribute("aria-selected");
            }
            i2++;
          }
        });
        while (i2 < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
          needsSync = true;
          this.items.pop();
        }
        if (this.items.length == 0) {
          this.items.push(new PanelItem(this.view, {
            from: -1,
            to: -1,
            severity: "info",
            message: this.view.state.phrase("No diagnostics")
          }));
          needsSync = true;
        }
        if (newSelectedItem) {
          this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
          this.view.requestMeasure({
            key: this,
            read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
            write: ({ sel, panel }) => {
              let scaleY = panel.height / this.list.offsetHeight;
              if (sel.top < panel.top)
                this.list.scrollTop -= (panel.top - sel.top) / scaleY;
              else if (sel.bottom > panel.bottom)
                this.list.scrollTop += (sel.bottom - panel.bottom) / scaleY;
            }
          });
        } else if (this.selectedIndex < 0) {
          this.list.removeAttribute("aria-activedescendant");
        }
        if (needsSync)
          this.sync();
      }
      sync() {
        let domPos = this.list.firstChild;
        function rm2() {
          let prev = domPos;
          domPos = prev.nextSibling;
          prev.remove();
        }
        for (let item of this.items) {
          if (item.dom.parentNode == this.list) {
            while (domPos != item.dom)
              rm2();
            domPos = item.dom.nextSibling;
          } else {
            this.list.insertBefore(item.dom, domPos);
          }
        }
        while (domPos)
          rm2();
      }
      moveSelection(selectedIndex) {
        if (this.selectedIndex < 0)
          return;
        let field = this.view.state.field(lintState);
        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
        if (!selection)
          return;
        this.view.dispatch({
          selection: { anchor: selection.from, head: selection.to },
          scrollIntoView: true,
          effects: movePanelSelection.of(selection)
        });
      }
      static open(view) {
        return new LintPanel(view);
      }
    }
    function svg(content2, attrs = `viewBox="0 0 40 40"`) {
      return `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" ${attrs}>${encodeURIComponent(content2)}</svg>')`;
    }
    function underline(color) {
      return svg(`<path d="m0 2.5 l2 -1.5 l1 0 l2 1.5 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>`, `width="6" height="3"`);
    }
    const baseTheme = /* @__PURE__ */ EditorView.baseTheme({
      ".cm-diagnostic": {
        padding: "3px 6px 3px 8px",
        marginLeft: "-1px",
        display: "block",
        whiteSpace: "pre-wrap"
      },
      ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
      ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
      ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
      ".cm-diagnostic-hint": { borderLeft: "5px solid #66d" },
      ".cm-diagnosticAction": {
        font: "inherit",
        border: "none",
        padding: "2px 4px",
        backgroundColor: "#444",
        color: "white",
        borderRadius: "3px",
        marginLeft: "8px",
        cursor: "pointer"
      },
      ".cm-diagnosticSource": {
        fontSize: "70%",
        opacity: 0.7
      },
      ".cm-lintRange": {
        backgroundPosition: "left bottom",
        backgroundRepeat: "repeat-x",
        paddingBottom: "0.7px"
      },
      ".cm-lintRange-error": { backgroundImage: /* @__PURE__ */ underline("#d11") },
      ".cm-lintRange-warning": { backgroundImage: /* @__PURE__ */ underline("orange") },
      ".cm-lintRange-info": { backgroundImage: /* @__PURE__ */ underline("#999") },
      ".cm-lintRange-hint": { backgroundImage: /* @__PURE__ */ underline("#66d") },
      ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
      ".cm-tooltip-lint": {
        padding: 0,
        margin: 0
      },
      ".cm-lintPoint": {
        position: "relative",
        "&:after": {
          content: '""',
          position: "absolute",
          bottom: 0,
          left: "-2px",
          borderLeft: "3px solid transparent",
          borderRight: "3px solid transparent",
          borderBottom: "4px solid #d11"
        }
      },
      ".cm-lintPoint-warning": {
        "&:after": { borderBottomColor: "orange" }
      },
      ".cm-lintPoint-info": {
        "&:after": { borderBottomColor: "#999" }
      },
      ".cm-lintPoint-hint": {
        "&:after": { borderBottomColor: "#66d" }
      },
      ".cm-panel.cm-panel-lint": {
        position: "relative",
        "& ul": {
          maxHeight: "100px",
          overflowY: "auto",
          "& [aria-selected]": {
            backgroundColor: "#ddd",
            "& u": { textDecoration: "underline" }
          },
          "&:focus [aria-selected]": {
            background_fallback: "#bdf",
            backgroundColor: "Highlight",
            color_fallback: "white",
            color: "HighlightText"
          },
          "& u": { textDecoration: "none" },
          padding: 0,
          margin: 0
        },
        "& [name=close]": {
          position: "absolute",
          top: "0",
          right: "2px",
          background: "inherit",
          border: "none",
          font: "inherit",
          padding: 0,
          margin: 0
        }
      }
    });
    function severityWeight(sev) {
      return sev == "error" ? 4 : sev == "warning" ? 3 : sev == "info" ? 2 : 1;
    }
    function maxSeverity(diagnostics) {
      let sev = "hint", weight = 1;
      for (let d2 of diagnostics) {
        let w2 = severityWeight(d2.severity);
        if (w2 > weight) {
          weight = w2;
          sev = d2.severity;
        }
      }
      return sev;
    }
    const lintExtensions = [
      lintState,
      /* @__PURE__ */ EditorView.decorations.compute([lintState], (state) => {
        let { selected, panel } = state.field(lintState);
        return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
          activeMark.range(selected.from, selected.to)
        ]);
      }),
      /* @__PURE__ */ hoverTooltip(lintTooltip, { hideOn: hideTooltip }),
      baseTheme
    ];
    const toggleComment = (target) => {
      let { state } = target, line2 = state.doc.lineAt(state.selection.main.from), config2 = getConfig(target.state, line2.from);
      return config2.line ? toggleLineComment(target) : config2.block ? toggleBlockCommentByLine(target) : false;
    };
    function command(f2, option) {
      return ({ state, dispatch }) => {
        if (state.readOnly)
          return false;
        let tr = f2(option, state);
        if (!tr)
          return false;
        dispatch(state.update(tr));
        return true;
      };
    }
    const toggleLineComment = /* @__PURE__ */ command(
      changeLineComment,
      0
      /* CommentOption.Toggle */
    );
    const toggleBlockComment = /* @__PURE__ */ command(
      changeBlockComment,
      0
      /* CommentOption.Toggle */
    );
    const toggleBlockCommentByLine = /* @__PURE__ */ command(
      (o2, s2) => changeBlockComment(o2, s2, selectedLineRanges(s2)),
      0
      /* CommentOption.Toggle */
    );
    function getConfig(state, pos2) {
      let data = state.languageDataAt("commentTokens", pos2);
      return data.length ? data[0] : {};
    }
    const SearchMargin = 50;
    function findBlockComment(state, { open, close }, from, to) {
      let textBefore = state.sliceDoc(from - SearchMargin, from);
      let textAfter = state.sliceDoc(to, to + SearchMargin);
      let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
      let beforeOff = textBefore.length - spaceBefore;
      if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
        return {
          open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
          close: { pos: to + spaceAfter, margin: spaceAfter && 1 }
        };
      }
      let startText, endText;
      if (to - from <= 2 * SearchMargin) {
        startText = endText = state.sliceDoc(from, to);
      } else {
        startText = state.sliceDoc(from, from + SearchMargin);
        endText = state.sliceDoc(to - SearchMargin, to);
      }
      let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
      let endOff = endText.length - endSpace - close.length;
      if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
        return {
          open: {
            pos: from + startSpace + open.length,
            margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
          },
          close: {
            pos: to - endSpace - close.length,
            margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
          }
        };
      }
      return null;
    }
    function selectedLineRanges(state) {
      let ranges = [];
      for (let r2 of state.selection.ranges) {
        let fromLine = state.doc.lineAt(r2.from);
        let toLine = r2.to <= fromLine.to ? fromLine : state.doc.lineAt(r2.to);
        if (toLine.from > fromLine.from && toLine.from == r2.to)
          toLine = r2.to == fromLine.to + 1 ? fromLine : state.doc.lineAt(r2.to - 1);
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last].to > fromLine.from)
          ranges[last].to = toLine.to;
        else
          ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
      }
      return ranges;
    }
    function changeBlockComment(option, state, ranges = state.selection.ranges) {
      let tokens = ranges.map((r2) => getConfig(state, r2.from).block);
      if (!tokens.every((c2) => c2))
        return null;
      let comments = ranges.map((r2, i2) => findBlockComment(state, tokens[i2], r2.from, r2.to));
      if (option != 2 && !comments.every((c2) => c2)) {
        return { changes: state.changes(ranges.map((range, i2) => {
          if (comments[i2])
            return [];
          return [{ from: range.from, insert: tokens[i2].open + " " }, { from: range.to, insert: " " + tokens[i2].close }];
        })) };
      } else if (option != 1 && comments.some((c2) => c2)) {
        let changes = [];
        for (let i2 = 0, comment2; i2 < comments.length; i2++)
          if (comment2 = comments[i2]) {
            let token2 = tokens[i2], { open, close } = comment2;
            changes.push({ from: open.pos - token2.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token2.close.length });
          }
        return { changes };
      }
      return null;
    }
    function changeLineComment(option, state, ranges = state.selection.ranges) {
      let lines = [];
      let prevLine = -1;
      for (let { from, to } of ranges) {
        let startI = lines.length, minIndent = 1e9;
        let token2 = getConfig(state, from).line;
        if (!token2)
          continue;
        for (let pos2 = from; pos2 <= to; ) {
          let line2 = state.doc.lineAt(pos2);
          if (line2.from > prevLine && (from == to || to > line2.from)) {
            prevLine = line2.from;
            let indent = /^\s*/.exec(line2.text)[0].length;
            let empty = indent == line2.length;
            let comment2 = line2.text.slice(indent, indent + token2.length) == token2 ? indent : -1;
            if (indent < line2.text.length && indent < minIndent)
              minIndent = indent;
            lines.push({ line: line2, comment: comment2, token: token2, indent, empty, single: false });
          }
          pos2 = line2.to + 1;
        }
        if (minIndent < 1e9) {
          for (let i2 = startI; i2 < lines.length; i2++)
            if (lines[i2].indent < lines[i2].line.text.length)
              lines[i2].indent = minIndent;
        }
        if (lines.length == startI + 1)
          lines[startI].single = true;
      }
      if (option != 2 && lines.some((l2) => l2.comment < 0 && (!l2.empty || l2.single))) {
        let changes = [];
        for (let { line: line2, token: token2, indent, empty, single } of lines)
          if (single || !empty)
            changes.push({ from: line2.from + indent, insert: token2 + " " });
        let changeSet = state.changes(changes);
        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
      } else if (option != 1 && lines.some((l2) => l2.comment >= 0)) {
        let changes = [];
        for (let { line: line2, comment: comment2, token: token2 } of lines)
          if (comment2 >= 0) {
            let from = line2.from + comment2, to = from + token2.length;
            if (line2.text[to - line2.from] == " ")
              to++;
            changes.push({ from, to });
          }
        return { changes };
      }
      return null;
    }
    const fromHistory = /* @__PURE__ */ Annotation.define();
    const isolateHistory = /* @__PURE__ */ Annotation.define();
    const invertedEffects = /* @__PURE__ */ Facet.define();
    const historyConfig = /* @__PURE__ */ Facet.define({
      combine(configs) {
        return combineConfig(configs, {
          minDepth: 100,
          newGroupDelay: 500,
          joinToEvent: (_t, isAdjacent2) => isAdjacent2
        }, {
          minDepth: Math.max,
          newGroupDelay: Math.min,
          joinToEvent: (a2, b) => (tr, adj) => a2(tr, adj) || b(tr, adj)
        });
      }
    });
    const historyField_ = /* @__PURE__ */ StateField.define({
      create() {
        return HistoryState.empty;
      },
      update(state, tr) {
        let config2 = tr.state.facet(historyConfig);
        let fromHist = tr.annotation(fromHistory);
        if (fromHist) {
          let item = HistEvent.fromTransaction(tr, fromHist.selection), from = fromHist.side;
          let other = from == 0 ? state.undone : state.done;
          if (item)
            other = updateBranch(other, other.length, config2.minDepth, item);
          else
            other = addSelection(other, tr.startState.selection);
          return new HistoryState(from == 0 ? fromHist.rest : other, from == 0 ? other : fromHist.rest);
        }
        let isolate = tr.annotation(isolateHistory);
        if (isolate == "full" || isolate == "before")
          state = state.isolate();
        if (tr.annotation(Transaction.addToHistory) === false)
          return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
        let event = HistEvent.fromTransaction(tr);
        let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
        if (event)
          state = state.addChanges(event, time, userEvent, config2, tr);
        else if (tr.selection)
          state = state.addSelection(tr.startState.selection, time, userEvent, config2.newGroupDelay);
        if (isolate == "full" || isolate == "after")
          state = state.isolate();
        return state;
      },
      toJSON(value) {
        return { done: value.done.map((e2) => e2.toJSON()), undone: value.undone.map((e2) => e2.toJSON()) };
      },
      fromJSON(json) {
        return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
      }
    });
    function history(config2 = {}) {
      return [
        historyField_,
        historyConfig.of(config2),
        EditorView.domEventHandlers({
          beforeinput(e2, view) {
            let command2 = e2.inputType == "historyUndo" ? undo : e2.inputType == "historyRedo" ? redo : null;
            if (!command2)
              return false;
            e2.preventDefault();
            return command2(view);
          }
        })
      ];
    }
    function cmd(side, selection) {
      return function({ state, dispatch }) {
        if (!selection && state.readOnly)
          return false;
        let historyState = state.field(historyField_, false);
        if (!historyState)
          return false;
        let tr = historyState.pop(side, state, selection);
        if (!tr)
          return false;
        dispatch(tr);
        return true;
      };
    }
    const undo = /* @__PURE__ */ cmd(0, false);
    const redo = /* @__PURE__ */ cmd(1, false);
    const undoSelection = /* @__PURE__ */ cmd(0, true);
    const redoSelection = /* @__PURE__ */ cmd(1, true);
    class HistEvent {
      constructor(changes, effects, mapped, startSelection, selectionsAfter) {
        this.changes = changes;
        this.effects = effects;
        this.mapped = mapped;
        this.startSelection = startSelection;
        this.selectionsAfter = selectionsAfter;
      }
      setSelAfter(after) {
        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
      }
      toJSON() {
        var _a2, _b2, _c;
        return {
          changes: (_a2 = this.changes) === null || _a2 === void 0 ? void 0 : _a2.toJSON(),
          mapped: (_b2 = this.mapped) === null || _b2 === void 0 ? void 0 : _b2.toJSON(),
          startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
          selectionsAfter: this.selectionsAfter.map((s2) => s2.toJSON())
        };
      }
      static fromJSON(json) {
        return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
      }
      // This does not check `addToHistory` and such, it assumes the
      // transaction needs to be converted to an item. Returns null when
      // there are no changes or effects in the transaction.
      static fromTransaction(tr, selection) {
        let effects = none;
        for (let invert of tr.startState.facet(invertedEffects)) {
          let result = invert(tr);
          if (result.length)
            effects = effects.concat(result);
        }
        if (!effects.length && tr.changes.empty)
          return null;
        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, void 0, selection || tr.startState.selection, none);
      }
      static selection(selections) {
        return new HistEvent(void 0, none, void 0, void 0, selections);
      }
    }
    function updateBranch(branch, to, maxLen, newEvent) {
      let start2 = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
      let newBranch = branch.slice(start2, to);
      newBranch.push(newEvent);
      return newBranch;
    }
    function isAdjacent(a2, b) {
      let ranges = [], isAdjacent2 = false;
      a2.iterChangedRanges((f2, t2) => ranges.push(f2, t2));
      b.iterChangedRanges((_f, _t, f2, t2) => {
        for (let i2 = 0; i2 < ranges.length; ) {
          let from = ranges[i2++], to = ranges[i2++];
          if (t2 >= from && f2 <= to)
            isAdjacent2 = true;
        }
      });
      return isAdjacent2;
    }
    function eqSelectionShape(a2, b) {
      return a2.ranges.length == b.ranges.length && a2.ranges.filter((r2, i2) => r2.empty != b.ranges[i2].empty).length === 0;
    }
    function conc(a2, b) {
      return !a2.length ? b : !b.length ? a2 : a2.concat(b);
    }
    const none = [];
    const MaxSelectionsPerEvent = 200;
    function addSelection(branch, selection) {
      if (!branch.length) {
        return [HistEvent.selection([selection])];
      } else {
        let lastEvent = branch[branch.length - 1];
        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
        if (sels.length && sels[sels.length - 1].eq(selection))
          return branch;
        sels.push(selection);
        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
      }
    }
    function popSelection(branch) {
      let last = branch[branch.length - 1];
      let newBranch = branch.slice();
      newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
      return newBranch;
    }
    function addMappingToBranch(branch, mapping) {
      if (!branch.length)
        return branch;
      let length = branch.length, selections = none;
      while (length) {
        let event = mapEvent(branch[length - 1], mapping, selections);
        if (event.changes && !event.changes.empty || event.effects.length) {
          let result = branch.slice(0, length);
          result[length - 1] = event;
          return result;
        } else {
          mapping = event.mapped;
          length--;
          selections = event.selectionsAfter;
        }
      }
      return selections.length ? [HistEvent.selection(selections)] : none;
    }
    function mapEvent(event, mapping, extraSelections) {
      let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map((s2) => s2.map(mapping)) : none, extraSelections);
      if (!event.changes)
        return HistEvent.selection(selections);
      let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
      let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
      return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
    }
    const joinableUserEvent = /^(input\.type|delete)($|\.)/;
    class HistoryState {
      constructor(done, undone, prevTime = 0, prevUserEvent = void 0) {
        this.done = done;
        this.undone = undone;
        this.prevTime = prevTime;
        this.prevUserEvent = prevUserEvent;
      }
      isolate() {
        return this.prevTime ? new HistoryState(this.done, this.undone) : this;
      }
      addChanges(event, time, userEvent, config2, tr) {
        let done = this.done, lastEvent = done[done.length - 1];
        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes && (!userEvent || joinableUserEvent.test(userEvent)) && (!lastEvent.selectionsAfter.length && time - this.prevTime < config2.newGroupDelay && config2.joinToEvent(tr, isAdjacent(lastEvent.changes, event.changes)) || // For compose (but not compose.start) events, always join with previous event
        userEvent == "input.type.compose")) {
          done = updateBranch(done, done.length - 1, config2.minDepth, new HistEvent(event.changes.compose(lastEvent.changes), conc(StateEffect.mapEffects(event.effects, lastEvent.changes), lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
        } else {
          done = updateBranch(done, done.length, config2.minDepth, event);
        }
        return new HistoryState(done, none, time, userEvent);
      }
      addSelection(selection, time, userEvent, newGroupDelay) {
        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
        if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) && eqSelectionShape(last[last.length - 1], selection))
          return this;
        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
      }
      addMapping(mapping) {
        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
      }
      pop(side, state, onlySelection) {
        let branch = side == 0 ? this.done : this.undone;
        if (branch.length == 0)
          return null;
        let event = branch[branch.length - 1], selection = event.selectionsAfter[0] || state.selection;
        if (onlySelection && event.selectionsAfter.length) {
          return state.update({
            selection: event.selectionsAfter[event.selectionsAfter.length - 1],
            annotations: fromHistory.of({ side, rest: popSelection(branch), selection }),
            userEvent: side == 0 ? "select.undo" : "select.redo",
            scrollIntoView: true
          });
        } else if (!event.changes) {
          return null;
        } else {
          let rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
          if (event.mapped)
            rest = addMappingToBranch(rest, event.mapped);
          return state.update({
            changes: event.changes,
            selection: event.startSelection,
            effects: event.effects,
            annotations: fromHistory.of({ side, rest, selection }),
            filter: false,
            userEvent: side == 0 ? "undo" : "redo",
            scrollIntoView: true
          });
        }
      }
    }
    HistoryState.empty = /* @__PURE__ */ new HistoryState(none, none);
    const historyKeymap = [
      { key: "Mod-z", run: undo, preventDefault: true },
      { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
      { linux: "Ctrl-Shift-z", run: redo, preventDefault: true },
      { key: "Mod-u", run: undoSelection, preventDefault: true },
      { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
    ];
    function updateSel(sel, by) {
      return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
    }
    function setSel(state, selection) {
      return state.update({ selection, scrollIntoView: true, userEvent: "select" });
    }
    function moveSel({ state, dispatch }, how) {
      let selection = updateSel(state.selection, how);
      if (selection.eq(state.selection, true))
        return false;
      dispatch(setSel(state, selection));
      return true;
    }
    function rangeEnd(range, forward) {
      return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
      return moveSel(view, (range) => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    function ltrAtCursor(view) {
      return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
    }
    const cursorCharLeft = (view) => cursorByChar(view, !ltrAtCursor(view));
    const cursorCharRight = (view) => cursorByChar(view, ltrAtCursor(view));
    function cursorByGroup(view, forward) {
      return moveSel(view, (range) => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    const cursorGroupLeft = (view) => cursorByGroup(view, !ltrAtCursor(view));
    const cursorGroupRight = (view) => cursorByGroup(view, ltrAtCursor(view));
    function interestingNode(state, node, bracketProp) {
      if (node.type.prop(bracketProp))
        return true;
      let len = node.to - node.from;
      return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start2, forward) {
      let pos2 = syntaxTree(state).resolveInner(start2.head);
      let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
      for (let at = start2.head; ; ) {
        let next = forward ? pos2.childAfter(at) : pos2.childBefore(at);
        if (!next)
          break;
        if (interestingNode(state, next, bracketProp))
          pos2 = next;
        else
          at = forward ? next.to : next.from;
      }
      let bracket2 = pos2.type.prop(bracketProp), match, newPos;
      if (bracket2 && (match = forward ? matchBrackets(state, pos2.from, 1) : matchBrackets(state, pos2.to, -1)) && match.matched)
        newPos = forward ? match.end.to : match.end.from;
      else
        newPos = forward ? pos2.to : pos2.from;
      return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    const cursorSyntaxLeft = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    const cursorSyntaxRight = (view) => moveSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function cursorByLine(view, forward) {
      return moveSel(view, (range) => {
        if (!range.empty)
          return rangeEnd(range, forward);
        let moved = view.moveVertically(range, forward);
        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
      });
    }
    const cursorLineUp = (view) => cursorByLine(view, false);
    const cursorLineDown = (view) => cursorByLine(view, true);
    function pageInfo(view) {
      let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
      let marginTop = 0, marginBottom = 0, height;
      if (selfScroll) {
        for (let source2 of view.state.facet(EditorView.scrollMargins)) {
          let margins = source2(view);
          if (margins === null || margins === void 0 ? void 0 : margins.top)
            marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
          if (margins === null || margins === void 0 ? void 0 : margins.bottom)
            marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
        }
        height = view.scrollDOM.clientHeight - marginTop - marginBottom;
      } else {
        height = (view.dom.ownerDocument.defaultView || window).innerHeight;
      }
      return {
        marginTop,
        marginBottom,
        selfScroll,
        height: Math.max(view.defaultLineHeight, height - 5)
      };
    }
    function cursorByPage(view, forward) {
      let page = pageInfo(view);
      let { state } = view, selection = updateSel(state.selection, (range) => {
        return range.empty ? view.moveVertically(range, forward, page.height) : rangeEnd(range, forward);
      });
      if (selection.eq(state.selection))
        return false;
      let effect2;
      if (page.selfScroll) {
        let startPos = view.coordsAtPos(state.selection.main.head);
        let scrollRect = view.scrollDOM.getBoundingClientRect();
        let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
        if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
          effect2 = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
      }
      view.dispatch(setSel(state, selection), { effects: effect2 });
      return true;
    }
    const cursorPageUp = (view) => cursorByPage(view, false);
    const cursorPageDown = (view) => cursorByPage(view, true);
    function moveByLineBoundary(view, start2, forward) {
      let line2 = view.lineBlockAt(start2.head), moved = view.moveToLineBoundary(start2, forward);
      if (moved.head == start2.head && moved.head != (forward ? line2.to : line2.from))
        moved = view.moveToLineBoundary(start2, forward, false);
      if (!forward && moved.head == line2.from && line2.length) {
        let space = /^\s*/.exec(view.state.sliceDoc(line2.from, Math.min(line2.from + 100, line2.to)))[0].length;
        if (space && start2.head != line2.from + space)
          moved = EditorSelection.cursor(line2.from + space);
      }
      return moved;
    }
    const cursorLineBoundaryForward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, true));
    const cursorLineBoundaryBackward = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, false));
    const cursorLineBoundaryLeft = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
    const cursorLineBoundaryRight = (view) => moveSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
    const cursorLineStart = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
    const cursorLineEnd = (view) => moveSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend2) {
      let found = false, selection = updateSel(state.selection, (range) => {
        let matching = matchBrackets(state, range.head, -1) || matchBrackets(state, range.head, 1) || range.head > 0 && matchBrackets(state, range.head - 1, 1) || range.head < state.doc.length && matchBrackets(state, range.head + 1, -1);
        if (!matching || !matching.end)
          return range;
        found = true;
        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
        return EditorSelection.cursor(head);
      });
      if (!found)
        return false;
      dispatch(setSel(state, selection));
      return true;
    }
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch);
    function extendSel(target, how) {
      let selection = updateSel(target.state.selection, (range) => {
        let head = how(range);
        return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || void 0);
      });
      if (selection.eq(target.state.selection))
        return false;
      target.dispatch(setSel(target.state, selection));
      return true;
    }
    function selectByChar(view, forward) {
      return extendSel(view, (range) => view.moveByChar(range, forward));
    }
    const selectCharLeft = (view) => selectByChar(view, !ltrAtCursor(view));
    const selectCharRight = (view) => selectByChar(view, ltrAtCursor(view));
    function selectByGroup(view, forward) {
      return extendSel(view, (range) => view.moveByGroup(range, forward));
    }
    const selectGroupLeft = (view) => selectByGroup(view, !ltrAtCursor(view));
    const selectGroupRight = (view) => selectByGroup(view, ltrAtCursor(view));
    const selectSyntaxLeft = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    const selectSyntaxRight = (view) => extendSel(view, (range) => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function selectByLine(view, forward) {
      return extendSel(view, (range) => view.moveVertically(range, forward));
    }
    const selectLineUp = (view) => selectByLine(view, false);
    const selectLineDown = (view) => selectByLine(view, true);
    function selectByPage(view, forward) {
      return extendSel(view, (range) => view.moveVertically(range, forward, pageInfo(view).height));
    }
    const selectPageUp = (view) => selectByPage(view, false);
    const selectPageDown = (view) => selectByPage(view, true);
    const selectLineBoundaryForward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, true));
    const selectLineBoundaryBackward = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, false));
    const selectLineBoundaryLeft = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, !ltrAtCursor(view)));
    const selectLineBoundaryRight = (view) => extendSel(view, (range) => moveByLineBoundary(view, range, ltrAtCursor(view)));
    const selectLineStart = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).from));
    const selectLineEnd = (view) => extendSel(view, (range) => EditorSelection.cursor(view.lineBlockAt(range.head).to));
    const cursorDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: 0 }));
      return true;
    };
    const cursorDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.doc.length }));
      return true;
    };
    const selectDocStart = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
      return true;
    };
    const selectDocEnd = ({ state, dispatch }) => {
      dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
      return true;
    };
    const selectAll = ({ state, dispatch }) => {
      dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
      return true;
    };
    const selectLine = ({ state, dispatch }) => {
      let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
      dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
      return true;
    };
    const selectParentSyntax = ({ state, dispatch }) => {
      let selection = updateSel(state.selection, (range) => {
        let tree = syntaxTree(state), stack2 = tree.resolveStack(range.from, 1);
        if (range.empty) {
          let stackBefore = tree.resolveStack(range.from, -1);
          if (stackBefore.node.from >= stack2.node.from && stackBefore.node.to <= stack2.node.to)
            stack2 = stackBefore;
        }
        for (let cur2 = stack2; cur2; cur2 = cur2.next) {
          let { node } = cur2;
          if ((node.from < range.from && node.to >= range.to || node.to > range.to && node.from <= range.from) && cur2.next)
            return EditorSelection.range(node.to, node.from);
        }
        return range;
      });
      if (selection.eq(state.selection))
        return false;
      dispatch(setSel(state, selection));
      return true;
    };
    const simplifySelection = ({ state, dispatch }) => {
      let cur2 = state.selection, selection = null;
      if (cur2.ranges.length > 1)
        selection = EditorSelection.create([cur2.main]);
      else if (!cur2.main.empty)
        selection = EditorSelection.create([EditorSelection.cursor(cur2.main.head)]);
      if (!selection)
        return false;
      dispatch(setSel(state, selection));
      return true;
    };
    function deleteBy(target, by) {
      if (target.state.readOnly)
        return false;
      let event = "delete.selection", { state } = target;
      let changes = state.changeByRange((range) => {
        let { from, to } = range;
        if (from == to) {
          let towards = by(range);
          if (towards < from) {
            event = "delete.backward";
            towards = skipAtomic(target, towards, false);
          } else if (towards > from) {
            event = "delete.forward";
            towards = skipAtomic(target, towards, true);
          }
          from = Math.min(from, towards);
          to = Math.max(to, towards);
        } else {
          from = skipAtomic(target, from, false);
          to = skipAtomic(target, to, true);
        }
        return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from, from < range.head ? -1 : 1) };
      });
      if (changes.changes.empty)
        return false;
      target.dispatch(state.update(changes, {
        scrollIntoView: true,
        userEvent: event,
        effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : void 0
      }));
      return true;
    }
    function skipAtomic(target, pos2, forward) {
      if (target instanceof EditorView)
        for (let ranges of target.state.facet(EditorView.atomicRanges).map((f2) => f2(target)))
          ranges.between(pos2, pos2, (from, to) => {
            if (from < pos2 && to > pos2)
              pos2 = forward ? to : from;
          });
      return pos2;
    }
    const deleteByChar = (target, forward, byIndentUnit) => deleteBy(target, (range) => {
      let pos2 = range.from, { state } = target, line2 = state.doc.lineAt(pos2), before, targetPos;
      if (byIndentUnit && !forward && pos2 > line2.from && pos2 < line2.from + 200 && !/[^ \t]/.test(before = line2.text.slice(0, pos2 - line2.from))) {
        if (before[before.length - 1] == "	")
          return pos2 - 1;
        let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
        for (let i2 = 0; i2 < drop && before[before.length - 1 - i2] == " "; i2++)
          pos2--;
        targetPos = pos2;
      } else {
        targetPos = findClusterBreak(line2.text, pos2 - line2.from, forward, forward) + line2.from;
        if (targetPos == pos2 && line2.number != (forward ? state.doc.lines : 1))
          targetPos += forward ? 1 : -1;
        else if (!forward && /[\ufe00-\ufe0f]/.test(line2.text.slice(targetPos - line2.from, pos2 - line2.from)))
          targetPos = findClusterBreak(line2.text, targetPos - line2.from, false, false) + line2.from;
      }
      return targetPos;
    });
    const deleteCharBackward = (view) => deleteByChar(view, false, true);
    const deleteCharForward = (view) => deleteByChar(view, true, false);
    const deleteByGroup = (target, forward) => deleteBy(target, (range) => {
      let pos2 = range.head, { state } = target, line2 = state.doc.lineAt(pos2);
      let categorize = state.charCategorizer(pos2);
      for (let cat = null; ; ) {
        if (pos2 == (forward ? line2.to : line2.from)) {
          if (pos2 == range.head && line2.number != (forward ? state.doc.lines : 1))
            pos2 += forward ? 1 : -1;
          break;
        }
        let next = findClusterBreak(line2.text, pos2 - line2.from, forward) + line2.from;
        let nextChar = line2.text.slice(Math.min(pos2, next) - line2.from, Math.max(pos2, next) - line2.from);
        let nextCat = categorize(nextChar);
        if (cat != null && nextCat != cat)
          break;
        if (nextChar != " " || pos2 != range.head)
          cat = nextCat;
        pos2 = next;
      }
      return pos2;
    });
    const deleteGroupBackward = (target) => deleteByGroup(target, false);
    const deleteGroupForward = (target) => deleteByGroup(target, true);
    const deleteToLineEnd = (view) => deleteBy(view, (range) => {
      let lineEnd = view.lineBlockAt(range.head).to;
      return range.head < lineEnd ? lineEnd : Math.min(view.state.doc.length, range.head + 1);
    });
    const deleteLineBoundaryBackward = (view) => deleteBy(view, (range) => {
      let lineStart = view.moveToLineBoundary(range, false).head;
      return range.head > lineStart ? lineStart : Math.max(0, range.head - 1);
    });
    const deleteLineBoundaryForward = (view) => deleteBy(view, (range) => {
      let lineStart = view.moveToLineBoundary(range, true).head;
      return range.head < lineStart ? lineStart : Math.min(view.state.doc.length, range.head + 1);
    });
    const splitLine = ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let changes = state.changeByRange((range) => {
        return {
          changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
          range: EditorSelection.cursor(range.from)
        };
      });
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
      return true;
    };
    const transposeChars = ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let changes = state.changeByRange((range) => {
        if (!range.empty || range.from == 0 || range.from == state.doc.length)
          return { range };
        let pos2 = range.from, line2 = state.doc.lineAt(pos2);
        let from = pos2 == line2.from ? pos2 - 1 : findClusterBreak(line2.text, pos2 - line2.from, false) + line2.from;
        let to = pos2 == line2.to ? pos2 + 1 : findClusterBreak(line2.text, pos2 - line2.from, true) + line2.from;
        return {
          changes: { from, to, insert: state.doc.slice(pos2, to).append(state.doc.slice(from, pos2)) },
          range: EditorSelection.cursor(to)
        };
      });
      if (changes.changes.empty)
        return false;
      dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
      return true;
    };
    function selectedLineBlocks(state) {
      let blocks = [], upto = -1;
      for (let range of state.selection.ranges) {
        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
        if (!range.empty && range.to == endLine.from)
          endLine = state.doc.lineAt(range.to - 1);
        if (upto >= startLine.number) {
          let prev = blocks[blocks.length - 1];
          prev.to = endLine.to;
          prev.ranges.push(range);
        } else {
          blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
        }
        upto = endLine.number + 1;
      }
      return blocks;
    }
    function moveLine(state, dispatch, forward) {
      if (state.readOnly)
        return false;
      let changes = [], ranges = [];
      for (let block2 of selectedLineBlocks(state)) {
        if (forward ? block2.to == state.doc.length : block2.from == 0)
          continue;
        let nextLine = state.doc.lineAt(forward ? block2.to + 1 : block2.from - 1);
        let size = nextLine.length + 1;
        if (forward) {
          changes.push({ from: block2.to, to: nextLine.to }, { from: block2.from, insert: nextLine.text + state.lineBreak });
          for (let r2 of block2.ranges)
            ranges.push(EditorSelection.range(Math.min(state.doc.length, r2.anchor + size), Math.min(state.doc.length, r2.head + size)));
        } else {
          changes.push({ from: nextLine.from, to: block2.from }, { from: block2.to, insert: state.lineBreak + nextLine.text });
          for (let r2 of block2.ranges)
            ranges.push(EditorSelection.range(r2.anchor - size, r2.head - size));
        }
      }
      if (!changes.length)
        return false;
      dispatch(state.update({
        changes,
        scrollIntoView: true,
        selection: EditorSelection.create(ranges, state.selection.mainIndex),
        userEvent: "move.line"
      }));
      return true;
    }
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
      if (state.readOnly)
        return false;
      let changes = [];
      for (let block2 of selectedLineBlocks(state)) {
        if (forward)
          changes.push({ from: block2.from, insert: state.doc.slice(block2.from, block2.to) + state.lineBreak });
        else
          changes.push({ from: block2.to, insert: state.lineBreak + state.doc.slice(block2.from, block2.to) });
      }
      dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
      return true;
    }
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    const deleteLine = (view) => {
      if (view.state.readOnly)
        return false;
      let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
        if (from > 0)
          from--;
        else if (to < state.doc.length)
          to++;
        return { from, to };
      }));
      let selection = updateSel(state.selection, (range) => {
        let dist2 = void 0;
        if (view.lineWrapping) {
          let block2 = view.lineBlockAt(range.head), pos2 = view.coordsAtPos(range.head, range.assoc || 1);
          if (pos2)
            dist2 = block2.bottom + view.documentTop - pos2.bottom + view.defaultLineHeight / 2;
        }
        return view.moveVertically(range, true, dist2);
      }).map(changes);
      view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
      return true;
    };
    function isBetweenBrackets(state, pos2) {
      if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos2 - 1, pos2 + 1)))
        return { from: pos2, to: pos2 };
      let context = syntaxTree(state).resolveInner(pos2);
      let before = context.childBefore(pos2), after = context.childAfter(pos2), closedBy;
      if (before && after && before.to <= pos2 && after.from >= pos2 && (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from && !/\S/.test(state.sliceDoc(before.to, after.from)))
        return { from: before.to, to: after.from };
      return null;
    }
    const insertNewlineAndIndent = /* @__PURE__ */ newlineAndIndent(false);
    const insertBlankLine = /* @__PURE__ */ newlineAndIndent(true);
    function newlineAndIndent(atEof) {
      return ({ state, dispatch }) => {
        if (state.readOnly)
          return false;
        let changes = state.changeByRange((range) => {
          let { from, to } = range, line2 = state.doc.lineAt(from);
          let explode = !atEof && from == to && isBetweenBrackets(state, from);
          if (atEof)
            from = to = (to <= line2.to ? line2 : state.doc.lineAt(to)).to;
          let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
          let indent = getIndentation(cx, from);
          if (indent == null)
            indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
          while (to < line2.to && /\s/.test(line2.text[to - line2.from]))
            to++;
          if (explode)
            ({ from, to } = explode);
          else if (from > line2.from && from < line2.from + 100 && !/\S/.test(line2.text.slice(0, from)))
            from = line2.from;
          let insert2 = ["", indentString(state, indent)];
          if (explode)
            insert2.push(indentString(state, cx.lineIndent(line2.from, -1)));
          return {
            changes: { from, to, insert: Text.of(insert2) },
            range: EditorSelection.cursor(from + 1 + insert2[1].length)
          };
        });
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
      };
    }
    function changeBySelectedLine(state, f2) {
      let atLine = -1;
      return state.changeByRange((range) => {
        let changes = [];
        for (let pos2 = range.from; pos2 <= range.to; ) {
          let line2 = state.doc.lineAt(pos2);
          if (line2.number > atLine && (range.empty || range.to > line2.from)) {
            f2(line2, changes, range);
            atLine = line2.number;
          }
          pos2 = line2.to + 1;
        }
        let changeSet = state.changes(changes);
        return {
          changes,
          range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
        };
      });
    }
    const indentSelection = ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      let updated = /* @__PURE__ */ Object.create(null);
      let context = new IndentContext(state, { overrideIndentation: (start2) => {
        let found = updated[start2];
        return found == null ? -1 : found;
      } });
      let changes = changeBySelectedLine(state, (line2, changes2, range) => {
        let indent = getIndentation(context, line2.from);
        if (indent == null)
          return;
        if (!/\S/.test(line2.text))
          indent = 0;
        let cur2 = /^\s*/.exec(line2.text)[0];
        let norm = indentString(state, indent);
        if (cur2 != norm || range.from < line2.from + cur2.length) {
          updated[line2.from] = indent;
          changes2.push({ from: line2.from, to: line2.from + cur2.length, insert: norm });
        }
      });
      if (!changes.changes.empty)
        dispatch(state.update(changes, { userEvent: "indent" }));
      return true;
    };
    const indentMore = ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      dispatch(state.update(changeBySelectedLine(state, (line2, changes) => {
        changes.push({ from: line2.from, insert: state.facet(indentUnit) });
      }), { userEvent: "input.indent" }));
      return true;
    };
    const indentLess = ({ state, dispatch }) => {
      if (state.readOnly)
        return false;
      dispatch(state.update(changeBySelectedLine(state, (line2, changes) => {
        let space = /^\s*/.exec(line2.text)[0];
        if (!space)
          return;
        let col = countColumn(space, state.tabSize), keep = 0;
        let insert2 = indentString(state, Math.max(0, col - getIndentUnit(state)));
        while (keep < space.length && keep < insert2.length && space.charCodeAt(keep) == insert2.charCodeAt(keep))
          keep++;
        changes.push({ from: line2.from + keep, to: line2.from + space.length, insert: insert2.slice(keep) });
      }), { userEvent: "delete.dedent" }));
      return true;
    };
    const toggleTabFocusMode = (view) => {
      view.setTabFocusMode();
      return true;
    };
    const emacsStyleKeymap = [
      { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
      { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
      { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
      { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
      { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
      { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
      { key: "Ctrl-d", run: deleteCharForward },
      { key: "Ctrl-h", run: deleteCharBackward },
      { key: "Ctrl-k", run: deleteToLineEnd },
      { key: "Ctrl-Alt-h", run: deleteGroupBackward },
      { key: "Ctrl-o", run: splitLine },
      { key: "Ctrl-t", run: transposeChars },
      { key: "Ctrl-v", run: cursorPageDown }
    ];
    const standardKeymap = /* @__PURE__ */ [
      { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
      { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
      { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
      { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
      { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
      { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
      { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
      { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
      { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
      { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
      { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
      { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
      { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
      { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
      { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
      { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
      { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
      { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
      { key: "Enter", run: insertNewlineAndIndent, shift: insertNewlineAndIndent },
      { key: "Mod-a", run: selectAll },
      { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
      { key: "Delete", run: deleteCharForward },
      { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
      { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
      { mac: "Mod-Backspace", run: deleteLineBoundaryBackward },
      { mac: "Mod-Delete", run: deleteLineBoundaryForward }
    ].concat(/* @__PURE__ */ emacsStyleKeymap.map((b) => ({ mac: b.key, run: b.run, shift: b.shift })));
    const defaultKeymap = /* @__PURE__ */ [
      { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
      { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
      { key: "Alt-ArrowUp", run: moveLineUp },
      { key: "Shift-Alt-ArrowUp", run: copyLineUp },
      { key: "Alt-ArrowDown", run: moveLineDown },
      { key: "Shift-Alt-ArrowDown", run: copyLineDown },
      { key: "Escape", run: simplifySelection },
      { key: "Mod-Enter", run: insertBlankLine },
      { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
      { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
      { key: "Mod-[", run: indentLess },
      { key: "Mod-]", run: indentMore },
      { key: "Mod-Alt-\\", run: indentSelection },
      { key: "Shift-Mod-k", run: deleteLine },
      { key: "Shift-Mod-\\", run: cursorMatchingBracket },
      { key: "Mod-/", run: toggleComment },
      { key: "Alt-A", run: toggleBlockComment },
      { key: "Ctrl-m", mac: "Shift-Alt-m", run: toggleTabFocusMode }
    ].concat(standardKeymap);
    const minimalSetup = /* @__PURE__ */ (() => [
      highlightSpecialChars(),
      history(),
      drawSelection(),
      syntaxHighlighting(defaultHighlightStyle, { fallback: true }),
      keymap.of([
        ...defaultKeymap,
        ...historyKeymap
      ])
    ])();
    var _parser = function() {
      var parser2 = {
        trace: function trace() {
        },
        yy: {},
        symbols_: {
          error: 2,
          expressions: 3,
          e: 4,
          EndOfExpression: 5,
          "-": 6,
          "+": 7,
          "*": 8,
          "/": 9,
          "^": 10,
          mod: 11,
          and: 12,
          or: 13,
          not: 14,
          if: 15,
          then: 16,
          else: 17,
          in: 18,
          notIn: 19,
          "(": 20,
          ")": 21,
          Arguments: 22,
          ",": 23,
          Number: 24,
          Symbol: 25,
          String: 26,
          of: 27,
          Relation: 28,
          "%": 29,
          "?": 30,
          ":": 31,
          RelationalOperator: 32,
          "==": 33,
          "!=": 34,
          "~=": 35,
          "<": 36,
          "<=": 37,
          ">=": 38,
          ">": 39,
          $accept: 0,
          $end: 1
        },
        terminals_: {
          2: "error",
          5: "EndOfExpression",
          6: "-",
          7: "+",
          8: "*",
          9: "/",
          10: "^",
          11: "mod",
          12: "and",
          13: "or",
          14: "not",
          15: "if",
          16: "then",
          17: "else",
          18: "in",
          19: "notIn",
          20: "(",
          21: ")",
          23: ",",
          24: "Number",
          25: "Symbol",
          26: "String",
          27: "of",
          29: "%",
          30: "?",
          31: ":",
          33: "==",
          34: "!=",
          35: "~=",
          36: "<",
          37: "<=",
          38: ">=",
          39: ">"
        },
        productions_: [
          0,
          [3, 2],
          [4, 2],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 2],
          [4, 6],
          [4, 3],
          [4, 3],
          [4, 3],
          [4, 5],
          [4, 1],
          [4, 1],
          [4, 1],
          [4, 3],
          [4, 3],
          [4, 4],
          [4, 1],
          [4, 3],
          [4, 5],
          [32, 1],
          [32, 1],
          [32, 1],
          [32, 1],
          [32, 1],
          [32, 1],
          [32, 1],
          [28, 3],
          [28, 3],
          [22, 1],
          [22, 3]
        ],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
          var $0 = $$.length - 1;
          switch (yystate) {
            case 1:
              return $$[$0 - 1];
            case 2:
              this.$ = ["(", "ops['-'](", $$[$0], ")", ")"];
              break;
            case 3:
              this.$ = [
                "(",
                "ops['",
                $$[$0 - 1],
                "'](",
                $$[$0 - 2],
                ", ",
                $$[$0],
                ")",
                ")"
              ];
              break;
            case 4:
              this.$ = [
                "(",
                "ops['",
                $$[$0 - 1],
                "'](",
                $$[$0 - 2],
                ", ",
                $$[$0],
                ")",
                ")"
              ];
              break;
            case 5:
              this.$ = [
                "(",
                "ops['",
                $$[$0 - 1],
                "'](",
                $$[$0 - 2],
                ", ",
                $$[$0],
                ")",
                ")"
              ];
              break;
            case 6:
              this.$ = [
                "(",
                "ops['",
                $$[$0 - 1],
                "'](",
                $$[$0 - 2],
                ", ",
                $$[$0],
                ")",
                ")"
              ];
              break;
            case 7:
              this.$ = [
                "(",
                "ops['",
                $$[$0 - 1],
                "'](",
                $$[$0 - 2],
                ", ",
                $$[$0],
                ")",
                ")"
              ];
              break;
            case 8:
              this.$ = ["(", "ops.mod(", $$[$0 - 2], ", ", $$[$0], ")", ")"];
              break;
            case 9:
              this.$ = [
                "(",
                "",
                "std.coerceBoolean",
                "(",
                $$[$0 - 2],
                ") && ",
                "std.coerceBoolean",
                "(",
                $$[$0],
                ")",
                ")"
              ];
              break;
            case 10:
              this.$ = [
                "(",
                "",
                "std.coerceBoolean",
                "(",
                $$[$0 - 2],
                ") || ",
                "std.coerceBoolean",
                "(",
                $$[$0],
                ")",
                ")"
              ];
              break;
            case 11:
              this.$ = ["(", "! ", "std.coerceBoolean", "(", $$[$0], ")", ")"];
              break;
            case 12:
              this.$ = [
                "(",
                "",
                "std.coerceBoolean",
                "(",
                $$[$0 - 4],
                ") ? ",
                $$[$0 - 2],
                " : ",
                $$[$0],
                "",
                ")"
              ];
              break;
            case 13:
              this.$ = ["(", "std.isSubset(", $$[$0 - 2], ", ", $$[$0], ")", ")"];
              break;
            case 14:
              this.$ = ["(", "!std.isSubset(", $$[$0 - 2], ", ", $$[$0], ")", ")"];
              break;
            case 15:
              this.$ = ["(", "", $$[$0 - 1], "", ")"];
              break;
            case 16:
              this.$ = ["(", "[ ", $$[$0 - 3], ", ", $$[$0 - 1], " ]", ")"];
              break;
            case 17:
              this.$ = ["", $$[$0], ""];
              break;
            case 18:
              this.$ = ["prop(", $$[$0], ", data)"];
              break;
            case 19:
              this.$ = ["", $$[$0], ""];
              break;
            case 20:
              this.$ = ["prop(", $$[$0 - 2], ", ", $$[$0], ")"];
              break;
            case 21:
              this.$ = ["call(", $$[$0 - 2], ")"];
              break;
            case 22:
              this.$ = ["call(", $$[$0 - 3], ", ", $$[$0 - 1], ")"];
              break;
            case 23:
              this.$ = yy.reduceRelation($$[$0]);
              break;
            case 24:
              this.$ = [
                "std.warnDeprecated('modulo', ops['mod'](",
                $$[$0 - 2],
                ", ",
                $$[$0],
                "))"
              ];
              break;
            case 25:
              this.$ = [
                "std.warnDeprecated('ternary', ",
                "std.coerceBoolean",
                "(",
                $$[$0 - 4],
                ") ? ",
                $$[$0 - 2],
                " : ",
                $$[$0],
                ")"
              ];
              break;
            case 26:
              this.$ = ["=="];
              break;
            case 27:
              this.$ = ["!="];
              break;
            case 28:
              this.$ = ["~="];
              break;
            case 29:
              this.$ = ["<"];
              break;
            case 30:
              this.$ = ["<="];
              break;
            case 31:
              this.$ = [">="];
              break;
            case 32:
              this.$ = [">"];
              break;
            case 33:
              this.$ = [$$[$0 - 2], $$[$0 - 1], ...$$[$0]];
              break;
            case 34:
              this.$ = [$$[$0 - 2], $$[$0 - 1], $$[$0]];
              break;
            case 35:
              this.$ = ["", $$[$0], ""];
              break;
            case 36:
              this.$ = ["", $$[$0 - 2], ", ", $$[$0], ""];
              break;
          }
        },
        table: [
          {
            3: 1,
            4: 2,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            1: [3]
          },
          {
            5: [1, 11],
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            18: [1, 20],
            19: [1, 21],
            29: [1, 22],
            30: [1, 23],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            4: 32,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 33,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 34,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 35,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            22: 36,
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            5: [2, 17],
            6: [2, 17],
            7: [2, 17],
            8: [2, 17],
            9: [2, 17],
            10: [2, 17],
            11: [2, 17],
            12: [2, 17],
            13: [2, 17],
            16: [2, 17],
            17: [2, 17],
            18: [2, 17],
            19: [2, 17],
            21: [2, 17],
            23: [2, 17],
            29: [2, 17],
            30: [2, 17],
            31: [2, 17],
            33: [2, 17],
            34: [2, 17],
            35: [2, 17],
            36: [2, 17],
            37: [2, 17],
            38: [2, 17],
            39: [2, 17]
          },
          {
            5: [2, 18],
            6: [2, 18],
            7: [2, 18],
            8: [2, 18],
            9: [2, 18],
            10: [2, 18],
            11: [2, 18],
            12: [2, 18],
            13: [2, 18],
            16: [2, 18],
            17: [2, 18],
            18: [2, 18],
            19: [2, 18],
            20: [1, 38],
            21: [2, 18],
            23: [2, 18],
            27: [1, 37],
            29: [2, 18],
            30: [2, 18],
            31: [2, 18],
            33: [2, 18],
            34: [2, 18],
            35: [2, 18],
            36: [2, 18],
            37: [2, 18],
            38: [2, 18],
            39: [2, 18]
          },
          {
            5: [2, 19],
            6: [2, 19],
            7: [2, 19],
            8: [2, 19],
            9: [2, 19],
            10: [2, 19],
            11: [2, 19],
            12: [2, 19],
            13: [2, 19],
            16: [2, 19],
            17: [2, 19],
            18: [2, 19],
            19: [2, 19],
            21: [2, 19],
            23: [2, 19],
            29: [2, 19],
            30: [2, 19],
            31: [2, 19],
            33: [2, 19],
            34: [2, 19],
            35: [2, 19],
            36: [2, 19],
            37: [2, 19],
            38: [2, 19],
            39: [2, 19]
          },
          {
            5: [2, 23],
            6: [2, 23],
            7: [2, 23],
            8: [2, 23],
            9: [2, 23],
            10: [2, 23],
            11: [2, 23],
            12: [2, 23],
            13: [2, 23],
            16: [2, 23],
            17: [2, 23],
            18: [2, 23],
            19: [2, 23],
            21: [2, 23],
            23: [2, 23],
            29: [2, 23],
            30: [2, 23],
            31: [2, 23],
            33: [2, 23],
            34: [2, 23],
            35: [2, 23],
            36: [2, 23],
            37: [2, 23],
            38: [2, 23],
            39: [2, 23]
          },
          {
            1: [2, 1]
          },
          {
            4: 39,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 40,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 41,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 42,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 43,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 44,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 45,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 46,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 47,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 48,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 49,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 50,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 52,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 51
          },
          {
            6: [2, 26],
            14: [2, 26],
            15: [2, 26],
            20: [2, 26],
            24: [2, 26],
            25: [2, 26],
            26: [2, 26]
          },
          {
            6: [2, 27],
            14: [2, 27],
            15: [2, 27],
            20: [2, 27],
            24: [2, 27],
            25: [2, 27],
            26: [2, 27]
          },
          {
            6: [2, 28],
            14: [2, 28],
            15: [2, 28],
            20: [2, 28],
            24: [2, 28],
            25: [2, 28],
            26: [2, 28]
          },
          {
            6: [2, 29],
            14: [2, 29],
            15: [2, 29],
            20: [2, 29],
            24: [2, 29],
            25: [2, 29],
            26: [2, 29]
          },
          {
            6: [2, 30],
            14: [2, 30],
            15: [2, 30],
            20: [2, 30],
            24: [2, 30],
            25: [2, 30],
            26: [2, 30]
          },
          {
            6: [2, 31],
            14: [2, 31],
            15: [2, 31],
            20: [2, 31],
            24: [2, 31],
            25: [2, 31],
            26: [2, 31]
          },
          {
            6: [2, 32],
            14: [2, 32],
            15: [2, 32],
            20: [2, 32],
            24: [2, 32],
            25: [2, 32],
            26: [2, 32]
          },
          {
            5: [2, 2],
            6: [2, 2],
            7: [2, 2],
            8: [2, 2],
            9: [2, 2],
            10: [1, 16],
            11: [2, 2],
            12: [2, 2],
            13: [2, 2],
            16: [2, 2],
            17: [2, 2],
            18: [2, 2],
            19: [2, 2],
            21: [2, 2],
            23: [2, 2],
            29: [2, 2],
            30: [2, 2],
            31: [2, 2],
            32: 24,
            33: [2, 2],
            34: [2, 2],
            35: [2, 2],
            36: [2, 2],
            37: [2, 2],
            38: [2, 2],
            39: [2, 2]
          },
          {
            5: [2, 11],
            6: [2, 11],
            7: [2, 11],
            8: [2, 11],
            9: [2, 11],
            10: [1, 16],
            11: [2, 11],
            12: [2, 11],
            13: [2, 11],
            16: [2, 11],
            17: [2, 11],
            18: [2, 11],
            19: [2, 11],
            21: [2, 11],
            23: [2, 11],
            29: [2, 11],
            30: [2, 11],
            31: [2, 11],
            32: 24,
            33: [2, 11],
            34: [2, 11],
            35: [2, 11],
            36: [2, 11],
            37: [2, 11],
            38: [2, 11],
            39: [2, 11]
          },
          {
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            16: [1, 53],
            18: [1, 20],
            19: [1, 21],
            29: [1, 22],
            30: [1, 23],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            18: [1, 20],
            19: [1, 21],
            21: [1, 54],
            23: [2, 35],
            29: [1, 22],
            30: [1, 23],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            23: [1, 55]
          },
          {
            4: 56,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            4: 59,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            21: [1, 57],
            22: 58,
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            5: [2, 3],
            6: [2, 3],
            7: [2, 3],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [2, 3],
            13: [2, 3],
            16: [2, 3],
            17: [2, 3],
            18: [2, 3],
            19: [2, 3],
            21: [2, 3],
            23: [2, 3],
            29: [1, 22],
            30: [2, 3],
            31: [2, 3],
            32: 24,
            33: [2, 3],
            34: [2, 3],
            35: [2, 3],
            36: [2, 3],
            37: [2, 3],
            38: [2, 3],
            39: [2, 3]
          },
          {
            5: [2, 4],
            6: [2, 4],
            7: [2, 4],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [2, 4],
            13: [2, 4],
            16: [2, 4],
            17: [2, 4],
            18: [2, 4],
            19: [2, 4],
            21: [2, 4],
            23: [2, 4],
            29: [1, 22],
            30: [2, 4],
            31: [2, 4],
            32: 24,
            33: [2, 4],
            34: [2, 4],
            35: [2, 4],
            36: [2, 4],
            37: [2, 4],
            38: [2, 4],
            39: [2, 4]
          },
          {
            5: [2, 5],
            6: [2, 5],
            7: [2, 5],
            8: [2, 5],
            9: [2, 5],
            10: [1, 16],
            11: [2, 5],
            12: [2, 5],
            13: [2, 5],
            16: [2, 5],
            17: [2, 5],
            18: [2, 5],
            19: [2, 5],
            21: [2, 5],
            23: [2, 5],
            29: [2, 5],
            30: [2, 5],
            31: [2, 5],
            32: 24,
            33: [2, 5],
            34: [2, 5],
            35: [2, 5],
            36: [2, 5],
            37: [2, 5],
            38: [2, 5],
            39: [2, 5]
          },
          {
            5: [2, 6],
            6: [2, 6],
            7: [2, 6],
            8: [2, 6],
            9: [2, 6],
            10: [1, 16],
            11: [2, 6],
            12: [2, 6],
            13: [2, 6],
            16: [2, 6],
            17: [2, 6],
            18: [2, 6],
            19: [2, 6],
            21: [2, 6],
            23: [2, 6],
            29: [2, 6],
            30: [2, 6],
            31: [2, 6],
            32: 24,
            33: [2, 6],
            34: [2, 6],
            35: [2, 6],
            36: [2, 6],
            37: [2, 6],
            38: [2, 6],
            39: [2, 6]
          },
          {
            5: [2, 7],
            6: [2, 7],
            7: [2, 7],
            8: [2, 7],
            9: [2, 7],
            10: [1, 16],
            11: [2, 7],
            12: [2, 7],
            13: [2, 7],
            16: [2, 7],
            17: [2, 7],
            18: [2, 7],
            19: [2, 7],
            21: [2, 7],
            23: [2, 7],
            29: [2, 7],
            30: [2, 7],
            31: [2, 7],
            32: 24,
            33: [2, 7],
            34: [2, 7],
            35: [2, 7],
            36: [2, 7],
            37: [2, 7],
            38: [2, 7],
            39: [2, 7]
          },
          {
            5: [2, 8],
            6: [2, 8],
            7: [2, 8],
            8: [2, 8],
            9: [2, 8],
            10: [1, 16],
            11: [2, 8],
            12: [2, 8],
            13: [2, 8],
            16: [2, 8],
            17: [2, 8],
            18: [2, 8],
            19: [2, 8],
            21: [2, 8],
            23: [2, 8],
            29: [2, 8],
            30: [2, 8],
            31: [2, 8],
            32: 24,
            33: [2, 8],
            34: [2, 8],
            35: [2, 8],
            36: [2, 8],
            37: [2, 8],
            38: [2, 8],
            39: [2, 8]
          },
          {
            5: [2, 9],
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [2, 9],
            13: [2, 9],
            16: [2, 9],
            17: [2, 9],
            18: [1, 20],
            19: [1, 21],
            21: [2, 9],
            23: [2, 9],
            29: [1, 22],
            30: [2, 9],
            31: [2, 9],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            5: [2, 10],
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [2, 10],
            16: [2, 10],
            17: [2, 10],
            18: [1, 20],
            19: [1, 21],
            21: [2, 10],
            23: [2, 10],
            29: [1, 22],
            30: [2, 10],
            31: [2, 10],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            5: [2, 13],
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [2, 13],
            13: [2, 13],
            16: [2, 13],
            17: [2, 13],
            18: [2, 13],
            19: [2, 13],
            21: [2, 13],
            23: [2, 13],
            29: [1, 22],
            30: [2, 13],
            31: [2, 13],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            5: [2, 14],
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [2, 14],
            13: [2, 14],
            16: [2, 14],
            17: [2, 14],
            18: [2, 14],
            19: [2, 14],
            21: [2, 14],
            23: [2, 14],
            29: [1, 22],
            30: [2, 14],
            31: [2, 14],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            5: [2, 24],
            6: [2, 24],
            7: [2, 24],
            8: [2, 24],
            9: [2, 24],
            10: [1, 16],
            11: [2, 24],
            12: [2, 24],
            13: [2, 24],
            16: [2, 24],
            17: [2, 24],
            18: [2, 24],
            19: [2, 24],
            21: [2, 24],
            23: [2, 24],
            29: [2, 24],
            30: [2, 24],
            31: [2, 24],
            32: 24,
            33: [2, 24],
            34: [2, 24],
            35: [2, 24],
            36: [2, 24],
            37: [2, 24],
            38: [2, 24],
            39: [2, 24]
          },
          {
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            18: [1, 20],
            19: [1, 21],
            29: [1, 22],
            30: [1, 23],
            31: [1, 60],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            5: [2, 33],
            6: [2, 33],
            7: [2, 33],
            8: [2, 33],
            9: [2, 33],
            10: [2, 33],
            11: [2, 33],
            12: [2, 33],
            13: [2, 33],
            16: [2, 33],
            17: [2, 33],
            18: [2, 33],
            19: [2, 33],
            21: [2, 33],
            23: [2, 33],
            29: [2, 33],
            30: [2, 33],
            31: [2, 33],
            33: [2, 33],
            34: [2, 33],
            35: [2, 33],
            36: [2, 33],
            37: [2, 33],
            38: [2, 33],
            39: [2, 33]
          },
          {
            5: [2, 34],
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [2, 34],
            13: [2, 34],
            16: [2, 34],
            17: [2, 34],
            18: [2, 34],
            19: [2, 34],
            21: [2, 34],
            23: [2, 34],
            29: [1, 22],
            30: [2, 34],
            31: [2, 34],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            4: 61,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            5: [2, 15],
            6: [2, 15],
            7: [2, 15],
            8: [2, 15],
            9: [2, 15],
            10: [2, 15],
            11: [2, 15],
            12: [2, 15],
            13: [2, 15],
            16: [2, 15],
            17: [2, 15],
            18: [2, 15],
            19: [2, 15],
            21: [2, 15],
            23: [2, 15],
            29: [2, 15],
            30: [2, 15],
            31: [2, 15],
            33: [2, 15],
            34: [2, 15],
            35: [2, 15],
            36: [2, 15],
            37: [2, 15],
            38: [2, 15],
            39: [2, 15]
          },
          {
            4: 62,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            5: [2, 20],
            6: [2, 20],
            7: [2, 20],
            8: [2, 20],
            9: [2, 20],
            10: [2, 20],
            11: [2, 20],
            12: [2, 20],
            13: [2, 20],
            16: [2, 20],
            17: [2, 20],
            18: [2, 20],
            19: [2, 20],
            21: [2, 20],
            23: [2, 20],
            29: [2, 20],
            30: [2, 20],
            31: [2, 20],
            32: 24,
            33: [2, 20],
            34: [2, 20],
            35: [2, 20],
            36: [2, 20],
            37: [2, 20],
            38: [2, 20],
            39: [2, 20]
          },
          {
            5: [2, 21],
            6: [2, 21],
            7: [2, 21],
            8: [2, 21],
            9: [2, 21],
            10: [2, 21],
            11: [2, 21],
            12: [2, 21],
            13: [2, 21],
            16: [2, 21],
            17: [2, 21],
            18: [2, 21],
            19: [2, 21],
            21: [2, 21],
            23: [2, 21],
            29: [2, 21],
            30: [2, 21],
            31: [2, 21],
            33: [2, 21],
            34: [2, 21],
            35: [2, 21],
            36: [2, 21],
            37: [2, 21],
            38: [2, 21],
            39: [2, 21]
          },
          {
            21: [1, 63],
            23: [1, 64]
          },
          {
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            18: [1, 20],
            19: [1, 21],
            21: [2, 35],
            23: [2, 35],
            29: [1, 22],
            30: [1, 23],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            4: 65,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            17: [1, 66],
            18: [1, 20],
            19: [1, 21],
            29: [1, 22],
            30: [1, 23],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            18: [1, 20],
            19: [1, 21],
            21: [1, 67],
            23: [2, 36],
            29: [1, 22],
            30: [1, 23],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            5: [2, 22],
            6: [2, 22],
            7: [2, 22],
            8: [2, 22],
            9: [2, 22],
            10: [2, 22],
            11: [2, 22],
            12: [2, 22],
            13: [2, 22],
            16: [2, 22],
            17: [2, 22],
            18: [2, 22],
            19: [2, 22],
            21: [2, 22],
            23: [2, 22],
            29: [2, 22],
            30: [2, 22],
            31: [2, 22],
            33: [2, 22],
            34: [2, 22],
            35: [2, 22],
            36: [2, 22],
            37: [2, 22],
            38: [2, 22],
            39: [2, 22]
          },
          {
            4: 68,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            5: [2, 25],
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            16: [2, 25],
            17: [2, 25],
            18: [1, 20],
            19: [1, 21],
            21: [2, 25],
            23: [2, 25],
            29: [1, 22],
            30: [1, 23],
            31: [2, 25],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            4: 69,
            6: [1, 3],
            14: [1, 4],
            15: [1, 5],
            20: [1, 6],
            24: [1, 7],
            25: [1, 8],
            26: [1, 9],
            28: 10
          },
          {
            5: [2, 16],
            6: [2, 16],
            7: [2, 16],
            8: [2, 16],
            9: [2, 16],
            10: [2, 16],
            11: [2, 16],
            12: [2, 16],
            13: [2, 16],
            16: [2, 16],
            17: [2, 16],
            18: [2, 16],
            19: [2, 16],
            21: [2, 16],
            23: [2, 16],
            29: [2, 16],
            30: [2, 16],
            31: [2, 16],
            33: [2, 16],
            34: [2, 16],
            35: [2, 16],
            36: [2, 16],
            37: [2, 16],
            38: [2, 16],
            39: [2, 16]
          },
          {
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            18: [1, 20],
            19: [1, 21],
            21: [2, 36],
            23: [2, 36],
            29: [1, 22],
            30: [1, 23],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          },
          {
            5: [2, 12],
            6: [1, 13],
            7: [1, 12],
            8: [1, 14],
            9: [1, 15],
            10: [1, 16],
            11: [1, 17],
            12: [1, 18],
            13: [1, 19],
            16: [2, 12],
            17: [2, 12],
            18: [1, 20],
            19: [1, 21],
            21: [2, 12],
            23: [2, 12],
            29: [1, 22],
            30: [1, 23],
            31: [2, 12],
            32: 24,
            33: [1, 25],
            34: [1, 26],
            35: [1, 27],
            36: [1, 28],
            37: [1, 29],
            38: [1, 30],
            39: [1, 31]
          }
        ],
        defaultActions: {
          11: [2, 1]
        },
        parseError: function parseError(str2, hash2) {
          throw new Error(str2);
        },
        parse: function parse2(input) {
          var self2 = this, stack2 = [0], vstack = [null], lstack = [], table2 = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
          this.lexer.setInput(input);
          this.lexer.yy = this.yy;
          this.yy.lexer = this.lexer;
          this.yy.parser = this;
          if (typeof this.lexer.yylloc == "undefined") this.lexer.yylloc = {};
          var yyloc = this.lexer.yylloc;
          lstack.push(yyloc);
          var ranges = this.lexer.options && this.lexer.options.ranges;
          if (typeof this.yy.parseError === "function")
            this.parseError = this.yy.parseError;
          function popStack(n2) {
            stack2.length = stack2.length - 2 * n2;
            vstack.length = vstack.length - n2;
            lstack.length = lstack.length - n2;
          }
          function lex2() {
            var token2;
            token2 = self2.lexer.lex() || 1;
            if (typeof token2 !== "number") {
              token2 = self2.symbols_[token2] || token2;
            }
            return token2;
          }
          var symbol, preErrorSymbol, state, action, r2, yyval = {}, p2, len, newState, expected;
          while (true) {
            state = stack2[stack2.length - 1];
            if (this.defaultActions[state]) {
              action = this.defaultActions[state];
            } else {
              if (symbol === null || typeof symbol == "undefined") {
                symbol = lex2();
              }
              action = table2[state] && table2[state][symbol];
            }
            if (typeof action === "undefined" || !action.length || !action[0]) {
              var errStr = "";
              if (!recovering) {
                expected = [];
                for (p2 in table2[state])
                  if (this.terminals_[p2] && p2 > 2) {
                    expected.push("'" + this.terminals_[p2] + "'");
                  }
                if (this.lexer.showPosition) {
                  errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                  errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {
                  text: this.lexer.match,
                  token: this.terminals_[symbol] || symbol,
                  line: this.lexer.yylineno,
                  loc: yyloc,
                  expected
                });
              }
              if (recovering == 3) {
                if (symbol == EOF) {
                  throw new Error(errStr || "Parsing halted.");
                }
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex2();
              }
              while (1) {
                if (TERROR.toString() in table2[state]) {
                  break;
                }
                if (state === 0) {
                  throw new Error(errStr || "Parsing halted.");
                }
                popStack(1);
                state = stack2[stack2.length - 1];
              }
              preErrorSymbol = symbol == 2 ? null : symbol;
              symbol = TERROR;
              state = stack2[stack2.length - 1];
              action = table2[state] && table2[state][TERROR];
              recovering = 3;
            }
            if (action[0] instanceof Array && action.length > 1) {
              throw new Error(
                "Parse Error: multiple actions possible at state: " + state + ", token: " + symbol
              );
            }
            switch (action[0]) {
              case 1:
                stack2.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack2.push(action[1]);
                symbol = null;
                if (!preErrorSymbol) {
                  yyleng = this.lexer.yyleng;
                  yytext = this.lexer.yytext;
                  yylineno = this.lexer.yylineno;
                  yyloc = this.lexer.yylloc;
                  if (recovering > 0) recovering--;
                } else {
                  symbol = preErrorSymbol;
                  preErrorSymbol = null;
                }
                break;
              case 2:
                len = this.productions_[action[1]][1];
                yyval.$ = vstack[vstack.length - len];
                yyval._$ = {
                  first_line: lstack[lstack.length - (len || 1)].first_line,
                  last_line: lstack[lstack.length - 1].last_line,
                  first_column: lstack[lstack.length - (len || 1)].first_column,
                  last_column: lstack[lstack.length - 1].last_column
                };
                if (ranges) {
                  yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                  ];
                }
                r2 = this.performAction.call(
                  yyval,
                  yytext,
                  yyleng,
                  yylineno,
                  this.yy,
                  action[1],
                  vstack,
                  lstack
                );
                if (typeof r2 !== "undefined") {
                  return r2;
                }
                if (len) {
                  stack2 = stack2.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
                }
                stack2.push(this.productions_[action[1]][0]);
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                newState = table2[stack2[stack2.length - 2]][stack2[stack2.length - 1]];
                stack2.push(newState);
                break;
              case 3:
                return true;
            }
          }
          return true;
        }
      };
      var lexer = function() {
        var lexer2 = {
          EOF: 1,
          parseError: function parseError(str2, hash2) {
            if (this.yy.parser) {
              this.yy.parser.parseError(str2, hash2);
            } else {
              throw new Error(str2);
            }
          },
          setInput: function(input) {
            this._input = input;
            this._more = this._less = this.done = false;
            this.yylineno = this.yyleng = 0;
            this.yytext = this.matched = this.match = "";
            this.conditionStack = ["INITIAL"];
            this.yylloc = {
              first_line: 1,
              first_column: 0,
              last_line: 1,
              last_column: 0
            };
            if (this.options.ranges) this.yylloc.range = [0, 0];
            this.offset = 0;
            return this;
          },
          input: function() {
            var ch3 = this._input[0];
            this.yytext += ch3;
            this.yyleng++;
            this.offset++;
            this.match += ch3;
            this.matched += ch3;
            var lines = ch3.match(/(?:\r\n?|\n).*/g);
            if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
            } else {
              this.yylloc.last_column++;
            }
            if (this.options.ranges) this.yylloc.range[1]++;
            this._input = this._input.slice(1);
            return ch3;
          },
          unput: function(ch3) {
            var len = ch3.length;
            var lines = ch3.split(/(?:\r\n?|\n)/g);
            this._input = ch3 + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
            this.offset -= len;
            var oldLines = this.match.split(/(?:\r\n?|\n)/g);
            this.match = this.match.substr(0, this.match.length - 1);
            this.matched = this.matched.substr(0, this.matched.length - 1);
            if (lines.length - 1) this.yylineno -= lines.length - 1;
            var r2 = this.yylloc.range;
            this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
            };
            if (this.options.ranges) {
              this.yylloc.range = [r2[0], r2[0] + this.yyleng - len];
            }
            return this;
          },
          more: function() {
            this._more = true;
            return this;
          },
          less: function(n2) {
            this.unput(this.match.slice(n2));
          },
          pastInput: function() {
            var past = this.matched.substr(
              0,
              this.matched.length - this.match.length
            );
            return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
          },
          upcomingInput: function() {
            var next = this.match;
            if (next.length < 20) {
              next += this._input.substr(0, 20 - next.length);
            }
            return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(
              /\n/g,
              ""
            );
          },
          showPosition: function() {
            var pre = this.pastInput();
            var c2 = new Array(pre.length + 1).join("-");
            return pre + this.upcomingInput() + "\n" + c2 + "^";
          },
          next: function() {
            if (this.done) {
              return this.EOF;
            }
            if (!this._input) this.done = true;
            var token2, match, tempMatch, index, lines;
            if (!this._more) {
              this.yytext = "";
              this.match = "";
            }
            var rules = this._currentRules();
            for (var i2 = 0; i2 < rules.length; i2++) {
              tempMatch = this._input.match(this.rules[rules[i2]]);
              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i2;
                if (!this.options.flex) break;
              }
            }
            if (match) {
              lines = match[0].match(/(?:\r\n?|\n).*/g);
              if (lines) this.yylineno += lines.length;
              this.yylloc = {
                first_line: this.yylloc.last_line,
                last_line: this.yylineno + 1,
                first_column: this.yylloc.last_column,
                last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
              };
              this.yytext += match[0];
              this.match += match[0];
              this.matches = match;
              this.yyleng = this.yytext.length;
              if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
              }
              this._more = false;
              this._input = this._input.slice(match[0].length);
              this.matched += match[0];
              token2 = this.performAction.call(
                this,
                this.yy,
                this,
                rules[index],
                this.conditionStack[this.conditionStack.length - 1]
              );
              if (this.done && this._input) this.done = false;
              if (token2) return token2;
              else return;
            }
            if (this._input === "") {
              return this.EOF;
            } else {
              return this.parseError(
                "Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(),
                {
                  text: "",
                  token: null,
                  line: this.yylineno
                }
              );
            }
          },
          lex: function lex2() {
            var r2 = this.next();
            if (typeof r2 !== "undefined") {
              return r2;
            } else {
              return this.lex();
            }
          },
          begin: function begin(condition) {
            this.conditionStack.push(condition);
          },
          popState: function popState() {
            return this.conditionStack.pop();
          },
          _currentRules: function _currentRules() {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          },
          topState: function() {
            return this.conditionStack[this.conditionStack.length - 2];
          },
          pushState: function begin(condition) {
            this.begin(condition);
          }
        };
        lexer2.options = {};
        lexer2.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
          switch ($avoiding_name_collisions) {
            case 0:
              return "*";
            case 1:
              return "/";
            case 2:
              return "-";
            case 3:
              return "+";
            case 4:
              return "^";
            case 5:
              return "(";
            case 6:
              return ")";
            case 7:
              return ",";
            case 8:
              return "==";
            case 9:
              return "!=";
            case 10:
              return "~=";
            case 11:
              return ">=";
            case 12:
              return "<=";
            case 13:
              return "<";
            case 14:
              return ">";
            case 15:
              return "notIn";
            case 16:
              return "and";
            case 17:
              return "or";
            case 18:
              return "not";
            case 19:
              return "in";
            case 20:
              return "of";
            case 21:
              return "if";
            case 22:
              return "then";
            case 23:
              return "else";
            case 24:
              return "mod";
            case 25:
              break;
            case 26:
              return "Number";
            case 27:
              yy_.yytext = JSON.stringify({
                name: yy_.yytext,
                type: "unescaped"
              });
              return "Symbol";
            case 28:
              yy_.yytext = JSON.stringify({
                name: yy.buildString("'", yy_.yytext),
                type: "single-quoted"
              });
              return "Symbol";
            case 29:
              yy_.yytext = JSON.stringify(yy.buildString('"', yy_.yytext));
              return "String";
            case 30:
              return "%";
            case 31:
              return "?";
            case 32:
              return ":";
            case 33:
              return "EndOfExpression";
          }
        };
        lexer2.rules = [
          /^(?:\*)/,
          /^(?:\/)/,
          /^(?:-)/,
          /^(?:\+)/,
          /^(?:\^)/,
          /^(?:\()/,
          /^(?:\))/,
          /^(?:\,)/,
          /^(?:==)/,
          /^(?:\!=)/,
          /^(?:\~=)/,
          /^(?:>=)/,
          /^(?:<=)/,
          /^(?:<)/,
          /^(?:>)/,
          /^(?:not\s+in[^\w])/,
          /^(?:and[^\w])/,
          /^(?:or[^\w])/,
          /^(?:not[^\w])/,
          /^(?:in[^\w])/,
          /^(?:of[^\w])/,
          /^(?:if[^\w])/,
          /^(?:then[^\w])/,
          /^(?:else[^\w])/,
          /^(?:mod[^\w])/,
          /^(?:\s+)/,
          /^(?:[0-9]+(?:\.[0-9]+)?(?![0-9\.]))/,
          /^(?:[a-zA-Z$_][\.a-zA-Z0-9$_]*)/,
          /^(?:'(?:\\'|\\\\|[^'\\])*')/,
          /^(?:"(?:\\"|\\\\|[^"\\])*")/,
          /^(?:\%)/,
          /^(?:\?)/,
          /^(?::)/,
          /^(?:$)/
        ];
        lexer2.conditions = {
          INITIAL: {
            rules: [
              0,
              1,
              2,
              3,
              4,
              5,
              6,
              7,
              8,
              9,
              10,
              11,
              12,
              13,
              14,
              15,
              16,
              17,
              18,
              19,
              20,
              21,
              22,
              23,
              24,
              25,
              26,
              27,
              28,
              29,
              30,
              31,
              32,
              33
            ],
            inclusive: true
          }
        };
        return lexer2;
      }();
      parser2.lexer = lexer;
      function Parser2() {
        this.yy = {};
      }
      Parser2.prototype = parser2;
      parser2.Parser = Parser2;
      return new Parser2();
    }();
    const parser = _parser;
    _parser.Parser;
    class UnknownFunctionError extends ReferenceError {
      constructor(funcName) {
        super(`Unknown function: ${funcName}()`);
        __publicField(this, "I18N_STRING", "UNKNOWN_FUNCTION");
        this.functionName = funcName;
      }
    }
    class UnknownPropertyError extends ReferenceError {
      constructor(propName) {
        super(`Property “${propName}” does not exist.`);
        __publicField(this, "I18N_STRING", "UNKNOWN_PROPERTY");
        this.propertyName = propName;
      }
    }
    class UnknownOptionError extends TypeError {
      constructor(key2) {
        super(`Unknown option: ${key2}`);
        __publicField(this, "I18N_STRING", "UNKNOWN_OPTION");
        this.keyName = key2;
      }
    }
    class UnexpectedTypeError extends TypeError {
      constructor(expected, got) {
        super(`Expected a ${expected}, but got a ${got} instead.`);
        __publicField(this, "I18N_STRING", "UNEXPECTED_TYPE");
        this.expectedType = expected;
        this.recievedType = got;
      }
    }
    class InternalError extends Error {
      constructor(message) {
        super(message);
        __publicField(this, "I18N_STRING", "INTERNAL");
      }
    }
    function hasOwnProperty(obj, prop) {
      if (typeof obj === "object" || typeof obj === "function") {
        return Object.prototype.hasOwnProperty.call(obj, prop);
      }
      return false;
    }
    function mod(a2, b) {
      return (a2 % b + b) % b;
    }
    function unbox(value) {
      if (typeof value !== "object") return value;
      if (value instanceof Number || value instanceof String || value instanceof Boolean)
        return value.valueOf();
    }
    function unwrap(value) {
      if (Array.isArray(value) && value.length === 1) value = value[0];
      return unbox(value);
    }
    function prettyType(value) {
      value = unwrap(value);
      if (value === void 0) return "undefined";
      if (value === null) return "null";
      if (value === true) return "true";
      if (value === false) return "false";
      if (typeof value === "number") return "number";
      if (typeof value === "string") return "text";
      if (typeof value !== "object" && typeof value !== "function")
        return "unknown type";
      if (Array.isArray(value)) return "list";
      return "object";
    }
    function num(value) {
      value = unwrap(value);
      if (typeof value === "number") return value;
      throw new UnexpectedTypeError("number", prettyType(value));
    }
    function str(value) {
      value = unwrap(value);
      if (typeof value === "string") return value;
      throw new UnexpectedTypeError("text", prettyType(value));
    }
    function numstr(value) {
      value = unwrap(value);
      if (typeof value === "string" || typeof value === "number") return value;
      throw new UnexpectedTypeError("text or number", prettyType(value));
    }
    function bool(value) {
      value = unwrap(value);
      if (typeof value === "boolean") return value;
      throw new UnexpectedTypeError(
        "logical value (“true” or “false”)",
        prettyType(value)
      );
    }
    function arr(value) {
      if (value === void 0 || value === null) {
        throw new UnexpectedTypeError("list", prettyType(value));
      }
      if (Array.isArray(value)) {
        return value;
      } else {
        return [value];
      }
    }
    function flatten(input) {
      const stack2 = [...input];
      const res = [];
      while (stack2.length) {
        const next = stack2.pop();
        if (Array.isArray(next)) {
          stack2.push(...next);
        } else {
          res.push(next);
        }
      }
      return res.reverse();
    }
    const std = {
      isfn(fns, funcName) {
        return hasOwnProperty(fns, funcName) && typeof fns[funcName] === "function";
      },
      unknown(funcName) {
        throw new UnknownFunctionError(funcName);
      },
      coerceArray: arr,
      coerceNumber: num,
      coerceNumberOrString: numstr,
      coerceBoolean: bool,
      isSubset(a2, b) {
        const A2 = arr(a2);
        const B2 = arr(b);
        return A2.every((val) => B2.includes(val));
      },
      warnDeprecated: /* @__PURE__ */ function() {
        const warnMax = 3;
        let warnedTimes = {
          ternary: 0,
          modulo: 0
        };
        return (cause, value) => {
          switch (cause) {
            case "ternary":
              if (warnedTimes.ternary++ >= warnMax) break;
              console.warn(
                "The use of ? and : as conditional operators has been deprecated in Filtrex v3 in favor of the if..then..else ternary operator. See issue #34 for more information."
              );
              break;
            case "modulo":
              if (warnedTimes.modulo++ >= warnMax) break;
              console.warn(
                "The use of '%' as a modulo operator has been deprecated in Filtrex v3 in favor of the 'mod' operator. You can use it like this: '3 mod 2 == 1'. See issue #48 for more information."
              );
              break;
          }
          return value;
        };
      }(),
      buildString(quote, literal2) {
        quote = String(quote)[0];
        literal2 = String(literal2);
        let built = "";
        if (literal2[0] !== quote || literal2[literal2.length - 1] !== quote)
          throw new InternalError(
            `Unexpected internal error: String literal doesn't begin/end with the right quotation mark.`
          );
        for (let i2 = 1; i2 < literal2.length - 1; i2++) {
          if (literal2[i2] === "\\") {
            i2++;
            if (i2 >= literal2.length - 1)
              throw new InternalError(
                `Unexpected internal error: Unescaped backslash at the end of string literal.`
              );
            if (literal2[i2] === "\\") built += "\\";
            else if (literal2[i2] === quote) built += quote;
            else
              throw new InternalError(
                `Unexpected internal error: Invalid escaped character in string literal: ${literal2[i2]}`
              );
          } else if (literal2[i2] === quote) {
            throw new InternalError(
              `Unexpected internal error: String literal contains unescaped quotation mark.`
            );
          } else {
            built += literal2[i2];
          }
        }
        return built;
      },
      reduceRelation(arr2) {
        const declarations = [];
        const comparisons = [];
        let previousExpression = flatten([arr2[0]]).join("");
        let j2 = 0;
        for (let i2 = 1; i2 < arr2.length - 1; i2 += 2) {
          const expr = flatten([arr2[i2 + 1]]).join("");
          const tempVar = `tmp${j2++}`;
          comparisons.push(
            `ops["${arr2[i2]}"](${previousExpression}, ${tempVar} = ${expr})`
          );
          previousExpression = tempVar;
          declarations.push(tempVar);
        }
        return `(function(){ var ${declarations.join(", ")}; return ${comparisons.join(" && ")};})()`;
      }
    };
    parser.yy = Object.create(std);
    function compileExpression(expression, options) {
      if (arguments.length > 2) throw new TypeError("Too many arguments.");
      options = typeof options === "object" ? options : {};
      const knownOptions = [
        "extraFunctions",
        "constants",
        "customProp",
        "operators"
      ];
      let { extraFunctions, constants, customProp, operators } = options;
      for (const key2 of Object.keys(options))
        if (!knownOptions.includes(key2)) throw new UnknownOptionError(key2);
      let functions = {
        abs: Math.abs,
        ceil: Math.ceil,
        floor: Math.floor,
        log: Math.log,
        log2: Math.log2,
        log10: Math.log10,
        max: Math.max,
        min: Math.min,
        round: Math.round,
        sqrt: Math.sqrt,
        exists: (v2) => v2 !== void 0 && v2 !== null,
        empty: (v2) => v2 === void 0 || v2 === null || v2 === "" || Array.isArray(v2) && v2.length === 0
      };
      if (extraFunctions) {
        for (const name2 of Object.keys(extraFunctions)) {
          functions[name2] = extraFunctions[name2];
        }
      }
      let defaultOperators = {
        "+": (a2, b) => numstr(a2) + numstr(b),
        "-": (a2, b) => b === void 0 ? -num(a2) : num(a2) - num(b),
        "*": (a2, b) => num(a2) * num(b),
        "/": (a2, b) => num(a2) / num(b),
        "^": (a2, b) => Math.pow(num(a2), num(b)),
        mod: (a2, b) => mod(num(a2), num(b)),
        "==": (a2, b) => a2 === b,
        "!=": (a2, b) => a2 !== b,
        "<": (a2, b) => num(a2) < num(b),
        "<=": (a2, b) => num(a2) <= num(b),
        ">=": (a2, b) => num(a2) >= num(b),
        ">": (a2, b) => num(a2) > num(b),
        "~=": (a2, b) => RegExp(str(b)).test(str(a2))
      };
      if (operators) {
        for (const name2 of Object.keys(operators)) {
          defaultOperators[name2] = operators[name2];
        }
      }
      operators = defaultOperators;
      constants = constants ?? {};
      let js = flatten(parser.parse(expression));
      js.unshift("return ");
      js.push(";");
      function nakedProp(name2, obj, type) {
        if (hasOwnProperty(obj ?? {}, name2)) return obj[name2];
        throw new UnknownPropertyError(name2);
      }
      function safeGetter(obj) {
        return function get2(name2) {
          if (hasOwnProperty(obj ?? {}, name2)) return obj[name2];
          throw new UnknownPropertyError(name2);
        };
      }
      if (typeof customProp === "function") {
        nakedProp = (name2, obj, type) => customProp(name2, safeGetter(obj), obj, type);
      }
      function createCall(fns) {
        return function call(_ref) {
          let { name: name2 } = _ref;
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          if (hasOwnProperty(fns, name2) && typeof fns[name2] === "function")
            return fns[name2](...args);
          throw new UnknownFunctionError(name2);
        };
      }
      function prop(_ref2, obj) {
        let { name: name2, type } = _ref2;
        if (type === "unescaped" && hasOwnProperty(constants, name2))
          return constants[name2];
        return nakedProp(name2, obj, type);
      }
      let func = new Function("call", "ops", "std", "prop", "data", js.join(""));
      return function(data) {
        try {
          return func(createCall(functions), operators, std, prop, data);
        } catch (e2) {
          return e2;
        }
      };
    }
    const coerceValue = (value, descriptor) => {
      if (descriptor && descriptor.scoreType === kScoreTypeBoolean) {
        return Boolean(value);
      } else {
        return value;
      }
    };
    const isFilteringSupportedForValue = (value) => ["string", "number", "boolean"].includes(typeof value);
    const bannedShortScoreNames = (scores) => {
      const used = /* @__PURE__ */ new Set();
      const banned = /* @__PURE__ */ new Set();
      for (const { scorer, name: name2 } of scores) {
        banned.add(scorer);
        if (used.has(name2)) {
          banned.add(name2);
        } else {
          used.add(name2);
        }
      }
      return banned;
    };
    const scoreVariables = (evalDescriptor, sampleScores) => {
      const bannedShortNames = bannedShortScoreNames(evalDescriptor.scores);
      const variables = {};
      const addScore = (variableName, scoreLabel, value) => {
        const coercedValue = coerceValue(
          value,
          evalDescriptor.scoreDescriptor(scoreLabel)
        );
        if (isFilteringSupportedForValue(coercedValue)) {
          variables[variableName] = coercedValue;
        }
      };
      for (const [scorer, score2] of Object.entries(sampleScores)) {
        addScore(scorer, { scorer, name: scorer }, score2.value);
        if (typeof score2.value === "object") {
          for (const [name2, value] of Object.entries(score2.value)) {
            addScore(`${scorer}.${name2}`, { scorer, name: name2 }, value);
            if (!bannedShortNames.has(name2)) {
              addScore(name2, { scorer, name: name2 }, value);
            }
          }
        }
      }
      return variables;
    };
    const scoreFilterItems = (evalDescriptor) => {
      const items = [];
      const bannedShortNames = bannedShortScoreNames(evalDescriptor.scores);
      const valueToString = (value) => typeof value === "string" ? `"${value}"` : String(value);
      const addScore = (shortName, qualifiedName, scoreLabel) => {
        const canonicalName = shortName || qualifiedName;
        const descriptor = evalDescriptor.scoreDescriptor(scoreLabel);
        const scoreType = descriptor == null ? void 0 : descriptor.scoreType;
        if (!descriptor) {
          items.push({
            shortName,
            qualifiedName,
            canonicalName,
            tooltip: void 0,
            categories: [],
            scoreType
          });
          return;
        }
        var tooltip = `${canonicalName}: ${descriptor.scoreType}`;
        var categories = [];
        if (descriptor.min !== void 0 || descriptor.max !== void 0) {
          const rounded = (num2) => {
            return parseFloat(num2.toPrecision(3)).toString();
          };
          tooltip += `
range: ${rounded(descriptor.min)} to ${rounded(descriptor.max)}`;
        }
        if (descriptor.categories) {
          tooltip += `
categories: ${descriptor.categories.map((cat) => cat.val).join(", ")}`;
          categories = descriptor.categories.map((cat) => valueToString(cat.val));
        }
        items.push({
          shortName,
          qualifiedName,
          canonicalName,
          tooltip,
          categories,
          scoreType
        });
      };
      for (const { name: name2, scorer } of evalDescriptor.scores) {
        const hasShortName = name2 === scorer || !bannedShortNames.has(name2);
        const hasQualifiedName = name2 !== scorer;
        const shortName = hasShortName ? name2 : void 0;
        const qualifiedName = hasQualifiedName ? `${scorer}.${name2}` : void 0;
        addScore(shortName, qualifiedName, { name: name2, scorer });
      }
      return items;
    };
    const filterExpression = (evalDescriptor, sample, filterValue) => {
      var _a2, _b2;
      try {
        const inputContains = (regex2) => {
          return inputString(sample.input).some(
            (msg) => msg.match(new RegExp(regex2, "i"))
          );
        };
        const targetContains = (regex2) => {
          let targets = Array.isArray(sample.target) ? sample.target : [sample.target];
          return targets.some((target) => target.match(new RegExp(regex2, "i")));
        };
        const extraFunctions = {
          input_contains: inputContains,
          target_contains: targetContains
        };
        const expression = compileExpression(filterValue, { extraFunctions });
        const vars = scoreVariables(evalDescriptor, sample.scores);
        const result = expression(vars);
        if (typeof result === "boolean") {
          return { matches: result, error: void 0 };
        } else if (result instanceof Error) {
          throw result;
        } else {
          throw new TypeError(
            `Filter expression returned a non-boolean value: ${result}`
          );
        }
      } catch (error2) {
        if (error2 instanceof ReferenceError) {
          const propertyName2 = error2["propertyName"];
          if (propertyName2) {
            const regex2 = new RegExp(`\\b${propertyName2}\\b`);
            const match = regex2.exec(filterValue);
            if (match) {
              return {
                matches: false,
                error: {
                  from: match.index,
                  to: match.index + propertyName2.length,
                  message: error2.message,
                  severity: "warning"
                }
              };
            }
          }
        }
        if (error2.message.startsWith("Parse error") || error2.message.startsWith("Lexical error")) {
          const from = (_b2 = (_a2 = error2.message.match(/^(-*)\^$/m)) == null ? void 0 : _a2[1]) == null ? void 0 : _b2.length;
          return {
            matches: false,
            error: {
              from,
              message: "Syntax error",
              severity: "error"
            }
          };
        }
        return {
          matches: false,
          error: {
            message: error2.message,
            severity: "error"
          }
        };
      }
    };
    const filterSamples = (evalDescriptor, samples, filterValue) => {
      var error2 = void 0;
      const result = samples.filter((sample) => {
        if (filterValue) {
          const { matches, error: sampleError } = filterExpression(
            evalDescriptor,
            sample,
            filterValue
          );
          error2 || (error2 = sampleError);
          return matches;
        } else {
          return true;
        }
      });
      return { result, error: error2 };
    };
    const KEYWORDS = ["and", "or", "not", "in", "not in", "mod"];
    const MATH_FUNCTIONS = [
      ["min", "Minimum of two or more values"],
      ["max", "Maximum of two or more values"],
      ["abs", "Absolute value"],
      ["round", "Round to the nearest integer"],
      ["floor", "Round down to the nearest integer"],
      ["ceil", "Round up to the nearest integer"],
      ["sqrt", "Square root"],
      ["log", "Natural logarithm"],
      ["log2", "Base 2 logarithm"],
      ["log10", "Base 10 logarithm"]
    ];
    const SAMPLE_FUNCTIONS = [
      ["input_contains", "Checks if input contains a regular expression"],
      ["target_contains", "Checks if target contains a regular expression"]
    ];
    function ensureOneLine(tr) {
      const newDoc = tr.newDoc.toString();
      if (newDoc.includes("\n")) {
        if (tr.isUserEvent("input.paste")) {
          const newDocAdjusted = newDoc.replace(/\n/g, " ").trim();
          return {
            changes: {
              from: 0,
              to: tr.startState.doc.length,
              insert: newDocAdjusted
            }
          };
        } else {
          return {};
        }
      }
      return tr;
    }
    const highlightStyle = HighlightStyle.define([
      { tag: tags.string, class: "token string" },
      { tag: tags.number, class: "token number" },
      { tag: tags.keyword, class: "token keyword" }
    ]);
    function countSpaces(word) {
      return word.split(" ").length - 1;
    }
    const nextToken = (() => {
      const wordsRe = (words) => new RegExp(`^(${words.join("|")})\\b`);
      const keywordsRe = wordsRe(
        // Sort to make sure "not in" is matched before "not".
        KEYWORDS.sort((a2, b) => countSpaces(b) - countSpaces(a2))
      );
      const mathFunctionsRe = wordsRe(MATH_FUNCTIONS.map(([label]) => label));
      const sampleFunctionsRe = wordsRe(SAMPLE_FUNCTIONS.map(([label]) => label));
      return function(stream) {
        if (stream.match(/"[^"]*"/)) return "string";
        if (stream.match(/"[^"]*/)) return "unterminatedString";
        if (stream.match(/^(-|\+)?\d+(\.\d+)?/)) return "number";
        if (stream.match(keywordsRe)) return "keyword";
        if (stream.match(mathFunctionsRe)) return "mathFunction";
        if (stream.match(sampleFunctionsRe)) return "sampleFunction";
        if (stream.match(/^[a-zA-Z_][a-zA-Z0-9_]*/)) return "variable";
        if (stream.match(/^(==|!=|<=|>=|<|>|~=)/)) return "relation";
        if (stream.match(/^(=|!|~)/)) return "miscOperator";
        if (stream.match(/^(\+|-|\*|\/|\^|\(|\)|,|\.)/)) return "miscOperator";
        stream.next();
        return null;
      };
    })();
    const language = StreamLanguage.define({
      token: nextToken,
      tokenTable: {
        string: tags.string,
        unterminatedString: tags.string,
        number: tags.number,
        keyword: tags.keyword,
        mathFunction: tags.function(tags.variableName),
        sampleFunction: tags.function(tags.variableName),
        variable: tags.variableName,
        relation: tags.operator,
        miscOperator: tags.operator
      }
    });
    function tokenize(input) {
      const tokens = [];
      const stream = new StringStream(input, 0, 0);
      while (stream.pos < input.length) {
        const from = stream.pos;
        const type = nextToken(stream);
        if (type) {
          tokens.push({
            type,
            text: input.slice(from, stream.pos),
            from,
            to: stream.pos
          });
        }
      }
      return tokens;
    }
    function getMemberScoreItems(filterItems, scorer) {
      return filterItems.filter(
        (item) => {
          var _a2;
          return (_a2 = item == null ? void 0 : item.qualifiedName) == null ? void 0 : _a2.startsWith(`${scorer}.`);
        }
      );
    }
    function getCompletions(context, filterItems) {
      var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k;
      const isLiteral = (token2) => ["string", "unterminatedString", "number"].includes(token2 == null ? void 0 : token2.type);
      const isLogicalOp = (token2) => ["and", "or", "not"].includes(token2 == null ? void 0 : token2.text);
      const autocompleteImmediatelyAfter = (token2) => ["(", "."].includes(token2 == null ? void 0 : token2.text);
      function applyWithCall(view, completion, from, to) {
        view.dispatch({
          changes: { from, to, insert: `${completion.label}()` },
          selection: { anchor: from + completion.label.length + 1 }
        });
      }
      const makeKeywordCompletion = (k2) => ({
        label: k2,
        type: "keyword",
        boost: -20
      });
      const makeMathFunctionCompletion = ([label, info]) => ({
        label,
        type: "function",
        info,
        apply: applyWithCall,
        boost: -10
      });
      const makeSampleFunctionCompletion = ([label, info]) => ({
        label,
        type: "function",
        info,
        apply: applyWithCall,
        boost: 0
      });
      const makeLiteralCompletion = (k2) => ({
        label: k2,
        type: "text",
        boost: 10
      });
      const makeCanonicalNameCompletion = (item, { autoSpaceIf = () => false } = {}) => ({
        label: item.canonicalName + (autoSpaceIf(item) ? " " : ""),
        type: "variable",
        info: item.tooltip,
        boost: 20
      });
      const makeMemberAccessCompletion = (item) => ({
        label: item.qualifiedName.split(".")[1],
        type: "variable",
        info: item.tooltip,
        boost: 20
      });
      const keywordCompletionItems = KEYWORDS.map(makeKeywordCompletion);
      const mathFunctionCompletionItems = MATH_FUNCTIONS.map(
        makeMathFunctionCompletion
      );
      const sampleFunctionCompletionItems = SAMPLE_FUNCTIONS.map(
        makeSampleFunctionCompletion
      );
      const variableCompletionItems = filterItems.map(
        (item) => makeCanonicalNameCompletion(item)
      );
      const defaultCompletionItems = [
        ...keywordCompletionItems,
        ...mathFunctionCompletionItems,
        ...sampleFunctionCompletionItems,
        ...variableCompletionItems
      ];
      const doc2 = context.state.doc;
      const input = doc2.toString().slice(0, context.pos);
      const tokens = tokenize(input);
      const lastToken = tokens[tokens.length - 1];
      const isCompletionInsideToken = lastToken && context.pos == lastToken.to && !autocompleteImmediatelyAfter(lastToken);
      const currentTokenIndex = isCompletionInsideToken ? tokens.length - 1 : tokens.length;
      const prevToken = (index) => tokens[currentTokenIndex - index];
      const currentToken = prevToken(0);
      const completionStart = currentToken ? currentToken.from : context.pos;
      const completingAtEnd = context.pos == doc2.length;
      const findFilterItem = (endIndex) => {
        var _a3, _b3, _c2;
        if (((_a3 = prevToken(endIndex)) == null ? void 0 : _a3.type) == "variable") {
          let name2 = prevToken(endIndex).text;
          let i2 = endIndex;
          while (((_b3 = prevToken(i2 + 1)) == null ? void 0 : _b3.text) == ".") {
            if (((_c2 = prevToken(i2 + 2)) == null ? void 0 : _c2.type) == "variable") {
              name2 = prevToken(i2 + 2).text + "." + name2;
              i2 += 2;
            } else {
              break;
            }
          }
          return filterItems.find((item) => item.canonicalName == name2);
        }
        return void 0;
      };
      const makeCompletions = (priorityCompletions, {
        autocompleteInTheMiddle = false,
        enforceOrder = false,
        autoSpaceAfter = false,
        includeDefault = true
      } = {}) => {
        if (!autocompleteInTheMiddle && !completingAtEnd && !context.explicit) {
          return null;
        }
        const priorityCompletionsOrdered = enforceOrder ? priorityCompletions.map((c2, idx) => ({
          ...c2,
          boost: -idx
        })) : priorityCompletions;
        const priorityCompletionsAdjusted = autoSpaceAfter ? priorityCompletionsOrdered.map(
          (c2) => !c2.apply && !c2.label.endsWith(" ") ? { ...c2, label: c2.label + " " } : c2
        ) : priorityCompletionsOrdered;
        if (includeDefault) {
          const miscSection = {
            name: "misc",
            header: () => {
              const element = document.createElement("hr");
              element.style.display = "list-item";
              element.style.margin = "2px 0";
              return element;
            }
          };
          const priorityLabels = new Set(priorityCompletions.map((c2) => c2.label));
          const defaultCompletionAdjusted = priorityCompletions ? defaultCompletionItems.filter((c2) => !priorityLabels.has(c2.label)).map((c2) => ({ ...c2, section: miscSection })) : defaultCompletionItems;
          return {
            from: completionStart,
            options: [...priorityCompletionsAdjusted, ...defaultCompletionAdjusted]
          };
        } else {
          return {
            from: completionStart,
            options: priorityCompletionsAdjusted
          };
        }
      };
      const defaultCompletions = () => makeCompletions([]);
      const noCompletions = () => context.explicit ? defaultCompletions() : null;
      const newExpressionCompletions = () => makeCompletions([
        ...filterItems.map(
          (item) => makeCanonicalNameCompletion(item, {
            autoSpaceIf: (item2) => completingAtEnd && item2.scoreType != kScoreTypeBoolean
          })
        ),
        ...sampleFunctionCompletionItems
      ]);
      const variableCompletions = () => makeCompletions(variableCompletionItems);
      const memberAccessCompletions = (items) => makeCompletions(items.map(makeMemberAccessCompletion), {
        autocompleteInTheMiddle: true,
        includeDefault: false
      });
      const logicalOpCompletions = () => makeCompletions(["and", "or"].map(makeKeywordCompletion), {
        enforceOrder: true,
        autoSpaceAfter: completingAtEnd
      });
      const descreteRelationCompletions = () => makeCompletions(["==", "!=", "in", "not in"].map(makeKeywordCompletion), {
        enforceOrder: true,
        autoSpaceAfter: completingAtEnd
      });
      const continuousRelationCompletions = () => makeCompletions(
        ["<", "<=", ">", ">=", "==", "!="].map(makeKeywordCompletion),
        { enforceOrder: true, autoSpaceAfter: completingAtEnd }
      );
      const customRelationCompletions = () => makeCompletions(
        ["<", "<=", ">", ">=", "==", "!=", "~="].map(makeKeywordCompletion),
        { enforceOrder: true, autoSpaceAfter: completingAtEnd }
      );
      const rhsCompletions = (options) => makeCompletions(options.map(makeLiteralCompletion));
      if (!prevToken(1)) return newExpressionCompletions();
      if (((_a2 = prevToken(1)) == null ? void 0 : _a2.text) == ".") {
        const scorer = (_b2 = prevToken(2)) == null ? void 0 : _b2.text;
        if (scorer) {
          return memberAccessCompletions(getMemberScoreItems(filterItems, scorer));
        }
      }
      if (((_c = prevToken(1)) == null ? void 0 : _c.text) == "(") {
        if (((_d = prevToken(2)) == null ? void 0 : _d.type) == "mathFunction") return variableCompletions();
        if (((_e = prevToken(2)) == null ? void 0 : _e.type) == "sampleFunction") {
          return noCompletions();
        }
        return newExpressionCompletions();
      }
      if (((_f = prevToken(1)) == null ? void 0 : _f.text) == ")") {
        return noCompletions();
      }
      if (((_g = prevToken(1)) == null ? void 0 : _g.type) == "variable") {
        const scoreType = (_h = findFilterItem(1)) == null ? void 0 : _h.scoreType;
        if ([kScoreTypePassFail, kScoreTypeCategorical].includes(scoreType))
          return descreteRelationCompletions();
        if (scoreType == kScoreTypeNumeric) return continuousRelationCompletions();
        if (scoreType == kScoreTypeOther) return customRelationCompletions();
        if (scoreType == kScoreTypeBoolean) return logicalOpCompletions();
      }
      if (((_i = prevToken(1)) == null ? void 0 : _i.type) == "relation") {
        const item = findFilterItem(2);
        if (item) {
          if ((_j = item == null ? void 0 : item.categories) == null ? void 0 : _j.length) {
            return rhsCompletions(item.categories);
          } else {
            return noCompletions();
          }
        } else {
          return variableCompletions();
        }
      }
      if (isLiteral(prevToken(1)) && ((_k = prevToken(2)) == null ? void 0 : _k.type) == "relation") {
        return logicalOpCompletions();
      }
      if (isLogicalOp(prevToken(1))) return newExpressionCompletions();
      return noCompletions();
    }
    function getLints(view, filterError) {
      if (!filterError) return [];
      return [
        {
          from: filterError.from || 0,
          to: filterError.to || view.state.doc.length,
          severity: filterError.severity,
          message: filterError.message
        }
      ];
    }
    const editorTheme = EditorView.theme({
      "&": {
        fontSize: "inherit",
        color: "var(--inspect-input-foreground)",
        backgroundColor: "var(--inspect-input-background)",
        border: "1px solid var(--inspect-input-border)",
        borderRadius: "var(--bs-border-radius)"
      },
      ".cm-cursor.cm-cursor-primary": {
        borderLeftColor: "var(--bs-body-color)"
      },
      ".cm-selectionBackground": {
        backgroundColor: "var(--inspect-inactive-selection-background)"
      },
      "&.cm-focused > .cm-scroller > .cm-selectionLayer > .cm-selectionBackground": {
        backgroundColor: "var(--inspect-active-selection-background)"
      },
      "&.cm-focused": {
        outline: "none",
        borderColor: "var(--inspect-focus-border-color)",
        boxShadow: "var(--inspect-focus-border-shadow)"
      },
      ".filter-pending > &.cm-focused": {
        borderColor: "var(--inspect-focus-border-gray-color)",
        boxShadow: "var(--inspect-focus-border-gray-shadow)"
      },
      ".cm-tooltip": {
        backgroundColor: "var(--bs-light)",
        border: "1px solid var(--bs-border-color)",
        color: "var(--bs-body-color)"
      },
      ".cm-tooltip.cm-tooltip-autocomplete > ul > li": {
        color: "var(--bs-body-color)"
      },
      ".cm-tooltip.cm-tooltip-autocomplete > ul > li[aria-selected]": {
        backgroundColor: "var(--inspect-active-selection-background)",
        color: "var(--bs-body-color)"
      },
      ".cm-scroller": {
        overflow: "hidden"
      }
    });
    const getFilteringResult = (evalDescriptor, filterValue) => {
      const { result, error: error2 } = filterSamples(
        evalDescriptor,
        evalDescriptor.samples,
        filterValue
      );
      return { numSamples: result.length, error: error2 };
    };
    const SampleFilter = ({ evalDescriptor, filter, filterChanged }) => {
      const editorRef = A$1(
        /** @type {HTMLElement|null} */
        null
      );
      const editorViewRef = A$1(
        /** @type {import("codemirror").EditorView|null} */
        null
      );
      const linterCompartment = A$1(new Compartment());
      const autocompletionCompartment = A$1(new Compartment());
      const updateListenerCompartment = A$1(new Compartment());
      const filterItems = T$1(
        () => scoreFilterItems(evalDescriptor),
        [evalDescriptor]
      );
      const [filteringResultInstant, setFilteringResultInstant] = h(
        /** @type {FilteringResult | null} */
        null
      );
      const handleFocus = (event, view) => {
        if (event.isTrusted && view.state.doc.toString() === "") {
          setTimeout(() => startCompletion(view), 0);
        }
      };
      const makeAutocompletion = () => autocompletion({
        override: [(context) => getCompletions(context, filterItems)],
        activateOnCompletion: (c2) => c2.label.endsWith(" ")
        // see autoSpaceAfter
      });
      const makeLinter = () => (
        // CodeMirror debounces the linter, so even instant error updates are not annoying
        linter((view) => getLints(view, filteringResultInstant == null ? void 0 : filteringResultInstant.error))
      );
      const makeUpdateListener = () => EditorView.updateListener.of((update) => {
        if (update.docChanged) {
          const newValue = update.state.doc.toString();
          const filteringResult = getFilteringResult(evalDescriptor, newValue);
          if (!filteringResult.error) {
            filterChanged({ value: newValue });
          }
          setFilteringResultInstant(filteringResult);
        }
      });
      y(() => {
        var _a2;
        (_a2 = editorViewRef.current) == null ? void 0 : _a2.destroy();
        editorViewRef.current = new EditorView({
          parent: editorRef.current,
          state: EditorState.create({
            doc: filter.value || "",
            extensions: [
              minimalSetup,
              bracketMatching(),
              editorTheme,
              EditorState.transactionFilter.of(ensureOneLine),
              updateListenerCompartment.current.of(makeUpdateListener()),
              EditorView.domEventHandlers({
                focus: handleFocus
              }),
              language,
              syntaxHighlighting(highlightStyle),
              autocompletionCompartment.current.of(makeAutocompletion()),
              linterCompartment.current.of(makeLinter())
            ]
          })
        });
        return () => {
          var _a3;
          (_a3 = editorViewRef.current) == null ? void 0 : _a3.destroy();
        };
      }, []);
      y(() => {
        if (editorViewRef.current && filter.value !== editorViewRef.current.state.doc.toString()) {
          setFilteringResultInstant(
            getFilteringResult(evalDescriptor, filter.value)
          );
          editorViewRef.current.dispatch({
            changes: {
              from: 0,
              to: editorViewRef.current.state.doc.length,
              insert: filter.value || ""
            }
          });
        }
      }, [evalDescriptor, filter.value]);
      y(() => {
        if (editorViewRef.current) {
          editorViewRef.current.dispatch({
            effects: updateListenerCompartment.current.reconfigure(makeUpdateListener())
          });
        }
      }, [evalDescriptor]);
      y(() => {
        if (editorViewRef.current) {
          editorViewRef.current.dispatch({
            effects: autocompletionCompartment.current.reconfigure(makeAutocompletion())
          });
        }
      }, [filterItems]);
      y(() => {
        if (editorViewRef.current) {
          editorViewRef.current.dispatch({
            effects: linterCompartment.current.reconfigure(makeLinter())
          });
        }
      }, [filteringResultInstant == null ? void 0 : filteringResultInstant.error]);
      return m$1`
    <div style=${{ display: "flex" }}>
      <span
        class="sample-filter-label"
        style=${{
        alignSelf: "center",
        fontSize: FontSize.smaller,
        ...TextStyle.label,
        ...TextStyle.secondary,
        marginRight: "0.3em",
        marginLeft: "0.2em"
      }}
        >Filter:</span
      >
      <div
        ref=${editorRef}
        style=${{ width: "300px" }}
        class=${(filteringResultInstant == null ? void 0 : filteringResultInstant.error) ? ["filter-pending"] : []}
      ></div>
      <span
        class="bi bi-question-circle"
        style=${{
        position: "relative",
        marginLeft: "0.5em",
        cursor: "help",
        alignSelf: "center"
      }}
        data-tooltip=${filterTooltip}
        data-tooltip-position="bottom-left"
      ></span>
    </div>
  `;
    };
    const filterTooltip = `
Filter samples by:
  • Scores
  • Input and target regex search: input_contains, target_contains

Supported expressions:
  • Arithmetic: +, -, *, /, mod, ^
  • Comparison: <, <=, >, >=, ==, !=, including chain comparisons, e.g. “10 <= x < 20”
  • Boolean: and, or, not
  • Regex matching: ~= (case-sensitive)
  • Set operations: in, not in; e.g. “x in (2, 3, 5)”
  • Functions: min, max, abs, round, floor, ceil, sqrt, log, log2, log10
`.trim();
    const SelectScorer = ({ scores, score: score2, setScore }) => {
      const scorers = scores.reduce((accum, scorer) => {
        if (!accum.find((sc) => {
          return scorer.scorer === sc.scorer;
        })) {
          accum.push(scorer);
        }
        return accum;
      }, []);
      if (scorers.length === 1) {
        return m$1`
      <div style=${{ display: "flex" }}>
        <span
          class="select-scorer-label"
          style=${{
          alignSelf: "center",
          fontSize: FontSize.smaller,
          ...TextStyle.label,
          ...TextStyle.secondary
        }}
          >Score:</span
        >
        <${ScoreSelector}
          scores=${scores}
          selectedIndex=${scoreIndex(score2, scores)}
          selectedIndexChanged=${(index) => {
          setScore(scores[index]);
        }}
        />
      </div>
    `;
      } else {
        const scorerScores = scores.filter((sc) => {
          return sc.scorer === score2.scorer;
        });
        const selectors = [
          m$1`<${ScorerSelector}
        scorers=${scorers}
        selectedIndex=${scorerIndex(score2, scorers)}
        selectedIndexChanged=${(index) => {
            setScore(scorers[index]);
          }}
      />`
        ];
        if (scorerScores.length > 1) {
          selectors.push(
            m$1`<${ScoreSelector}
          style=${{ marginLeft: "1em" }}
          scores=${scorerScores}
          selectedIndex=${scoreIndex(score2, scorerScores)}
          selectedIndexChanged=${(index) => {
              setScore(scorerScores[index]);
            }}
        />`
          );
        }
        return m$1`
      <div style=${{ display: "flex" }}>
        <span
          class="select-scorer-label"
          style=${{
          alignSelf: "center",
          fontSize: FontSize.smaller,
          ...TextStyle.label,
          ...TextStyle.secondary,
          marginRight: "0.3em",
          marginLeft: "0.2em"
        }}
          >Scorer:</span
        >
        ${selectors}
      </div>
    `;
      }
    };
    const ScoreSelector = ({
      scores,
      selectedIndex,
      selectedIndexChanged,
      style: style2
    }) => {
      return m$1`<select
    class="form-select form-select-sm"
    aria-label=".select-scorer-label"
    style=${{ fontSize: FontSize.smaller, ...style2 }}
    value=${scores[selectedIndex].name}
    onChange=${(e2) => {
        selectedIndexChanged(e2.target.selectedIndex);
      }}
  >
    ${scores.map((score2) => {
        return m$1`<option value="${score2.name}">${score2.name}</option>`;
      })}
  </select>`;
    };
    const ScorerSelector = ({ scorers, selectedIndex, selectedIndexChanged }) => {
      return m$1`<select
    class="form-select form-select-sm"
    aria-label=".epoch-filter-label"
    style=${{ fontSize: FontSize.smaller }}
    value=${scorers[selectedIndex].scorer}
    onChange=${(e2) => {
        selectedIndexChanged(e2.target.selectedIndex);
      }}
  >
    ${scorers.map((scorer) => {
        return m$1`<option value="${scorer.scorer}">${scorer.scorer}</option>`;
      })}
  </select>`;
    };
    const scoreIndex = (score2, scores) => scores.findIndex((sc) => {
      return sc.name === score2.name && sc.scorer === score2.scorer;
    });
    const scorerIndex = (score2, scores) => scores.findIndex((sc) => {
      return sc.scorer === score2.scorer;
    });
    const SampleTools = (props) => {
      const {
        epoch,
        setEpoch,
        filter,
        filterChanged,
        sort,
        setSort,
        epochs,
        sampleDescriptor,
        score: score2,
        setScore,
        scores
      } = props;
      const hasEpochs = epochs > 1;
      const tools = [];
      tools.push(
        m$1`<${SampleFilter}
      evalDescriptor=${sampleDescriptor.evalDescriptor}
      filter=${filter}
      filterChanged=${filterChanged}
    />`
      );
      if (scores.length > 1) {
        tools.push(
          m$1`<${SelectScorer}
        scores=${scores}
        score=${score2}
        setScore=${setScore}
      />`
        );
      }
      if (hasEpochs) {
        tools.push(
          m$1`<${EpochFilter}
        epoch=${epoch}
        setEpoch="${setEpoch}"
        epochs=${epochs}
      />`
        );
      }
      tools.push(
        m$1`<${SortFilter}
      sampleDescriptor=${sampleDescriptor}
      sort=${sort}
      setSort=${setSort}
      epochs=${hasEpochs}
    />`
      );
      return tools;
    };
    const CopyButton = ({ value }) => {
      return m$1`<button
    class="copy-button"
    style=${{
        border: "none",
        backgroundColor: "inherit",
        opacity: "0.5",
        paddingTop: "0px"
      }}
    data-clipboard-text=${value}
    onclick=${(e2) => {
        let iEl = e2.target;
        if (iEl.tagName === "BUTTON") {
          iEl = iEl.firstChild;
        }
        if (iEl) {
          if (iEl) {
            iEl.className = `${ApplicationIcons.confirm} primary`;
            setTimeout(() => {
              iEl.className = ApplicationIcons.copy;
            }, 1250);
          }
        }
        return false;
      }}
  >
    <i class=${ApplicationIcons.copy}></i>
  </button>`;
    };
    const LabeledValue = ({
      label,
      style: style2,
      valueStyle,
      layout = "column",
      children: children2
    }) => {
      const flexDirection = layout === "column" ? "column" : "row";
      return m$1` <div
    style=${{
        display: "flex",
        flexDirection,
        ...style2
      }}
  >
    <div
      style=${{
        fontSize: FontSize.smaller,
        marginBottom: "-0.2rem",
        ...TextStyle.secondary,
        ...TextStyle.label
      }}
    >
      ${label}
    </div>
    <div style=${{ fontSize: FontSize.base, ...valueStyle }}>${children2}</div>
  </div>`;
    };
    const SecondaryBar = ({
      evalSpec,
      evalPlan,
      evalResults,
      evalStats,
      samples,
      evalDescriptor,
      status,
      style: style2
    }) => {
      if (!evalSpec || status !== "success") {
        return "";
      }
      const staticColStyle = {
        flexShrink: "0"
      };
      const epochs = evalSpec.config.epochs || 1;
      const hyperparameters = {
        ...evalPlan == null ? void 0 : evalPlan.config,
        ...evalSpec.task_args
      };
      const hasConfig = Object.keys(hyperparameters).length > 0;
      const values = [];
      values.push({
        size: "minmax(12%, auto)",
        value: m$1`<${LabeledValue} label="Dataset" style=${staticColStyle}>
    <${DatasetSummary}
      dataset=${evalSpec.dataset}
      samples=${samples}
      epochs=${epochs} />
  </${LabeledValue}>
`
      });
      const label = (evalResults == null ? void 0 : evalResults.scores.length) > 1 ? "Scorers" : "Scorer";
      values.push({
        size: "minmax(12%, auto)",
        value: m$1`<${LabeledValue} label="${label}" style=${staticColStyle} style=${{ justifySelf: hasConfig ? "left" : "center" }}>
    <${ScorerSummary}
      evalDescriptor=${evalDescriptor} />
  </${LabeledValue}>`
      });
      if (hasConfig) {
        values.push({
          size: "minmax(12%, auto)",
          value: m$1`<${LabeledValue} label="Config" style=${{ justifySelf: "right" }}>
      <${ParamSummary} params=${hyperparameters}/>
    </${LabeledValue}>`
        });
      }
      const totalDuration = formatDuration(
        new Date(evalStats.started_at),
        new Date(evalStats.completed_at)
      );
      values.push({
        size: "minmax(12%, auto)",
        value: m$1`
      <${LabeledValue} label="Duration" style=${{ justifySelf: "right" }}>
        ${totalDuration}
      </${LabeledValue}>`
      });
      return m$1`
    <${ExpandablePanel} style=${{ margin: "0", ...style2 }} collapse=${true} lines=${4}>
    <div
      style=${{
        margin: "0",
        padding: "0.2em 1em 0.2em 1em",
        display: "grid",
        gridColumnGap: "1em",
        borderTop: "1px solid var(--bs-border-color)",
        gridTemplateColumns: `${values.map((val) => {
          return val.size;
        }).join(" ")}`
      }}
    >
      ${values.map((val) => {
        return val.value;
      })}
    </div>
    </${ExpandablePanel}>
  `;
    };
    const DatasetSummary = ({ dataset, samples, epochs, style: style2 }) => {
      if (!dataset) {
        return "";
      }
      return m$1`
    <div style=${style2}>
      ${dataset.name}${(samples == null ? void 0 : samples.length) ? m$1`${formatDataset(dataset.name, samples.length, epochs)}` : ""}
    </div>
  `;
    };
    const ScorerSummary = ({ evalDescriptor }) => {
      if (!evalDescriptor) {
        return "";
      }
      const items = scoreFilterItems(evalDescriptor);
      return m$1`
    <span style=${{ position: "relative" }}>
      ${Array.from(items).map(
        (item, index) => m$1`
          ${index > 0 ? ", " : ""}
          <span title=${item.tooltip}>${item.canonicalName}</span>
        `
      )}
    </span>
  `;
    };
    const ParamSummary = ({ params }) => {
      if (!params) {
        return "";
      }
      const paraValues = Object.keys(params).map((key2) => {
        const val = params[key2];
        if (Array.isArray(val) || typeof val === "object") {
          return `${key2}: ${JSON.stringify(val)}`;
        } else {
          return `${key2}: ${val}`;
        }
      });
      if (paraValues.length > 0) {
        return m$1`<code style=${{ padding: 0, color: "var(--bs-body-color)" }}
      >${paraValues.join(", ")}</code
    >`;
      } else {
        return "";
      }
    };
    const Navbar = ({
      file,
      evalSpec,
      evalPlan,
      evalResults,
      evalStats,
      samples,
      evalDescriptor,
      showToggle,
      offcanvas,
      status
    }) => {
      const toggleOffCanClass = offcanvas ? "" : " d-md-none";
      const logFileName = file ? filename(file) : "";
      const task = evalSpec == null ? void 0 : evalSpec.task;
      const model = evalSpec == null ? void 0 : evalSpec.model;
      const results = evalResults;
      const created = evalSpec == null ? void 0 : evalSpec.created;
      let statusPanel;
      if (status === "success") {
        statusPanel = m$1`<${ResultsPanel} results="${results}" />`;
      } else if (status === "cancelled") {
        statusPanel = m$1`<${CancelledPanel}
      sampleCount=${(samples == null ? void 0 : samples.length) || 0}
    />`;
      } else if (status === "started") {
        statusPanel = m$1`<${RunningPanel} sampleCount=${(samples == null ? void 0 : samples.length) || 0} />`;
      } else if (status === "error") {
        statusPanel = m$1`<${ErroredPanel} sampleCount=${(samples == null ? void 0 : samples.length) || 0} />`;
      }
      const navbarContents = logFileName ? m$1` <div
          class="navbar-brand navbar-text mb-0"
          style=${{
        display: "flex",
        paddingTop: 0,
        marginLeft: "0.5rem",
        minWidth: "250px"
      }}
        >
          ${showToggle ? m$1`<button
                id="sidebarToggle"
                class="btn${toggleOffCanClass}"
                type="button"
                data-bs-toggle="offcanvas"
                data-bs-target="#sidebarOffCanvas"
                aria-controls="sidebarOffCanvas"
                style=${{
        padding: "0rem 0.1rem 0.1rem 0rem",
        display: "flex"
      }}
              >
                <i class=${ApplicationIcons.menu}></i>
              </button> ` : ""}
          <div
            style=${{
        display: "flex",
        flexDirection: "column",
        marginLeft: "0.2rem"
      }}
          >
            <div
              style=${{
        marginTop: "0.1rem",
        display: "grid",
        gridTemplateColumns: "minmax(30px,max-content) minmax(100px, max-content)"
      }}
            >
              <div
                id="task-title"
                style=${{
        fontWeight: 600,
        marginRight: "0.3rem",
        ...ApplicationStyles.wrapText()
      }}
                class="task-title"
                title=${task}
              >
                ${task}
              </div>
              <div
                id="task-model"
                style=${{
        fontSize: FontSize.base,
        paddingTop: "0.4rem",
        ...ApplicationStyles.wrapText()
      }}
                class="task-model"
                title=${model}
              >
                ${model}
              </div>
            </div>
            <div
              style=${{
        opacity: "0.7",
        marginTop: "0.1rem",
        paddingBottom: 0,
        fontSize: FontSize.small,
        display: "grid",
        gridTemplateColumns: "minmax(0,max-content) max-content"
      }}
            >
              <div
                class="navbar-secondary-text"
                style=${{
        ...ApplicationStyles.wrapText()
      }}
              >
                ${logFileName}
              </div>
              <${CopyButton} value=${file} />
            </div>
          </div>
        </div>

        <div id="task-created" style=${{ display: "none" }}>${created}</div>

        <div
          class="navbar-text"
          style=${{
        justifyContent: "end",
        marginRight: "1em",
        marginBottom: "0"
      }}
        >
          ${statusPanel}
        </div>` : "";
      return m$1`
    <nav
      class="navbar sticky-top"
      style=${{
        flexWrap: "nowrap"
      }}
    >
      <div
        style=${{
        display: "grid",
        gridTemplateColumns: "1fr auto",
        width: "100%"
      }}
      >
        ${navbarContents}
        <${SecondaryBar}
          evalSpec=${evalSpec}
          evalPlan=${evalPlan}
          evalResults=${evalResults}
          evalStats=${evalStats}
          samples=${samples}
          evalDescriptor=${evalDescriptor}
          status=${status}
          style=${{ gridColumn: "1/-1" }}
        />
      </div>
    </nav>
  `;
    };
    const StatusPanel = ({ icon, status, sampleCount }) => {
      return m$1`<div
    style=${{
        padding: "1em",
        marginTop: "0.5em",
        textTransform: "uppercase",
        fontSize: FontSize.smaller,
        display: "grid",
        gridTemplateColumns: "auto auto"
      }}
  >
    <i
      class="${icon}"
      style=${{
        fontSize: FontSize.large,
        marginRight: "0.3em",
        marginTop: "-0.1em"
      }}
    />
    <div>
      <div>${status}</div>
      <div>(${sampleCount} ${sampleCount === 1 ? "sample" : "samples"})</div>
    </div>
  </div>`;
    };
    const CancelledPanel = ({ sampleCount }) => {
      return m$1`<${StatusPanel}
    icon=${ApplicationIcons.logging.info}
    status="Cancelled"
    sampleCount=${sampleCount}
  />`;
    };
    const ErroredPanel = ({ sampleCount }) => {
      return m$1`<${StatusPanel}
    icon=${ApplicationIcons.logging.error}
    status="Task Failed"
    sampleCount=${sampleCount}
  />`;
    };
    const RunningPanel = ({ sampleCount }) => {
      return m$1`<${StatusPanel}
    icon=${ApplicationIcons.running}
    status="Running"
    sampleCount=${sampleCount}
  />`;
    };
    const ResultsPanel = ({ results }) => {
      var _a2, _b2;
      if (((_a2 = results == null ? void 0 : results.scores) == null ? void 0 : _a2.length) === 1) {
        const scorers = {};
        results.scores.map((score2) => {
          scorers[score2.name] = Object.keys(score2.metrics).map((key2) => {
            return {
              name: key2,
              value: score2.metrics[key2].value,
              reducer: score2.reducer
            };
          });
        });
        const metrics = Object.values(scorers)[0];
        return m$1`<div
      style=${{
          display: "flex",
          flexDirection: "row",
          flexWrap: "wrap",
          justifyContent: "end",
          height: "100%",
          alignItems: "center",
          maxHeight: "15em",
          overflow: "scroll"
        }}
    >
      ${metrics.map((metric, i2) => {
          return m$1`<${VerticalMetric} metric=${metric} isFirst=${i2 === 0} />`;
        })}
    </div>`;
      } else {
        return m$1`<div
      style=${{
          display: "flex",
          flexDirection: "row",
          flexWrap: "wrap",
          justifyContent: "end",
          height: "100%",
          alignItems: "center",
          marginTop: "0.2rem",
          paddingBottom: "0.4rem",
          rowGap: "1em",
          maxHeight: "15em",
          overflow: "scroll"
        }}
    >
      ${(_b2 = results == null ? void 0 : results.scores) == null ? void 0 : _b2.map((score2, index) => {
          return m$1`<${MultiScorerMetric}
          scorer=${score2}
          isFirst=${index === 0}
        />`;
        })}
    </div>`;
      }
    };
    const VerticalMetric = ({ metric, isFirst }) => {
      const reducer_component = metric.reducer ? m$1` <div
        style=${{
        fontSize: FontSize.smaller,
        textAlign: "center",
        paddingTop: "0.3rem",
        marginBottom: "-0.3rem",
        ...TextStyle.label,
        ...TextStyle.secondary
      }}
      >
        ${// @ts-expect-error
      metric.reducer}
      </div>` : "";
      return m$1`<div style=${{ paddingLeft: isFirst ? "0" : "1em" }}>
    <div
      class="vertical-metric-label"
      style=${{
        fontSize: FontSize.smaller,
        ...TextStyle.secondary,
        textAlign: "center",
        paddingTop: "0.3rem",
        marginBottom: "-0.2rem",
        ...TextStyle.label,
        ...TextStyle.secondary,
        borderBottom: "solid var(--bs-border-color) 1px"
      }}
    >
      ${metric.name}
    </div>
    ${reducer_component}
    <div
      class="vertical-metric-value"
      style=${{
        fontSize: FontSize.larger,
        fontWeight: "500",
        textAlign: "center"
      }}
    >
      ${formatPrettyDecimal(metric.value)}
    </div>
  </div>`;
    };
    const MultiScorerMetric = ({ scorer, isFirst }) => {
      const titleFontSize = Object.keys(scorer.metrics).length === 1 ? FontSize.larger : FontSize.base;
      const reducerFontSize = Object.keys(scorer.metrics).length === 1 ? FontSize.small : FontSize.smaller;
      const valueFontSize = Object.keys(scorer.metrics).length === 1 ? FontSize.base : FontSize.base;
      const reducer_component = scorer.reducer ? m$1`<div
        style=${{
        fontSize: reducerFontSize,
        textAlign: "center",
        marginBottom: "-0.3rem",
        ...TextStyle.label,
        ...TextStyle.secondary
      }}
      >
        ${scorer.reducer}
      </div>` : "";
      return m$1`<div style=${{ paddingLeft: isFirst ? "0" : "1.5em" }}>
    <div
      style=${{
        fontSize: titleFontSize,
        textAlign: "center",
        borderBottom: "solid var(--bs-border-color) 1px",
        marginBottom: "-0.1rem",
        ...TextStyle.label,
        ...TextStyle.secondary
      }}
      class="multi-score-label"
    >
      ${scorer.name}
    </div>
    ${reducer_component}
    <div
      style=${{
        display: "grid",
        gridTemplateColumns: "auto auto",
        gridColumnGap: "0.3rem",
        gridRowGap: "0",
        fontSize: valueFontSize
      }}
    >
      ${Object.keys(scorer.metrics).map((key2) => {
        const metric = scorer.metrics[key2];
        return m$1` <div>${metric.name}</div>
          <div style=${{ fontWeight: "600" }}>
            ${formatPrettyDecimal(metric.value)}
          </div>`;
      })}
    </div>
  </div>`;
    };
    const TaskErrorCard = ({ evalError }) => {
      return m$1`
    <${Card}>
      <${CardHeader} icon=${ApplicationIcons.error} label="Task Failed: ${evalError.message}"></${CardHeader}>
      <${CardBody} style=${{ fontSize: FontSize.smaller }}>
        <${ANSIDisplay} output=${evalError.traceback_ansi} style=${{ fontSize: "clamp(0.2rem, calc(0.2em + .93vw), 0.9rem)" }}/>
      </${CardBody}>
    </${Card}>
  `;
    };
    const WorkSpace = ({
      task_id,
      evalStatus,
      logFileName,
      evalError,
      evalSpec,
      evalVersion,
      evalPlan,
      evalStats,
      evalResults,
      samples,
      sampleMode,
      selectedSample,
      groupBy,
      groupByOrder,
      showToggle,
      refreshLog,
      capabilities,
      offcanvas,
      samplesDescriptor,
      selectedSampleIndex,
      setSelectedSampleIndex,
      showingSampleDialog,
      setShowingSampleDialog,
      selectedSampleTab,
      setSelectedSampleTab,
      sampleStatus,
      sampleError,
      sort,
      setSort,
      epochs,
      epoch,
      setEpoch,
      filter,
      setFilter,
      score: score2,
      setScore,
      scores,
      selectedTab,
      setSelectedTab,
      sampleScrollPositionRef,
      setSampleScrollPosition,
      workspaceTabScrollPositionRef,
      setWorkspaceTabScrollPosition
    }) => {
      const divRef = A$1(
        /** @type {HTMLElement|null} */
        null
      );
      if (!evalSpec) {
        return "";
      }
      const [hidden, setHidden] = h(false);
      y(() => {
        setHidden(false);
      }, [logFileName]);
      y(() => {
        if (divRef.current) {
          divRef.current.scrollTop = 0;
        }
      }, [divRef, task_id]);
      const sampleTabScrollRef = A$1(
        /** @type {HTMLElement|null} */
        null
      );
      const resolvedTabs = T$1(() => {
        const resolvedTabs2 = {};
        if (sampleMode !== "none") {
          resolvedTabs2.samples = {
            id: kEvalWorkspaceTabId,
            scrollable: samples.length === 1,
            scrollRef: sampleTabScrollRef,
            label: (samples == null ? void 0 : samples.length) > 1 ? "Samples" : "Sample",
            content: () => {
              return m$1` <${SamplesTab}
            task_id=${task_id}
            selectedScore=${score2}
            sample=${selectedSample}
            sampleStatus=${sampleStatus}
            sampleError=${sampleError}
            showingSampleDialog=${showingSampleDialog}
            setShowingSampleDialog=${setShowingSampleDialog}
            samples=${samples}
            sampleMode=${sampleMode}
            groupBy=${groupBy}
            groupByOrder=${groupByOrder}
            selectedSampleIndex=${selectedSampleIndex}
            setSelectedSampleIndex=${setSelectedSampleIndex}
            sampleDescriptor=${samplesDescriptor}
            selectedSampleTab=${selectedSampleTab}
            setSelectedSampleTab=${setSelectedSampleTab}
            filter=${filter}
            sort=${sort}
            epoch=${epoch}
            sampleScrollPositionRef=${sampleScrollPositionRef}
            setSampleScrollPosition=${setSampleScrollPosition}
            sampleTabScrollRef=${sampleTabScrollRef}
          />`;
            },
            tools: () => {
              if (sampleMode === "single") {
                return "";
              }
              const sampleTools = [
                m$1`<${SampleTools}
              epoch=${epoch}
              epochs=${epochs}
              setEpoch=${setEpoch}
              filter=${filter}
              filterChanged=${setFilter}
              sort=${sort}
              setSort=${setSort}
              score=${score2}
              setScore=${setScore}
              scores=${scores}
              sampleDescriptor=${samplesDescriptor}
            />`
              ];
              if (evalStatus === "started") {
                sampleTools.push(
                  m$1`<${ToolButton}
                name=${m$1`Refresh`}
                icon="${ApplicationIcons.refresh}"
                onclick="${refreshLog}"
              />`
                );
              }
              return sampleTools;
            }
          };
        }
        resolvedTabs2.config = {
          id: kInfoWorkspaceTabId,
          label: "Info",
          scrollable: true,
          content: () => {
            var _a2;
            const infoCards = [];
            infoCards.push([
              m$1`<${PlanCard}
            evalSpec=${evalSpec}
            evalPlan=${evalPlan}
            scores=${evalResults == null ? void 0 : evalResults.scores}
          />`
            ]);
            if (evalStatus !== "started") {
              infoCards.push(m$1`<${UsageCard} stats=${evalStats} />`);
            }
            if (evalStatus === "error" && evalError) {
              infoCards.unshift(m$1`<${TaskErrorCard} evalError=${evalError} />`);
            }
            const warnings = [];
            if ((!samples || samples.length === 0) && ((_a2 = evalSpec == null ? void 0 : evalSpec.dataset) == null ? void 0 : _a2.samples) > 0 && evalStatus === "success") {
              warnings.push(
                m$1`<${MessageBand}
              message="Unable to display samples (this evaluation log may be too large)."
              hidden=${hidden}
              setHidden=${setHidden}
              type="warning"
            />`
              );
            }
            return m$1` <div style=${{ width: "100%" }}>
          ${warnings}
          <div style=${{ padding: "0.5em 1em 0 1em", width: "100%" }}>
            ${infoCards}
          </div>
        </div>`;
          }
        };
        resolvedTabs2.json = {
          id: kJsonWorkspaceTabId,
          label: "JSON",
          scrollable: true,
          content: () => {
            const evalHeader = {
              version: evalVersion,
              status: evalStatus,
              eval: evalSpec,
              plan: evalPlan,
              error: evalError,
              results: evalResults,
              stats: evalStats
            };
            const json = JSON.stringify(evalHeader, null, 2);
            return m$1`<${JsonTab}
          logFileName=${logFileName}
          json=${json}
          capabilities=${capabilities}
          selected=${selectedTab === kJsonWorkspaceTabId}
        />`;
          },
          tools: () => {
            return [
              m$1`<${ToolButton}
            name=${m$1`<span class="task-btn-copy-content">Copy JSON</span>`}
            icon="${ApplicationIcons.copy}"
            classes="task-btn-json-copy clipboard-button"
            data-clipboard-target="#task-json-contents"
            onclick="${copyFeedback}"
          />`
            ];
          }
        };
        const copyFeedback = (e2) => {
          const textEl = e2.currentTarget.querySelector(".task-btn-copy-content");
          const iconEl = e2.currentTarget.querySelector("i.bi");
          if (textEl) {
            const oldText = textEl.innerText;
            const oldIconClz = iconEl.className;
            textEl.innerText = "Copied!";
            iconEl.className = `${ApplicationIcons.confirm}`;
            setTimeout(() => {
              window.getSelection().removeAllRanges();
            }, 50);
            setTimeout(() => {
              textEl.innerText = oldText;
              iconEl.className = oldIconClz;
            }, 1250);
          }
        };
        return resolvedTabs2;
      }, [
        evalStatus,
        sampleMode,
        samples,
        task_id,
        score2,
        selectedSample,
        sampleStatus,
        sampleError,
        showingSampleDialog,
        setShowingSampleDialog,
        groupBy,
        groupByOrder,
        selectedSampleIndex,
        setSelectedSampleIndex,
        samplesDescriptor,
        selectedSampleTab,
        setSelectedSampleTab,
        filter,
        sort,
        epoch,
        sampleScrollPositionRef,
        setSampleScrollPosition,
        epochs,
        setEpoch,
        setFilter,
        setSort,
        setScore,
        scores,
        evalSpec,
        evalPlan,
        evalResults,
        evalStats,
        evalError,
        logFileName,
        capabilities,
        selectedTab,
        setHidden,
        hidden
      ]);
      return m$1`<${WorkspaceDisplay}
    logFileName=${logFileName}
    divRef=${divRef}
    evalSpec=${evalSpec}
    evalPlan=${evalPlan}
    evalResults=${evalResults}
    evalStats=${evalStats}
    samples=${samples}
    evalDescriptor=${samplesDescriptor.evalDescriptor}
    status=${evalStatus}
    tabs=${resolvedTabs}
    selectedTab=${selectedTab}
    showToggle=${showToggle}
    offcanvas=${offcanvas}
    setSelectedTab=${setSelectedTab}
    workspaceTabScrollPositionRef=${workspaceTabScrollPositionRef}
    setWorkspaceTabScrollPosition=${setWorkspaceTabScrollPosition}
  />`;
    };
    const WorkspaceDisplay = ({
      logFileName,
      evalSpec,
      evalPlan,
      evalResults,
      evalStats,
      samples,
      evalDescriptor,
      status,
      showToggle,
      selectedTab,
      tabs,
      setSelectedTab,
      divRef,
      offcanvas,
      workspaceTabScrollPositionRef,
      setWorkspaceTabScrollPosition
    }) => {
      if (evalSpec === void 0) {
        return m$1`<${EmptyPanel} />`;
      } else {
        const tabTools = Object.keys(tabs).map((key2) => {
          const tab = tabs[key2];
          return tab;
        }).filter((tab) => {
          return tab.id === selectedTab;
        }).map((tab) => {
          if (tab.tools) {
            const tools = tab.tools();
            return tools;
          } else {
            return "";
          }
        });
        const onScroll = q$1(
          debounce$1((id, position) => {
            setWorkspaceTabScrollPosition(id, position);
          }, 100),
          [setWorkspaceTabScrollPosition]
        );
        const onSelected = q$1(
          (e2) => {
            const id = e2.currentTarget.id;
            setSelectedTab(id);
          },
          [setSelectedTab]
        );
        const tabPanels = T$1(() => {
          return Object.keys(tabs).map((key2) => {
            const tab = tabs[key2];
            return m$1`<${TabPanel}
        id=${tab.id}
        title="${tab.label}"
        onSelected=${onSelected}
        selected=${selectedTab === tab.id}
        scrollable=${!!tab.scrollable}
        scrollRef=${tab.scrollRef}
        scrollPosition=${workspaceTabScrollPositionRef.current[tab.id]}
        setScrollPosition=${q$1(
              (position) => {
                onScroll(tab.id, position);
              },
              [onScroll]
            )}
        >
          ${tab.content()}
        </${TabPanel}>`;
          });
        }, [tabs]);
        return m$1`
    <${Navbar}
      evalSpec=${evalSpec}
      evalPlan=${evalPlan}
      evalResults=${evalResults}
      evalStats=${evalStats}
      samples=${samples}
      evalDescriptor=${evalDescriptor}
      status=${status}
      file=${logFileName}
      showToggle=${showToggle}

      offcanvas=${offcanvas}
    />
    <div ref=${divRef} class="workspace" style=${{
          paddingTop: "0rem",
          overflowY: "hidden"
        }}>
            <div
              class="log-detail"
              style=${{
          padding: "0",
          flex: 1,
          display: "flex",
          flexDirection: "column",
          overflowY: "hidden"
        }}
            >
            <${TabSet} id="log-details" tools="${tabTools}" type="pills" styles=${{
          tabSet: {
            fontSize: FontSize.smaller,
            flexWrap: "nowrap",
            padding: "0.5em 1em 0.5em 1em",
            borderBottom: "solid 1px var(--bs-border-color)",
            background: "var(--bs-light)"
          },
          tabBody: { flex: "1", overflowY: "hidden", display: "flex" },
          tabs: {
            padding: ".3rem 0.3rem .3rem 0.3rem",
            width: "5rem",
            fontSize: FontSize.smaller,
            textTransform: "uppercase",
            borderRadius: "var(--bs-border-radius)",
            fontWeight: 600
          }
        }} >
            ${tabPanels}
            </${TabSet}>
            </div>
          </div>`;
      }
    };
    const FindBand = ({ hideBand }) => {
      const searchBoxRef = A$1(
        /** @type {HTMLInputElement|null} */
        null
      );
      y(() => {
        searchBoxRef.current.focus();
      }, []);
      const searchTerm = () => {
        return searchBoxRef.current.value;
      };
      const search = (term, back) => {
        const parentExpandablePanel = (selection) => {
          let node = selection.anchorNode;
          let expandablePanelEl = void 0;
          while (node) {
            if (node.classList && node.classList.contains("expandable-panel")) {
              expandablePanelEl = node;
              break;
            }
            node = node.parentElement;
          }
          return expandablePanelEl;
        };
        const focusedElement = (
          /** @type {HTMLElement} */
          document.activeElement
        );
        const result = window.find(term, false, !!back, false, false, true, false);
        const noResultEl = window.document.getElementById(
          "inspect-find-no-results"
        );
        if (result) {
          noResultEl.style.opacity = "0";
          const selection = window.getSelection();
          if (selection.rangeCount > 0) {
            const parentPanel = parentExpandablePanel(selection);
            if (parentPanel) {
              parentPanel.style.display = "block";
              parentPanel.style["-webkit-line-clamp"] = "";
              parentPanel.style["-webkit-box-orient"] = "";
            }
            const range = selection.getRangeAt(0);
            setTimeout(() => {
              const element = range.startContainer.parentElement;
              element.scrollIntoView({
                behavior: "smooth",
                // Optional: adds a smooth scrolling animation
                block: "center"
                // Optional: scrolls so the element is centered in the view
              });
            }, 100);
          }
        } else {
          noResultEl.style.opacity = "1";
        }
        if (focusedElement) {
          focusedElement.focus();
        }
      };
      return m$1`<div
    style=${{
        position: "absolute",
        top: 0,
        right: 0,
        marginRight: "20%",
        zIndex: "1060",
        color: "var(--inspect-find-foreground)",
        backgroundColor: "var(--inspect-find-background)",
        fontSize: "0.9rem",
        display: "grid",
        gridTemplateColumns: "auto auto auto auto auto",
        columnGap: "0.2em",
        padding: "0.2rem",
        borderBottom: "solid 1px var(--bs-light-border-subtle)",
        borderLeft: "solid 1px var(--bs-light-border-subtle)",
        borderRight: "solid 1px var(--bs-light-border-subtle)",
        boxShadow: "var(--bs-box-shadow)"
      }}
  >
    <input
      type="text"
      ref=${searchBoxRef}
      style=${{
        height: "2em",
        fontSize: "0.9em",
        margin: "0.1rem",
        outline: "none",
        border: "solid 1px var(--inspect-input-border)",
        color: "var(--inspect-input-foreground)",
        background: "var(--inspect-input-background)"
      }}
      placeholder="Find"
      onkeydown=${(e2) => {
        if (e2.key === "Escape") {
          hideBand();
        } else if (e2.key === "Enter") {
          search(searchTerm());
        }
      }}
    />
    <span
      id="inspect-find-no-results"
      style=${{
        fontSize: FontSize.base,
        opacity: 0,
        marginTop: "auto",
        marginBottom: "auto",
        marginRight: "0.5em"
      }}
      >No results</span
    >
    <button
      title="Previous match"
      style=${{ padding: 0, fontSize: FontSize.larger }}
      class="btn"
      onclick=${() => {
        search(searchTerm(), true);
      }}
    >
      <i class=${ApplicationIcons.arrows.up}></i>
    </button>
    <button
      title="Next match"
      style=${{ padding: 0, fontSize: FontSize.larger }}
      class="btn"
      onclick=${() => {
        search(searchTerm());
      }}
    >
      <i class=${ApplicationIcons.arrows.down}></i>
    </button>
    <button
      title="Close"
      style=${{
        padding: 0,
        fontSize: FontSize["title-secondary"],
        marginTop: "-0.1rem",
        marginBottom: "-0.1rem"
      }}
      class="btn"
      onclick=${() => hideBand()}
    >
      <i class=${ApplicationIcons.close}></i>
    </button>
  </div>`;
    };
    const scoreLabelKey = (scoreLabel) => {
      if (!scoreLabel) {
        return "No score key";
      }
      return `${scoreLabel.scorer}.${scoreLabel.name}`;
    };
    const createEvalDescriptor = (scores, samples, epochs) => {
      if (!samples) {
        return void 0;
      }
      const scoreValue = (sample, scoreLabel) => {
        if (Object.keys(sample.scores).length === 0 || !scoreLabel) {
          return void 0;
        }
        if (scoreLabel.scorer !== scoreLabel.name && sample.scores[scoreLabel.scorer] && sample.scores[scoreLabel.scorer].value) {
          return sample.scores[scoreLabel.scorer].value[scoreLabel.name];
        } else if (sample.scores[scoreLabel.name]) {
          return sample.scores[scoreLabel.name].value;
        } else {
          return void 0;
        }
      };
      const scoreAnswer = (sample, scorer) => {
        if (sample) {
          const sampleScore = sample.scores[scorer];
          if (sampleScore && sampleScore.answer) {
            return sampleScore.answer;
          }
        } else {
          return void 0;
        }
      };
      const scoreExplanation = (sample, scorer) => {
        if (sample) {
          const sampleScore = sample.scores[scorer];
          if (sampleScore && sampleScore.explanation) {
            return sampleScore.explanation;
          }
        }
        return void 0;
      };
      const scoreMetadata = (sample, scorer) => {
        if (sample) {
          const sampleScore = sample.scores[scorer];
          if (sampleScore && sampleScore.metadata) {
            return sampleScore.metadata;
          }
        }
        return void 0;
      };
      const scoreDescriptorMap = /* @__PURE__ */ new Map();
      for (const scoreLabel of scores) {
        const uniqScoreValues = [
          ...new Set(
            samples.filter((sample) => !!sample.scores).filter((sample) => {
              if (!scoreLabel) {
                return true;
              }
              if (scoreLabel.scorer !== scoreLabel.name) {
                return Object.keys(sample.scores).includes(scoreLabel.scorer) && Object.keys(sample.scores[scoreLabel.scorer].value).includes(
                  scoreLabel.name
                );
              } else {
                return Object.keys(sample.scores).includes(scoreLabel.name);
              }
            }).map((sample) => {
              return scoreValue(sample, scoreLabel);
            }).filter((value) => {
              return value !== null;
            })
          )
        ];
        const uniqScoreTypes = [
          ...new Set(uniqScoreValues.map((scoreValue2) => typeof scoreValue2))
        ];
        for (const categorizer of scoreCategorizers) {
          const scoreDescriptor2 = categorizer.describe(
            uniqScoreValues,
            uniqScoreTypes
          );
          if (scoreDescriptor2) {
            scoreDescriptorMap.set(scoreLabelKey(scoreLabel), scoreDescriptor2);
            break;
          }
        }
      }
      const scoreDescriptor = (scoreLabel) => {
        return scoreDescriptorMap.get(scoreLabelKey(scoreLabel));
      };
      const scoreRendered = (sample, scoreLabel) => {
        const descriptor = scoreDescriptor(scoreLabel);
        const score3 = scoreValue(sample, scoreLabel);
        if (score3 === null || score3 === "undefined") {
          return "null";
        } else if (descriptor && descriptor.render) {
          return descriptor.render(score3);
        } else {
          return score3;
        }
      };
      const scorerDescriptor = (sample, scoreLabel) => {
        return {
          metadata: () => {
            return scoreMetadata(sample, scoreLabel.scorer);
          },
          explanation: () => {
            return scoreExplanation(sample, scoreLabel.scorer);
          },
          answer: () => {
            return scoreAnswer(sample, scoreLabel.scorer);
          },
          scores: () => {
            if (!sample || !sample.scores) {
              return [];
            }
            const myScoreDescriptor = scoreDescriptor(scoreLabel);
            if (!myScoreDescriptor) {
              return [];
            }
            const scoreNames = scores.map((score3) => {
              return score3.name;
            });
            const sampleScorer = sample.scores[scoreLabel.scorer];
            const scoreVal = sampleScorer.value;
            if (typeof scoreVal === "object") {
              const names = Object.keys(scoreVal);
              if (names.find((name2) => {
                return scoreNames.includes(name2);
              })) {
                const scores2 = names.map((name2) => {
                  return {
                    name: name2,
                    rendered: () => {
                      return myScoreDescriptor.render(scoreVal[name2]);
                    }
                  };
                });
                return scores2;
              } else {
                return [
                  {
                    name: scoreLabel.scorer,
                    rendered: () => {
                      return myScoreDescriptor.render(scoreVal);
                    }
                  }
                ];
              }
            } else {
              return [
                {
                  name: scoreLabel.scorer,
                  rendered: () => {
                    return myScoreDescriptor.render(scoreVal);
                  }
                }
              ];
            }
          }
        };
      };
      const score2 = (sample, scoreLabel) => {
        return {
          value: scoreValue(sample, scoreLabel),
          render: () => {
            return scoreRendered(sample, scoreLabel);
          }
        };
      };
      return {
        epochs,
        samples,
        scores,
        scorerDescriptor,
        scoreDescriptor,
        score: score2,
        scoreAnswer
      };
    };
    const createSamplesDescriptor = (evalDescriptor, selectedScore) => {
      if (!evalDescriptor) {
        return void 0;
      }
      const sizes = evalDescriptor.samples.reduce(
        (previous, current) => {
          var _a2;
          const text2 = inputString(current.input).join(" ");
          const scoreValue = evalDescriptor.score(current, selectedScore).value;
          const scoreText = scoreValue ? String(scoreValue) : current.error ? String(current.error) : "";
          previous[0] = Math.min(Math.max(previous[0], text2.length), 300);
          previous[1] = Math.min(
            Math.max(previous[1], arrayToString(current.target).length),
            300
          );
          previous[2] = Math.min(
            Math.max(
              previous[2],
              ((_a2 = evalDescriptor.scoreAnswer(current, selectedScore == null ? void 0 : selectedScore.name)) == null ? void 0 : _a2.length) || 0
            ),
            300
          );
          previous[3] = Math.min(
            Math.max(previous[3], current.limit ? current.limit.length : 0),
            50
          );
          previous[4] = Math.min(
            Math.max(previous[4], String(current.id).length),
            10
          );
          previous[5] = Math.min(Math.max(previous[5], scoreText.length), 30);
          return previous;
        },
        [0, 0, 0, 0, 0, 0]
      );
      const maxSizes = {
        input: Math.min(sizes[0], 300),
        target: Math.min(sizes[1], 300),
        answer: Math.min(sizes[2], 300),
        limit: Math.min(sizes[3], 50),
        id: Math.min(sizes[4], 10),
        score: Math.min(sizes[4], 30)
      };
      const base2 = maxSizes.input + maxSizes.target + maxSizes.answer + maxSizes.limit + maxSizes.id + maxSizes.score || 1;
      const messageShape = {
        raw: {
          input: sizes[0],
          target: sizes[1],
          answer: sizes[2],
          limit: sizes[3],
          id: sizes[4],
          score: sizes[5]
        },
        normalized: {
          input: maxSizes.input / base2,
          target: maxSizes.target / base2,
          answer: maxSizes.answer / base2,
          limit: maxSizes.limit / base2,
          id: maxSizes.id / base2,
          score: maxSizes.score / base2
        }
      };
      return {
        evalDescriptor,
        messageShape,
        selectedScoreDescriptor: evalDescriptor.scoreDescriptor(selectedScore),
        selectedScore: (sample) => evalDescriptor.score(sample, selectedScore),
        selectedScorerDescriptor: (sample) => evalDescriptor.scorerDescriptor(sample, selectedScore)
      };
    };
    const scoreCategorizers = [
      {
        /**
         * @param {import("../types/log").Value2[]} values - the currently selected score
         * @param {("string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function")[]} [types] - the scorer name
         * @returns {ScoreDescriptor} a ScoreDescriptor
         */
        describe: (values, types2) => {
          if (types2.length === 1 && types2[0] === "boolean") {
            return booleanScoreCategorizer();
          }
        }
      },
      {
        /**
         * @param {import("../types/log").Value2[]} values - the currently selected score
         * @returns {ScoreDescriptor} a ScoreDescriptor
         */
        describe: (values) => {
          if (values.length === 2 && values.every((val) => {
            return val === 1 || val === 0;
          })) {
            return booleanScoreCategorizer();
          }
        }
      },
      {
        /**
         * @param {import("../types/log").Value2[]} values - the currently selected score
         * @param {("string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function")[]} [types] - the scorer name
         * @returns {ScoreDescriptor} a ScoreDescriptor
         */
        describe: (values, types2) => {
          if (types2[0] === "string" && types2.length === 1 && values.length < 5 && !values.find((val) => {
            return val !== "I" && val !== "C" && val !== "P" && val !== "N";
          })) {
            return passFailScoreCategorizer(values);
          }
        }
      },
      {
        /**
         * @param {import("../types/log").Value2[]} values - the currently selected score
         * @param {("string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function")[]} [types] - the scorer name
         * @returns {ScoreDescriptor} a ScoreDescriptor
         */
        describe: (values, types2) => {
          if (values.length < 10 && types2.length === 1 && types2[0] === "string") {
            return {
              scoreType: kScoreTypeCategorical,
              categories: values,
              compare: (a2, b) => {
                return String(a2).localeCompare(String(b));
              },
              render: (score2) => {
                return score2;
              }
            };
          }
        }
      },
      {
        /**
         * @param {import("../types/log").Value2[]} values - the currently selected score
         * @param {("string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function")[]} [types] - the scorer name
         * @returns {ScoreDescriptor} a ScoreDescriptor
         */
        describe: (values, types2) => {
          if (types2.length !== 0 && types2[0] === "number") {
            const onlyNumeric = values.filter((val) => {
              return typeof val === "number";
            });
            return {
              scoreType: kScoreTypeNumeric,
              min: Math.min(...onlyNumeric),
              max: Math.max(...onlyNumeric),
              compare: (a2, b) => {
                if (typeof a2 === "number" && typeof b === "number") {
                  return a2 - b;
                } else {
                  console.warn(
                    "Comparing non-numerics using a nuermic score descriptor"
                  );
                  return 0;
                }
              },
              render: (score2) => {
                return formatDecimalNoTrailingZeroes(Number(score2));
              }
            };
          }
        }
      },
      {
        /**
         * @param {import("../types/log").Value2[]} values - the currently selected score
         * @param {("string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function")[]} [types] - the scorer name
         * @returns {ScoreDescriptor} a ScoreDescriptor
         */
        describe: (values, types2) => {
          if (types2.length !== 0 && types2[0] === "object") {
            const buckets = values.map((val) => {
              return JSON.stringify(val);
            });
            const vals = new Set(buckets);
            let categories = void 0;
            if (vals.size < 10) {
              categories = Array.from(vals).map((val) => {
                return {
                  val,
                  text: val
                };
              });
            }
            return {
              scoreType: kScoreTypeObject,
              categories,
              compare: () => {
                return 0;
              },
              render: (score2) => {
                if (score2 === null || score2 === void 0) {
                  return "[null]";
                }
                const scores = [];
                const keys = Object.keys(score2);
                keys.forEach((key2, index) => {
                  const value = score2[key2];
                  const formattedValue = isNumeric(value) ? formatPrettyDecimal(parseFloat(value)) : value;
                  const style2 = {
                    display: "flex",
                    flexDirection: "column",
                    alignItems: "center",
                    marginLeft: "0.5rem"
                  };
                  if (index + 1 < keys.length) {
                    style2["paddingBottom"] = "1em";
                  }
                  scores.push(m$1`
                <div style=${style2}>
                  <div style=${{ fontSize: FontSize.smaller, fontWeight: 300 }}>
                    ${key2}
                  </div>
                  <div style=${{ fontSize: FontSize.title, fontWeight: 600 }}>
                    ${formattedValue}
                  </div>
                </div>
              `);
                });
                return scores;
              }
            };
          }
        }
      },
      {
        /**
         * @returns {ScoreDescriptor} a ScoreDescriptor
         */
        // @ts-ignore
        describe: () => {
          return {
            scoreType: kScoreTypeOther,
            compare: () => {
              return 0;
            },
            render: (score2) => {
              return m$1`<${RenderedContent}
            id="other-score-value"
            entry=${{ value: score2 }}
          />`;
            }
          };
        }
      }
    ];
    const filledCircleStyle = {
      fontSize: FontSize.small,
      fontFamily: "Consola Regular",
      width: "20px",
      height: "20px",
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center",
      borderRadius: "50%",
      paddingTop: "1px"
    };
    const booleanScoreCategorizer = () => {
      return {
        scoreType: "boolean",
        compare: (a2, b) => {
          return Number(a2.value) - Number(b.value);
        },
        render: (score2) => {
          const scoreColorStyle = score2 ? ApplicationStyles.scoreFills.green : ApplicationStyles.scoreFills.red;
          return m$1`<span
        style=${{
            ...scoreColorStyle,
            ...filledCircleStyle
          }}
        >${score2}</span
      >`;
        }
      };
    };
    const passFailScoreCategorizer = (values) => {
      const categories = [];
      if (values.includes("C")) {
        categories.push({
          val: "C",
          text: "Correct"
        });
      }
      if (values.includes("P")) {
        categories.push({
          val: "P",
          text: "Partial"
        });
      }
      if (values.includes("I")) {
        categories.push({
          val: "I",
          text: "Incorrect"
        });
      }
      if (values.includes("N")) {
        categories.push({
          val: "N",
          text: "Refusal"
        });
      }
      const order2 = ["C", "P", "I", "N"];
      return {
        scoreType: kScoreTypePassFail,
        categories,
        render: (score2) => {
          if (score2 === "C") {
            return m$1`<span
          style=${{
              ...ApplicationStyles.scoreFills.green,
              ...filledCircleStyle
            }}
          >C</span
        >`;
          } else if (score2 === "I") {
            return m$1`<span
          style=${{
              ...ApplicationStyles.scoreFills.red,
              ...filledCircleStyle
            }}
          >I</span
        >`;
          } else if (score2 === "P") {
            return m$1`<span
          style=${{
              ...ApplicationStyles.scoreFills.orange,
              ...filledCircleStyle
            }}
          >P</span
        >`;
          } else if (score2 === "N") {
            return m$1`<span
          style=${{
              ...ApplicationStyles.scoreFills.red,
              ...filledCircleStyle
            }}
          >N</span
        >`;
          } else {
            return score2;
          }
        },
        compare: (a2, b) => {
          const sort = order2.indexOf(a2.value) - order2.indexOf(b.value);
          return sort;
        }
      };
    };
    const resolveAttachments = (value, attachments) => {
      const kContentProtocol = "tc://";
      const kAttachmentProtocol = "attachment://";
      if (Array.isArray(value)) {
        return value.map((v2) => resolveAttachments(v2, attachments));
      } else if (value && typeof value === "object") {
        const resolvedObject = {};
        for (const key2 of Object.keys(value)) {
          resolvedObject[key2] = resolveAttachments(value[key2], attachments);
        }
        return resolvedObject;
      } else if (typeof value === "string") {
        if (value.startsWith(kContentProtocol)) {
          value = value.replace(kContentProtocol, kAttachmentProtocol);
        }
        if (value.startsWith(kAttachmentProtocol)) {
          return attachments[value.replace(kAttachmentProtocol, "")];
        }
      }
      return value;
    };
    function App({
      api: api2,
      initialState: initialState2 = void 0,
      saveInitialState = void 0,
      pollForLogs = true
    }) {
      var _a2, _b2, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m;
      const [logs, setLogs] = h(
        (initialState2 == null ? void 0 : initialState2.logs) || { log_dir: "", files: [] }
      );
      const [selectedLogIndex, setSelectedLogIndex] = h(
        (initialState2 == null ? void 0 : initialState2.selectedLogIndex) !== void 0 ? initialState2.selectedLogIndex : -1
      );
      const [logHeaders, setLogHeaders] = h((initialState2 == null ? void 0 : initialState2.logHeaders) || {});
      const [headersLoading, setHeadersLoading] = h(
        (initialState2 == null ? void 0 : initialState2.headersLoading) || false
      );
      const [selectedLog, setSelectedLog] = h(
        (initialState2 == null ? void 0 : initialState2.selectedLog) || {
          contents: void 0,
          name: void 0
        }
      );
      const [selectedWorkspaceTab, setSelectedWorkspaceTab] = h(
        (initialState2 == null ? void 0 : initialState2.selectedWorkspaceTab) || kEvalWorkspaceTabId
      );
      const [selectedSampleIndex, setSelectedSampleIndex] = h(
        (initialState2 == null ? void 0 : initialState2.selectedSampleIndex) !== void 0 ? initialState2.selectedSampleIndex : -1
      );
      const [selectedSample, setSelectedSample] = h(
        initialState2 == null ? void 0 : initialState2.selectedSample
      );
      const [sampleStatus, setSampleStatus] = h(initialState2 == null ? void 0 : initialState2.sampleStatus);
      const [sampleError, setSampleError] = h(initialState2 == null ? void 0 : initialState2.sampleError);
      const [selectedSampleTab, setSelectedSampleTab] = h(
        initialState2 == null ? void 0 : initialState2.selectedSampleTab
      );
      const sampleScrollPosition = A$1((initialState2 == null ? void 0 : initialState2.sampleScrollPosition) || 0);
      const loadingSampleIndexRef = A$1(null);
      const workspaceTabScrollPosition = A$1(
        (initialState2 == null ? void 0 : initialState2.workspaceTabScrollPosition) || {}
      );
      const [showingSampleDialog, setShowingSampleDialog] = h(
        initialState2 == null ? void 0 : initialState2.showingSampleDialog
      );
      const [status, setStatus] = h(
        (initialState2 == null ? void 0 : initialState2.status) || {
          loading: true,
          error: void 0
        }
      );
      const [capabilities, setCapabilities] = h(
        (initialState2 == null ? void 0 : initialState2.capabilities) || {
          downloadFiles: true,
          webWorkers: true
        }
      );
      const [offcanvas, setOffcanvas] = h((initialState2 == null ? void 0 : initialState2.offcanvas) || false);
      const [showFind, setShowFind] = h((initialState2 == null ? void 0 : initialState2.showFind) || false);
      const [filter, setFilter] = h((initialState2 == null ? void 0 : initialState2.filter) || {});
      const [epoch, setEpoch] = h((initialState2 == null ? void 0 : initialState2.epoch) || "all");
      const [sort, setSort] = h((initialState2 == null ? void 0 : initialState2.sort) || kDefaultSort);
      const [scores, setScores] = h((initialState2 == null ? void 0 : initialState2.scores) || []);
      const [score2, setScore] = h(initialState2 == null ? void 0 : initialState2.score);
      const [filteredSamples, setFilteredSamples] = h(
        (initialState2 == null ? void 0 : initialState2.filteredSamples) || []
      );
      const [groupBy, setGroupBy] = h((initialState2 == null ? void 0 : initialState2.groupBy) || "none");
      const [groupByOrder, setGroupByOrder] = h(
        (initialState2 == null ? void 0 : initialState2.groupByOrder) || "asc"
      );
      const afterBodyElements = [];
      const saveState = q$1(() => {
        const state = {
          logs,
          selectedLogIndex,
          logHeaders,
          headersLoading,
          selectedLog,
          selectedSampleIndex,
          selectedWorkspaceTab,
          selectedSample,
          sampleStatus,
          sampleError,
          selectedSampleTab,
          showingSampleDialog,
          status,
          capabilities,
          offcanvas,
          showFind,
          filter,
          epoch,
          sort,
          scores,
          score: score2,
          filteredSamples,
          groupBy,
          groupByOrder,
          sampleScrollPosition: sampleScrollPosition.current,
          workspaceTabScrollPosition: workspaceTabScrollPosition.current
        };
        if (saveInitialState) {
          saveInitialState(state);
        }
      }, [
        logs,
        selectedLogIndex,
        logHeaders,
        headersLoading,
        selectedLog,
        selectedSampleIndex,
        selectedWorkspaceTab,
        selectedSample,
        sampleStatus,
        sampleError,
        selectedSampleTab,
        showingSampleDialog,
        status,
        capabilities,
        offcanvas,
        showFind,
        filter,
        epoch,
        sort,
        scores,
        score2,
        filteredSamples,
        groupBy,
        groupByOrder
      ]);
      const saveStateRef = A$1(saveState);
      y(() => {
        saveStateRef.current = saveState;
      }, [saveState]);
      const setSampleScrollPosition = q$1(
        debounce$1((position) => {
          sampleScrollPosition.current = position;
          saveStateRef.current();
        }, 1e3),
        []
      );
      const setWorkspaceTabScrollPosition = q$1(
        debounce$1((tab, position) => {
          if (workspaceTabScrollPosition.current[tab] !== position) {
            workspaceTabScrollPosition.current = {
              ...workspaceTabScrollPosition.current,
              [tab]: position
            };
            saveStateRef.current();
          }
        }, 1e3),
        []
      );
      y(() => {
        saveStateRef.current();
      }, [
        logs,
        selectedLogIndex,
        logHeaders,
        headersLoading,
        selectedLog,
        selectedSampleIndex,
        selectedWorkspaceTab,
        selectedSample,
        sampleStatus,
        sampleError,
        selectedSampleTab,
        showingSampleDialog,
        status,
        capabilities,
        offcanvas,
        showFind,
        filter,
        epoch,
        sort,
        scores,
        score2,
        filteredSamples,
        groupBy,
        groupByOrder
      ]);
      const handleSampleShowingDialog = q$1(
        (show) => {
          setShowingSampleDialog(show);
          if (!show) {
            setSelectedSample(void 0);
            setSelectedSampleTab(void 0);
          }
        },
        [
          setShowingSampleDialog,
          setSelectedSample,
          setSelectedSampleTab,
          selectedSample
        ]
      );
      y(() => {
        var _a3, _b3;
        const samples = ((_a3 = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _a3.sampleSummaries) || [];
        const { result: prefiltered } = filterSamples(
          evalDescriptor,
          samples,
          filter == null ? void 0 : filter.value
        );
        const filtered = prefiltered.filter((sample) => {
          if (epoch && epoch !== "all") {
            if (epoch !== sample.epoch + "") {
              return false;
            }
          }
          return true;
        });
        const { sorted, order: order2 } = sortSamples(sort, filtered, samplesDescriptor);
        let grouping = "none";
        if (((_b3 = samplesDescriptor == null ? void 0 : samplesDescriptor.evalDescriptor) == null ? void 0 : _b3.epochs) > 1) {
          if (byEpoch(sort) || epoch !== "all") {
            grouping = "epoch";
          } else if (bySample(sort)) {
            grouping = "sample";
          }
        }
        setFilteredSamples(sorted);
        setGroupBy(grouping);
        setGroupByOrder(order2);
      }, [selectedLog, filter, sort, epoch]);
      const evalDescriptor = T$1(() => {
        var _a3, _b3, _c2, _d2;
        return createEvalDescriptor(
          scores,
          (_a3 = selectedLog.contents) == null ? void 0 : _a3.sampleSummaries,
          ((_d2 = (_c2 = (_b3 = selectedLog.contents) == null ? void 0 : _b3.eval) == null ? void 0 : _c2.config) == null ? void 0 : _d2.epochs) || 1
        );
      }, [selectedLog, scores]);
      const samplesDescriptor = T$1(() => {
        return createSamplesDescriptor(evalDescriptor, score2);
      }, [evalDescriptor, score2]);
      const refreshSampleTab = q$1(
        (sample) => {
          if (selectedSampleTab === void 0) {
            const defaultTab = sample.events && sample.events.length > 0 ? kSampleTranscriptTabId : kSampleMessagesTabId;
            setSelectedSampleTab(defaultTab);
          }
        },
        [selectedSampleTab, showingSampleDialog]
      );
      const mainAppRef = A$1();
      y(() => {
        if (!selectedLog || selectedSampleIndex === -1) {
          setSelectedSample(void 0);
          return;
        }
        if (loadingSampleIndexRef.current === selectedSampleIndex) {
          return;
        }
        if (!showingSampleDialog && selectedLog.contents.sampleSummaries.length > 1) {
          return;
        }
        if (selectedSampleIndex < filteredSamples.length) {
          const summary = filteredSamples[selectedSampleIndex];
          if (selectedSample && selectedSample.id === summary.id && selectedSample.epoch === summary.epoch) {
            return;
          }
          loadingSampleIndexRef.current = selectedSampleIndex;
          setSampleStatus("loading");
          setSampleError(void 0);
          api2.get_log_sample(selectedLog.name, summary.id, summary.epoch).then((sample) => {
            if (sample.transcript) {
              sample.events = sample.transcript.events;
              sample.attachments = sample.transcript.content;
            }
            sample.attachments = sample.attachments || {};
            sample.input = resolveAttachments(sample.input, sample.attachments);
            sample.messages = resolveAttachments(
              sample.messages,
              sample.attachments
            );
            sample.events = resolveAttachments(sample.events, sample.attachments);
            sample.attachments = {};
            sampleScrollPosition.current = 0;
            setSelectedSample(sample);
            refreshSampleTab(sample);
            setSampleStatus("ok");
            loadingSampleIndexRef.current = null;
          }).catch((e2) => {
            setSampleStatus("error");
            setSampleError(e2);
            sampleScrollPosition.current = 0;
            setSelectedSample(void 0);
            loadingSampleIndexRef.current = null;
          });
        }
      }, [
        selectedSample,
        selectedSampleIndex,
        showingSampleDialog,
        selectedLog,
        filteredSamples,
        setSelectedSample,
        setSampleStatus,
        setSampleError
      ]);
      y(() => {
        const loadHeaders = async () => {
          setHeadersLoading(true);
          const chunkSize = 8;
          const fileLists = [];
          for (let i2 = 0; i2 < logs.files.length; i2 += chunkSize) {
            let chunk = logs.files.slice(i2, i2 + chunkSize).map((log) => log.name);
            fileLists.push(chunk);
          }
          try {
            for (const fileList of fileLists) {
              const headers = await api2.get_log_headers(fileList);
              setLogHeaders((prev) => {
                const updatedHeaders = {};
                headers.forEach((header, index) => {
                  const logFile = fileList[index];
                  updatedHeaders[logFile] = header;
                });
                return { ...prev, ...updatedHeaders };
              });
              if (headers.length === chunkSize) {
                await sleep$1(5e3);
              }
            }
          } catch (e2) {
            if (e2.message === "Load failed" || e2.message === "Failed to fetch") {
              setStatus({ loading: false });
            } else {
              console.log(e2);
              setStatus({ loading: false, error: e2 });
            }
          }
          setHeadersLoading(false);
        };
        loadHeaders();
      }, [logs, setStatus, setLogHeaders, setHeadersLoading]);
      const resetWorkspace = q$1(
        /**
         * @param {import("./api/Types.ts").EvalSummary} log
         */
        (log) => {
          const hasSamples = !!log.sampleSummaries && log.sampleSummaries.length > 0;
          const showSamples = hasSamples;
          setSelectedWorkspaceTab(
            log.status !== "error" && hasSamples ? kEvalWorkspaceTabId : kInfoWorkspaceTabId
          );
          const scorer = defaultScorer(log);
          const scorers = defaultScorers(log);
          setScores(scorers);
          setScore(scorer);
          setEpoch("all");
          setFilter({});
          setSort(kDefaultSort);
          setSelectedSampleTab(void 0);
          setSelectedSample(void 0);
          if (showSamples) {
            setSelectedSampleIndex(0);
          } else {
            setSelectedSampleIndex(-1);
          }
          workspaceTabScrollPosition.current = {};
        },
        [setSelectedWorkspaceTab]
      );
      y(() => {
        const loadSpecificLog = async () => {
          const targetLog = logs.files[selectedLogIndex];
          if (targetLog && (!selectedLog || selectedLog.name !== targetLog.name)) {
            try {
              setStatus({ loading: true, error: void 0 });
              const logContents = await loadLog(targetLog.name);
              if (logContents) {
                const log = logContents;
                setSelectedLog({
                  contents: log,
                  name: targetLog.name
                });
                resetWorkspace(log);
                setStatus({ loading: false, error: void 0 });
              }
            } catch (e2) {
              console.log(e2);
              setStatus({ loading: false, error: e2 });
            }
          } else if (logs.log_dir && logs.files.length === 0) {
            setStatus({
              loading: false,
              error: new Error(
                `No log files to display in the directory ${logs.log_dir}. Are you sure this is the correct log directory?`
              )
            });
          }
        };
        loadSpecificLog();
      }, [
        selectedLogIndex,
        logs,
        capabilities,
        selectedLog,
        setSelectedLog,
        setStatus
      ]);
      const loadLogs = async () => {
        try {
          const result = await api2.get_log_paths();
          return result;
        } catch (e2) {
          console.log(e2);
          setStatus({ loading: false, error: e2 });
        }
      };
      const loadLog = async (logFileName) => {
        try {
          const logContents = await api2.get_log_summary(logFileName);
          return logContents;
        } catch (e2) {
          console.log(e2);
          setStatus({ loading: false, error: e2 });
        }
      };
      const refreshLog = q$1(async () => {
        try {
          setStatus({ loading: true, error: void 0 });
          const targetLog = logs.files[selectedLogIndex];
          const logContents = await loadLog(targetLog.name);
          if (logContents) {
            const log = logContents;
            if (log.status !== "started") {
              setLogHeaders((prev) => {
                const updatedState = { ...prev };
                const freshHeaders = {
                  eval: log.eval,
                  plan: log.plan,
                  results: log.results,
                  stats: log.stats,
                  status: log.status,
                  version: log.version
                };
                updatedState[targetLog.name] = freshHeaders;
                return updatedState;
              });
            }
            setSelectedLog({
              contents: log,
              name: targetLog.name
            });
            resetWorkspace(log);
            setStatus({ loading: false, error: void 0 });
          }
        } catch (e2) {
          console.log(e2);
          setStatus({ loading: false, error: e2 });
        }
      }, [logs, selectedLogIndex, setStatus, setSelectedLog, setLogHeaders]);
      const showLogFile = q$1(
        async (logUrl) => {
          const index = logs.files.findIndex((val) => {
            return logUrl.endsWith(val.name);
          });
          if (index > -1) {
            setSelectedLogIndex(index);
          } else {
            const result = await loadLogs();
            const idx = result.files.findIndex((file) => {
              return logUrl.endsWith(file.name);
            });
            setLogs(result);
            setSelectedLogIndex(idx > -1 ? idx : 0);
          }
        },
        [logs, setSelectedLogIndex, setLogs]
      );
      const refreshLogList = q$1(async () => {
        const currentLog = logs.files[selectedLogIndex > -1 ? selectedLogIndex : 0];
        const refreshedLogs = await loadLogs();
        const newIndex = refreshedLogs.files.findIndex((file) => {
          return currentLog.name.endsWith(file.name);
        });
        setLogs(refreshedLogs);
        setSelectedLogIndex(newIndex);
      }, [logs, selectedLogIndex, setSelectedLogIndex, setLogs]);
      const onMessage = T$1(() => {
        return async (e2) => {
          const type = e2.data.type || e2.data.message;
          switch (type) {
            case "updateState": {
              if (e2.data.url) {
                const decodedUrl = decodeURIComponent(e2.data.url);
                showLogFile(decodedUrl);
              }
              break;
            }
            case "backgroundUpdate": {
              const decodedUrl = decodeURIComponent(e2.data.url);
              const log_dir = e2.data.log_dir;
              const isFocused = document.hasFocus();
              if (!isFocused) {
                if (log_dir === logs.log_dir) {
                  showLogFile(decodedUrl);
                } else {
                  api2.open_log_file(e2.data.url, e2.data.log_dir);
                }
              } else {
                refreshLogList();
              }
              break;
            }
          }
        };
      }, [logs, showLogFile, refreshLogList]);
      y(() => {
        window.addEventListener("message", onMessage);
        return () => {
          window.removeEventListener("message", onMessage);
        };
      }, [onMessage]);
      y(() => {
        const loadLogsAndState = async () => {
          const urlParams = new URLSearchParams(window.location.search);
          const extensionVersionEl = document.querySelector(
            'meta[name="inspect-extension:version"]'
          );
          const extensionVersion = extensionVersionEl ? extensionVersionEl.getAttribute("content") : void 0;
          if (isVscode()) {
            if (!extensionVersion) {
              setCapabilities({ downloadFiles: false, webWorkers: false });
            }
          }
          setOffcanvas(true);
          const logPath = urlParams.get("task_file");
          const resolvedLogPath = logPath ? logPath.replace(" ", "+") : logPath;
          const load = resolvedLogPath ? async () => {
            return {
              log_dir: "",
              files: [{ name: resolvedLogPath }]
            };
          } : loadLogs;
          const embeddedState = document.getElementById("logview-state");
          if (embeddedState) {
            const state = JSON.parse(embeddedState.textContent);
            onMessage({ data: state });
          } else {
            const result = await load();
            setLogs(result);
            const log_file = urlParams.get("log_file");
            if (log_file) {
              const index = result.files.findIndex((val) => {
                return log_file.endsWith(val.name);
              });
              if (index > -1) {
                setSelectedLogIndex(index);
              }
            } else if (selectedLogIndex === -1) {
              setSelectedLogIndex(0);
            }
          }
          new ClipboardJS(".clipboard-button,.copy-button");
          if (pollForLogs) {
            let retryDelay = 1e3;
            const maxRetryDelay = 6e4;
            const pollEvents = async () => {
              try {
                const events = await api2.client_events();
                if (events.includes("reload")) {
                  window.location.reload();
                }
                if (events.includes("refresh-evals")) {
                  const logs2 = await load();
                  setLogs(logs2);
                  setSelectedLogIndex(0);
                }
                retryDelay = 1e3;
              } catch (error2) {
                console.error("Error fetching client events:", error2);
                retryDelay = Math.min(retryDelay * 2, maxRetryDelay);
              } finally {
                setTimeout(pollEvents, retryDelay);
              }
            };
            pollEvents();
          }
        };
        loadLogsAndState();
      }, []);
      const fullScreen = logs.files.length === 1 && !logs.log_dir;
      const sidebar = !fullScreen && selectedLog.contents ? m$1`
          <${Sidebar}
            logs=${logs}
            logHeaders=${logHeaders}
            loading=${headersLoading}
            offcanvas=${offcanvas}
            selectedIndex=${selectedLogIndex}
            onSelectedIndexChanged=${(index) => {
        setSelectedLogIndex(index);
        var myOffcanvas = document.getElementById("sidebarOffCanvas");
        var bsOffcanvas = Offcanvas.getInstance(myOffcanvas);
        if (bsOffcanvas) {
          bsOffcanvas.hide();
        }
      }}
          />
        ` : "";
      const fullScreenClz = fullScreen ? " full-screen" : "";
      const offcanvasClz = offcanvas ? " off-canvas" : "";
      const hideFind = q$1(() => {
        clearDocumentSelection();
        if (showFind) {
          setShowFind(false);
        }
      }, [showFind, setShowFind]);
      const showToggle = logs.files.length > 1 || logs.log_dir;
      const sampleMode = ((_a2 = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _a2.sampleSummaries) === void 0 || selectedLog.contents.sampleSummaries.length === 0 ? "none" : selectedLog.contents.sampleSummaries.length === 1 ? "single" : "many";
      return m$1`
    <${AppErrorBoundary}>
    ${sidebar}
    <div ref=${mainAppRef} class="app-main-grid${fullScreenClz}${offcanvasClz}" tabIndex="0" onKeyDown=${(e2) => {
        if (!getVscodeApi()) {
          return;
        }
        if ((e2.ctrlKey || e2.metaKey) && e2.key === "f") {
          setShowFind(true);
        } else if (e2.key === "Escape") {
          hideFind();
        }
      }}>
      ${showFind ? m$1`<${FindBand} hideBand=${hideFind} />` : ""}
      <${ProgressBar} animating=${status.loading}  containerStyle=${{
        background: "var(--bs-light)",
        marginBottom: "-1px"
      }}/>
      ${status.error ? m$1`<${ErrorPanel}
              title="An error occurred while loading this task."
              error=${status.error}
            />` : m$1`<${WorkSpace}
              task_id=${(_c = (_b2 = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _b2.eval) == null ? void 0 : _c.task_id}
              logFileName=${selectedLog == null ? void 0 : selectedLog.name}
              evalStatus=${(_d = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _d.status}
              evalError=${(_e = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _e.error}
              evalVersion=${(_f = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _f.version}
              evalSpec=${(_g = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _g.eval}
              evalPlan=${(_h = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _h.plan}
              evalStats=${(_i = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _i.stats}
              evalResults=${(_j = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _j.results}
              showToggle=${showToggle}
              samples=${filteredSamples}
              sampleMode=${sampleMode}
              groupBy=${groupBy}
              groupByOrder=${groupByOrder}
              sampleStatus=${sampleStatus}
              sampleError=${sampleError}
              samplesDescriptor=${samplesDescriptor}
              refreshLog=${refreshLog}
              offcanvas=${offcanvas}
              capabilities=${capabilities}
              selected=${selectedLogIndex}
              selectedSample=${selectedSample}
              selectedSampleIndex=${selectedSampleIndex}
              setSelectedSampleIndex=${setSelectedSampleIndex}
              showingSampleDialog=${showingSampleDialog}
              setShowingSampleDialog=${handleSampleShowingDialog}
              selectedTab=${selectedWorkspaceTab}
              setSelectedTab=${setSelectedWorkspaceTab}
              selectedSampleTab=${selectedSampleTab}
              setSelectedSampleTab=${setSelectedSampleTab}
              sort=${sort}
              setSort=${setSort}
              epochs=${(_m = (_l = (_k = selectedLog == null ? void 0 : selectedLog.contents) == null ? void 0 : _k.eval) == null ? void 0 : _l.config) == null ? void 0 : _m.epochs}
              epoch=${epoch}
              setEpoch=${setEpoch}
              filter=${filter}
              setFilter=${setFilter}
              score=${score2}
              setScore=${setScore}
              scores=${scores}
              sampleScrollPositionRef=${sampleScrollPosition}
              setSampleScrollPosition=${setSampleScrollPosition}
              workspaceTabScrollPositionRef=${workspaceTabScrollPosition}
              setWorkspaceTabScrollPosition=${setWorkspaceTabScrollPosition}
            />`}
    </div>
    ${afterBodyElements}
    </${AppErrorBoundary}>
  `;
    }
    const defaultScorer = (log) => {
      var _a2, _b2, _c;
      const scorer = ((_a2 = log.results) == null ? void 0 : _a2.scores[0]) ? {
        name: (_b2 = log.results) == null ? void 0 : _b2.scores[0].name,
        scorer: (_c = log.results) == null ? void 0 : _c.scores[0].scorer
      } : log.sampleSummaries.length > 0 ? {
        name: Object.keys(log.sampleSummaries[0].scores)[0],
        scorer: Object.keys(log.sampleSummaries[0].scores)[0]
      } : void 0;
      return scorer;
    };
    const defaultScorers = (log) => {
      var _a2, _b2;
      if ((_a2 = log.results) == null ? void 0 : _a2.scores) {
        return (((_b2 = log.results) == null ? void 0 : _b2.scores) || []).map((score2) => {
          return {
            name: score2.name,
            scorer: score2.scorer
          };
        }).reduce((accum, scorer) => {
          if (!accum.find((sc) => {
            return scorer.scorer === sc.scorer && scorer.name === sc.name;
          })) {
            accum.push(scorer);
          }
          return accum;
        }, []);
      } else if (log.sampleSummaries && log.sampleSummaries.length > 0) {
        return Object.keys(log.sampleSummaries[0].scores).map((key2) => {
          return {
            name: key2,
            scorer: key2
          };
        });
      } else {
        return [];
      }
    };
    const vscode = getVscodeApi();
    let initialState = void 0;
    if (vscode) {
      initialState = filterState(vscode.getState());
    }
    D$1(m$1`<${App}
    api=${api}
    initialState=${initialState}
    saveInitialState=${throttle$1((state) => {
      const vscode2 = getVscodeApi();
      if (vscode2) {
        vscode2.setState(filterState(state));
      }
    }, 1e3)}
  />`, document.getElementById("app"));
    function filterState(state) {
      if (!state) {
        return state;
      }
      const filters = [filterLargeSample, filterLargeSelectedLog];
      return filters.reduce((filteredState, filter) => filter(filteredState), state);
    }
    function filterLargeSample(state) {
      if (!state || !state.selectedSample) {
        return state;
      }
      const estimatedTotalSize = estimateSize(state.selectedSample.messages);
      if (estimatedTotalSize > 4e5) {
        const {
          selectedSample,
          ...filteredState
        } = state;
        return filteredState;
      } else {
        return state;
      }
    }
    function filterLargeSelectedLog(state) {
      var _a2;
      if (!state || !((_a2 = state.selectedLog) == null ? void 0 : _a2.contents)) {
        return state;
      }
      const estimatedSize = estimateSize(state.selectedLog.contents.sampleSummaries);
      if (estimatedSize > 4e5) {
        const {
          selectedLog,
          ...filteredState
        } = state;
        return filteredState;
      } else {
        return state;
      }
    }
    function estimateSize(list2, frequency = 0.2) {
      if (!list2 || list2.len === 0) {
        return 0;
      }
      const sampleSize = Math.ceil(list2.length * frequency);
      const messageIndices = /* @__PURE__ */ new Set();
      while (messageIndices.size < sampleSize && messageIndices.size < list2.length) {
        const randomIndex = Math.floor(Math.random() * list2.length);
        messageIndices.add(randomIndex);
      }
      const totalSize = Array.from(messageIndices).reduce((size, index) => {
        return size + JSON.stringify(list2[index]).length;
      }, 0);
      const estimatedTotalSize = totalSize / sampleSize * list2.length;
      return estimatedTotalSize;
    }
  }
});
export default require_assets();
//# sourceMappingURL=index.js.map
