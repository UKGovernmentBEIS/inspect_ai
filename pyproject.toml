[build-system]
requires = ["setuptools>=64", "setuptools_scm[toml]>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools.dynamic]
dependencies = { file = ["requirements.txt"] }

[tool.setuptools_scm]

[tool.ruff]
extend-exclude = ["docs"]
src = ["src"]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # flake8
    "D",      # pydocstyle
    "I",      # isort
    "SIM101", # duplicate isinstance
    "UP038",  # non-pep604-isinstance
    # "RET", # flake8-return
    # "RUF", # ruff rules
]
ignore = ["E203", "E501", "D10", "D212", "D415"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-rA --doctest-modules --color=yes"
testpaths = ["tests"]
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL"]
norecursedirs = [
    "tests/test_helpers",
    "tests/test_package",
    "tests/test_task_list",
]
asyncio_mode = "auto"
log_level = "warning"

[tool.mypy]
exclude = "examples/agents/"
warn_unused_ignores = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_unused_configs = true
# This mypy_path config is a bit odd, it's included to get mypy to resolve
# imports correctly in test files. For example, imports such as
# `from test_helpers.utils import ...` fail mypy without this configuration,
# despite actually working when running tests.
#
# Revisit this if it interferes with mypy running on `src`  due to name
# conflicts, but that will hopefully be unlikely.
mypy_path = "tests"

[[tool.mypy.overrides]]
module = "inspect_ai.*"
warn_return_any = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
extra_checks = true
disable_error_code = "unused-ignore"

[project]
name = "inspect_ai"
description = "Framework for large language model evaluations"
authors = [{ name = "UK AI Safety Institute" }]
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT License" }
dynamic = ["version", "dependencies"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Typing :: Typed",
    "Operating System :: OS Independent",
]

[project.urls]
Documentation = "https://inspect.ai-safety-institute.org.uk/"
"Source Code" = "https://github.com/UKGovernmentBEIS/inspect_ai"
"Issue Tracker" = "https://github.com/UKGovernmentBEIS/inspect_ai/issues"

[project.scripts]
inspect = "inspect_ai._cli.main:main"

[project.optional-dependencies]
dev = [
    "anthropic", 
    "boto3", 
    "google-cloud-aiplatform",
    "google-generativeai", 
    "groq", 
    "ipython",
    "mistralai",
    "moto[server]",
    "mypy",
    "nbformat",
    "openai",
    "pre-commit",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-dotenv",
    "pytest-xdist",
    "ruff==0.6.4", # match version specified in .pre-commit-config.yaml
    "types-PyYAML",
    "types-aiofiles",
    "types-beautifulsoup4",
    "types-boto3",
    "types-botocore",
    "types-jsonpatch",
    "types-jsonschema",
    "types-protobuf",
    "types-psutil",
    "types-python-dateutil"
]
doc = ["quarto-cli", "jupyter"]
dist = ["twine", "build"]
