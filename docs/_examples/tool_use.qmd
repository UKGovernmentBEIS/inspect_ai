::: {.content-visible when-format="html"}

## Tool Use {#sec-tool-use}

This example illustrates how to define and use tools with model evaluations. Tools are Python functions that you provide for the model to call for assistance with various tasks (e.g. looking up information). Note that tools are actually *executed* on the client system, not on the system where the model is running.

Note that tool use is not supported for every model provider. Currently, tools work with OpenAI, Anthropic, Google Gemini, Mistral, and Groq models.

If you want to use tools in your evals it's worth taking some time to learn how to provide good tool definitions. Here are some resources you may find helpful:

-   [Function Calling with LLMs](https://www.promptingguide.ai/applications/function_calling)
-   [Best Practices for Tool Definitions](https://docs.anthropic.com/claude/docs/tool-use#best-practices-for-tool-definitions)

### Addition {.unlisted}

We'll demonstrate with a simple tool that adds two numbers, using the `@tool` decorator to register it with the system:

```{python}
from inspect_ai import Task, eval, task
from inspect_ai.dataset import Sample
from inspect_ai.scorer import includes, match
from inspect_ai.solver import (
    generate, system_message, use_tools
)
from inspect_ai.tool import tool
from inspect_ai.util import subprocess

@tool
def add():
    async def execute(x: int, y: int):
        """
        Add two numbers.

        Args:
            x (int): First number to add.
            y (int): Second number to add.

        Returns:
            The sum of the two numbers.
        """
        return x + y

    return execute
```

{{< include _tools-annotations-required.md >}}

Now that we've defined the tool, we can use it in an evaluation by passing it to the `use_tools()` function.

```{python}
@task
def addition_problem():
    return Task(
        dataset=[Sample(
            input="What is 1 + 1?",
            target=["2", "2.0"]
        )],
        plan=[use_tools(add()), generate()],
        scorer=match(numeric=True),
    )
```

We run the eval with:

```bash
inspect eval addition_problem.py
```


:::
