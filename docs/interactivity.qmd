# Interactivity {#sec-interactivity}

::: callout-note
The interactivity features described in this article is currently available only in the development version of Inspect. You can install the development version with:

``` {.bash .code-overflow-wrap}
pip install git+https://github.com/ukgovernmentbeis/inspect_ai
```
:::

## Overview

In some cases you may wish to introduce user interaction into the implementation of solvers, scorers, or tools. For example, you may wish to:

-   Confirm consequential actions like requests made to web services
-   Prompt the model dynamically based on the trajectory of the evaluation
-   Score model output with human judges

Note that prompting the user is a synchronous operation that pauses other activity within the evaluation (pending model requests or subprocesses will continue to execute, but their results won't be processed until the input is complete).

## Console Input

You can prompt the user for input at any point in an evaluation using the `console_input()` context manager, which clears the normal task display and provides access to a [Console](https://rich.readthedocs.io/en/stable/console.html) object for presenting content and asking for user input. For example:

``` python
from inspect_ai.util import console_input

with console_input() as console:
    console.print("Some preamble text")
    input = console.input("Please enter your name: ")
```

The `console` object provided by the context manager is from the [Rich](https://rich.readthedocs.io/) Python library used by Inspect, and has many other capabilities beyond simple text input. Read on to learn more.

## Prompts

Rich includes [Prompt](https://rich.readthedocs.io/en/stable/prompt.html) and [Confirm](https://rich.readthedocs.io/en/stable/reference/prompt.html#rich.prompt.Confirm) classes with additional capabilities including default values, choice lists, and re-prompting. For example:

``` python
from inspect_ai.util import console_input
from rich.prompt import Prompt

with console_input() as console:
    name = Prompt.ask(
        "Enter your name", 
        console=console,
        choices=["Paul", "Jessica", "Duncan"], 
        default="Paul"
    )
```

Note that we pass the `console` from the context manager to `Prompt.ask`---it's important that you do this so that the prompt is rendered correctly in the input frame.

## Formatting

The `console.print()` method supports [formatting]((https://rich.readthedocs.io/en/stable/console.html)) using simple markup. For example:

``` python
with console_input() as console:
    console.print("[bold red]alert![/bold red] Something happened")
```

See the documentation on [console markup](https://rich.readthedocs.io/en/stable/markup.html) for additional details.

You can also render [markdown](https://rich.readthedocs.io/en/stable/markdown.html) directly, for example:

``` python
from inspect_ai.util import console_input
from rich.markdown import Markdown

with console_input() as console:
    console.print(Markdown('The _quick_ brown **fox**'))
```

## Layout

Rich includes [Columns](https://rich.readthedocs.io/en/stable/columns.html), [Table](https://rich.readthedocs.io/en/stable/tables.html) and [Panel](https://rich.readthedocs.io/en/stable/panel.html) classes for more advanced layout. For example, here is a simple table:

``` python
from inspect_ai.util import console_input
from rich.table import Table

with console_input() as console:
    table = Table(title="Tool Calls")
    table.add_column("Function", justify="left", style="cyan")
    table.add_column("Parameters", style="magenta")
    table.add_row("bash", "ls /usr/bin")
    table.add_row("python", "print('foo')")
    console.print(table)
```